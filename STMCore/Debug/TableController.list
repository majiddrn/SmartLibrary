
TableController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800d460  0800d460  0001d460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8ec  0800d8ec  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d8ec  0800d8ec  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d8ec  0800d8ec  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8ec  0800d8ec  0001d8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8f0  0800d8f0  0001d8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          0000209c  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002128  20002128  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000292e6  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000505a  00000000  00000000  000493a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f00  00000000  00000000  0004e400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cf8  00000000  00000000  00050300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bba  00000000  00000000  00051ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000285c5  00000000  00000000  00075bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d24b0  00000000  00000000  0009e177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00170627  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090a4  00000000  00000000  00170678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d448 	.word	0x0800d448

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800d448 	.word	0x0800d448

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <doAVOIDFunc>:
#include "AvoidHandler.h"

extern UART_HandleTypeDef huart2;
extern osMutexId_t uartTransmitHandle;

int doAVOIDFunc(Message avoidMessage) {
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	f107 0c20 	add.w	ip, r7, #32
 8000a68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (avoidMessage.mNumber > maxSeats)
 8000a6c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <doAVOIDFunc+0xd0>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d902      	bls.n	8000a7e <doAVOIDFunc+0x22>
		return -1;
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a7c:	e04f      	b.n	8000b1e <doAVOIDFunc+0xc2>

	char tmp[20];

	switch (avoidMessage.mNumber) {
 8000a7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d002      	beq.n	8000a8c <doAVOIDFunc+0x30>
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d008      	beq.n	8000a9c <doAVOIDFunc+0x40>
			break;
		case 2:
			osMutexAcquire(AvoidDistance2Handle, portMAX_DELAY);
			break;
		default:
			break;
 8000a8a:	e00f      	b.n	8000aac <doAVOIDFunc+0x50>
			osMutexAcquire(AvoidDistance1Handle, portMAX_DELAY);
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <doAVOIDFunc+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a94:	4618      	mov	r0, r3
 8000a96:	f007 fead 	bl	80087f4 <osMutexAcquire>
			break;
 8000a9a:	e007      	b.n	8000aac <doAVOIDFunc+0x50>
			osMutexAcquire(AvoidDistance2Handle, portMAX_DELAY);
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <doAVOIDFunc+0xd8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f007 fea5 	bl	80087f4 <osMutexAcquire>
			break;
 8000aaa:	bf00      	nop
	}

	sprintf(tmp, "AVOID#%d:%d\r", avoidMessage.mNumber, rawAVOID[avoidMessage.mNumber-1]);
 8000aac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <doAVOIDFunc+0xdc>)
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	1d38      	adds	r0, r7, #4
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	491e      	ldr	r1, [pc, #120]	; (8000b3c <doAVOIDFunc+0xe0>)
 8000ac4:	f00b f9de 	bl	800be84 <siprintf>

	osMutexAcquire(uartTransmitHandle, portMAX_DELAY);
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <doAVOIDFunc+0xe4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f007 fe8f 	bl	80087f4 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, tmp, strlen(tmp), 250);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fb79 	bl	80001d0 <strlen>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	1d39      	adds	r1, r7, #4
 8000ae4:	23fa      	movs	r3, #250	; 0xfa
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <doAVOIDFunc+0xe8>)
 8000ae8:	f006 fa0a 	bl	8006f00 <HAL_UART_Transmit>
	osMutexRelease(uartTransmitHandle);
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <doAVOIDFunc+0xe4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f007 fedd 	bl	80088b0 <osMutexRelease>

	switch (avoidMessage.mNumber) {
 8000af6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d002      	beq.n	8000b04 <doAVOIDFunc+0xa8>
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d006      	beq.n	8000b10 <doAVOIDFunc+0xb4>
			break;
		case 2:
			osMutexRelease(AvoidDistance2Handle);
			break;
		default:
			break;
 8000b02:	e00b      	b.n	8000b1c <doAVOIDFunc+0xc0>
			osMutexRelease(AvoidDistance1Handle);
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <doAVOIDFunc+0xd4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 fed1 	bl	80088b0 <osMutexRelease>
			break;
 8000b0e:	e005      	b.n	8000b1c <doAVOIDFunc+0xc0>
			osMutexRelease(AvoidDistance2Handle);
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <doAVOIDFunc+0xd8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f007 fecb 	bl	80088b0 <osMutexRelease>
			break;
 8000b1a:	bf00      	nop
	}

	return 1;
 8000b1c:	2301      	movs	r3, #1
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr
 8000b2c:	20000014 	.word	0x20000014
 8000b30:	200006c8 	.word	0x200006c8
 8000b34:	200006cc 	.word	0x200006cc
 8000b38:	200000a8 	.word	0x200000a8
 8000b3c:	0800d460 	.word	0x0800d460
 8000b40:	200006d8 	.word	0x200006d8
 8000b44:	20000344 	.word	0x20000344

08000b48 <getAvoidDistance>:

uint32_t getAvoidDistance(uint8_t avoidNum) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	TIM_TypeDef* timer_ = NULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]

	GPIO_TypeDef* gpioType = NULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
	uint16_t pinNumEcho, pinNumTrig;

	uint8_t timeNeeded = 10;
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	74fb      	strb	r3, [r7, #19]

	switch (avoidNum) {
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d002      	beq.n	8000b6a <getAvoidDistance+0x22>
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d009      	beq.n	8000b7c <getAvoidDistance+0x34>
			gpioType = GPIOD;
			pinNumEcho = GPIO_PIN_11;
			pinNumTrig = GPIO_PIN_10;
			break;
		default:
			break;
 8000b68:	e013      	b.n	8000b92 <getAvoidDistance+0x4a>
			timer_ = TIM4;
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <getAvoidDistance+0xd4>)
 8000b6c:	61fb      	str	r3, [r7, #28]
			gpioType = GPIOB;
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <getAvoidDistance+0xd8>)
 8000b70:	61bb      	str	r3, [r7, #24]
			pinNumEcho = GPIO_PIN_4;
 8000b72:	2310      	movs	r3, #16
 8000b74:	82fb      	strh	r3, [r7, #22]
			pinNumTrig = GPIO_PIN_5;
 8000b76:	2320      	movs	r3, #32
 8000b78:	82bb      	strh	r3, [r7, #20]
			break;
 8000b7a:	e00a      	b.n	8000b92 <getAvoidDistance+0x4a>
			timer_ = TIM4;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <getAvoidDistance+0xd4>)
 8000b7e:	61fb      	str	r3, [r7, #28]
			gpioType = GPIOD;
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <getAvoidDistance+0xdc>)
 8000b82:	61bb      	str	r3, [r7, #24]
			pinNumEcho = GPIO_PIN_11;
 8000b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b88:	82fb      	strh	r3, [r7, #22]
			pinNumTrig = GPIO_PIN_10;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8e:	82bb      	strh	r3, [r7, #20]
			break;
 8000b90:	bf00      	nop
	}

	HAL_GPIO_WritePin(gpioType, pinNumTrig, 1);
 8000b92:	8abb      	ldrh	r3, [r7, #20]
 8000b94:	2201      	movs	r2, #1
 8000b96:	4619      	mov	r1, r3
 8000b98:	69b8      	ldr	r0, [r7, #24]
 8000b9a:	f002 ffbb 	bl	8003b14 <HAL_GPIO_WritePin>
	timer_->CNT = 0;
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
	while(timer_->CNT <= timeNeeded);
 8000ba4:	bf00      	nop
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000baa:	7cfb      	ldrb	r3, [r7, #19]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d9fa      	bls.n	8000ba6 <getAvoidDistance+0x5e>
	HAL_GPIO_WritePin(gpioType, pinNumTrig, 0);
 8000bb0:	8abb      	ldrh	r3, [r7, #20]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	69b8      	ldr	r0, [r7, #24]
 8000bb8:	f002 ffac 	bl	8003b14 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(gpioType, pinNumEcho) == 0 && timer_->CNT <= 20000);
 8000bbc:	bf00      	nop
 8000bbe:	8afb      	ldrh	r3, [r7, #22]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	69b8      	ldr	r0, [r7, #24]
 8000bc4:	f002 ff8e 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <getAvoidDistance+0x92>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d9f1      	bls.n	8000bbe <getAvoidDistance+0x76>

	timer_->CNT = 0;
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(gpioType, pinNumEcho) == 1 && timer_->CNT <= 10000);
 8000be0:	bf00      	nop
 8000be2:	8afb      	ldrh	r3, [r7, #22]
 8000be4:	4619      	mov	r1, r3
 8000be6:	69b8      	ldr	r0, [r7, #24]
 8000be8:	f002 ff7c 	bl	8003ae4 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d105      	bne.n	8000bfe <getAvoidDistance+0xb6>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d9f1      	bls.n	8000be2 <getAvoidDistance+0x9a>

	uint32_t tof = timer_->CNT;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	60fb      	str	r3, [r7, #12]
	uint32_t distance = tof / 58;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <getAvoidDistance+0xe0>)
 8000c08:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0c:	095b      	lsrs	r3, r3, #5
 8000c0e:	60bb      	str	r3, [r7, #8]

	return distance;
 8000c10:	68bb      	ldr	r3, [r7, #8]
	if (timer_ == NULL)
		return 0;



}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40000800 	.word	0x40000800
 8000c20:	48000400 	.word	0x48000400
 8000c24:	48000c00 	.word	0x48000c00
 8000c28:	8d3dcb09 	.word	0x8d3dcb09

08000c2c <HAL_UART_RxCpltCallback>:
extern uint32_t pirTime[2];

extern osMutexId_t pirTime1Handle;
extern osMutexId_t pirTime2Handle;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
	if (huart->Instance == huart2.Instance) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_UART_RxCpltCallback+0x68>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d124      	bne.n	8000c8a <HAL_UART_RxCpltCallback+0x5e>
	        data[data_c_idx] = data_c;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_RxCpltCallback+0x6c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_RxCpltCallback+0x70>)
 8000c48:	7819      	ldrb	r1, [r3, #0]
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_UART_RxCpltCallback+0x74>)
 8000c4c:	5499      	strb	r1, [r3, r2]
	        if (data_c == '\r') {
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_UART_RxCpltCallback+0x70>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b0d      	cmp	r3, #13
 8000c54:	d10e      	bne.n	8000c74 <HAL_UART_RxCpltCallback+0x48>
	            data[data_c_idx] = '\0';
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_UART_RxCpltCallback+0x6c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_UART_RxCpltCallback+0x74>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	5499      	strb	r1, [r3, r2]
	            data_c_idx = 0;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_UART_RxCpltCallback+0x6c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
	            osSemaphoreRelease(diffRxDataHandle);
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_UART_RxCpltCallback+0x78>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f007 ff71 	bl	8008b54 <osSemaphoreRelease>
 8000c72:	e005      	b.n	8000c80 <HAL_UART_RxCpltCallback+0x54>
	        } else
	        	data_c_idx++;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_UART_RxCpltCallback+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_UART_RxCpltCallback+0x6c>)
 8000c7e:	701a      	strb	r2, [r3, #0]

	        HAL_UART_Receive_IT(&huart2, &data_c, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	4906      	ldr	r1, [pc, #24]	; (8000c9c <HAL_UART_RxCpltCallback+0x70>)
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <HAL_UART_RxCpltCallback+0x68>)
 8000c86:	f006 f9c5 	bl	8007014 <HAL_UART_Receive_IT>
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000344 	.word	0x20000344
 8000c98:	2000077b 	.word	0x2000077b
 8000c9c:	2000077a 	.word	0x2000077a
 8000ca0:	200006e4 	.word	0x200006e4
 8000ca4:	200006dc 	.word	0x200006dc

08000ca8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PIR_MOVE_1_Pin) {
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb8:	d10f      	bne.n	8000cda <HAL_GPIO_EXTI_Callback+0x32>
		osMutexAcquire(pirTime1Handle, portMAX_DELAY);
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x64>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f007 fd96 	bl	80087f4 <osMutexAcquire>
		pirTime[0] = TIM8->CNT;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x68>)
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000cce:	6013      	str	r3, [r2, #0]
		osMutexRelease(pirTime1Handle);
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f007 fdeb 	bl	80088b0 <osMutexRelease>
//		HAL_UART_Transmit(&huart2, "Seat 1 moved\n", 13, 250);
	}

	if (GPIO_Pin == PIR_MOVE_2_Pin) {
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ce0:	d10f      	bne.n	8000d02 <HAL_GPIO_EXTI_Callback+0x5a>
		osMutexAcquire(pirTime2Handle, portMAX_DELAY);
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cea:	4618      	mov	r0, r3
 8000cec:	f007 fd82 	bl	80087f4 <osMutexAcquire>
		pirTime[1] = TIM8->CNT;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x68>)
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000cf6:	6053      	str	r3, [r2, #4]
		osMutexRelease(pirTime2Handle);
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x70>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f007 fdd7 	bl	80088b0 <osMutexRelease>
//		HAL_UART_Transmit(&huart2, "Seat 2 moved\n", 13, 250);
	}
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200006d0 	.word	0x200006d0
 8000d10:	40013400 	.word	0x40013400
 8000d14:	20000104 	.word	0x20000104
 8000d18:	200006d4 	.word	0x200006d4

08000d1c <getMessageType>:

extern UART_HandleTypeDef huart2;

extern osMutexId_t uartTransmitHandle;

MessageType getMessageType(const char* message) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    if (strncmp(message, "LED#", 4) == 0)
 8000d24:	2204      	movs	r2, #4
 8000d26:	4911      	ldr	r1, [pc, #68]	; (8000d6c <getMessageType+0x50>)
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f00b f8d3 	bl	800bed4 <strncmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <getMessageType+0x1c>
        return MESSAGE_TYPE_LED;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e015      	b.n	8000d64 <getMessageType+0x48>
    if (strncmp(message, "PIR#", 4) == 0)
 8000d38:	2204      	movs	r2, #4
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <getMessageType+0x54>)
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f00b f8c9 	bl	800bed4 <strncmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <getMessageType+0x30>
        return MESSAGE_TYPE_PIR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e00b      	b.n	8000d64 <getMessageType+0x48>
    if (strncmp(message, "AVOID#", 6) == 0)
 8000d4c:	2206      	movs	r2, #6
 8000d4e:	4909      	ldr	r1, [pc, #36]	; (8000d74 <getMessageType+0x58>)
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f00b f8bf 	bl	800bed4 <strncmp>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <getMessageType+0x44>
    	return MESSAGE_TYPE_AVOID;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e001      	b.n	8000d64 <getMessageType+0x48>

//    HAL_UART_Transmit(&huart2, "D0\n", 3, 250);

    return MESSAGE_TYPE_INVALID;
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	0800d470 	.word	0x0800d470
 8000d70:	0800d478 	.word	0x0800d478
 8000d74:	0800d480 	.word	0x0800d480

08000d78 <parseLedMessage>:

int parseLedMessage(char* message, Message* ledMessage) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]

	if (strncmp(message, "LED#", 4) != 0)
 8000d82:	2204      	movs	r2, #4
 8000d84:	491b      	ldr	r1, [pc, #108]	; (8000df4 <parseLedMessage+0x7c>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f00b f8a4 	bl	800bed4 <strncmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <parseLedMessage+0x20>
		return -1; // Invalid message
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d96:	e028      	b.n	8000dea <parseLedMessage+0x72>

	ledMessage->type = MESSAGE_TYPE_LED;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]

	// Extract the LED number
	char* token = strtok(message + 4, ":");
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3304      	adds	r3, #4
 8000da2:	4915      	ldr	r1, [pc, #84]	; (8000df8 <parseLedMessage+0x80>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f00b f8bf 	bl	800bf28 <strtok>
 8000daa:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <parseLedMessage+0x40>
		return -1; // Invalid message
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db6:	e018      	b.n	8000dea <parseLedMessage+0x72>

	ledMessage->mNumber = atoi(token);
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f00b f81f 	bl	800bdfc <atoi>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	705a      	strb	r2, [r3, #1]

	// Extract the color
	token = strtok(NULL, "#");
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <parseLedMessage+0x84>)
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f00b f8ad 	bl	800bf28 <strtok>
 8000dce:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <parseLedMessage+0x64>
		return -1; // Invalid message
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dda:	e006      	b.n	8000dea <parseLedMessage+0x72>

	strcpy(ledMessage->message, token);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3302      	adds	r3, #2
 8000de0:	68f9      	ldr	r1, [r7, #12]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00b f86e 	bl	800bec4 <strcpy>

	return 0; // Valid message
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	0800d470 	.word	0x0800d470
 8000df8:	0800d488 	.word	0x0800d488
 8000dfc:	0800d48c 	.word	0x0800d48c

08000e00 <parsePirMessage>:

int parsePirMessage(char* message, Message* pirMessage) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
//	HAL_UART_Transmit(&huart2, "D1\n", 3, 250);
	if (strncmp(message, "PIR#", 4) != 0)
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	491b      	ldr	r1, [pc, #108]	; (8000e7c <parsePirMessage+0x7c>)
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f00b f860 	bl	800bed4 <strncmp>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <parsePirMessage+0x20>
		return -1; // Invalid message
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1e:	e028      	b.n	8000e72 <parsePirMessage+0x72>

//	HAL_UART_Transmit(&huart2, "D2\n", 3, 250);
	pirMessage->type = MESSAGE_TYPE_PIR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2, "D3\n", 3, 250);
	// Extract the PIR number
	char* token = strtok(message + 4, ":");
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	4915      	ldr	r1, [pc, #84]	; (8000e80 <parsePirMessage+0x80>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00b f87b 	bl	800bf28 <strtok>
 8000e32:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <parsePirMessage+0x40>
		return -1; // Invalid message
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3e:	e018      	b.n	8000e72 <parsePirMessage+0x72>

	pirMessage->mNumber = atoi(token);
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f00a ffdb 	bl	800bdfc <atoi>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	705a      	strb	r2, [r3, #1]
//	HAL_UART_Transmit(&huart2, "D4\n", 3, 250);
	// Extract the action
	token = strtok(NULL, "#");
 8000e4e:	490d      	ldr	r1, [pc, #52]	; (8000e84 <parsePirMessage+0x84>)
 8000e50:	2000      	movs	r0, #0
 8000e52:	f00b f869 	bl	800bf28 <strtok>
 8000e56:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <parsePirMessage+0x64>
		return -1; // Invalid message
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e62:	e006      	b.n	8000e72 <parsePirMessage+0x72>

	strcpy(pirMessage->message, token);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3302      	adds	r3, #2
 8000e68:	68f9      	ldr	r1, [r7, #12]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00b f82a 	bl	800bec4 <strcpy>
//	HAL_UART_Transmit(&huart2, "D5\n", 3, 250);
	return 0; // Valid message
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	0800d478 	.word	0x0800d478
 8000e80:	0800d488 	.word	0x0800d488
 8000e84:	0800d48c 	.word	0x0800d48c

08000e88 <parseAvoidMessage>:

int parseAvoidMessage(char* message, Message* avoidMessage) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	if (strncmp(message, "AVOID#", 6) != 0)
 8000e92:	2206      	movs	r2, #6
 8000e94:	491b      	ldr	r1, [pc, #108]	; (8000f04 <parseAvoidMessage+0x7c>)
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f00b f81c 	bl	800bed4 <strncmp>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <parseAvoidMessage+0x20>
		return -1; // Invalid message
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea6:	e028      	b.n	8000efa <parseAvoidMessage+0x72>

	avoidMessage->type = MESSAGE_TYPE_AVOID;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]

//	HAL_UART_Transmit(&huart2, "H2\n", 3, 250);

	// Extract the AVOID number
	char* token = strtok(message + 6, ":");
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3306      	adds	r3, #6
 8000eb2:	4915      	ldr	r1, [pc, #84]	; (8000f08 <parseAvoidMessage+0x80>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f00b f837 	bl	800bf28 <strtok>
 8000eba:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <parseAvoidMessage+0x40>
		return -1; // Invalid message
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec6:	e018      	b.n	8000efa <parseAvoidMessage+0x72>

	avoidMessage->mNumber = atoi(token);
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f00a ff97 	bl	800bdfc <atoi>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	705a      	strb	r2, [r3, #1]

	// Extract the action
	token = strtok(NULL, "#");
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <parseAvoidMessage+0x84>)
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f00b f825 	bl	800bf28 <strtok>
 8000ede:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <parseAvoidMessage+0x64>
		return -1; // Invalid message
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eea:	e006      	b.n	8000efa <parseAvoidMessage+0x72>

	strcpy(avoidMessage->message, token);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	3302      	adds	r3, #2
 8000ef0:	68f9      	ldr	r1, [r7, #12]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f00a ffe6 	bl	800bec4 <strcpy>

	return 0; // Valid message
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	0800d480 	.word	0x0800d480
 8000f08:	0800d488 	.word	0x0800d488
 8000f0c:	0800d48c 	.word	0x0800d48c

08000f10 <parseMessage>:

int parseMessage(char* message, Message* messageStruct) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    MessageType messageType = getMessageType(message);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fefe 	bl	8000d1c <getMessageType>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
//    HAL_UART_Transmit(&huart2, "H\n", 2, 250);
    switch (messageType) {
 8000f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d012      	beq.n	8000f52 <parseMessage+0x42>
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	dc16      	bgt.n	8000f5e <parseMessage+0x4e>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <parseMessage+0x2a>
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d006      	beq.n	8000f46 <parseMessage+0x36>
 8000f38:	e011      	b.n	8000f5e <parseMessage+0x4e>
        case MESSAGE_TYPE_LED:
//        	HAL_UART_Transmit(&huart2, "L\n", 2, 250);
            return parseLedMessage(message, messageStruct);
 8000f3a:	6839      	ldr	r1, [r7, #0]
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff1b 	bl	8000d78 <parseLedMessage>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e00d      	b.n	8000f62 <parseMessage+0x52>
        case MESSAGE_TYPE_PIR:
//        	HAL_UART_Transmit(&huart2, "P\n", 2, 250);
            return parsePirMessage(message, messageStruct);
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff59 	bl	8000e00 <parsePirMessage>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	e007      	b.n	8000f62 <parseMessage+0x52>
        case MESSAGE_TYPE_AVOID:
            return parseAvoidMessage(message, messageStruct);
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff97 	bl	8000e88 <parseAvoidMessage>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	e001      	b.n	8000f62 <parseMessage+0x52>
        default:
//        	HAL_UART_Transmit(&huart2, "O\n", 2, 250);
            return -1; // Invalid message
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <addToHandler>:
//	strcpy(ledMessage->color, token);
//
//	return 0; // Valid message
//}

void addToHandler(char data[]) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b08c      	sub	sp, #48	; 0x30
 8000f6e:	af02      	add	r7, sp, #8
 8000f70:	6078      	str	r0, [r7, #4]
	Message message;
	int parse = parseMessage(data, &message);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4619      	mov	r1, r3
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ffc9 	bl	8000f10 <parseMessage>
 8000f7e:	6238      	str	r0, [r7, #32]

	if (parse == -1) {
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f86:	d103      	bne.n	8000f90 <addToHandler+0x26>
//		HAL_UART_Transmit(&huart2, "H\n", 2, 250);
		sendACK(ACK_INVALID);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f000 f83d 	bl	8001008 <sendACK>
		return;
 8000f8e:	e038      	b.n	8001002 <addToHandler+0x98>
	}

	int funcStat;

	switch (message.type) {
 8000f90:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d010      	beq.n	8000fba <addToHandler+0x50>
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	dc22      	bgt.n	8000fe2 <addToHandler+0x78>
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <addToHandler+0x3c>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d014      	beq.n	8000fce <addToHandler+0x64>
			break;
		case MESSAGE_TYPE_PIR:
			funcStat = doPIRFunc(message);
			break;
		default:
			break;
 8000fa4:	e01d      	b.n	8000fe2 <addToHandler+0x78>
			funcStat = doLEDFunc(message);
 8000fa6:	7f3b      	ldrb	r3, [r7, #28]
 8000fa8:	f88d 3000 	strb.w	r3, [sp]
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb2:	f000 f919 	bl	80011e8 <doLEDFunc>
 8000fb6:	6278      	str	r0, [r7, #36]	; 0x24
			break;
 8000fb8:	e014      	b.n	8000fe4 <addToHandler+0x7a>
			funcStat = doAVOIDFunc(message);
 8000fba:	7f3b      	ldrb	r3, [r7, #28]
 8000fbc:	f88d 3000 	strb.w	r3, [sp]
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc6:	f7ff fd49 	bl	8000a5c <doAVOIDFunc>
 8000fca:	6278      	str	r0, [r7, #36]	; 0x24
			break;
 8000fcc:	e00a      	b.n	8000fe4 <addToHandler+0x7a>
			funcStat = doPIRFunc(message);
 8000fce:	7f3b      	ldrb	r3, [r7, #28]
 8000fd0:	f88d 3000 	strb.w	r3, [sp]
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fda:	f000 f88f 	bl	80010fc <doPIRFunc>
 8000fde:	6278      	str	r0, [r7, #36]	; 0x24
			break;
 8000fe0:	e000      	b.n	8000fe4 <addToHandler+0x7a>
			break;
 8000fe2:	bf00      	nop
	}

	if (funcStat == -1) {
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fea:	d103      	bne.n	8000ff4 <addToHandler+0x8a>
		sendACK(ACK_ERR);
 8000fec:	2002      	movs	r0, #2
 8000fee:	f000 f80b 	bl	8001008 <sendACK>
		return;
 8000ff2:	e006      	b.n	8001002 <addToHandler+0x98>
	}

	if (message.type == MESSAGE_TYPE_LED)
 8000ff4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <addToHandler+0x98>
		sendACK(ACK_OK);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f803 	bl	8001008 <sendACK>
}
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <sendACK>:


void sendACK(enum ACK_TYPE ack) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	char tmp[20];
	int len;
	HAL_StatusTypeDef status;

	switch (ack) {
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d043      	beq.n	80010a0 <sendACK+0x98>
 8001018:	2b02      	cmp	r3, #2
 800101a:	dc60      	bgt.n	80010de <sendACK+0xd6>
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <sendACK+0x5a>
 8001020:	2b01      	cmp	r3, #1
 8001022:	d15c      	bne.n	80010de <sendACK+0xd6>
		case ACK_INVALID:
			len = sprintf(tmp, "INVALID\r");
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	492f      	ldr	r1, [pc, #188]	; (80010e8 <sendACK+0xe0>)
 800102a:	4618      	mov	r0, r3
 800102c:	f00a ff2a 	bl	800be84 <siprintf>
 8001030:	6278      	str	r0, [r7, #36]	; 0x24

			osMutexAcquire(uartTransmitHandle, portMAX_DELAY);
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <sendACK+0xe4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800103a:	4618      	mov	r0, r3
 800103c:	f007 fbda 	bl	80087f4 <osMutexAcquire>
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	b29a      	uxth	r2, r3
 8001044:	f107 010c 	add.w	r1, r7, #12
 8001048:	23fa      	movs	r3, #250	; 0xfa
 800104a:	4829      	ldr	r0, [pc, #164]	; (80010f0 <sendACK+0xe8>)
 800104c:	f005 ff58 	bl	8006f00 <HAL_UART_Transmit>
 8001050:	4603      	mov	r3, r0
 8001052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			osMutexRelease(uartTransmitHandle);
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <sendACK+0xe4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f007 fc28 	bl	80088b0 <osMutexRelease>
//			else
//				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
			break;
 8001060:	e03e      	b.n	80010e0 <sendACK+0xd8>
		case ACK_OK:
			len = sprintf(tmp, "OK\r");
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4923      	ldr	r1, [pc, #140]	; (80010f4 <sendACK+0xec>)
 8001068:	4618      	mov	r0, r3
 800106a:	f00a ff0b 	bl	800be84 <siprintf>
 800106e:	6278      	str	r0, [r7, #36]	; 0x24

			osMutexAcquire(uartTransmitHandle, portMAX_DELAY);
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <sendACK+0xe4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001078:	4618      	mov	r0, r3
 800107a:	f007 fbbb 	bl	80087f4 <osMutexAcquire>
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	23fa      	movs	r3, #250	; 0xfa
 8001088:	4819      	ldr	r0, [pc, #100]	; (80010f0 <sendACK+0xe8>)
 800108a:	f005 ff39 	bl	8006f00 <HAL_UART_Transmit>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			osMutexRelease(uartTransmitHandle);
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <sendACK+0xe4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f007 fc09 	bl	80088b0 <osMutexRelease>

			break;
 800109e:	e01f      	b.n	80010e0 <sendACK+0xd8>
		case ACK_ERR:
			len = sprintf(tmp, "ERROR\r");
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4914      	ldr	r1, [pc, #80]	; (80010f8 <sendACK+0xf0>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00a feec 	bl	800be84 <siprintf>
 80010ac:	6278      	str	r0, [r7, #36]	; 0x24

			osMutexAcquire(uartTransmitHandle, portMAX_DELAY);
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <sendACK+0xe4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b6:	4618      	mov	r0, r3
 80010b8:	f007 fb9c 	bl	80087f4 <osMutexAcquire>
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f107 010c 	add.w	r1, r7, #12
 80010c4:	23fa      	movs	r3, #250	; 0xfa
 80010c6:	480a      	ldr	r0, [pc, #40]	; (80010f0 <sendACK+0xe8>)
 80010c8:	f005 ff1a 	bl	8006f00 <HAL_UART_Transmit>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			osMutexRelease(uartTransmitHandle);
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <sendACK+0xe4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f007 fbea 	bl	80088b0 <osMutexRelease>

			break;
 80010dc:	e000      	b.n	80010e0 <sendACK+0xd8>
		default:
			break;
 80010de:	bf00      	nop
	}
}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	0800d490 	.word	0x0800d490
 80010ec:	200006d8 	.word	0x200006d8
 80010f0:	20000344 	.word	0x20000344
 80010f4:	0800d49c 	.word	0x0800d49c
 80010f8:	0800d4a0 	.word	0x0800d4a0

080010fc <doPIRFunc>:

extern uint32_t pirTime[2];

extern uint8_t maxSeats;

int doPIRFunc(Message pirMessage) {
 80010fc:	b084      	sub	sp, #16
 80010fe:	b580      	push	{r7, lr}
 8001100:	b088      	sub	sp, #32
 8001102:	af00      	add	r7, sp, #0
 8001104:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001108:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (pirMessage.mNumber > maxSeats)
 800110c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <doPIRFunc+0xd0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d902      	bls.n	800111e <doPIRFunc+0x22>
		return -1;
 8001118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111c:	e04f      	b.n	80011be <doPIRFunc+0xc2>

	char tmp[30];

	switch (pirMessage.mNumber	) {
 800111e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001122:	2b01      	cmp	r3, #1
 8001124:	d002      	beq.n	800112c <doPIRFunc+0x30>
 8001126:	2b02      	cmp	r3, #2
 8001128:	d008      	beq.n	800113c <doPIRFunc+0x40>
			break;
		case 2:
			osMutexAcquire(pirTime2Handle, portMAX_DELAY);
			break;
		default:
			break;
 800112a:	e00f      	b.n	800114c <doPIRFunc+0x50>
			osMutexAcquire(pirTime1Handle, portMAX_DELAY);
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <doPIRFunc+0xd4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001134:	4618      	mov	r0, r3
 8001136:	f007 fb5d 	bl	80087f4 <osMutexAcquire>
			break;
 800113a:	e007      	b.n	800114c <doPIRFunc+0x50>
			osMutexAcquire(pirTime2Handle, portMAX_DELAY);
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <doPIRFunc+0xd8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001144:	4618      	mov	r0, r3
 8001146:	f007 fb55 	bl	80087f4 <osMutexAcquire>
			break;
 800114a:	bf00      	nop
	}

	sprintf(tmp, "PIR#%d:%d\r", pirMessage.mNumber, pirTime[pirMessage.mNumber-1]);
 800114c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001150:	4619      	mov	r1, r3
 8001152:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001156:	3b01      	subs	r3, #1
 8001158:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <doPIRFunc+0xdc>)
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	4638      	mov	r0, r7
 8001160:	460a      	mov	r2, r1
 8001162:	491e      	ldr	r1, [pc, #120]	; (80011dc <doPIRFunc+0xe0>)
 8001164:	f00a fe8e 	bl	800be84 <siprintf>

	osMutexAcquire(uartTransmitHandle, portMAX_DELAY);
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <doPIRFunc+0xe4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	4618      	mov	r0, r3
 8001172:	f007 fb3f 	bl	80087f4 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, tmp, strlen(tmp), 250);
 8001176:	463b      	mov	r3, r7
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f829 	bl	80001d0 <strlen>
 800117e:	4603      	mov	r3, r0
 8001180:	b29a      	uxth	r2, r3
 8001182:	4639      	mov	r1, r7
 8001184:	23fa      	movs	r3, #250	; 0xfa
 8001186:	4817      	ldr	r0, [pc, #92]	; (80011e4 <doPIRFunc+0xe8>)
 8001188:	f005 feba 	bl	8006f00 <HAL_UART_Transmit>
	osMutexRelease(uartTransmitHandle);
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <doPIRFunc+0xe4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f007 fb8d 	bl	80088b0 <osMutexRelease>

	switch (pirMessage.mNumber) {
 8001196:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800119a:	2b01      	cmp	r3, #1
 800119c:	d002      	beq.n	80011a4 <doPIRFunc+0xa8>
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d006      	beq.n	80011b0 <doPIRFunc+0xb4>
			break;
		case 2:
			osMutexRelease(pirTime2Handle);
			break;
		default:
			break;
 80011a2:	e00b      	b.n	80011bc <doPIRFunc+0xc0>
			osMutexRelease(pirTime1Handle);
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <doPIRFunc+0xd4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f007 fb81 	bl	80088b0 <osMutexRelease>
			break;
 80011ae:	e005      	b.n	80011bc <doPIRFunc+0xc0>
			osMutexRelease(pirTime2Handle);
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <doPIRFunc+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f007 fb7b 	bl	80088b0 <osMutexRelease>
			break;
 80011ba:	bf00      	nop
	}

	return 1;
 80011bc:	2301      	movs	r3, #1

}
 80011be:	4618      	mov	r0, r3
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr
 80011cc:	20000014 	.word	0x20000014
 80011d0:	200006d0 	.word	0x200006d0
 80011d4:	200006d4 	.word	0x200006d4
 80011d8:	20000104 	.word	0x20000104
 80011dc:	0800d4a8 	.word	0x0800d4a8
 80011e0:	200006d8 	.word	0x200006d8
 80011e4:	20000344 	.word	0x20000344

080011e8 <doLEDFunc>:
RGBTimer rgbLeds[] = {
		{1, &htim2},
		{2, &htim3}
};

int doLEDFunc(Message ledMessage) {
 80011e8:	b084      	sub	sp, #16
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	f107 0c18 	add.w	ip, r7, #24
 80011f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	enum LED_COLOR color;
	if (strstr(ledMessage.message, "GREEN"))
 80011f8:	f107 031a 	add.w	r3, r7, #26
 80011fc:	493f      	ldr	r1, [pc, #252]	; (80012fc <doLEDFunc+0x114>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f00a fe7c 	bl	800befc <strstr>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <doLEDFunc+0x28>
		color = LED_GREEN;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e01a      	b.n	8001246 <doLEDFunc+0x5e>

	else if (strstr(ledMessage.message, "YELLOW"))
 8001210:	f107 031a 	add.w	r3, r7, #26
 8001214:	493a      	ldr	r1, [pc, #232]	; (8001300 <doLEDFunc+0x118>)
 8001216:	4618      	mov	r0, r3
 8001218:	f00a fe70 	bl	800befc <strstr>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <doLEDFunc+0x40>
		color = LED_YELLOW;
 8001222:	2302      	movs	r3, #2
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e00e      	b.n	8001246 <doLEDFunc+0x5e>

	else if (strstr(ledMessage.message, "RED"))
 8001228:	f107 031a 	add.w	r3, r7, #26
 800122c:	4935      	ldr	r1, [pc, #212]	; (8001304 <doLEDFunc+0x11c>)
 800122e:	4618      	mov	r0, r3
 8001230:	f00a fe64 	bl	800befc <strstr>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <doLEDFunc+0x58>
		color = LED_RED;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e002      	b.n	8001246 <doLEDFunc+0x5e>

	else
		return -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001244:	e053      	b.n	80012ee <doLEDFunc+0x106>

	TIM_HandleTypeDef* htim_;

	int found = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]

	for (uint8_t i = 0; i < rgbLedsCount; i++) {
 800124a:	2300      	movs	r3, #0
 800124c:	70fb      	strb	r3, [r7, #3]
 800124e:	e011      	b.n	8001274 <doLEDFunc+0x8c>
		if (rgbLeds[i].ledNumber == ledMessage.mNumber) {
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <doLEDFunc+0x120>)
 8001254:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8001258:	7e7b      	ldrb	r3, [r7, #25]
 800125a:	429a      	cmp	r2, r3
 800125c:	d107      	bne.n	800126e <doLEDFunc+0x86>
			found = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
			htim_ = rgbLeds[i].htim_;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	4a28      	ldr	r2, [pc, #160]	; (8001308 <doLEDFunc+0x120>)
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4413      	add	r3, r2
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = 0; i < rgbLedsCount; i++) {
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	3301      	adds	r3, #1
 8001272:	70fb      	strb	r3, [r7, #3]
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <doLEDFunc+0x124>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	78fa      	ldrb	r2, [r7, #3]
 800127a:	429a      	cmp	r2, r3
 800127c:	d3e8      	bcc.n	8001250 <doLEDFunc+0x68>
		}
	}

	if (found == 0)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <doLEDFunc+0xa2>
		return -1;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001288:	e031      	b.n	80012ee <doLEDFunc+0x106>
	 * TIM_CHANNEL_1 represents Red
	 * TIM_CHANNEL_2 represents Green
	 * TIM_CHANNEL_2 represents Blue
	 * */

	switch (color) {
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d012      	beq.n	80012b6 <doLEDFunc+0xce>
 8001290:	2b02      	cmp	r3, #2
 8001292:	dc2a      	bgt.n	80012ea <doLEDFunc+0x102>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01b      	beq.n	80012d0 <doLEDFunc+0xe8>
 8001298:	2b01      	cmp	r3, #1
 800129a:	d126      	bne.n	80012ea <doLEDFunc+0x102>
		case LED_GREEN:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 0);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 100);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2264      	movs	r2, #100	; 0x64
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2200      	movs	r2, #0
 80012b2:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80012b4:	e01a      	b.n	80012ec <doLEDFunc+0x104>

		case LED_YELLOW:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 50);
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2232      	movs	r2, #50	; 0x32
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 50);
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2232      	movs	r2, #50	; 0x32
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80012ce:	e00d      	b.n	80012ec <doLEDFunc+0x104>

		case LED_RED:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 100);
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2264      	movs	r2, #100	; 0x64
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 0);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80012e8:	e000      	b.n	80012ec <doLEDFunc+0x104>
		default:
			break;
 80012ea:	bf00      	nop
	}

	return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012f8:	b004      	add	sp, #16
 80012fa:	4770      	bx	lr
 80012fc:	0800d4b4 	.word	0x0800d4b4
 8001300:	0800d4bc 	.word	0x0800d4bc
 8001304:	0800d4c4 	.word	0x0800d4c4
 8001308:	20000004 	.word	0x20000004
 800130c:	20000000 	.word	0x20000000

08001310 <selectionSort>:
    int B = *((int*)b);
    return A - B;
}


void selectionSort(int arr[], int n) {
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
    int i, j, minIndex, tmp;

    // One by one move boundary of unsorted subarray
    for (i = 0; i < n - 1; i++) {
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e033      	b.n	8001388 <selectionSort+0x78>
        // Find the minimum element in unsorted array
        minIndex = i;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	60fb      	str	r3, [r7, #12]
        for (j = i + 1; j < n; j++)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e010      	b.n	800134e <selectionSort+0x3e>
            if (arr[j] < arr[minIndex])
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	440b      	add	r3, r1
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	da01      	bge.n	8001348 <selectionSort+0x38>
                minIndex = j;
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	60fb      	str	r3, [r7, #12]
        for (j = i + 1; j < n; j++)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	3301      	adds	r3, #1
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbea      	blt.n	800132c <selectionSort+0x1c>

        // Swap the found minimum element with the first element of the unsorted array
        tmp = arr[minIndex];
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60bb      	str	r3, [r7, #8]
        arr[minIndex] = arr[i];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	441a      	add	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	440b      	add	r3, r1
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	601a      	str	r2, [r3, #0]
        arr[i] = tmp;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	601a      	str	r2, [r3, #0]
    for (i = 0; i < n - 1; i++) {
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbc6      	blt.n	8001320 <selectionSort+0x10>
    }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <getMedian>:

double getMedian(int arr[], int n) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
    // Sorting the array
	selectionSort(arr, n);
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ffaf 	bl	8001310 <selectionSort>

    // If size of the array is even
    if (n % 2 != 0)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00d      	beq.n	80013d8 <getMedian+0x38>
        return (double)arr[n/2];
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	0fda      	lsrs	r2, r3, #31
 80013c0:	4413      	add	r3, r2
 80013c2:	105b      	asrs	r3, r3, #1
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8a9 	bl	8000524 <__aeabi_i2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	e01c      	b.n	8001412 <getMedian+0x72>

    // If size of the array is odd
    return (double)(arr[(n-1)/2] + arr[n/2])/2.0;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3b01      	subs	r3, #1
 80013dc:	0fda      	lsrs	r2, r3, #31
 80013de:	4413      	add	r3, r2
 80013e0:	105b      	asrs	r3, r3, #1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	0fd9      	lsrs	r1, r3, #31
 80013ee:	440b      	add	r3, r1
 80013f0:	105b      	asrs	r3, r3, #1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	440b      	add	r3, r1
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f891 	bl	8000524 <__aeabi_i2d>
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140a:	f7ff fa1f 	bl	800084c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
}
 8001412:	ec43 2b17 	vmov	d7, r2, r3
 8001416:	eeb0 0a47 	vmov.f32	s0, s14
 800141a:	eef0 0a67 	vmov.f32	s1, s15
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001428:	f001 fa2e 	bl	8002888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142c:	f000 f8e6 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001430:	f000 fc0e 	bl	8001c50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001434:	f000 f9ba 	bl	80017ac <MX_I2C1_Init>
  MX_SPI1_Init();
 8001438:	f000 f9f8 	bl	800182c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800143c:	f000 fbe6 	bl	8001c0c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8001440:	f000 fbb4 	bl	8001bac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001444:	f000 fa30 	bl	80018a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001448:	f000 fa9e 	bl	8001988 <MX_TIM3_Init>
  MX_ADC1_Init();
 800144c:	f000 f93e 	bl	80016cc <MX_ADC1_Init>
  MX_TIM4_Init();
 8001450:	f000 fb0a 	bl	8001a68 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001454:	f000 fb56 	bl	8001b04 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &data_c, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	4948      	ldr	r1, [pc, #288]	; (800157c <main+0x158>)
 800145c:	4848      	ldr	r0, [pc, #288]	; (8001580 <main+0x15c>)
 800145e:	f005 fdd9 	bl	8007014 <HAL_UART_Receive_IT>
//  HAL_ADC_Start(&hadc1);
//
//  setADC1Configs(3);
//  HAL_ADC_Start(&hadc1);
//  setADC1Configs();
  HAL_TIM_Base_Start(&htim4);
 8001462:	4848      	ldr	r0, [pc, #288]	; (8001584 <main+0x160>)
 8001464:	f004 faf0 	bl	8005a48 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8001468:	4847      	ldr	r0, [pc, #284]	; (8001588 <main+0x164>)
 800146a:	f004 faed 	bl	8005a48 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2120      	movs	r1, #32
 8001472:	4846      	ldr	r0, [pc, #280]	; (800158c <main+0x168>)
 8001474:	f002 fb4e 	bl	8003b14 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001478:	2100      	movs	r1, #0
 800147a:	4845      	ldr	r0, [pc, #276]	; (8001590 <main+0x16c>)
 800147c:	f004 fc08 	bl	8005c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001480:	2104      	movs	r1, #4
 8001482:	4843      	ldr	r0, [pc, #268]	; (8001590 <main+0x16c>)
 8001484:	f004 fc04 	bl	8005c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001488:	2108      	movs	r1, #8
 800148a:	4841      	ldr	r0, [pc, #260]	; (8001590 <main+0x16c>)
 800148c:	f004 fc00 	bl	8005c90 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001490:	2100      	movs	r1, #0
 8001492:	4840      	ldr	r0, [pc, #256]	; (8001594 <main+0x170>)
 8001494:	f004 fbfc 	bl	8005c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001498:	2104      	movs	r1, #4
 800149a:	483e      	ldr	r0, [pc, #248]	; (8001594 <main+0x170>)
 800149c:	f004 fbf8 	bl	8005c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014a0:	2108      	movs	r1, #8
 80014a2:	483c      	ldr	r0, [pc, #240]	; (8001594 <main+0x170>)
 80014a4:	f004 fbf4 	bl	8005c90 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <main+0x16c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <main+0x16c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <main+0x16c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2200      	movs	r2, #0
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80014c0:	4b34      	ldr	r3, [pc, #208]	; (8001594 <main+0x170>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80014c8:	4b32      	ldr	r3, [pc, #200]	; (8001594 <main+0x170>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <main+0x170>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014d8:	f006 ffb2 	bl	8008440 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of diffBufferRead */
  diffBufferReadHandle = osMutexNew(&diffBufferRead_attributes);
 80014dc:	482e      	ldr	r0, [pc, #184]	; (8001598 <main+0x174>)
 80014de:	f007 f8ef 	bl	80086c0 <osMutexNew>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a2d      	ldr	r2, [pc, #180]	; (800159c <main+0x178>)
 80014e6:	6013      	str	r3, [r2, #0]

  /* creation of AvoidDistance1 */
  AvoidDistance1Handle = osMutexNew(&AvoidDistance1_attributes);
 80014e8:	482d      	ldr	r0, [pc, #180]	; (80015a0 <main+0x17c>)
 80014ea:	f007 f8e9 	bl	80086c0 <osMutexNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <main+0x180>)
 80014f2:	6013      	str	r3, [r2, #0]

  /* creation of AvoidDistance2 */
  AvoidDistance2Handle = osMutexNew(&AvoidDistance2_attributes);
 80014f4:	482c      	ldr	r0, [pc, #176]	; (80015a8 <main+0x184>)
 80014f6:	f007 f8e3 	bl	80086c0 <osMutexNew>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <main+0x188>)
 80014fe:	6013      	str	r3, [r2, #0]

  /* creation of pirTime1 */
  pirTime1Handle = osMutexNew(&pirTime1_attributes);
 8001500:	482b      	ldr	r0, [pc, #172]	; (80015b0 <main+0x18c>)
 8001502:	f007 f8dd 	bl	80086c0 <osMutexNew>
 8001506:	4603      	mov	r3, r0
 8001508:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <main+0x190>)
 800150a:	6013      	str	r3, [r2, #0]

  /* creation of pirTime2 */
  pirTime2Handle = osMutexNew(&pirTime2_attributes);
 800150c:	482a      	ldr	r0, [pc, #168]	; (80015b8 <main+0x194>)
 800150e:	f007 f8d7 	bl	80086c0 <osMutexNew>
 8001512:	4603      	mov	r3, r0
 8001514:	4a29      	ldr	r2, [pc, #164]	; (80015bc <main+0x198>)
 8001516:	6013      	str	r3, [r2, #0]

  /* creation of uartTransmit */
  uartTransmitHandle = osMutexNew(&uartTransmit_attributes);
 8001518:	4829      	ldr	r0, [pc, #164]	; (80015c0 <main+0x19c>)
 800151a:	f007 f8d1 	bl	80086c0 <osMutexNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <main+0x1a0>)
 8001522:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of diffRxData */
  diffRxDataHandle = osSemaphoreNew(1, 1, &diffRxData_attributes);
 8001524:	4a28      	ldr	r2, [pc, #160]	; (80015c8 <main+0x1a4>)
 8001526:	2101      	movs	r1, #1
 8001528:	2001      	movs	r0, #1
 800152a:	f007 fa11 	bl	8008950 <osSemaphoreNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a26      	ldr	r2, [pc, #152]	; (80015cc <main+0x1a8>)
 8001532:	6013      	str	r3, [r2, #0]

  /* creation of dataBufferSemaphore */
  dataBufferSemaphoreHandle = osSemaphoreNew(1, 1, &dataBufferSemaphore_attributes);
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <main+0x1ac>)
 8001536:	2101      	movs	r1, #1
 8001538:	2001      	movs	r0, #1
 800153a:	f007 fa09 	bl	8008950 <osSemaphoreNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <main+0x1b0>)
 8001542:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001544:	4a24      	ldr	r2, [pc, #144]	; (80015d8 <main+0x1b4>)
 8001546:	2100      	movs	r1, #0
 8001548:	4824      	ldr	r0, [pc, #144]	; (80015dc <main+0x1b8>)
 800154a:	f006 ffe1 	bl	8008510 <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <main+0x1bc>)
 8001552:	6013      	str	r3, [r2, #0]

  /* creation of uartRxDiff */
  uartRxDiffHandle = osThreadNew(uartRxDiff_f, NULL, &uartRxDiff_attributes);
 8001554:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <main+0x1c0>)
 8001556:	2100      	movs	r1, #0
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <main+0x1c4>)
 800155a:	f006 ffd9 	bl	8008510 <osThreadNew>
 800155e:	4603      	mov	r3, r0
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <main+0x1c8>)
 8001562:	6013      	str	r3, [r2, #0]

  /* creation of AvoidPIRHandler */
  AvoidPIRHandlerHandle = osThreadNew(AvoidPIRHandler_f, NULL, &AvoidPIRHandler_attributes);
 8001564:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <main+0x1cc>)
 8001566:	2100      	movs	r1, #0
 8001568:	4822      	ldr	r0, [pc, #136]	; (80015f4 <main+0x1d0>)
 800156a:	f006 ffd1 	bl	8008510 <osThreadNew>
 800156e:	4603      	mov	r3, r0
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <main+0x1d4>)
 8001572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001574:	f006 ff98 	bl	80084a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001578:	e7fe      	b.n	8001578 <main+0x154>
 800157a:	bf00      	nop
 800157c:	2000077a 	.word	0x2000077a
 8001580:	20000344 	.word	0x20000344
 8001584:	200002ac 	.word	0x200002ac
 8001588:	200002f8 	.word	0x200002f8
 800158c:	48000400 	.word	0x48000400
 8001590:	20000214 	.word	0x20000214
 8001594:	20000260 	.word	0x20000260
 8001598:	0800d5ec 	.word	0x0800d5ec
 800159c:	200006c4 	.word	0x200006c4
 80015a0:	0800d5fc 	.word	0x0800d5fc
 80015a4:	200006c8 	.word	0x200006c8
 80015a8:	0800d60c 	.word	0x0800d60c
 80015ac:	200006cc 	.word	0x200006cc
 80015b0:	0800d61c 	.word	0x0800d61c
 80015b4:	200006d0 	.word	0x200006d0
 80015b8:	0800d62c 	.word	0x0800d62c
 80015bc:	200006d4 	.word	0x200006d4
 80015c0:	0800d63c 	.word	0x0800d63c
 80015c4:	200006d8 	.word	0x200006d8
 80015c8:	0800d64c 	.word	0x0800d64c
 80015cc:	200006dc 	.word	0x200006dc
 80015d0:	0800d65c 	.word	0x0800d65c
 80015d4:	200006e0 	.word	0x200006e0
 80015d8:	0800d580 	.word	0x0800d580
 80015dc:	08001e49 	.word	0x08001e49
 80015e0:	200006b8 	.word	0x200006b8
 80015e4:	0800d5a4 	.word	0x0800d5a4
 80015e8:	08001e59 	.word	0x08001e59
 80015ec:	200006bc 	.word	0x200006bc
 80015f0:	0800d5c8 	.word	0x0800d5c8
 80015f4:	08001e85 	.word	0x08001e85
 80015f8:	200006c0 	.word	0x200006c0

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09e      	sub	sp, #120	; 0x78
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001606:	2228      	movs	r2, #40	; 0x28
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f00a fc32 	bl	800be74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	223c      	movs	r2, #60	; 0x3c
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f00a fc24 	bl	800be74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800162c:	2303      	movs	r3, #3
 800162e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001630:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001634:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163a:	2301      	movs	r3, #1
 800163c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163e:	2310      	movs	r3, #16
 8001640:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001642:	2302      	movs	r3, #2
 8001644:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800164c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001650:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fc9e 	bl	8003f98 <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001662:	f000 fc91 	bl	8001f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001666:	230f      	movs	r3, #15
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166a:	2302      	movs	r3, #2
 800166c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800167c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fcc6 	bl	8005014 <HAL_RCC_ClockConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800168e:	f000 fc7b 	bl	8001f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <SystemClock_Config+0xcc>)
 8001694:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800169a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 ff18 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ba:	f000 fc65 	bl	8001f88 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3778      	adds	r7, #120	; 0x78
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	000220a2 	.word	0x000220a2

080016cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
 80016ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <MX_ADC1_Init+0xdc>)
 80016f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <MX_ADC1_Init+0xdc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <MX_ADC1_Init+0xdc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800170a:	2200      	movs	r2, #0
 800170c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001718:	2200      	movs	r2, #0
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800171e:	2201      	movs	r2, #1
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800172a:	2201      	movs	r2, #1
 800172c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001738:	2204      	movs	r2, #4
 800173a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800173e:	2200      	movs	r2, #0
 8001740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001744:	2200      	movs	r2, #0
 8001746:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001748:	4817      	ldr	r0, [pc, #92]	; (80017a8 <MX_ADC1_Init+0xdc>)
 800174a:	f001 f8d3 	bl	80028f4 <HAL_ADC_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001754:	f000 fc18 	bl	8001f88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4811      	ldr	r0, [pc, #68]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001764:	f001 fd92 	bl	800328c <HAL_ADCEx_MultiModeConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800176e:	f000 fc0b 	bl	8001f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001772:	2302      	movs	r3, #2
 8001774:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001776:	2301      	movs	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800177e:	2307      	movs	r3, #7
 8001780:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_ADC1_Init+0xdc>)
 8001790:	f001 fa90 	bl	8002cb4 <HAL_ADC_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800179a:	f000 fbf5 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000010c 	.word	0x2000010c

080017ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_I2C1_Init+0x74>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <MX_I2C1_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_I2C1_Init+0x74>)
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <MX_I2C1_Init+0x7c>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_I2C1_Init+0x74>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_I2C1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_I2C1_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_I2C1_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_I2C1_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_I2C1_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <MX_I2C1_Init+0x74>)
 80017e8:	f002 f9de 	bl	8003ba8 <HAL_I2C_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017f2:	f000 fbc9 	bl	8001f88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_I2C1_Init+0x74>)
 80017fa:	f002 fa64 	bl	8003cc6 <HAL_I2CEx_ConfigAnalogFilter>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001804:	f000 fbc0 	bl	8001f88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001808:	2100      	movs	r1, #0
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_I2C1_Init+0x74>)
 800180c:	f002 faa6 	bl	8003d5c <HAL_I2CEx_ConfigDigitalFilter>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001816:	f000 fbb7 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000015c 	.word	0x2000015c
 8001824:	40005400 	.word	0x40005400
 8001828:	2000090e 	.word	0x2000090e

0800182c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_SPI1_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800183c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001846:	f44f 7240 	mov.w	r2, #768	; 0x300
 800184a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_SPI1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_SPI1_Init+0x74>)
 800185a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001862:	2208      	movs	r2, #8
 8001864:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_SPI1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_SPI1_Init+0x74>)
 800187a:	2207      	movs	r2, #7
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_SPI1_Init+0x74>)
 8001886:	2208      	movs	r2, #8
 8001888:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_SPI1_Init+0x74>)
 800188c:	f003 ffda 	bl	8005844 <HAL_SPI_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001896:	f000 fb77 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200001b0 	.word	0x200001b0
 80018a4:	40013000 	.word	0x40013000

080018a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ba:	463b      	mov	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	615a      	str	r2, [r3, #20]
 80018ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <MX_TIM2_Init+0xdc>)
 80018ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <MX_TIM2_Init+0xdc>)
 80018d6:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80018da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <MX_TIM2_Init+0xdc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <MX_TIM2_Init+0xdc>)
 80018e4:	2263      	movs	r2, #99	; 0x63
 80018e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <MX_TIM2_Init+0xdc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <MX_TIM2_Init+0xdc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018f4:	4823      	ldr	r0, [pc, #140]	; (8001984 <MX_TIM2_Init+0xdc>)
 80018f6:	f004 f973 	bl	8005be0 <HAL_TIM_PWM_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001900:	f000 fb42 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	481c      	ldr	r0, [pc, #112]	; (8001984 <MX_TIM2_Init+0xdc>)
 8001914:	f005 fa08 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800191e:	f000 fb33 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001922:	2360      	movs	r3, #96	; 0x60
 8001924:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <MX_TIM2_Init+0xdc>)
 800193a:	f004 fbc9 	bl	80060d0 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001944:	f000 fb20 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	2204      	movs	r2, #4
 800194c:	4619      	mov	r1, r3
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_TIM2_Init+0xdc>)
 8001950:	f004 fbbe 	bl	80060d0 <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800195a:	f000 fb15 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195e:	463b      	mov	r3, r7
 8001960:	2208      	movs	r2, #8
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <MX_TIM2_Init+0xdc>)
 8001966:	f004 fbb3 	bl	80060d0 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001970:	f000 fb0a 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <MX_TIM2_Init+0xdc>)
 8001976:	f000 fc5d 	bl	8002234 <HAL_TIM_MspPostInit>

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000214 	.word	0x20000214

08001988 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199a:	463b      	mov	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <MX_TIM3_Init+0xd8>)
 80019ae:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <MX_TIM3_Init+0xdc>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <MX_TIM3_Init+0xd8>)
 80019b4:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80019b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <MX_TIM3_Init+0xd8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <MX_TIM3_Init+0xd8>)
 80019c2:	2263      	movs	r2, #99	; 0x63
 80019c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <MX_TIM3_Init+0xd8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <MX_TIM3_Init+0xd8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019d2:	4823      	ldr	r0, [pc, #140]	; (8001a60 <MX_TIM3_Init+0xd8>)
 80019d4:	f004 f904 	bl	8005be0 <HAL_TIM_PWM_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80019de:	f000 fad3 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	481b      	ldr	r0, [pc, #108]	; (8001a60 <MX_TIM3_Init+0xd8>)
 80019f2:	f005 f999 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80019fc:	f000 fac4 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a00:	2360      	movs	r3, #96	; 0x60
 8001a02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	4619      	mov	r1, r3
 8001a16:	4812      	ldr	r0, [pc, #72]	; (8001a60 <MX_TIM3_Init+0xd8>)
 8001a18:	f004 fb5a 	bl	80060d0 <HAL_TIM_PWM_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a22:	f000 fab1 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	2204      	movs	r2, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_TIM3_Init+0xd8>)
 8001a2e:	f004 fb4f 	bl	80060d0 <HAL_TIM_PWM_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a38:	f000 faa6 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2208      	movs	r2, #8
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <MX_TIM3_Init+0xd8>)
 8001a44:	f004 fb44 	bl	80060d0 <HAL_TIM_PWM_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001a4e:	f000 fa9b 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a52:	4803      	ldr	r0, [pc, #12]	; (8001a60 <MX_TIM3_Init+0xd8>)
 8001a54:	f000 fbee 	bl	8002234 <HAL_TIM_MspPostInit>

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000260 	.word	0x20000260
 8001a64:	40000400 	.word	0x40000400

08001a68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <MX_TIM4_Init+0x98>)
 8001a8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a8e:	2247      	movs	r2, #71	; 0x47
 8001a90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_TIM4_Init+0x94>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_TIM4_Init+0x94>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <MX_TIM4_Init+0x94>)
 8001aae:	f003 ff74 	bl	800599a <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001ab8:	f000 fa66 	bl	8001f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_TIM4_Init+0x94>)
 8001aca:	f004 fc15 	bl	80062f8 <HAL_TIM_ConfigClockSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ad4:	f000 fa58 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_TIM4_Init+0x94>)
 8001ae6:	f005 f91f 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f000 fa4a 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200002ac 	.word	0x200002ac
 8001b00:	40000800 	.word	0x40000800

08001b04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b24:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <MX_TIM8_Init+0xa4>)
 8001b26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7199;
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b2a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b2e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b38:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b3c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b50:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b52:	f003 ff22 	bl	800599a <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8001b5c:	f000 fa14 	bl	8001f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b6e:	f004 fbc3 	bl	80062f8 <HAL_TIM_ConfigClockSource>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001b78:	f000 fa06 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_TIM8_Init+0xa0>)
 8001b8e:	f005 f8cb 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001b98:	f000 f9f6 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200002f8 	.word	0x200002f8
 8001ba8:	40013400 	.word	0x40013400

08001bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <MX_USART2_UART_Init+0x5c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bb8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_USART2_UART_Init+0x58>)
 8001bf0:	f005 f938 	bl	8006e64 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bfa:	f000 f9c5 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000344 	.word	0x20000344
 8001c08:	40004400 	.word	0x40004400

08001c0c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <MX_USB_PCD_Init+0x3c>)
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <MX_USB_PCD_Init+0x40>)
 8001c14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_USB_PCD_Init+0x3c>)
 8001c18:	2208      	movs	r2, #8
 8001c1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <MX_USB_PCD_Init+0x3c>)
 8001c1e:	2202      	movs	r2, #2
 8001c20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_USB_PCD_Init+0x3c>)
 8001c24:	2202      	movs	r2, #2
 8001c26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <MX_USB_PCD_Init+0x3c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_USB_PCD_Init+0x3c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <MX_USB_PCD_Init+0x3c>)
 8001c36:	f002 f8dd 	bl	8003df4 <HAL_PCD_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001c40:	f000 f9a2 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200003cc 	.word	0x200003cc
 8001c4c:	40005c00 	.word	0x40005c00

08001c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c66:	4b74      	ldr	r3, [pc, #464]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4a73      	ldr	r2, [pc, #460]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c70:	6153      	str	r3, [r2, #20]
 8001c72:	4b71      	ldr	r3, [pc, #452]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7e:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4a6d      	ldr	r2, [pc, #436]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c88:	6153      	str	r3, [r2, #20]
 8001c8a:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c96:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca0:	6153      	str	r3, [r2, #20]
 8001ca2:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4a61      	ldr	r2, [pc, #388]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	6153      	str	r3, [r2, #20]
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b5c      	ldr	r3, [pc, #368]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	4a5b      	ldr	r2, [pc, #364]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6153      	str	r3, [r2, #20]
 8001cd2:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cde:	4b56      	ldr	r3, [pc, #344]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4a55      	ldr	r2, [pc, #340]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ce8:	6153      	str	r3, [r2, #20]
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <MX_GPIO_Init+0x1e8>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001cfc:	484f      	ldr	r0, [pc, #316]	; (8001e3c <MX_GPIO_Init+0x1ec>)
 8001cfe:	f001 ff09 	bl	8003b14 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVOID_2_Trigger_GPIO_Port, AVOID_2_Trigger_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d08:	484d      	ldr	r0, [pc, #308]	; (8001e40 <MX_GPIO_Init+0x1f0>)
 8001d0a:	f001 ff03 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVOID_1_Trigger_GPIO_Port, AVOID_1_Trigger_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2120      	movs	r1, #32
 8001d12:	484c      	ldr	r0, [pc, #304]	; (8001e44 <MX_GPIO_Init+0x1f4>)
 8001d14:	f001 fefe 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001d18:	2337      	movs	r3, #55	; 0x37
 8001d1a:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4843      	ldr	r0, [pc, #268]	; (8001e3c <MX_GPIO_Init+0x1ec>)
 8001d2e:	f001 fd5f 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin PE10
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8001d32:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001d36:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	483c      	ldr	r0, [pc, #240]	; (8001e3c <MX_GPIO_Init+0x1ec>)
 8001d4c:	f001 fd50 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d50:	2301      	movs	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f001 fd43 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVOID_2_Trigger_Pin */
  GPIO_InitStruct.Pin = AVOID_2_Trigger_Pin;
 8001d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AVOID_2_Trigger_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	482f      	ldr	r0, [pc, #188]	; (8001e40 <MX_GPIO_Init+0x1f0>)
 8001d84:	f001 fd34 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVOID_2_Echo_Pin */
  GPIO_InitStruct.Pin = AVOID_2_Echo_Pin;
 8001d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AVOID_2_Echo_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4828      	ldr	r0, [pc, #160]	; (8001e40 <MX_GPIO_Init+0x1f0>)
 8001d9e:	f001 fd27 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_MOVE_2_Pin */
  GPIO_InitStruct.Pin = PIR_MOVE_2_Pin;
 8001da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001da8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dae:	2302      	movs	r3, #2
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_MOVE_2_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4821      	ldr	r0, [pc, #132]	; (8001e40 <MX_GPIO_Init+0x1f0>)
 8001dba:	f001 fd19 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_MOVE_1_Pin */
  GPIO_InitStruct.Pin = PIR_MOVE_1_Pin;
 8001dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PIR_MOVE_1_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd8:	f001 fd0a 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVOID_1_Echo_Pin */
  GPIO_InitStruct.Pin = AVOID_1_Echo_Pin;
 8001ddc:	2310      	movs	r3, #16
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AVOID_1_Echo_GPIO_Port, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4815      	ldr	r0, [pc, #84]	; (8001e44 <MX_GPIO_Init+0x1f4>)
 8001df0:	f001 fcfe 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVOID_1_Trigger_Pin */
  GPIO_InitStruct.Pin = AVOID_1_Trigger_Pin;
 8001df4:	2320      	movs	r3, #32
 8001df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AVOID_1_Trigger_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480e      	ldr	r0, [pc, #56]	; (8001e44 <MX_GPIO_Init+0x1f4>)
 8001e0c:	f001 fcf0 	bl	80037f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2105      	movs	r1, #5
 8001e14:	2017      	movs	r0, #23
 8001e16:	f001 fc49 	bl	80036ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e1a:	2017      	movs	r0, #23
 8001e1c:	f001 fc62 	bl	80036e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2105      	movs	r1, #5
 8001e24:	2028      	movs	r0, #40	; 0x28
 8001e26:	f001 fc41 	bl	80036ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e2a:	2028      	movs	r0, #40	; 0x28
 8001e2c:	f001 fc5a 	bl	80036e4 <HAL_NVIC_EnableIRQ>

}
 8001e30:	bf00      	nop
 8001e32:	3730      	adds	r7, #48	; 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48001000 	.word	0x48001000
 8001e40:	48000c00 	.word	0x48000c00
 8001e44:	48000400 	.word	0x48000400

08001e48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
//		osMutexAcquire(diffBufferReadHandle, portMAX_DELAY);
//		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//		osMutexRelease(diffBufferReadHandle);
//	}
//	osMutexAcquire(mutex_id, timeout)
    osDelay(1);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f006 fc07 	bl	8008664 <osDelay>
 8001e56:	e7fb      	b.n	8001e50 <StartDefaultTask+0x8>

08001e58 <uartRxDiff_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartRxDiff_f */
void uartRxDiff_f(void *argument)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0a8      	sub	sp, #160	; 0xa0
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartRxDiff_f */
  /* Infinite loop */
  char d[150];
  for(;;)
  {
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <uartRxDiff_f+0x24>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f006 fe0d 	bl	8008a88 <osSemaphoreAcquire>
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);

	addToHandler(data);
 8001e6e:	4804      	ldr	r0, [pc, #16]	; (8001e80 <uartRxDiff_f+0x28>)
 8001e70:	f7ff f87b 	bl	8000f6a <addToHandler>
//	if (data_c == '\r') {
//		data_c_idx = 0;
//		data[data_c_idx] = '\0';
////		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//	}
    osDelay(1);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f006 fbf5 	bl	8008664 <osDelay>
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 8001e7a:	e7f1      	b.n	8001e60 <uartRxDiff_f+0x8>
 8001e7c:	200006dc 	.word	0x200006dc
 8001e80:	200006e4 	.word	0x200006e4

08001e84 <AvoidPIRHandler_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AvoidPIRHandler_f */
void AvoidPIRHandler_f(void *argument)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b096      	sub	sp, #88	; 0x58
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]



	  //// End of getting tof from ultrasonic

	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8001e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e90:	482d      	ldr	r0, [pc, #180]	; (8001f48 <AvoidPIRHandler_f+0xc4>)
 8001e92:	f001 fe57 	bl	8003b44 <HAL_GPIO_TogglePin>

	  rawAVOIDWindow[0][rawAVOIDWindow_idx] = getAvoidDistance(1);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7fe fe56 	bl	8000b48 <getAvoidDistance>
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <AvoidPIRHandler_f+0xc8>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <AvoidPIRHandler_f+0xcc>)
 8001ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  rawAVOIDWindow[1][rawAVOIDWindow_idx] = getAvoidDistance(2);
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7fe fe4c 	bl	8000b48 <getAvoidDistance>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <AvoidPIRHandler_f+0xc8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <AvoidPIRHandler_f+0xcc>)
 8001eba:	330a      	adds	r3, #10
 8001ebc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  rawAVOIDWindow_idx++;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <AvoidPIRHandler_f+0xc8>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <AvoidPIRHandler_f+0xc8>)
 8001eca:	701a      	strb	r2, [r3, #0]
//	  osMutexRelease(AvoidDistance1Handle);
////
//	  osMutexAcquire(AvoidDistance2Handle, portMAX_DELAY);
//	  rawAVOID[1] = getAvoidDistance(2);
//	  osMutexRelease(AvoidDistance2Handle);
	  if (rawAVOIDWindow_idx == 5) {
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <AvoidPIRHandler_f+0xc8>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d134      	bne.n	8001f3e <AvoidPIRHandler_f+0xba>
		  osMutexAcquire(AvoidDistance1Handle, portMAX_DELAY);
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <AvoidPIRHandler_f+0xd0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001edc:	4618      	mov	r0, r3
 8001ede:	f006 fc89 	bl	80087f4 <osMutexAcquire>
		  rawAVOID[0] = getMedian(rawAVOIDWindow[0], 5);
 8001ee2:	2105      	movs	r1, #5
 8001ee4:	481a      	ldr	r0, [pc, #104]	; (8001f50 <AvoidPIRHandler_f+0xcc>)
 8001ee6:	f7ff fa5b 	bl	80013a0 <getMedian>
 8001eea:	ec53 2b10 	vmov	r2, r3, d0
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fd93 	bl	8000a1c <__aeabi_d2uiz>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <AvoidPIRHandler_f+0xd4>)
 8001efa:	6013      	str	r3, [r2, #0]
		  osMutexRelease(AvoidDistance1Handle);
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <AvoidPIRHandler_f+0xd0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 fcd5 	bl	80088b0 <osMutexRelease>

		  osMutexAcquire(AvoidDistance2Handle, portMAX_DELAY);
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <AvoidPIRHandler_f+0xd8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f006 fc70 	bl	80087f4 <osMutexAcquire>
		  rawAVOID[1] = getMedian(rawAVOIDWindow[1], 5);
 8001f14:	2105      	movs	r1, #5
 8001f16:	4812      	ldr	r0, [pc, #72]	; (8001f60 <AvoidPIRHandler_f+0xdc>)
 8001f18:	f7ff fa42 	bl	80013a0 <getMedian>
 8001f1c:	ec53 2b10 	vmov	r2, r3, d0
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fd7a 	bl	8000a1c <__aeabi_d2uiz>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <AvoidPIRHandler_f+0xd4>)
 8001f2c:	6053      	str	r3, [r2, #4]
		  osMutexRelease(AvoidDistance2Handle);
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <AvoidPIRHandler_f+0xd8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 fcbc 	bl	80088b0 <osMutexRelease>

		  rawAVOIDWindow_idx = 0;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <AvoidPIRHandler_f+0xc8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
//	  char tmp[50];
//	  sprintf(tmp, "ch1:%d,ch2:%d\n", c2Val, c3Val);

//	  HAL_UART_Transmit(&huart2, tmp, strlen(tmp), 250);

	  osDelay(pdMS_TO_TICKS(50));
 8001f3e:	2032      	movs	r0, #50	; 0x32
 8001f40:	f006 fb90 	bl	8008664 <osDelay>
  {
 8001f44:	e7a2      	b.n	8001e8c <AvoidPIRHandler_f+0x8>
 8001f46:	bf00      	nop
 8001f48:	48001000 	.word	0x48001000
 8001f4c:	20000100 	.word	0x20000100
 8001f50:	200000b0 	.word	0x200000b0
 8001f54:	200006c8 	.word	0x200006c8
 8001f58:	200000a8 	.word	0x200000a8
 8001f5c:	200006cc 	.word	0x200006cc
 8001f60:	200000d8 	.word	0x200000d8

08001f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f76:	f000 fc9d 	bl	80028b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40012c00 	.word	0x40012c00

08001f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8c:	b672      	cpsid	i
}
 8001f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <Error_Handler+0x8>
	...

08001f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6193      	str	r3, [r2, #24]
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	210f      	movs	r1, #15
 8001fce:	f06f 0001 	mvn.w	r0, #1
 8001fd2:	f001 fb6b 	bl	80036ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002004:	d124      	bne.n	8002050 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_ADC_MspInit+0x74>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <HAL_ADC_MspInit+0x74>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6153      	str	r3, [r2, #20]
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_ADC_MspInit+0x74>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_ADC_MspInit+0x74>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <HAL_ADC_MspInit+0x74>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	6153      	str	r3, [r2, #20]
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_ADC_MspInit+0x74>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002036:	2306      	movs	r3, #6
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203a:	2303      	movs	r3, #3
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204c:	f001 fbd0 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_I2C_MspInit+0x7c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d127      	bne.n	80020ce <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_I2C_MspInit+0x80>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4a16      	ldr	r2, [pc, #88]	; (80020dc <HAL_I2C_MspInit+0x80>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6153      	str	r3, [r2, #20]
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_I2C_MspInit+0x80>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209a:	2312      	movs	r3, #18
 800209c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800209e:	2301      	movs	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a6:	2304      	movs	r3, #4
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	480b      	ldr	r0, [pc, #44]	; (80020e0 <HAL_I2C_MspInit+0x84>)
 80020b2:	f001 fb9d 	bl	80037f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_I2C_MspInit+0x80>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_I2C_MspInit+0x80>)
 80020bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_I2C_MspInit+0x80>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40005400 	.word	0x40005400
 80020dc:	40021000 	.word	0x40021000
 80020e0:	48000400 	.word	0x48000400

080020e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_SPI_MspInit+0x7c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d128      	bne.n	8002158 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_SPI_MspInit+0x80>)
 800210c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002110:	6193      	str	r3, [r2, #24]
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	6153      	str	r3, [r2, #20]
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_SPI_MspInit+0x80>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002136:	23e0      	movs	r3, #224	; 0xe0
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002146:	2305      	movs	r3, #5
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002154:	f001 fb4c 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40013000 	.word	0x40013000
 8002164:	40021000 	.word	0x40021000

08002168 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d10c      	bne.n	8002194 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_TIM_PWM_MspInit+0x5c>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002192:	e010      	b.n	80021b6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <HAL_TIM_PWM_MspInit+0x60>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d10b      	bne.n	80021b6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_TIM_PWM_MspInit+0x5c>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_TIM_PWM_MspInit+0x5c>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	61d3      	str	r3, [r2, #28]
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_TIM_PWM_MspInit+0x5c>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40000400 	.word	0x40000400

080021cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a13      	ldr	r2, [pc, #76]	; (8002228 <HAL_TIM_Base_MspInit+0x5c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10c      	bne.n	80021f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_TIM_Base_MspInit+0x60>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <HAL_TIM_Base_MspInit+0x60>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_TIM_Base_MspInit+0x60>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021f6:	e010      	b.n	800221a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_TIM_Base_MspInit+0x64>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10b      	bne.n	800221a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_TIM_Base_MspInit+0x60>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_TIM_Base_MspInit+0x60>)
 8002208:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800220c:	6193      	str	r3, [r2, #24]
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <HAL_TIM_Base_MspInit+0x60>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40000800 	.word	0x40000800
 800222c:	40021000 	.word	0x40021000
 8002230:	40013400 	.word	0x40013400

08002234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08e      	sub	sp, #56	; 0x38
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d157      	bne.n	8002306 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4a5a      	ldr	r2, [pc, #360]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6153      	str	r3, [r2, #20]
 8002262:	4b58      	ldr	r3, [pc, #352]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	6153      	str	r3, [r2, #20]
 800227a:	4b52      	ldr	r3, [pc, #328]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	4b4f      	ldr	r3, [pc, #316]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 800228c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002290:	6153      	str	r3, [r2, #20]
 8002292:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800229e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b0:	2301      	movs	r3, #1
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	4843      	ldr	r0, [pc, #268]	; (80023c8 <HAL_TIM_MspPostInit+0x194>)
 80022bc:	f001 fa98 	bl	80037f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d2:	2301      	movs	r3, #1
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e0:	f001 fa86 	bl	80037f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022e4:	2310      	movs	r3, #16
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fc:	4619      	mov	r1, r3
 80022fe:	4833      	ldr	r0, [pc, #204]	; (80023cc <HAL_TIM_MspPostInit+0x198>)
 8002300:	f001 fa76 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002304:	e059      	b.n	80023ba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <HAL_TIM_MspPostInit+0x19c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d154      	bne.n	80023ba <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231a:	6153      	str	r3, [r2, #20]
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 800232e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002332:	6153      	str	r3, [r2, #20]
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 8002346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800234a:	6153      	str	r3, [r2, #20]
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_TIM_MspPostInit+0x190>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002358:	2310      	movs	r3, #16
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002368:	2302      	movs	r3, #2
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002370:	4619      	mov	r1, r3
 8002372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002376:	f001 fa3b 	bl	80037f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800237a:	2301      	movs	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800238a:	2302      	movs	r3, #2
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002392:	4619      	mov	r1, r3
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <HAL_TIM_MspPostInit+0x194>)
 8002396:	f001 fa2b 	bl	80037f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800239a:	2340      	movs	r3, #64	; 0x40
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023aa:	2302      	movs	r3, #2
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b2:	4619      	mov	r1, r3
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <HAL_TIM_MspPostInit+0x1a0>)
 80023b6:	f001 fa1b 	bl	80037f0 <HAL_GPIO_Init>
}
 80023ba:	bf00      	nop
 80023bc:	3738      	adds	r7, #56	; 0x38
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	48000400 	.word	0x48000400
 80023cc:	48000c00 	.word	0x48000c00
 80023d0:	40000400 	.word	0x40000400
 80023d4:	48000800 	.word	0x48000800

080023d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_UART_MspInit+0xc4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d14c      	bne.n	8002494 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	6153      	str	r3, [r2, #20]
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 8002430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002434:	6153      	str	r3, [r2, #20]
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002442:	2308      	movs	r3, #8
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002452:	2307      	movs	r3, #7
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002460:	f001 f9c6 	bl	80037f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002464:	2320      	movs	r3, #32
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002474:	2307      	movs	r3, #7
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	4809      	ldr	r0, [pc, #36]	; (80024a4 <HAL_UART_MspInit+0xcc>)
 8002480:	f001 f9b6 	bl	80037f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2105      	movs	r1, #5
 8002488:	2026      	movs	r0, #38	; 0x26
 800248a:	f001 f90f 	bl	80036ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800248e:	2026      	movs	r0, #38	; 0x26
 8002490:	f001 f928 	bl	80036e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40004400 	.word	0x40004400
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000c00 	.word	0x48000c00

080024a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_PCD_MspInit+0x80>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d129      	bne.n	800251e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_PCD_MspInit+0x84>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_PCD_MspInit+0x84>)
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	6153      	str	r3, [r2, #20]
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_PCD_MspInit+0x84>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80024e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80024f4:	230e      	movs	r3, #14
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002502:	f001 f975 	bl	80037f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_PCD_MspInit+0x84>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <HAL_PCD_MspInit+0x84>)
 800250c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_PCD_MspInit+0x84>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800251e:	bf00      	nop
 8002520:	3728      	adds	r7, #40	; 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40005c00 	.word	0x40005c00
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002540:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <HAL_InitTick+0xcc>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <HAL_InitTick+0xcc>)
 8002546:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_InitTick+0xcc>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002558:	f107 020c 	add.w	r2, r7, #12
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f002 ff8c 	bl	8005480 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002568:	f002 ff68 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 800256c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	4a23      	ldr	r2, [pc, #140]	; (8002600 <HAL_InitTick+0xd0>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0c9b      	lsrs	r3, r3, #18
 8002578:	3b01      	subs	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_InitTick+0xd4>)
 800257e:	4a22      	ldr	r2, [pc, #136]	; (8002608 <HAL_InitTick+0xd8>)
 8002580:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_InitTick+0xd4>)
 8002584:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002588:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_InitTick+0xd4>)
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_InitTick+0xd4>)
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_InitTick+0xd4>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_InitTick+0xd4>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80025a2:	4818      	ldr	r0, [pc, #96]	; (8002604 <HAL_InitTick+0xd4>)
 80025a4:	f003 f9f9 	bl	800599a <HAL_TIM_Base_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11b      	bne.n	80025ee <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025b6:	4813      	ldr	r0, [pc, #76]	; (8002604 <HAL_InitTick+0xd4>)
 80025b8:	f003 faa8 	bl	8005b0c <HAL_TIM_Base_Start_IT>
 80025bc:	4603      	mov	r3, r0
 80025be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80025c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d111      	bne.n	80025ee <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80025ca:	2019      	movs	r0, #25
 80025cc:	f001 f88a 	bl	80036e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b0f      	cmp	r3, #15
 80025d4:	d808      	bhi.n	80025e8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80025d6:	2200      	movs	r2, #0
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	2019      	movs	r0, #25
 80025dc:	f001 f866 	bl	80036ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_InitTick+0xdc>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e002      	b.n	80025ee <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3730      	adds	r7, #48	; 0x30
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	431bde83 	.word	0x431bde83
 8002604:	2000077c 	.word	0x2000077c
 8002608:	40012c00 	.word	0x40012c00
 800260c:	2000001c 	.word	0x2000001c

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <NMI_Handler+0x4>

08002616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <MemManage_Handler+0x4>

08002622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <UsageFault_Handler+0x4>

0800262e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_MOVE_1_Pin);
 8002640:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002644:	f001 fa98 	bl	8003b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002652:	f003 fc1d 	bl	8005e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000077c 	.word	0x2000077c

08002660 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <USART2_IRQHandler+0x10>)
 8002666:	f004 fd19 	bl	800709c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000344 	.word	0x20000344

08002674 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_MOVE_2_Pin);
 8002678:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800267c:	f001 fa7c 	bl	8003b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return 1;
 8002688:	2301      	movs	r3, #1
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_kill>:

int _kill(int pid, int sig)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800269e:	f009 fbb1 	bl	800be04 <__errno>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2216      	movs	r2, #22
 80026a6:	601a      	str	r2, [r3, #0]
  return -1;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_exit>:

void _exit (int status)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ffe7 	bl	8002694 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026c6:	e7fe      	b.n	80026c6 <_exit+0x12>

080026c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e00a      	b.n	80026f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026da:	f3af 8000 	nop.w
 80026de:	4601      	mov	r1, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	b2ca      	uxtb	r2, r1
 80026e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbf0      	blt.n	80026da <_read+0x12>
  }

  return len;
 80026f8:	687b      	ldr	r3, [r7, #4]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e009      	b.n	8002728 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	60ba      	str	r2, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	429a      	cmp	r2, r3
 800272e:	dbf1      	blt.n	8002714 <_write+0x12>
  }
  return len;
 8002730:	687b      	ldr	r3, [r7, #4]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_close>:

int _close(int file)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002762:	605a      	str	r2, [r3, #4]
  return 0;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <_isatty>:

int _isatty(int file)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <_sbrk+0x5c>)
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <_sbrk+0x60>)
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <_sbrk+0x64>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <_sbrk+0x68>)
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d207      	bcs.n	80027e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d4:	f009 fb16 	bl	800be04 <__errno>
 80027d8:	4603      	mov	r3, r0
 80027da:	220c      	movs	r2, #12
 80027dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027e2:	e009      	b.n	80027f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <_sbrk+0x64>)
 80027f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2000a000 	.word	0x2000a000
 8002804:	00000400 	.word	0x00000400
 8002808:	200007c8 	.word	0x200007c8
 800280c:	20002128 	.word	0x20002128

08002810 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <SystemInit+0x20>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <SystemInit+0x20>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800286c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002838:	f7ff ffea 	bl	8002810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <LoopForever+0x6>)
  ldr r1, =_edata
 800283e:	490d      	ldr	r1, [pc, #52]	; (8002874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002840:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <LoopForever+0xe>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002844:	e002      	b.n	800284c <LoopCopyDataInit>

08002846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284a:	3304      	adds	r3, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800284c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002850:	d3f9      	bcc.n	8002846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002854:	4c0a      	ldr	r4, [pc, #40]	; (8002880 <LoopForever+0x16>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002858:	e001      	b.n	800285e <LoopFillZerobss>

0800285a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800285c:	3204      	adds	r2, #4

0800285e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002860:	d3fb      	bcc.n	800285a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002862:	f009 fad5 	bl	800be10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002866:	f7fe fddd 	bl	8001424 <main>

0800286a <LoopForever>:

LoopForever:
    b LoopForever
 800286a:	e7fe      	b.n	800286a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800286c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002878:	0800d8f4 	.word	0x0800d8f4
  ldr r2, =_sbss
 800287c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002880:	20002128 	.word	0x20002128

08002884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_2_IRQHandler>
	...

08002888 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_Init+0x28>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_Init+0x28>)
 8002892:	f043 0310 	orr.w	r3, r3, #16
 8002896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 fefc 	bl	8003696 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800289e:	200f      	movs	r0, #15
 80028a0:	f7ff fe46 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a4:	f7ff fb76 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40022000 	.word	0x40022000

080028b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_IncTick+0x20>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_IncTick+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_IncTick+0x24>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000020 	.word	0x20000020
 80028d8:	200007cc 	.word	0x200007cc

080028dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return uwTick;  
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_GetTick+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	200007cc 	.word	0x200007cc

080028f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b09a      	sub	sp, #104	; 0x68
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e1c9      	b.n	8002ca8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d176      	bne.n	8002a14 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d152      	bne.n	80029d4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fb4b 	bl	8001fe4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d13b      	bne.n	80029d4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fd87 	bl	8003470 <ADC_Disable>
 8002962:	4603      	mov	r3, r0
 8002964:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d12f      	bne.n	80029d4 <HAL_ADC_Init+0xe0>
 8002974:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12b      	bne.n	80029d4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002984:	f023 0302 	bic.w	r3, r3, #2
 8002988:	f043 0202 	orr.w	r2, r3, #2
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800299e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029ae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029b0:	4b86      	ldr	r3, [pc, #536]	; (8002bcc <HAL_ADC_Init+0x2d8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a86      	ldr	r2, [pc, #536]	; (8002bd0 <HAL_ADC_Init+0x2dc>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9a      	lsrs	r2, r3, #18
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c6:	e002      	b.n	80029ce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f9      	bne.n	80029c8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80029ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f0:	d110      	bne.n	8002a14 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f023 0312 	bic.w	r3, r3, #18
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f040 8136 	bne.w	8002c8e <HAL_ADC_Init+0x39a>
 8002a22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 8131 	bne.w	8002c8e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 8129 	bne.w	8002c8e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a44:	f043 0202 	orr.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a54:	d004      	beq.n	8002a60 <HAL_ADC_Init+0x16c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5e      	ldr	r2, [pc, #376]	; (8002bd4 <HAL_ADC_Init+0x2e0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_Init+0x170>
 8002a60:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <HAL_ADC_Init+0x2e4>)
 8002a62:	e000      	b.n	8002a66 <HAL_ADC_Init+0x172>
 8002a64:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <HAL_ADC_Init+0x2e8>)
 8002a66:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a70:	d102      	bne.n	8002a78 <HAL_ADC_Init+0x184>
 8002a72:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_ADC_Init+0x2e0>)
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e01a      	b.n	8002aae <HAL_ADC_Init+0x1ba>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a55      	ldr	r2, [pc, #340]	; (8002bd4 <HAL_ADC_Init+0x2e0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d103      	bne.n	8002a8a <HAL_ADC_Init+0x196>
 8002a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e011      	b.n	8002aae <HAL_ADC_Init+0x1ba>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a54      	ldr	r2, [pc, #336]	; (8002be0 <HAL_ADC_Init+0x2ec>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d102      	bne.n	8002a9a <HAL_ADC_Init+0x1a6>
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_ADC_Init+0x2f0>)
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e009      	b.n	8002aae <HAL_ADC_Init+0x1ba>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <HAL_ADC_Init+0x2f0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d102      	bne.n	8002aaa <HAL_ADC_Init+0x1b6>
 8002aa4:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <HAL_ADC_Init+0x2ec>)
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e001      	b.n	8002aae <HAL_ADC_Init+0x1ba>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_ADC_Init+0x1da>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Init+0x1da>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_ADC_Init+0x1dc>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d11c      	bne.n	8002b0e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d010      	beq.n	8002afc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d107      	bne.n	8002af6 <HAL_ADC_Init+0x202>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Init+0x202>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_ADC_Init+0x204>
 8002af6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d108      	bne.n	8002b0e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7e5b      	ldrb	r3, [r3, #25]
 8002b12:	035b      	lsls	r3, r3, #13
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b18:	2a01      	cmp	r2, #1
 8002b1a:	d002      	beq.n	8002b22 <HAL_ADC_Init+0x22e>
 8002b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b20:	e000      	b.n	8002b24 <HAL_ADC_Init+0x230>
 8002b22:	2200      	movs	r2, #0
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b34:	4313      	orrs	r3, r2
 8002b36:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d11b      	bne.n	8002b7a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7e5b      	ldrb	r3, [r3, #25]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	045a      	lsls	r2, r3, #17
 8002b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b5c:	e00d      	b.n	8002b7a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d03a      	beq.n	8002bf8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <HAL_ADC_Init+0x2ec>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_ADC_Init+0x2a2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_ADC_Init+0x2f0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d128      	bne.n	8002be8 <HAL_ADC_Init+0x2f4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002b9e:	d012      	beq.n	8002bc6 <HAL_ADC_Init+0x2d2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_ADC_Init+0x2cc>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002bb2:	d002      	beq.n	8002bba <HAL_ADC_Init+0x2c6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	e018      	b.n	8002bec <HAL_ADC_Init+0x2f8>
 8002bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bbe:	e015      	b.n	8002bec <HAL_ADC_Init+0x2f8>
 8002bc0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002bc4:	e012      	b.n	8002bec <HAL_ADC_Init+0x2f8>
 8002bc6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002bca:	e00f      	b.n	8002bec <HAL_ADC_Init+0x2f8>
 8002bcc:	20000018 	.word	0x20000018
 8002bd0:	431bde83 	.word	0x431bde83
 8002bd4:	50000100 	.word	0x50000100
 8002bd8:	50000300 	.word	0x50000300
 8002bdc:	50000700 	.word	0x50000700
 8002be0:	50000400 	.word	0x50000400
 8002be4:	50000500 	.word	0x50000500
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d114      	bne.n	8002c30 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c14:	f023 0302 	bic.w	r3, r3, #2
 8002c18:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7e1b      	ldrb	r3, [r3, #24]
 8002c1e:	039a      	lsls	r2, r3, #14
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_ADC_Init+0x3bc>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c40:	430b      	orrs	r3, r1
 8002c42:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10c      	bne.n	8002c66 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f023 010f 	bic.w	r1, r3, #15
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	1e5a      	subs	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
 8002c64:	e007      	b.n	8002c76 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 020f 	bic.w	r2, r2, #15
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f023 0303 	bic.w	r3, r3, #3
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8c:	e00a      	b.n	8002ca4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f023 0312 	bic.w	r3, r3, #18
 8002c96:	f043 0210 	orr.w	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002ca4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3768      	adds	r7, #104	; 0x68
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	fff0c007 	.word	0xfff0c007

08002cb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b09b      	sub	sp, #108	; 0x6c
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x22>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e2ca      	b.n	800326c <HAL_ADC_ConfigChannel+0x5b8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 82ae 	bne.w	800324a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d81c      	bhi.n	8002d30 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	461a      	mov	r2, r3
 8002d0a:	231f      	movs	r3, #31
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	4019      	ands	r1, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa00 f203 	lsl.w	r2, r0, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d2e:	e063      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b09      	cmp	r3, #9
 8002d36:	d81e      	bhi.n	8002d76 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	3b1e      	subs	r3, #30
 8002d4c:	221f      	movs	r2, #31
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	4019      	ands	r1, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	3b1e      	subs	r3, #30
 8002d68:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34
 8002d74:	e040      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b0e      	cmp	r3, #14
 8002d7c:	d81e      	bhi.n	8002dbc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	3b3c      	subs	r3, #60	; 0x3c
 8002d92:	221f      	movs	r2, #31
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4019      	ands	r1, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	3b3c      	subs	r3, #60	; 0x3c
 8002dae:	fa00 f203 	lsl.w	r2, r0, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dba:	e01d      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	3b5a      	subs	r3, #90	; 0x5a
 8002dd0:	221f      	movs	r2, #31
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	4019      	ands	r1, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	3b5a      	subs	r3, #90	; 0x5a
 8002dec:	fa00 f203 	lsl.w	r2, r0, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 80e5 	bne.w	8002fd2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d91c      	bls.n	8002e4a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6999      	ldr	r1, [r3, #24]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b1e      	subs	r3, #30
 8002e22:	2207      	movs	r2, #7
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4019      	ands	r1, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6898      	ldr	r0, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b1e      	subs	r3, #30
 8002e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	619a      	str	r2, [r3, #24]
 8002e48:	e019      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6959      	ldr	r1, [r3, #20]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	4019      	ands	r1, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6898      	ldr	r0, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	fa00 f203 	lsl.w	r2, r0, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d84f      	bhi.n	8002f40 <HAL_ADC_ConfigChannel+0x28c>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <HAL_ADC_ConfigChannel+0x1f4>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002edb 	.word	0x08002edb
 8002eb0:	08002efd 	.word	0x08002efd
 8002eb4:	08002f1f 	.word	0x08002f1f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ebe:	4b9a      	ldr	r3, [pc, #616]	; (8003128 <HAL_ADC_ConfigChannel+0x474>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	0691      	lsls	r1, r2, #26
 8002ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ed6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ed8:	e07e      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ee0:	4b91      	ldr	r3, [pc, #580]	; (8003128 <HAL_ADC_ConfigChannel+0x474>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	0691      	lsls	r1, r2, #26
 8002eea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002eec:	430a      	orrs	r2, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ef8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002efa:	e06d      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f02:	4b89      	ldr	r3, [pc, #548]	; (8003128 <HAL_ADC_ConfigChannel+0x474>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	0691      	lsls	r1, r2, #26
 8002f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f1a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f1c:	e05c      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f24:	4b80      	ldr	r3, [pc, #512]	; (8003128 <HAL_ADC_ConfigChannel+0x474>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	0691      	lsls	r1, r2, #26
 8002f2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f30:	430a      	orrs	r2, r1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f3c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f3e:	e04b      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	069b      	lsls	r3, r3, #26
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d107      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d107      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f86:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	069b      	lsls	r3, r3, #26
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d107      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002faa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	069b      	lsls	r3, r3, #26
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10a      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fce:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002fd0:	e001      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002fd6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d108      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x344>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x344>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x346>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 8130 	bne.w	8003260 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d00f      	beq.n	8003028 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	400a      	ands	r2, r1
 8003022:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003026:	e049      	b.n	80030bc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	409a      	lsls	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b09      	cmp	r3, #9
 8003048:	d91c      	bls.n	8003084 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6999      	ldr	r1, [r3, #24]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	3b1b      	subs	r3, #27
 800305c:	2207      	movs	r2, #7
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	4019      	ands	r1, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6898      	ldr	r0, [r3, #8]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	3b1b      	subs	r3, #27
 8003076:	fa00 f203 	lsl.w	r2, r0, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	619a      	str	r2, [r3, #24]
 8003082:	e01b      	b.n	80030bc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6959      	ldr	r1, [r3, #20]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	2207      	movs	r2, #7
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	4019      	ands	r1, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6898      	ldr	r0, [r3, #8]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	fa00 f203 	lsl.w	r2, r0, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c4:	d004      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x41c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_ADC_ConfigChannel+0x478>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x420>
 80030d0:	4b17      	ldr	r3, [pc, #92]	; (8003130 <HAL_ADC_ConfigChannel+0x47c>)
 80030d2:	e000      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x422>
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <HAL_ADC_ConfigChannel+0x480>)
 80030d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d105      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d015      	beq.n	8003118 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030f0:	2b11      	cmp	r3, #17
 80030f2:	d105      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003104:	2b12      	cmp	r3, #18
 8003106:	f040 80ab 	bne.w	8003260 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800310a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 80a4 	bne.w	8003260 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003120:	d10a      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x484>
 8003122:	4b02      	ldr	r3, [pc, #8]	; (800312c <HAL_ADC_ConfigChannel+0x478>)
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	e022      	b.n	800316e <HAL_ADC_ConfigChannel+0x4ba>
 8003128:	83fff000 	.word	0x83fff000
 800312c:	50000100 	.word	0x50000100
 8003130:	50000300 	.word	0x50000300
 8003134:	50000700 	.word	0x50000700
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a4e      	ldr	r2, [pc, #312]	; (8003278 <HAL_ADC_ConfigChannel+0x5c4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d103      	bne.n	800314a <HAL_ADC_ConfigChannel+0x496>
 8003142:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e011      	b.n	800316e <HAL_ADC_ConfigChannel+0x4ba>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a4b      	ldr	r2, [pc, #300]	; (800327c <HAL_ADC_ConfigChannel+0x5c8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d102      	bne.n	800315a <HAL_ADC_ConfigChannel+0x4a6>
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_ADC_ConfigChannel+0x5cc>)
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e009      	b.n	800316e <HAL_ADC_ConfigChannel+0x4ba>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a48      	ldr	r2, [pc, #288]	; (8003280 <HAL_ADC_ConfigChannel+0x5cc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d102      	bne.n	800316a <HAL_ADC_ConfigChannel+0x4b6>
 8003164:	4b45      	ldr	r3, [pc, #276]	; (800327c <HAL_ADC_ConfigChannel+0x5c8>)
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e001      	b.n	800316e <HAL_ADC_ConfigChannel+0x4ba>
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d108      	bne.n	800318e <HAL_ADC_ConfigChannel+0x4da>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_ADC_ConfigChannel+0x4da>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_ADC_ConfigChannel+0x4dc>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d150      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003194:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x502>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x502>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x504>
 80031b6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d13c      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d11d      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x54c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031cc:	d118      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_ADC_ConfigChannel+0x5d0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_ADC_ConfigChannel+0x5d4>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9a      	lsrs	r2, r3, #18
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031f0:	e002      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f9      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031fe:	e02e      	b.n	800325e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b11      	cmp	r3, #17
 8003206:	d10b      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x56c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d106      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800321a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800321e:	e01e      	b.n	800325e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b12      	cmp	r3, #18
 8003226:	d11a      	bne.n	800325e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003232:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003234:	e013      	b.n	800325e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003248:	e00a      	b.n	8003260 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800325c:	e000      	b.n	8003260 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800325e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003268:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800326c:	4618      	mov	r0, r3
 800326e:	376c      	adds	r7, #108	; 0x6c
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	50000100 	.word	0x50000100
 800327c:	50000400 	.word	0x50000400
 8003280:	50000500 	.word	0x50000500
 8003284:	20000018 	.word	0x20000018
 8003288:	431bde83 	.word	0x431bde83

0800328c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800328c:	b480      	push	{r7}
 800328e:	b099      	sub	sp, #100	; 0x64
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a4:	d102      	bne.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80032a6:	4b6d      	ldr	r3, [pc, #436]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	e01a      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6a      	ldr	r2, [pc, #424]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d103      	bne.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80032b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	e011      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a67      	ldr	r2, [pc, #412]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d102      	bne.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032c8:	4b66      	ldr	r3, [pc, #408]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	e009      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a64      	ldr	r2, [pc, #400]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d102      	bne.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032d8:	4b61      	ldr	r3, [pc, #388]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	e001      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0b0      	b.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e0a9      	b.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 808d 	bne.w	800342c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 8086 	bne.w	800342c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003328:	d004      	beq.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a4b      	ldr	r2, [pc, #300]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d101      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003334:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003336:	e000      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003338:	4b4c      	ldr	r3, [pc, #304]	; (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800333a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d040      	beq.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003356:	035b      	lsls	r3, r3, #13
 8003358:	430b      	orrs	r3, r1
 800335a:	431a      	orrs	r2, r3
 800335c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d108      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d15c      	bne.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80033a2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d14b      	bne.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80033a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033b0:	f023 030f 	bic.w	r3, r3, #15
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	6811      	ldr	r1, [r2, #0]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	6892      	ldr	r2, [r2, #8]
 80033bc:	430a      	orrs	r2, r1
 80033be:	431a      	orrs	r2, r3
 80033c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033c4:	e03c      	b.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d108      	bne.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033f2:	2300      	movs	r3, #0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d123      	bne.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003414:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003416:	2b00      	cmp	r3, #0
 8003418:	d112      	bne.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800341a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003422:	f023 030f 	bic.w	r3, r3, #15
 8003426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003428:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800342a:	e009      	b.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800343e:	e000      	b.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003440:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800344a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800344e:	4618      	mov	r0, r3
 8003450:	3764      	adds	r7, #100	; 0x64
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	50000100 	.word	0x50000100
 8003460:	50000400 	.word	0x50000400
 8003464:	50000500 	.word	0x50000500
 8003468:	50000300 	.word	0x50000300
 800346c:	50000700 	.word	0x50000700

08003470 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <ADC_Disable+0x2c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <ADC_Disable+0x2c>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <ADC_Disable+0x2e>
 800349c:	2300      	movs	r3, #0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d047      	beq.n	8003532 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 030d 	and.w	r3, r3, #13
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10f      	bne.n	80034d0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0202 	orr.w	r2, r2, #2
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2203      	movs	r2, #3
 80034c6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80034c8:	f7ff fa08 	bl	80028dc <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034ce:	e029      	b.n	8003524 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0210 	orr.w	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e023      	b.n	8003534 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034ec:	f7ff f9f6 	bl	80028dc <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d914      	bls.n	8003524 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10d      	bne.n	8003524 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f043 0210 	orr.w	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e007      	b.n	8003534 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	d0dc      	beq.n	80034ec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <__NVIC_SetPriorityGrouping+0x44>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003558:	4013      	ands	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356e:	4a04      	ldr	r2, [pc, #16]	; (8003580 <__NVIC_SetPriorityGrouping+0x44>)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	60d3      	str	r3, [r2, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <__NVIC_GetPriorityGrouping+0x18>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	f003 0307 	and.w	r3, r3, #7
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	db0b      	blt.n	80035ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	4907      	ldr	r1, [pc, #28]	; (80035d8 <__NVIC_EnableIRQ+0x38>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2001      	movs	r0, #1
 80035c2:	fa00 f202 	lsl.w	r2, r0, r2
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000e100 	.word	0xe000e100

080035dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	db0a      	blt.n	8003606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	490c      	ldr	r1, [pc, #48]	; (8003628 <__NVIC_SetPriority+0x4c>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	440b      	add	r3, r1
 8003600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003604:	e00a      	b.n	800361c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4908      	ldr	r1, [pc, #32]	; (800362c <__NVIC_SetPriority+0x50>)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3b04      	subs	r3, #4
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	440b      	add	r3, r1
 800361a:	761a      	strb	r2, [r3, #24]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000e100 	.word	0xe000e100
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f1c3 0307 	rsb	r3, r3, #7
 800364a:	2b04      	cmp	r3, #4
 800364c:	bf28      	it	cs
 800364e:	2304      	movcs	r3, #4
 8003650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3304      	adds	r3, #4
 8003656:	2b06      	cmp	r3, #6
 8003658:	d902      	bls.n	8003660 <NVIC_EncodePriority+0x30>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3b03      	subs	r3, #3
 800365e:	e000      	b.n	8003662 <NVIC_EncodePriority+0x32>
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	401a      	ands	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43d9      	mvns	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	4313      	orrs	r3, r2
         );
}
 800368a:	4618      	mov	r0, r3
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ff4c 	bl	800353c <__NVIC_SetPriorityGrouping>
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036be:	f7ff ff61 	bl	8003584 <__NVIC_GetPriorityGrouping>
 80036c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	6978      	ldr	r0, [r7, #20]
 80036ca:	f7ff ffb1 	bl	8003630 <NVIC_EncodePriority>
 80036ce:	4602      	mov	r2, r0
 80036d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff ff80 	bl	80035dc <__NVIC_SetPriority>
}
 80036dc:	bf00      	nop
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff ff54 	bl	80035a0 <__NVIC_EnableIRQ>
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800370e:	2b02      	cmp	r3, #2
 8003710:	d008      	beq.n	8003724 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2204      	movs	r2, #4
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e020      	b.n	8003766 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 020e 	bic.w	r2, r2, #14
 8003732:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	2101      	movs	r1, #1
 800374e:	fa01 f202 	lsl.w	r2, r1, r2
 8003752:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003784:	2b02      	cmp	r3, #2
 8003786:	d005      	beq.n	8003794 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2204      	movs	r2, #4
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e027      	b.n	80037e4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 020e 	bic.w	r2, r2, #14
 80037a2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f202 	lsl.w	r2, r1, r2
 80037c2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
    } 
  }
  return status;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fe:	e154      	b.n	8003aaa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	2101      	movs	r1, #1
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8146 	beq.w	8003aa4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d005      	beq.n	8003830 <HAL_GPIO_Init+0x40>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d130      	bne.n	8003892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003866:	2201      	movs	r2, #1
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 0201 	and.w	r2, r3, #1
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b03      	cmp	r3, #3
 800389c:	d017      	beq.n	80038ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d123      	bne.n	8003922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	08da      	lsrs	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3208      	adds	r2, #8
 80038e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	220f      	movs	r2, #15
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	08da      	lsrs	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3208      	adds	r2, #8
 800391c:	6939      	ldr	r1, [r7, #16]
 800391e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	2203      	movs	r2, #3
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0203 	and.w	r2, r3, #3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a0 	beq.w	8003aa4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003964:	4b58      	ldr	r3, [pc, #352]	; (8003ac8 <HAL_GPIO_Init+0x2d8>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	4a57      	ldr	r2, [pc, #348]	; (8003ac8 <HAL_GPIO_Init+0x2d8>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6193      	str	r3, [r2, #24]
 8003970:	4b55      	ldr	r3, [pc, #340]	; (8003ac8 <HAL_GPIO_Init+0x2d8>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800397c:	4a53      	ldr	r2, [pc, #332]	; (8003acc <HAL_GPIO_Init+0x2dc>)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3302      	adds	r3, #2
 8003984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	220f      	movs	r2, #15
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039a6:	d019      	beq.n	80039dc <HAL_GPIO_Init+0x1ec>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a49      	ldr	r2, [pc, #292]	; (8003ad0 <HAL_GPIO_Init+0x2e0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <HAL_GPIO_Init+0x1e8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a48      	ldr	r2, [pc, #288]	; (8003ad4 <HAL_GPIO_Init+0x2e4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00d      	beq.n	80039d4 <HAL_GPIO_Init+0x1e4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a47      	ldr	r2, [pc, #284]	; (8003ad8 <HAL_GPIO_Init+0x2e8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <HAL_GPIO_Init+0x1e0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a46      	ldr	r2, [pc, #280]	; (8003adc <HAL_GPIO_Init+0x2ec>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <HAL_GPIO_Init+0x1dc>
 80039c8:	2304      	movs	r3, #4
 80039ca:	e008      	b.n	80039de <HAL_GPIO_Init+0x1ee>
 80039cc:	2305      	movs	r3, #5
 80039ce:	e006      	b.n	80039de <HAL_GPIO_Init+0x1ee>
 80039d0:	2303      	movs	r3, #3
 80039d2:	e004      	b.n	80039de <HAL_GPIO_Init+0x1ee>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e002      	b.n	80039de <HAL_GPIO_Init+0x1ee>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_GPIO_Init+0x1ee>
 80039dc:	2300      	movs	r3, #0
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	f002 0203 	and.w	r2, r2, #3
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	4093      	lsls	r3, r2
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039ee:	4937      	ldr	r1, [pc, #220]	; (8003acc <HAL_GPIO_Init+0x2dc>)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fc:	4b38      	ldr	r3, [pc, #224]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a20:	4a2f      	ldr	r2, [pc, #188]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a26:	4b2e      	ldr	r3, [pc, #184]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a4a:	4a25      	ldr	r2, [pc, #148]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a50:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a74:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a9e:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <HAL_GPIO_Init+0x2f0>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f47f aea3 	bne.w	8003800 <HAL_GPIO_Init+0x10>
  }
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	48000400 	.word	0x48000400
 8003ad4:	48000800 	.word	0x48000800
 8003ad8:	48000c00 	.word	0x48000c00
 8003adc:	48001000 	.word	0x48001000
 8003ae0:	40010400 	.word	0x40010400

08003ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
 8003b00:	e001      	b.n	8003b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
 8003b20:	4613      	mov	r3, r2
 8003b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b24:	787b      	ldrb	r3, [r7, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b30:	e002      	b.n	8003b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	041a      	lsls	r2, r3, #16
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43d9      	mvns	r1, r3
 8003b62:	887b      	ldrh	r3, [r7, #2]
 8003b64:	400b      	ands	r3, r1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b8e:	4a05      	ldr	r2, [pc, #20]	; (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd f886 	bl	8000ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e081      	b.n	8003cbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fe fa44 	bl	800205c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e006      	b.n	8003c30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d104      	bne.n	8003c42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d138      	bne.n	8003d4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e032      	b.n	8003d50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2224      	movs	r2, #36	; 0x24
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d139      	bne.n	8003de6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e033      	b.n	8003de8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e000      	b.n	8003de8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df6:	b08b      	sub	sp, #44	; 0x2c
 8003df8:	af06      	add	r7, sp, #24
 8003dfa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0c4      	b.n	8003f90 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe fb44 	bl	80024a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2203      	movs	r2, #3
 8003e24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 facb 	bl	80083c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	e040      	b.n	8003eba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	3301      	adds	r3, #1
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	440b      	add	r3, r1
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	440b      	add	r3, r1
 8003e72:	3303      	adds	r3, #3
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	440b      	add	r3, r1
 8003e86:	3338      	adds	r3, #56	; 0x38
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	440b      	add	r3, r1
 8003e9a:	333c      	adds	r3, #60	; 0x3c
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	440b      	add	r3, r1
 8003eae:	3340      	adds	r3, #64	; 0x40
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3b9      	bcc.n	8003e38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e044      	b.n	8003f54 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	440b      	add	r3, r1
 8003f04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	440b      	add	r3, r1
 8003f30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	3301      	adds	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	7bfa      	ldrb	r2, [r7, #15]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3b5      	bcc.n	8003eca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	687e      	ldr	r6, [r7, #4]
 8003f66:	466d      	mov	r5, sp
 8003f68:	f106 0410 	add.w	r4, r6, #16
 8003f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	1d33      	adds	r3, r6, #4
 8003f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f78:	6838      	ldr	r0, [r7, #0]
 8003f7a:	f004 fa40 	bl	80083fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f001 b823 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 817d 	beq.w	80042ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fd4:	4bbc      	ldr	r3, [pc, #752]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d00c      	beq.n	8003ffa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fe0:	4bb9      	ldr	r3, [pc, #740]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d15c      	bne.n	80040a6 <HAL_RCC_OscConfig+0x10e>
 8003fec:	4bb6      	ldr	r3, [pc, #728]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d155      	bne.n	80040a6 <HAL_RCC_OscConfig+0x10e>
 8003ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ffe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800400e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d102      	bne.n	800402c <HAL_RCC_OscConfig+0x94>
 8004026:	4ba8      	ldr	r3, [pc, #672]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	e015      	b.n	8004058 <HAL_RCC_OscConfig+0xc0>
 800402c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004030:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004044:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004048:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800404c:	fa93 f3a3 	rbit	r3, r3
 8004050:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004054:	4b9c      	ldr	r3, [pc, #624]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800405c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004060:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004064:	fa92 f2a2 	rbit	r2, r2
 8004068:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800406c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004070:	fab2 f282 	clz	r2, r2
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	f042 0220 	orr.w	r2, r2, #32
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	f002 021f 	and.w	r2, r2, #31
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f202 	lsl.w	r2, r1, r2
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 811f 	beq.w	80042cc <HAL_RCC_OscConfig+0x334>
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 8116 	bne.w	80042cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f000 bfaf 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x12e>
 80040b8:	4b83      	ldr	r3, [pc, #524]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a82      	ldr	r2, [pc, #520]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 80040be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e036      	b.n	8004134 <HAL_RCC_OscConfig+0x19c>
 80040c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x158>
 80040d6:	4b7c      	ldr	r3, [pc, #496]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7b      	ldr	r2, [pc, #492]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b79      	ldr	r3, [pc, #484]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a78      	ldr	r2, [pc, #480]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 80040e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e021      	b.n	8004134 <HAL_RCC_OscConfig+0x19c>
 80040f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0x184>
 8004102:	4b71      	ldr	r3, [pc, #452]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a70      	ldr	r2, [pc, #448]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b6e      	ldr	r3, [pc, #440]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6d      	ldr	r2, [pc, #436]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0x19c>
 800411c:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a69      	ldr	r2, [pc, #420]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a66      	ldr	r2, [pc, #408]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 800412e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004132:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004134:	4b64      	ldr	r3, [pc, #400]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	f023 020f 	bic.w	r2, r3, #15
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	495f      	ldr	r1, [pc, #380]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 800414a:	4313      	orrs	r3, r2
 800414c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d059      	beq.n	8004212 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fe fbbd 	bl	80028dc <HAL_GetTick>
 8004162:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	e00a      	b.n	800417e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004168:	f7fe fbb8 	bl	80028dc <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b64      	cmp	r3, #100	; 0x64
 8004176:	d902      	bls.n	800417e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	f000 bf43 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>
 800417e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004182:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004192:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d102      	bne.n	80041b0 <HAL_RCC_OscConfig+0x218>
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	e015      	b.n	80041dc <HAL_RCC_OscConfig+0x244>
 80041b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80041c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80041d8:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80041e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80041e8:	fa92 f2a2 	rbit	r2, r2
 80041ec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80041f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80041f4:	fab2 f282 	clz	r2, r2
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	f042 0220 	orr.w	r2, r2, #32
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	f002 021f 	and.w	r2, r2, #31
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ab      	beq.n	8004168 <HAL_RCC_OscConfig+0x1d0>
 8004210:	e05d      	b.n	80042ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe fb63 	bl	80028dc <HAL_GetTick>
 8004216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	e00a      	b.n	8004232 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421c:	f7fe fb5e 	bl	80028dc <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	; 0x64
 800422a:	d902      	bls.n	8004232 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	f000 bee9 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>
 8004232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004236:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004246:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_RCC_OscConfig+0x2cc>
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	e015      	b.n	8004290 <HAL_RCC_OscConfig+0x2f8>
 8004264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004268:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800427c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004280:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <HAL_RCC_OscConfig+0x330>)
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004294:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004298:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800429c:	fa92 f2a2 	rbit	r2, r2
 80042a0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80042a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80042a8:	fab2 f282 	clz	r2, r2
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	f042 0220 	orr.w	r2, r2, #32
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	f002 021f 	and.w	r2, r2, #31
 80042b8:	2101      	movs	r1, #1
 80042ba:	fa01 f202 	lsl.w	r2, r1, r2
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ab      	bne.n	800421c <HAL_RCC_OscConfig+0x284>
 80042c4:	e003      	b.n	80042ce <HAL_RCC_OscConfig+0x336>
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 817d 	beq.w	80045de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042e4:	4ba6      	ldr	r3, [pc, #664]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042f0:	4ba3      	ldr	r3, [pc, #652]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d172      	bne.n	80043e2 <HAL_RCC_OscConfig+0x44a>
 80042fc:	4ba0      	ldr	r3, [pc, #640]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d16c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x44a>
 8004308:	2302      	movs	r3, #2
 800430a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800431a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	fab3 f383 	clz	r3, r3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d102      	bne.n	8004338 <HAL_RCC_OscConfig+0x3a0>
 8004332:	4b93      	ldr	r3, [pc, #588]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	e013      	b.n	8004360 <HAL_RCC_OscConfig+0x3c8>
 8004338:	2302      	movs	r3, #2
 800433a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800434a:	2302      	movs	r3, #2
 800434c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004350:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800435c:	4b88      	ldr	r3, [pc, #544]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2202      	movs	r2, #2
 8004362:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004366:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800436a:	fa92 f2a2 	rbit	r2, r2
 800436e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004372:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004376:	fab2 f282 	clz	r2, r2
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	f042 0220 	orr.w	r2, r2, #32
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	f002 021f 	and.w	r2, r2, #31
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f202 	lsl.w	r2, r1, r2
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCC_OscConfig+0x410>
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d002      	beq.n	80043a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f000 be2e 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b75      	ldr	r3, [pc, #468]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	21f8      	movs	r1, #248	; 0xf8
 80043be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80043c6:	fa91 f1a1 	rbit	r1, r1
 80043ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80043ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80043d2:	fab1 f181 	clz	r1, r1
 80043d6:	b2c9      	uxtb	r1, r1
 80043d8:	408b      	lsls	r3, r1
 80043da:	4969      	ldr	r1, [pc, #420]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e0:	e0fd      	b.n	80045de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8088 	beq.w	8004504 <HAL_RCC_OscConfig+0x56c>
 80043f4:	2301      	movs	r3, #1
 80043f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004406:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	461a      	mov	r2, r3
 800441c:	2301      	movs	r3, #1
 800441e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fe fa5c 	bl	80028dc <HAL_GetTick>
 8004424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800442a:	f7fe fa57 	bl	80028dc <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d902      	bls.n	8004440 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	f000 bde2 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>
 8004440:	2302      	movs	r3, #2
 8004442:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004452:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d102      	bne.n	8004470 <HAL_RCC_OscConfig+0x4d8>
 800446a:	4b45      	ldr	r3, [pc, #276]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	e013      	b.n	8004498 <HAL_RCC_OscConfig+0x500>
 8004470:	2302      	movs	r3, #2
 8004472:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004482:	2302      	movs	r3, #2
 8004484:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004488:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004494:	4b3a      	ldr	r3, [pc, #232]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2202      	movs	r2, #2
 800449a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800449e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80044a2:	fa92 f2a2 	rbit	r2, r2
 80044a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80044aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80044ae:	fab2 f282 	clz	r2, r2
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	f042 0220 	orr.w	r2, r2, #32
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	f002 021f 	and.w	r2, r2, #31
 80044be:	2101      	movs	r1, #1
 80044c0:	fa01 f202 	lsl.w	r2, r1, r2
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0af      	beq.n	800442a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ca:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	21f8      	movs	r1, #248	; 0xf8
 80044e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044e8:	fa91 f1a1 	rbit	r1, r1
 80044ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80044f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80044f4:	fab1 f181 	clz	r1, r1
 80044f8:	b2c9      	uxtb	r1, r1
 80044fa:	408b      	lsls	r3, r1
 80044fc:	4920      	ldr	r1, [pc, #128]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
 8004502:	e06c      	b.n	80045de <HAL_RCC_OscConfig+0x646>
 8004504:	2301      	movs	r3, #1
 8004506:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800450e:	fa93 f3a3 	rbit	r3, r3
 8004512:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004516:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	461a      	mov	r2, r3
 800452c:	2300      	movs	r3, #0
 800452e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fe f9d4 	bl	80028dc <HAL_GetTick>
 8004534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800453a:	f7fe f9cf 	bl	80028dc <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	f000 bd5a 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>
 8004550:	2302      	movs	r3, #2
 8004552:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b01      	cmp	r3, #1
 8004578:	d104      	bne.n	8004584 <HAL_RCC_OscConfig+0x5ec>
 800457a:	4b01      	ldr	r3, [pc, #4]	; (8004580 <HAL_RCC_OscConfig+0x5e8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	e015      	b.n	80045ac <HAL_RCC_OscConfig+0x614>
 8004580:	40021000 	.word	0x40021000
 8004584:	2302      	movs	r3, #2
 8004586:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800458e:	fa93 f3a3 	rbit	r3, r3
 8004592:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004596:	2302      	movs	r3, #2
 8004598:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800459c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045a8:	4bc8      	ldr	r3, [pc, #800]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2202      	movs	r2, #2
 80045ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80045b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80045b6:	fa92 f2a2 	rbit	r2, r2
 80045ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80045be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80045c2:	fab2 f282 	clz	r2, r2
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	f042 0220 	orr.w	r2, r2, #32
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	f002 021f 	and.w	r2, r2, #31
 80045d2:	2101      	movs	r1, #1
 80045d4:	fa01 f202 	lsl.w	r2, r1, r2
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ad      	bne.n	800453a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8110 	beq.w	8004814 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d079      	beq.n	80046f8 <HAL_RCC_OscConfig+0x760>
 8004604:	2301      	movs	r3, #1
 8004606:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	4bab      	ldr	r3, [pc, #684]	; (80048d0 <HAL_RCC_OscConfig+0x938>)
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	461a      	mov	r2, r3
 800462a:	2301      	movs	r3, #1
 800462c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462e:	f7fe f955 	bl	80028dc <HAL_GetTick>
 8004632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004636:	e00a      	b.n	800464e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004638:	f7fe f950 	bl	80028dc <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d902      	bls.n	800464e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	f000 bcdb 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>
 800464e:	2302      	movs	r3, #2
 8004650:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004664:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004668:	2202      	movs	r2, #2
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004670:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	fa93 f2a3 	rbit	r2, r3
 800467a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800468c:	2202      	movs	r2, #2
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	fa93 f2a3 	rbit	r2, r3
 800469e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a8:	4b88      	ldr	r3, [pc, #544]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 80046aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046b4:	2102      	movs	r1, #2
 80046b6:	6019      	str	r1, [r3, #0]
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	fa93 f1a3 	rbit	r1, r3
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046ce:	6019      	str	r1, [r3, #0]
  return result;
 80046d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f303 	lsl.w	r3, r1, r3
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0a0      	beq.n	8004638 <HAL_RCC_OscConfig+0x6a0>
 80046f6:	e08d      	b.n	8004814 <HAL_RCC_OscConfig+0x87c>
 80046f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004708:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	fa93 f2a3 	rbit	r2, r3
 8004712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004716:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800471a:	601a      	str	r2, [r3, #0]
  return result;
 800471c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004720:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004724:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	4b68      	ldr	r3, [pc, #416]	; (80048d0 <HAL_RCC_OscConfig+0x938>)
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	461a      	mov	r2, r3
 8004736:	2300      	movs	r3, #0
 8004738:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fe f8cf 	bl	80028dc <HAL_GetTick>
 800473e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004744:	f7fe f8ca 	bl	80028dc <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d902      	bls.n	800475a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	f000 bc55 	b.w	8005004 <HAL_RCC_OscConfig+0x106c>
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004762:	2202      	movs	r2, #2
 8004764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	fa93 f2a3 	rbit	r2, r3
 8004774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004778:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004782:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004786:	2202      	movs	r2, #2
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	fa93 f2a3 	rbit	r2, r3
 8004798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047aa:	2202      	movs	r2, #2
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	fa93 f2a3 	rbit	r2, r3
 80047bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80047c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c6:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 80047c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047d2:	2102      	movs	r1, #2
 80047d4:	6019      	str	r1, [r3, #0]
 80047d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	fa93 f1a3 	rbit	r1, r3
 80047e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047ec:	6019      	str	r1, [r3, #0]
  return result;
 80047ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	2101      	movs	r1, #1
 800480a:	fa01 f303 	lsl.w	r3, r1, r3
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d197      	bne.n	8004744 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 81a1 	beq.w	8004b6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4a22      	ldr	r2, [pc, #136]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004846:	61d3      	str	r3, [r2, #28]
 8004848:	4b20      	ldr	r3, [pc, #128]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004854:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004862:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <HAL_RCC_OscConfig+0x93c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11a      	bne.n	80048ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <HAL_RCC_OscConfig+0x93c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <HAL_RCC_OscConfig+0x93c>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fe f82b 	bl	80028dc <HAL_GetTick>
 8004886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488a:	e009      	b.n	80048a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488c:	f7fe f826 	bl	80028dc <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b64      	cmp	r3, #100	; 0x64
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e3b1      	b.n	8005004 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x93c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ef      	beq.n	800488c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10d      	bne.n	80048d8 <HAL_RCC_OscConfig+0x940>
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	4a02      	ldr	r2, [pc, #8]	; (80048cc <HAL_RCC_OscConfig+0x934>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6213      	str	r3, [r2, #32]
 80048c8:	e03c      	b.n	8004944 <HAL_RCC_OscConfig+0x9ac>
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	10908120 	.word	0x10908120
 80048d4:	40007000 	.word	0x40007000
 80048d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x96a>
 80048e8:	4bc1      	ldr	r3, [pc, #772]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4ac0      	ldr	r2, [pc, #768]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	6213      	str	r3, [r2, #32]
 80048f4:	4bbe      	ldr	r3, [pc, #760]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4abd      	ldr	r2, [pc, #756]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 80048fa:	f023 0304 	bic.w	r3, r3, #4
 80048fe:	6213      	str	r3, [r2, #32]
 8004900:	e020      	b.n	8004944 <HAL_RCC_OscConfig+0x9ac>
 8004902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b05      	cmp	r3, #5
 8004910:	d10c      	bne.n	800492c <HAL_RCC_OscConfig+0x994>
 8004912:	4bb7      	ldr	r3, [pc, #732]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4ab6      	ldr	r2, [pc, #728]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004918:	f043 0304 	orr.w	r3, r3, #4
 800491c:	6213      	str	r3, [r2, #32]
 800491e:	4bb4      	ldr	r3, [pc, #720]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	4ab3      	ldr	r2, [pc, #716]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	6213      	str	r3, [r2, #32]
 800492a:	e00b      	b.n	8004944 <HAL_RCC_OscConfig+0x9ac>
 800492c:	4bb0      	ldr	r3, [pc, #704]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	4aaf      	ldr	r2, [pc, #700]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	6213      	str	r3, [r2, #32]
 8004938:	4bad      	ldr	r3, [pc, #692]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4aac      	ldr	r2, [pc, #688]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 800493e:	f023 0304 	bic.w	r3, r3, #4
 8004942:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8081 	beq.w	8004a58 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004956:	f7fd ffc1 	bl	80028dc <HAL_GetTick>
 800495a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fd ffbc 	bl	80028dc <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e345      	b.n	8005004 <HAL_RCC_OscConfig+0x106c>
 8004978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004980:	2202      	movs	r2, #2
 8004982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004988:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	fa93 f2a3 	rbit	r2, r3
 8004992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004996:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80049a4:	2202      	movs	r2, #2
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	fa93 f2a3 	rbit	r2, r3
 80049b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80049be:	601a      	str	r2, [r3, #0]
  return result;
 80049c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80049c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d102      	bne.n	80049e4 <HAL_RCC_OscConfig+0xa4c>
 80049de:	4b84      	ldr	r3, [pc, #528]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	e013      	b.n	8004a0c <HAL_RCC_OscConfig+0xa74>
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049ec:	2202      	movs	r2, #2
 80049ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	fa93 f2a3 	rbit	r2, r3
 80049fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	4b79      	ldr	r3, [pc, #484]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004a14:	2102      	movs	r1, #2
 8004a16:	6011      	str	r1, [r2, #0]
 8004a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a1c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	fa92 f1a2 	rbit	r1, r2
 8004a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004a2e:	6011      	str	r1, [r2, #0]
  return result;
 8004a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a34:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	fab2 f282 	clz	r2, r2
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	f002 021f 	and.w	r2, r2, #31
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d084      	beq.n	8004960 <HAL_RCC_OscConfig+0x9c8>
 8004a56:	e07f      	b.n	8004b58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a58:	f7fd ff40 	bl	80028dc <HAL_GetTick>
 8004a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a60:	e00b      	b.n	8004a7a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fd ff3b 	bl	80028dc <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e2c4      	b.n	8005004 <HAL_RCC_OscConfig+0x106c>
 8004a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a82:	2202      	movs	r2, #2
 8004a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	fa93 f2a3 	rbit	r2, r3
 8004a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	fa93 f2a3 	rbit	r2, r3
 8004ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ac0:	601a      	str	r2, [r3, #0]
  return result;
 8004ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004aca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f043 0302 	orr.w	r3, r3, #2
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d102      	bne.n	8004ae6 <HAL_RCC_OscConfig+0xb4e>
 8004ae0:	4b43      	ldr	r3, [pc, #268]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	e013      	b.n	8004b0e <HAL_RCC_OscConfig+0xb76>
 8004ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004aee:	2202      	movs	r2, #2
 8004af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	fa93 f2a3 	rbit	r2, r3
 8004b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004b16:	2102      	movs	r1, #2
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	fa92 f1a2 	rbit	r1, r2
 8004b28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b30:	6011      	str	r1, [r2, #0]
  return result;
 8004b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b36:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	fab2 f282 	clz	r2, r2
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	f002 021f 	and.w	r2, r2, #31
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d184      	bne.n	8004a62 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b60:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8242 	beq.w	8005002 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b7e:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <HAL_RCC_OscConfig+0xc58>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	f000 8213 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	f040 8162 	bne.w	8004e62 <HAL_RCC_OscConfig+0xeca>
 8004b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	fa93 f2a3 	rbit	r2, r3
 8004bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004bc2:	601a      	str	r2, [r3, #0]
  return result;
 8004bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004bcc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bce:	fab3 f383 	clz	r3, r3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	2300      	movs	r3, #0
 8004be2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fd fe7a 	bl	80028dc <HAL_GetTick>
 8004be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bec:	e00c      	b.n	8004c08 <HAL_RCC_OscConfig+0xc70>
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fd fe72 	bl	80028dc <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e1fd      	b.n	8005004 <HAL_RCC_OscConfig+0x106c>
 8004c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	fa93 f2a3 	rbit	r2, r3
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c2c:	601a      	str	r2, [r3, #0]
  return result;
 8004c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c38:	fab3 f383 	clz	r3, r3
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d102      	bne.n	8004c52 <HAL_RCC_OscConfig+0xcba>
 8004c4c:	4bb0      	ldr	r3, [pc, #704]	; (8004f10 <HAL_RCC_OscConfig+0xf78>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	e027      	b.n	8004ca2 <HAL_RCC_OscConfig+0xd0a>
 8004c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c56:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c64:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	fa93 f2a3 	rbit	r2, r3
 8004c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c72:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	fa93 f2a3 	rbit	r2, r3
 8004c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	4b9c      	ldr	r3, [pc, #624]	; (8004f10 <HAL_RCC_OscConfig+0xf78>)
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ca6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004caa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cae:	6011      	str	r1, [r2, #0]
 8004cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cb4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	fa92 f1a2 	rbit	r1, r2
 8004cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cc2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004cc6:	6011      	str	r1, [r2, #0]
  return result;
 8004cc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ccc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	fab2 f282 	clz	r2, r2
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	f042 0220 	orr.w	r2, r2, #32
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	f002 021f 	and.w	r2, r2, #31
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d182      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cee:	4b88      	ldr	r3, [pc, #544]	; (8004f10 <HAL_RCC_OscConfig+0xf78>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	497f      	ldr	r1, [pc, #508]	; (8004f10 <HAL_RCC_OscConfig+0xf78>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
 8004d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004d1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d28:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	fa93 f2a3 	rbit	r2, r3
 8004d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d36:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d3a:	601a      	str	r2, [r3, #0]
  return result;
 8004d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d40:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d44:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	461a      	mov	r2, r3
 8004d58:	2301      	movs	r3, #1
 8004d5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fdbe 	bl	80028dc <HAL_GetTick>
 8004d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d64:	e009      	b.n	8004d7a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fd fdb9 	bl	80028dc <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e144      	b.n	8005004 <HAL_RCC_OscConfig+0x106c>
 8004d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	fa93 f2a3 	rbit	r2, r3
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d9e:	601a      	str	r2, [r3, #0]
  return result;
 8004da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004da8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xe2c>
 8004dbe:	4b54      	ldr	r3, [pc, #336]	; (8004f10 <HAL_RCC_OscConfig+0xf78>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	e027      	b.n	8004e14 <HAL_RCC_OscConfig+0xe7c>
 8004dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	fa93 f2a3 	rbit	r2, r3
 8004de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	fa93 f2a3 	rbit	r2, r3
 8004e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <HAL_RCC_OscConfig+0xf78>)
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e18:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004e1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e20:	6011      	str	r1, [r2, #0]
 8004e22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e26:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	fa92 f1a2 	rbit	r1, r2
 8004e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e34:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e38:	6011      	str	r1, [r2, #0]
  return result;
 8004e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e3e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	fab2 f282 	clz	r2, r2
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	f042 0220 	orr.w	r2, r2, #32
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	f002 021f 	and.w	r2, r2, #31
 8004e54:	2101      	movs	r1, #1
 8004e56:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d082      	beq.n	8004d66 <HAL_RCC_OscConfig+0xdce>
 8004e60:	e0cf      	b.n	8005002 <HAL_RCC_OscConfig+0x106a>
 8004e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e66:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e74:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	fa93 f2a3 	rbit	r2, r3
 8004e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e82:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e86:	601a      	str	r2, [r3, #0]
  return result;
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fd fd18 	bl	80028dc <HAL_GetTick>
 8004eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb0:	e009      	b.n	8004ec6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fd fd13 	bl	80028dc <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e09e      	b.n	8005004 <HAL_RCC_OscConfig+0x106c>
 8004ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	fa93 f2a3 	rbit	r2, r3
 8004ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004eea:	601a      	str	r2, [r3, #0]
  return result;
 8004eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef6:	fab3 f383 	clz	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d104      	bne.n	8004f14 <HAL_RCC_OscConfig+0xf7c>
 8004f0a:	4b01      	ldr	r3, [pc, #4]	; (8004f10 <HAL_RCC_OscConfig+0xf78>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	e029      	b.n	8004f64 <HAL_RCC_OscConfig+0xfcc>
 8004f10:	40021000 	.word	0x40021000
 8004f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f26:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	fa93 f2a3 	rbit	r2, r3
 8004f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	fa93 f2a3 	rbit	r2, r3
 8004f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	4b2b      	ldr	r3, [pc, #172]	; (8005010 <HAL_RCC_OscConfig+0x1078>)
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f68:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f70:	6011      	str	r1, [r2, #0]
 8004f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f76:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	fa92 f1a2 	rbit	r1, r2
 8004f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f84:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f88:	6011      	str	r1, [r2, #0]
  return result;
 8004f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f8e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	fab2 f282 	clz	r2, r2
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	f042 0220 	orr.w	r2, r2, #32
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	f002 021f 	and.w	r2, r2, #31
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d180      	bne.n	8004eb2 <HAL_RCC_OscConfig+0xf1a>
 8004fb0:	e027      	b.n	8005002 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e01e      	b.n	8005004 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <HAL_RCC_OscConfig+0x1078>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fd2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d10b      	bne.n	8004ffe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004fe6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d001      	beq.n	8005002 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000

08005014 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b09e      	sub	sp, #120	; 0x78
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e162      	b.n	80052f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800502c:	4b90      	ldr	r3, [pc, #576]	; (8005270 <HAL_RCC_ClockConfig+0x25c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d910      	bls.n	800505c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <HAL_RCC_ClockConfig+0x25c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 0207 	bic.w	r2, r3, #7
 8005042:	498b      	ldr	r1, [pc, #556]	; (8005270 <HAL_RCC_ClockConfig+0x25c>)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b89      	ldr	r3, [pc, #548]	; (8005270 <HAL_RCC_ClockConfig+0x25c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e14a      	b.n	80052f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b82      	ldr	r3, [pc, #520]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	497f      	ldr	r1, [pc, #508]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80dc 	beq.w	8005240 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d13c      	bne.n	800510a <HAL_RCC_ClockConfig+0xf6>
 8005090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005094:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800509e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a0:	fab3 f383 	clz	r3, r3
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <HAL_RCC_ClockConfig+0xa6>
 80050b4:	4b6f      	ldr	r3, [pc, #444]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	e00f      	b.n	80050da <HAL_RCC_ClockConfig+0xc6>
 80050ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c2:	fa93 f3a3 	rbit	r3, r3
 80050c6:	667b      	str	r3, [r7, #100]	; 0x64
 80050c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050cc:	663b      	str	r3, [r7, #96]	; 0x60
 80050ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d6:	4b67      	ldr	r3, [pc, #412]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050de:	65ba      	str	r2, [r7, #88]	; 0x58
 80050e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050e2:	fa92 f2a2 	rbit	r2, r2
 80050e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80050e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ea:	fab2 f282 	clz	r2, r2
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	f042 0220 	orr.w	r2, r2, #32
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	f002 021f 	and.w	r2, r2, #31
 80050fa:	2101      	movs	r1, #1
 80050fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d17b      	bne.n	80051fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0f3      	b.n	80052f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d13c      	bne.n	800518c <HAL_RCC_ClockConfig+0x178>
 8005112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005116:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511a:	fa93 f3a3 	rbit	r3, r3
 800511e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005122:	fab3 f383 	clz	r3, r3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d102      	bne.n	800513c <HAL_RCC_ClockConfig+0x128>
 8005136:	4b4f      	ldr	r3, [pc, #316]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	e00f      	b.n	800515c <HAL_RCC_ClockConfig+0x148>
 800513c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005140:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005144:	fa93 f3a3 	rbit	r3, r3
 8005148:	647b      	str	r3, [r7, #68]	; 0x44
 800514a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800514e:	643b      	str	r3, [r7, #64]	; 0x40
 8005150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005152:	fa93 f3a3 	rbit	r3, r3
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005158:	4b46      	ldr	r3, [pc, #280]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005160:	63ba      	str	r2, [r7, #56]	; 0x38
 8005162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005164:	fa92 f2a2 	rbit	r2, r2
 8005168:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800516a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800516c:	fab2 f282 	clz	r2, r2
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	f042 0220 	orr.w	r2, r2, #32
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	f002 021f 	and.w	r2, r2, #31
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f202 	lsl.w	r2, r1, r2
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d13a      	bne.n	80051fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0b2      	b.n	80052f2 <HAL_RCC_ClockConfig+0x2de>
 800518c:	2302      	movs	r3, #2
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d102      	bne.n	80051b4 <HAL_RCC_ClockConfig+0x1a0>
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	e00d      	b.n	80051d0 <HAL_RCC_ClockConfig+0x1bc>
 80051b4:	2302      	movs	r3, #2
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	2302      	movs	r3, #2
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	fa93 f3a3 	rbit	r3, r3
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	4b29      	ldr	r3, [pc, #164]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2202      	movs	r2, #2
 80051d2:	61ba      	str	r2, [r7, #24]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	fa92 f2a2 	rbit	r2, r2
 80051da:	617a      	str	r2, [r7, #20]
  return result;
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	fab2 f282 	clz	r2, r2
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	f042 0220 	orr.w	r2, r2, #32
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	f002 021f 	and.w	r2, r2, #31
 80051ee:	2101      	movs	r1, #1
 80051f0:	fa01 f202 	lsl.w	r2, r1, r2
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e079      	b.n	80052f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f023 0203 	bic.w	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	491a      	ldr	r1, [pc, #104]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005210:	f7fd fb64 	bl	80028dc <HAL_GetTick>
 8005214:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005216:	e00a      	b.n	800522e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005218:	f7fd fb60 	bl	80028dc <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e061      	b.n	80052f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_RCC_ClockConfig+0x260>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 020c 	and.w	r2, r3, #12
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	429a      	cmp	r2, r3
 800523e:	d1eb      	bne.n	8005218 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_ClockConfig+0x25c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d214      	bcs.n	8005278 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <HAL_RCC_ClockConfig+0x25c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 0207 	bic.w	r2, r3, #7
 8005256:	4906      	ldr	r1, [pc, #24]	; (8005270 <HAL_RCC_ClockConfig+0x25c>)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <HAL_RCC_ClockConfig+0x25c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e040      	b.n	80052f2 <HAL_RCC_ClockConfig+0x2de>
 8005270:	40022000 	.word	0x40022000
 8005274:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_RCC_ClockConfig+0x2e8>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	491a      	ldr	r1, [pc, #104]	; (80052fc <HAL_RCC_ClockConfig+0x2e8>)
 8005292:	4313      	orrs	r3, r2
 8005294:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a2:	4b16      	ldr	r3, [pc, #88]	; (80052fc <HAL_RCC_ClockConfig+0x2e8>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4912      	ldr	r1, [pc, #72]	; (80052fc <HAL_RCC_ClockConfig+0x2e8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052b6:	f000 f829 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052ba:	4601      	mov	r1, r0
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_RCC_ClockConfig+0x2e8>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c4:	22f0      	movs	r2, #240	; 0xf0
 80052c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	fa92 f2a2 	rbit	r2, r2
 80052ce:	60fa      	str	r2, [r7, #12]
  return result;
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	fab2 f282 	clz	r2, r2
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	40d3      	lsrs	r3, r2
 80052da:	4a09      	ldr	r2, [pc, #36]	; (8005300 <HAL_RCC_ClockConfig+0x2ec>)
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
 80052de:	fa21 f303 	lsr.w	r3, r1, r3
 80052e2:	4a08      	ldr	r2, [pc, #32]	; (8005304 <HAL_RCC_ClockConfig+0x2f0>)
 80052e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <HAL_RCC_ClockConfig+0x2f4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd f920 	bl	8002530 <HAL_InitTick>
  
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3778      	adds	r7, #120	; 0x78
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000
 8005300:	0800d66c 	.word	0x0800d66c
 8005304:	20000018 	.word	0x20000018
 8005308:	2000001c 	.word	0x2000001c

0800530c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b08b      	sub	sp, #44	; 0x2c
 8005310:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	2300      	movs	r3, #0
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005326:	4b29      	ldr	r3, [pc, #164]	; (80053cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b04      	cmp	r3, #4
 8005334:	d002      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x30>
 8005336:	2b08      	cmp	r3, #8
 8005338:	d003      	beq.n	8005342 <HAL_RCC_GetSysClockFreq+0x36>
 800533a:	e03c      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800533c:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800533e:	623b      	str	r3, [r7, #32]
      break;
 8005340:	e03c      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005348:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800534c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	fa92 f2a2 	rbit	r2, r2
 8005354:	607a      	str	r2, [r7, #4]
  return result;
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	fab2 f282 	clz	r2, r2
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	40d3      	lsrs	r3, r2
 8005360:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005362:	5cd3      	ldrb	r3, [r2, r3]
 8005364:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005366:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	220f      	movs	r2, #15
 8005370:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	fa92 f2a2 	rbit	r2, r2
 8005378:	60fa      	str	r2, [r7, #12]
  return result;
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	fab2 f282 	clz	r2, r2
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	40d3      	lsrs	r3, r2
 8005384:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005386:	5cd3      	ldrb	r3, [r2, r3]
 8005388:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005394:	4a0e      	ldr	r2, [pc, #56]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	fbb2 f2f3 	udiv	r2, r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
 80053a4:	e004      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	623b      	str	r3, [r7, #32]
      break;
 80053b4:	e002      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053b8:	623b      	str	r3, [r7, #32]
      break;
 80053ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053bc:	6a3b      	ldr	r3, [r7, #32]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	372c      	adds	r7, #44	; 0x2c
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40021000 	.word	0x40021000
 80053d0:	007a1200 	.word	0x007a1200
 80053d4:	0800d684 	.word	0x0800d684
 80053d8:	0800d694 	.word	0x0800d694
 80053dc:	003d0900 	.word	0x003d0900

080053e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000018 	.word	0x20000018

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053fe:	f7ff ffef 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005402:	4601      	mov	r1, r0
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800540c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005410:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	fa92 f2a2 	rbit	r2, r2
 8005418:	603a      	str	r2, [r7, #0]
  return result;
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	fab2 f282 	clz	r2, r2
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	40d3      	lsrs	r3, r2
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40021000 	.word	0x40021000
 8005438:	0800d67c 	.word	0x0800d67c

0800543c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005442:	f7ff ffcd 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005446:	4601      	mov	r1, r0
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005450:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005454:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	fa92 f2a2 	rbit	r2, r2
 800545c:	603a      	str	r2, [r7, #0]
  return result;
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	fab2 f282 	clz	r2, r2
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	40d3      	lsrs	r3, r2
 8005468:	4a04      	ldr	r2, [pc, #16]	; (800547c <HAL_RCC_GetPCLK2Freq+0x40>)
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40021000 	.word	0x40021000
 800547c:	0800d67c 	.word	0x0800d67c

08005480 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	220f      	movs	r2, #15
 800548e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005490:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_RCC_GetClockConfig+0x5c>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 0203 	and.w	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800549c:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <HAL_RCC_GetClockConfig+0x5c>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80054a8:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <HAL_RCC_GetClockConfig+0x5c>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <HAL_RCC_GetClockConfig+0x5c>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80054c2:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <HAL_RCC_GetClockConfig+0x60>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0207 	and.w	r2, r3, #7
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	601a      	str	r2, [r3, #0]
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	40022000 	.word	0x40022000

080054e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b092      	sub	sp, #72	; 0x48
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80d4 	beq.w	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005508:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10e      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b4b      	ldr	r3, [pc, #300]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	4a4a      	ldr	r2, [pc, #296]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	61d3      	str	r3, [r2, #28]
 8005520:	4b48      	ldr	r3, [pc, #288]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005532:	4b45      	ldr	r3, [pc, #276]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d118      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800553e:	4b42      	ldr	r3, [pc, #264]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a41      	ldr	r2, [pc, #260]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005548:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554a:	f7fd f9c7 	bl	80028dc <HAL_GetTick>
 800554e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005550:	e008      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005552:	f7fd f9c3 	bl	80028dc <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b64      	cmp	r3, #100	; 0x64
 800555e:	d901      	bls.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e169      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005564:	4b38      	ldr	r3, [pc, #224]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005570:	4b34      	ldr	r3, [pc, #208]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8084 	beq.w	800568a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800558c:	429a      	cmp	r2, r3
 800558e:	d07c      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005590:	4b2c      	ldr	r3, [pc, #176]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800559a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	fa93 f3a3 	rbit	r3, r3
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055aa:	fab3 f383 	clz	r3, r3
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	4b26      	ldr	r3, [pc, #152]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	461a      	mov	r2, r3
 80055ba:	2301      	movs	r3, #1
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	fa93 f3a3 	rbit	r3, r3
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b1d      	ldr	r3, [pc, #116]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	461a      	mov	r2, r3
 80055de:	2300      	movs	r3, #0
 80055e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d04b      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f2:	f7fd f973 	bl	80028dc <HAL_GetTick>
 80055f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f8:	e00a      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fa:	f7fd f96f 	bl	80028dc <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f241 3288 	movw	r2, #5000	; 0x1388
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e113      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005610:	2302      	movs	r3, #2
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	fa93 f3a3 	rbit	r3, r3
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
 800561c:	2302      	movs	r3, #2
 800561e:	623b      	str	r3, [r7, #32]
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	fa93 f3a3 	rbit	r3, r3
 8005626:	61fb      	str	r3, [r7, #28]
  return result;
 8005628:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562a:	fab3 f383 	clz	r3, r3
 800562e:	b2db      	uxtb	r3, r3
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f043 0302 	orr.w	r3, r3, #2
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d108      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800563e:	4b01      	ldr	r3, [pc, #4]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	e00d      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005644:	40021000 	.word	0x40021000
 8005648:	40007000 	.word	0x40007000
 800564c:	10908100 	.word	0x10908100
 8005650:	2302      	movs	r3, #2
 8005652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	fa93 f3a3 	rbit	r3, r3
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	4b78      	ldr	r3, [pc, #480]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2202      	movs	r2, #2
 8005662:	613a      	str	r2, [r7, #16]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	fa92 f2a2 	rbit	r2, r2
 800566a:	60fa      	str	r2, [r7, #12]
  return result;
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	fab2 f282 	clz	r2, r2
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	f002 021f 	and.w	r2, r2, #31
 800567e:	2101      	movs	r1, #1
 8005680:	fa01 f202 	lsl.w	r2, r1, r2
 8005684:	4013      	ands	r3, r2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0b7      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800568a:	4b6d      	ldr	r3, [pc, #436]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	496a      	ldr	r1, [pc, #424]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005698:	4313      	orrs	r3, r2
 800569a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800569c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a4:	4b66      	ldr	r3, [pc, #408]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4a65      	ldr	r2, [pc, #404]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056bc:	4b60      	ldr	r3, [pc, #384]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	f023 0203 	bic.w	r2, r3, #3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	495d      	ldr	r1, [pc, #372]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056da:	4b59      	ldr	r3, [pc, #356]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	4956      	ldr	r1, [pc, #344]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056f8:	4b51      	ldr	r3, [pc, #324]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	494e      	ldr	r1, [pc, #312]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005716:	4b4a      	ldr	r3, [pc, #296]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	f023 0210 	bic.w	r2, r3, #16
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	4947      	ldr	r1, [pc, #284]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005724:	4313      	orrs	r3, r2
 8005726:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005734:	4b42      	ldr	r3, [pc, #264]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	493f      	ldr	r1, [pc, #252]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005752:	4b3b      	ldr	r3, [pc, #236]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	f023 0220 	bic.w	r2, r3, #32
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	4938      	ldr	r1, [pc, #224]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005760:	4313      	orrs	r3, r2
 8005762:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005770:	4b33      	ldr	r3, [pc, #204]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	4930      	ldr	r1, [pc, #192]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800577e:	4313      	orrs	r3, r2
 8005780:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800578e:	4b2c      	ldr	r3, [pc, #176]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	4929      	ldr	r1, [pc, #164]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057ac:	4b24      	ldr	r3, [pc, #144]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	4921      	ldr	r1, [pc, #132]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	491a      	ldr	r1, [pc, #104]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80057e8:	4b15      	ldr	r3, [pc, #84]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	4912      	ldr	r1, [pc, #72]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005806:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	490b      	ldr	r1, [pc, #44]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005814:	4313      	orrs	r3, r2
 8005816:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	4903      	ldr	r1, [pc, #12]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005832:	4313      	orrs	r3, r2
 8005834:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3748      	adds	r7, #72	; 0x48
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40021000 	.word	0x40021000

08005844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e09d      	b.n	8005992 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d108      	bne.n	8005870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005866:	d009      	beq.n	800587c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	61da      	str	r2, [r3, #28]
 800586e:	e005      	b.n	800587c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fc fc24 	bl	80020e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058bc:	d902      	bls.n	80058c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	e002      	b.n	80058ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058d2:	d007      	beq.n	80058e4 <HAL_SPI_Init+0xa0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	ea42 0103 	orr.w	r1, r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	0c1b      	lsrs	r3, r3, #16
 8005940:	f003 0204 	and.w	r2, r3, #4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005960:	ea42 0103 	orr.w	r1, r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e049      	b.n	8005a40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fc fc03 	bl	80021cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f000 fd7f 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d001      	beq.n	8005a60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e042      	b.n	8005ae6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <HAL_TIM_Base_Start+0xac>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d013      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <HAL_TIM_Base_Start+0xb0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1c      	ldr	r2, [pc, #112]	; (8005afc <HAL_TIM_Base_Start+0xb4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1a      	ldr	r2, [pc, #104]	; (8005b00 <HAL_TIM_Base_Start+0xb8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <HAL_TIM_Base_Start+0xbc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d115      	bne.n	8005ad0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <HAL_TIM_Base_Start+0xc0>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d015      	beq.n	8005ae2 <HAL_TIM_Base_Start+0x9a>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abc:	d011      	beq.n	8005ae2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0201 	orr.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ace:	e008      	b.n	8005ae2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e000      	b.n	8005ae4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	00010007 	.word	0x00010007

08005b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e04a      	b.n	8005bba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d018      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4e:	d013      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <HAL_TIM_Base_Start_IT+0xc0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00e      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d009      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d115      	bne.n	8005ba4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b06      	cmp	r3, #6
 8005b88:	d015      	beq.n	8005bb6 <HAL_TIM_Base_Start_IT+0xaa>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b90:	d011      	beq.n	8005bb6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	e008      	b.n	8005bb6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	e000      	b.n	8005bb8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40013400 	.word	0x40013400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	00010007 	.word	0x00010007

08005be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e049      	b.n	8005c86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fc faae 	bl	8002168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f000 fc5c 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <HAL_TIM_PWM_Start+0x24>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e03c      	b.n	8005d2e <HAL_TIM_PWM_Start+0x9e>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d109      	bne.n	8005cce <HAL_TIM_PWM_Start+0x3e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	bf14      	ite	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	2300      	moveq	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	e02f      	b.n	8005d2e <HAL_TIM_PWM_Start+0x9e>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d109      	bne.n	8005ce8 <HAL_TIM_PWM_Start+0x58>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	bf14      	ite	ne
 8005ce0:	2301      	movne	r3, #1
 8005ce2:	2300      	moveq	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	e022      	b.n	8005d2e <HAL_TIM_PWM_Start+0x9e>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b0c      	cmp	r3, #12
 8005cec:	d109      	bne.n	8005d02 <HAL_TIM_PWM_Start+0x72>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	bf14      	ite	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	2300      	moveq	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	e015      	b.n	8005d2e <HAL_TIM_PWM_Start+0x9e>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d109      	bne.n	8005d1c <HAL_TIM_PWM_Start+0x8c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	e008      	b.n	8005d2e <HAL_TIM_PWM_Start+0x9e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e097      	b.n	8005e66 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_TIM_PWM_Start+0xb6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d44:	e023      	b.n	8005d8e <HAL_TIM_PWM_Start+0xfe>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d104      	bne.n	8005d56 <HAL_TIM_PWM_Start+0xc6>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d54:	e01b      	b.n	8005d8e <HAL_TIM_PWM_Start+0xfe>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_PWM_Start+0xd6>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d64:	e013      	b.n	8005d8e <HAL_TIM_PWM_Start+0xfe>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b0c      	cmp	r3, #12
 8005d6a:	d104      	bne.n	8005d76 <HAL_TIM_PWM_Start+0xe6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d74:	e00b      	b.n	8005d8e <HAL_TIM_PWM_Start+0xfe>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d104      	bne.n	8005d86 <HAL_TIM_PWM_Start+0xf6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d84:	e003      	b.n	8005d8e <HAL_TIM_PWM_Start+0xfe>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 ffa0 	bl	8006cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a33      	ldr	r2, [pc, #204]	; (8005e70 <HAL_TIM_PWM_Start+0x1e0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_TIM_PWM_Start+0x13e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a32      	ldr	r2, [pc, #200]	; (8005e74 <HAL_TIM_PWM_Start+0x1e4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_TIM_PWM_Start+0x13e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a30      	ldr	r2, [pc, #192]	; (8005e78 <HAL_TIM_PWM_Start+0x1e8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_TIM_PWM_Start+0x13e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a2f      	ldr	r2, [pc, #188]	; (8005e7c <HAL_TIM_PWM_Start+0x1ec>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_TIM_PWM_Start+0x13e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2d      	ldr	r2, [pc, #180]	; (8005e80 <HAL_TIM_PWM_Start+0x1f0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_PWM_Start+0x142>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <HAL_TIM_PWM_Start+0x144>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005de6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a20      	ldr	r2, [pc, #128]	; (8005e70 <HAL_TIM_PWM_Start+0x1e0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_TIM_PWM_Start+0x194>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d013      	beq.n	8005e24 <HAL_TIM_PWM_Start+0x194>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a20      	ldr	r2, [pc, #128]	; (8005e84 <HAL_TIM_PWM_Start+0x1f4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_TIM_PWM_Start+0x194>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1f      	ldr	r2, [pc, #124]	; (8005e88 <HAL_TIM_PWM_Start+0x1f8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_TIM_PWM_Start+0x194>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <HAL_TIM_PWM_Start+0x1e4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIM_PWM_Start+0x194>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <HAL_TIM_PWM_Start+0x1e8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d115      	bne.n	8005e50 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <HAL_TIM_PWM_Start+0x1fc>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b06      	cmp	r3, #6
 8005e34:	d015      	beq.n	8005e62 <HAL_TIM_PWM_Start+0x1d2>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d011      	beq.n	8005e62 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4e:	e008      	b.n	8005e62 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e000      	b.n	8005e64 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40013400 	.word	0x40013400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	00010007 	.word	0x00010007

08005e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d122      	bne.n	8005eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d11b      	bne.n	8005eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0202 	mvn.w	r2, #2
 8005ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fae3 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fad5 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fae6 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d122      	bne.n	8005f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d11b      	bne.n	8005f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0204 	mvn.w	r2, #4
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fab9 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 faab 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fabc 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d122      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d11b      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0208 	mvn.w	r2, #8
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fa8f 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa81 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fa92 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b10      	cmp	r3, #16
 8005fa0:	d122      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d11b      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0210 	mvn.w	r2, #16
 8005fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa65 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa57 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa68 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d10e      	bne.n	8006014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b01      	cmp	r3, #1
 8006002:	d107      	bne.n	8006014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0201 	mvn.w	r2, #1
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fb ffa8 	bl	8001f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b80      	cmp	r3, #128	; 0x80
 8006020:	d10e      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602c:	2b80      	cmp	r3, #128	; 0x80
 800602e:	d107      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fefe 	bl	8006e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604e:	d10e      	bne.n	800606e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605a:	2b80      	cmp	r3, #128	; 0x80
 800605c:	d107      	bne.n	800606e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fef1 	bl	8006e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d10e      	bne.n	800609a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d107      	bne.n	800609a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fa16 	bl	80064c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d10e      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d107      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0220 	mvn.w	r2, #32
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 feb1 	bl	8006e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e0ff      	b.n	80062ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b14      	cmp	r3, #20
 80060fa:	f200 80f0 	bhi.w	80062de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006159 	.word	0x08006159
 8006108:	080062df 	.word	0x080062df
 800610c:	080062df 	.word	0x080062df
 8006110:	080062df 	.word	0x080062df
 8006114:	08006199 	.word	0x08006199
 8006118:	080062df 	.word	0x080062df
 800611c:	080062df 	.word	0x080062df
 8006120:	080062df 	.word	0x080062df
 8006124:	080061db 	.word	0x080061db
 8006128:	080062df 	.word	0x080062df
 800612c:	080062df 	.word	0x080062df
 8006130:	080062df 	.word	0x080062df
 8006134:	0800621b 	.word	0x0800621b
 8006138:	080062df 	.word	0x080062df
 800613c:	080062df 	.word	0x080062df
 8006140:	080062df 	.word	0x080062df
 8006144:	0800625d 	.word	0x0800625d
 8006148:	080062df 	.word	0x080062df
 800614c:	080062df 	.word	0x080062df
 8006150:	080062df 	.word	0x080062df
 8006154:	0800629d 	.word	0x0800629d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fa4c 	bl	80065fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0208 	orr.w	r2, r2, #8
 8006172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0204 	bic.w	r2, r2, #4
 8006182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6999      	ldr	r1, [r3, #24]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	619a      	str	r2, [r3, #24]
      break;
 8006196:	e0a5      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fabc 	bl	800671c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6999      	ldr	r1, [r3, #24]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	021a      	lsls	r2, r3, #8
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	619a      	str	r2, [r3, #24]
      break;
 80061d8:	e084      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fb25 	bl	8006830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0208 	orr.w	r2, r2, #8
 80061f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0204 	bic.w	r2, r2, #4
 8006204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69d9      	ldr	r1, [r3, #28]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	61da      	str	r2, [r3, #28]
      break;
 8006218:	e064      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fb8d 	bl	8006940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69d9      	ldr	r1, [r3, #28]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	021a      	lsls	r2, r3, #8
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	61da      	str	r2, [r3, #28]
      break;
 800625a:	e043      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fbd6 	bl	8006a14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0208 	orr.w	r2, r2, #8
 8006276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0204 	bic.w	r2, r2, #4
 8006286:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800629a:	e023      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fc1a 	bl	8006adc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	021a      	lsls	r2, r3, #8
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062dc:	e002      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
      break;
 80062e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop

080062f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_TIM_ConfigClockSource+0x1c>
 8006310:	2302      	movs	r3, #2
 8006312:	e0b6      	b.n	8006482 <HAL_TIM_ConfigClockSource+0x18a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006332:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800633e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006350:	d03e      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0xd8>
 8006352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006356:	f200 8087 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x170>
 800635a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635e:	f000 8086 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x176>
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	d87f      	bhi.n	8006468 <HAL_TIM_ConfigClockSource+0x170>
 8006368:	2b70      	cmp	r3, #112	; 0x70
 800636a:	d01a      	beq.n	80063a2 <HAL_TIM_ConfigClockSource+0xaa>
 800636c:	2b70      	cmp	r3, #112	; 0x70
 800636e:	d87b      	bhi.n	8006468 <HAL_TIM_ConfigClockSource+0x170>
 8006370:	2b60      	cmp	r3, #96	; 0x60
 8006372:	d050      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0x11e>
 8006374:	2b60      	cmp	r3, #96	; 0x60
 8006376:	d877      	bhi.n	8006468 <HAL_TIM_ConfigClockSource+0x170>
 8006378:	2b50      	cmp	r3, #80	; 0x50
 800637a:	d03c      	beq.n	80063f6 <HAL_TIM_ConfigClockSource+0xfe>
 800637c:	2b50      	cmp	r3, #80	; 0x50
 800637e:	d873      	bhi.n	8006468 <HAL_TIM_ConfigClockSource+0x170>
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d058      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x13e>
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d86f      	bhi.n	8006468 <HAL_TIM_ConfigClockSource+0x170>
 8006388:	2b30      	cmp	r3, #48	; 0x30
 800638a:	d064      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x15e>
 800638c:	2b30      	cmp	r3, #48	; 0x30
 800638e:	d86b      	bhi.n	8006468 <HAL_TIM_ConfigClockSource+0x170>
 8006390:	2b20      	cmp	r3, #32
 8006392:	d060      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x15e>
 8006394:	2b20      	cmp	r3, #32
 8006396:	d867      	bhi.n	8006468 <HAL_TIM_ConfigClockSource+0x170>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d05c      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x15e>
 800639c:	2b10      	cmp	r3, #16
 800639e:	d05a      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x15e>
 80063a0:	e062      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	6899      	ldr	r1, [r3, #8]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f000 fc73 	bl	8006c9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	609a      	str	r2, [r3, #8]
      break;
 80063ce:	e04f      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	6899      	ldr	r1, [r3, #8]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f000 fc5c 	bl	8006c9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063f2:	609a      	str	r2, [r3, #8]
      break;
 80063f4:	e03c      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6859      	ldr	r1, [r3, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	461a      	mov	r2, r3
 8006404:	f000 fbd0 	bl	8006ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2150      	movs	r1, #80	; 0x50
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fc29 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 8006414:	e02c      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6859      	ldr	r1, [r3, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	461a      	mov	r2, r3
 8006424:	f000 fbef 	bl	8006c06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2160      	movs	r1, #96	; 0x60
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fc19 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 8006434:	e01c      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6859      	ldr	r1, [r3, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	461a      	mov	r2, r3
 8006444:	f000 fbb0 	bl	8006ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2140      	movs	r1, #64	; 0x40
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fc09 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 8006454:	e00c      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f000 fc00 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 8006466:	e003      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
      break;
 800646c:	e000      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800646e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3c      	ldr	r2, [pc, #240]	; (80065e0 <TIM_Base_SetConfig+0x104>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00f      	beq.n	8006514 <TIM_Base_SetConfig+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fa:	d00b      	beq.n	8006514 <TIM_Base_SetConfig+0x38>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a39      	ldr	r2, [pc, #228]	; (80065e4 <TIM_Base_SetConfig+0x108>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_Base_SetConfig+0x38>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a38      	ldr	r2, [pc, #224]	; (80065e8 <TIM_Base_SetConfig+0x10c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0x38>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a37      	ldr	r2, [pc, #220]	; (80065ec <TIM_Base_SetConfig+0x110>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d108      	bne.n	8006526 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2d      	ldr	r2, [pc, #180]	; (80065e0 <TIM_Base_SetConfig+0x104>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01b      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006534:	d017      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <TIM_Base_SetConfig+0x108>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a29      	ldr	r2, [pc, #164]	; (80065e8 <TIM_Base_SetConfig+0x10c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00f      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a28      	ldr	r2, [pc, #160]	; (80065ec <TIM_Base_SetConfig+0x110>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00b      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a27      	ldr	r2, [pc, #156]	; (80065f0 <TIM_Base_SetConfig+0x114>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <TIM_Base_SetConfig+0x118>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_Base_SetConfig+0x8a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <TIM_Base_SetConfig+0x11c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d108      	bne.n	8006578 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <TIM_Base_SetConfig+0x104>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00f      	beq.n	80065c4 <TIM_Base_SetConfig+0xe8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a11      	ldr	r2, [pc, #68]	; (80065ec <TIM_Base_SetConfig+0x110>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_Base_SetConfig+0xe8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <TIM_Base_SetConfig+0x114>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_Base_SetConfig+0xe8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a0f      	ldr	r2, [pc, #60]	; (80065f4 <TIM_Base_SetConfig+0x118>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0xe8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a0e      	ldr	r2, [pc, #56]	; (80065f8 <TIM_Base_SetConfig+0x11c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d103      	bne.n	80065cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	615a      	str	r2, [r3, #20]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800

080065fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0201 	bic.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 0302 	bic.w	r3, r3, #2
 8006648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a2c      	ldr	r2, [pc, #176]	; (8006708 <TIM_OC1_SetConfig+0x10c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00f      	beq.n	800667c <TIM_OC1_SetConfig+0x80>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a2b      	ldr	r2, [pc, #172]	; (800670c <TIM_OC1_SetConfig+0x110>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00b      	beq.n	800667c <TIM_OC1_SetConfig+0x80>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a2a      	ldr	r2, [pc, #168]	; (8006710 <TIM_OC1_SetConfig+0x114>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <TIM_OC1_SetConfig+0x80>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a29      	ldr	r2, [pc, #164]	; (8006714 <TIM_OC1_SetConfig+0x118>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC1_SetConfig+0x80>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a28      	ldr	r2, [pc, #160]	; (8006718 <TIM_OC1_SetConfig+0x11c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d10c      	bne.n	8006696 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0308 	bic.w	r3, r3, #8
 8006682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f023 0304 	bic.w	r3, r3, #4
 8006694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1b      	ldr	r2, [pc, #108]	; (8006708 <TIM_OC1_SetConfig+0x10c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_OC1_SetConfig+0xc2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a1a      	ldr	r2, [pc, #104]	; (800670c <TIM_OC1_SetConfig+0x110>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_OC1_SetConfig+0xc2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a19      	ldr	r2, [pc, #100]	; (8006710 <TIM_OC1_SetConfig+0x114>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_OC1_SetConfig+0xc2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a18      	ldr	r2, [pc, #96]	; (8006714 <TIM_OC1_SetConfig+0x118>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_OC1_SetConfig+0xc2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a17      	ldr	r2, [pc, #92]	; (8006718 <TIM_OC1_SetConfig+0x11c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d111      	bne.n	80066e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	621a      	str	r2, [r3, #32]
}
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800

0800671c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0210 	bic.w	r2, r3, #16
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0320 	bic.w	r3, r3, #32
 800676a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a28      	ldr	r2, [pc, #160]	; (800681c <TIM_OC2_SetConfig+0x100>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC2_SetConfig+0x6c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a27      	ldr	r2, [pc, #156]	; (8006820 <TIM_OC2_SetConfig+0x104>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10d      	bne.n	80067a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800678e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1d      	ldr	r2, [pc, #116]	; (800681c <TIM_OC2_SetConfig+0x100>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00f      	beq.n	80067cc <TIM_OC2_SetConfig+0xb0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <TIM_OC2_SetConfig+0x104>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_OC2_SetConfig+0xb0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1b      	ldr	r2, [pc, #108]	; (8006824 <TIM_OC2_SetConfig+0x108>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_OC2_SetConfig+0xb0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1a      	ldr	r2, [pc, #104]	; (8006828 <TIM_OC2_SetConfig+0x10c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_OC2_SetConfig+0xb0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a19      	ldr	r2, [pc, #100]	; (800682c <TIM_OC2_SetConfig+0x110>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d113      	bne.n	80067f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40013400 	.word	0x40013400
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800

08006830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a27      	ldr	r2, [pc, #156]	; (800692c <TIM_OC3_SetConfig+0xfc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_OC3_SetConfig+0x6a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a26      	ldr	r2, [pc, #152]	; (8006930 <TIM_OC3_SetConfig+0x100>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d10d      	bne.n	80068b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1c      	ldr	r2, [pc, #112]	; (800692c <TIM_OC3_SetConfig+0xfc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00f      	beq.n	80068de <TIM_OC3_SetConfig+0xae>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <TIM_OC3_SetConfig+0x100>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00b      	beq.n	80068de <TIM_OC3_SetConfig+0xae>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <TIM_OC3_SetConfig+0x104>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <TIM_OC3_SetConfig+0xae>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <TIM_OC3_SetConfig+0x108>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_OC3_SetConfig+0xae>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a18      	ldr	r2, [pc, #96]	; (800693c <TIM_OC3_SetConfig+0x10c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d113      	bne.n	8006906 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40013400 	.word	0x40013400
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800

08006940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800698e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	031b      	lsls	r3, r3, #12
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <TIM_OC4_SetConfig+0xc0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00f      	beq.n	80069c4 <TIM_OC4_SetConfig+0x84>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <TIM_OC4_SetConfig+0xc4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <TIM_OC4_SetConfig+0x84>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a16      	ldr	r2, [pc, #88]	; (8006a08 <TIM_OC4_SetConfig+0xc8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d007      	beq.n	80069c4 <TIM_OC4_SetConfig+0x84>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a15      	ldr	r2, [pc, #84]	; (8006a0c <TIM_OC4_SetConfig+0xcc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_OC4_SetConfig+0x84>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a14      	ldr	r2, [pc, #80]	; (8006a10 <TIM_OC4_SetConfig+0xd0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d109      	bne.n	80069d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40013400 	.word	0x40013400
 8006a08:	40014000 	.word	0x40014000
 8006a0c:	40014400 	.word	0x40014400
 8006a10:	40014800 	.word	0x40014800

08006a14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <TIM_OC5_SetConfig+0xb4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00f      	beq.n	8006a8e <TIM_OC5_SetConfig+0x7a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a16      	ldr	r2, [pc, #88]	; (8006acc <TIM_OC5_SetConfig+0xb8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00b      	beq.n	8006a8e <TIM_OC5_SetConfig+0x7a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <TIM_OC5_SetConfig+0xbc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d007      	beq.n	8006a8e <TIM_OC5_SetConfig+0x7a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <TIM_OC5_SetConfig+0xc0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d003      	beq.n	8006a8e <TIM_OC5_SetConfig+0x7a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <TIM_OC5_SetConfig+0xc4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d109      	bne.n	8006aa2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	621a      	str	r2, [r3, #32]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40013400 	.word	0x40013400
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014400 	.word	0x40014400
 8006ad8:	40014800 	.word	0x40014800

08006adc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	051b      	lsls	r3, r3, #20
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <TIM_OC6_SetConfig+0xb8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00f      	beq.n	8006b58 <TIM_OC6_SetConfig+0x7c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <TIM_OC6_SetConfig+0xbc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00b      	beq.n	8006b58 <TIM_OC6_SetConfig+0x7c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <TIM_OC6_SetConfig+0xc0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d007      	beq.n	8006b58 <TIM_OC6_SetConfig+0x7c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a15      	ldr	r2, [pc, #84]	; (8006ba0 <TIM_OC6_SetConfig+0xc4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_OC6_SetConfig+0x7c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a14      	ldr	r2, [pc, #80]	; (8006ba4 <TIM_OC6_SetConfig+0xc8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d109      	bne.n	8006b6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	029b      	lsls	r3, r3, #10
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	40012c00 	.word	0x40012c00
 8006b98:	40013400 	.word	0x40013400
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800

08006ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f023 0201 	bic.w	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 030a 	bic.w	r3, r3, #10
 8006be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b087      	sub	sp, #28
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f023 0210 	bic.w	r2, r3, #16
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	031b      	lsls	r3, r3, #12
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	621a      	str	r2, [r3, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f043 0307 	orr.w	r3, r3, #7
 8006c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	609a      	str	r2, [r3, #8]
}
 8006c90:	bf00      	nop
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	021a      	lsls	r2, r3, #8
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	2201      	movs	r2, #1
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	401a      	ands	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1a      	ldr	r2, [r3, #32]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	fa01 f303 	lsl.w	r3, r1, r3
 8006d14:	431a      	orrs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
	...

08006d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e063      	b.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2b      	ldr	r2, [pc, #172]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d108      	bne.n	8006d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d018      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db2:	d013      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00e      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a17      	ldr	r2, [pc, #92]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d009      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d10c      	bne.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40014000 	.word	0x40014000

08006e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e040      	b.n	8006ef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fb faa6 	bl	80023d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2224      	movs	r2, #36	; 0x24
 8006e90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fc00 	bl	80076a8 <UART_SetConfig>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e022      	b.n	8006ef8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fdc8 	bl	8007a50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fe4f 	bl	8007b94 <UART_CheckIdleState>
 8006ef6:	4603      	mov	r3, r0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	; 0x28
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d178      	bne.n	800700a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_UART_Transmit+0x24>
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e071      	b.n	800700c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2221      	movs	r2, #33	; 0x21
 8006f34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f36:	f7fb fcd1 	bl	80028dc <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f54:	d108      	bne.n	8006f68 <HAL_UART_Transmit+0x68>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e003      	b.n	8006f70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f70:	e030      	b.n	8006fd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2180      	movs	r1, #128	; 0x80
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 feb1 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e03c      	b.n	800700c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	881a      	ldrh	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	3302      	adds	r3, #2
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	e008      	b.n	8006fc2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	781a      	ldrb	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1c8      	bne.n	8006f72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2140      	movs	r1, #64	; 0x40
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fe7a 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e005      	b.n	800700c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	e000      	b.n	800700c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007028:	2b20      	cmp	r3, #32
 800702a:	d132      	bne.n	8007092 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_UART_Receive_IT+0x24>
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e02b      	b.n	8007094 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d018      	beq.n	8007082 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	613b      	str	r3, [r7, #16]
   return(result);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	623b      	str	r3, [r7, #32]
 8007070:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	69f9      	ldr	r1, [r7, #28]
 8007074:	6a3a      	ldr	r2, [r7, #32]
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	61bb      	str	r3, [r7, #24]
   return(result);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e6      	bne.n	8007050 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	461a      	mov	r2, r3
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fe93 	bl	8007db4 <UART_Start_Receive_IT>
 800708e:	4603      	mov	r3, r0
 8007090:	e000      	b.n	8007094 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007092:	2302      	movs	r3, #2
  }
}
 8007094:	4618      	mov	r0, r3
 8007096:	3728      	adds	r7, #40	; 0x28
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b0ba      	sub	sp, #232	; 0xe8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80070c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80070ca:	4013      	ands	r3, r2
 80070cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80070d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d115      	bne.n	8007104 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00f      	beq.n	8007104 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 82ab 	beq.w	8007650 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
      }
      return;
 8007102:	e2a5      	b.n	8007650 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8117 	beq.w	800733c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800710e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800711a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800711e:	4b85      	ldr	r3, [pc, #532]	; (8007334 <HAL_UART_IRQHandler+0x298>)
 8007120:	4013      	ands	r3, r2
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 810a 	beq.w	800733c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d011      	beq.n	8007158 <HAL_UART_IRQHandler+0xbc>
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2201      	movs	r2, #1
 8007146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d011      	beq.n	8007188 <HAL_UART_IRQHandler+0xec>
 8007164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2202      	movs	r2, #2
 8007176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800717e:	f043 0204 	orr.w	r2, r3, #4
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d011      	beq.n	80071b8 <HAL_UART_IRQHandler+0x11c>
 8007194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2204      	movs	r2, #4
 80071a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ae:	f043 0202 	orr.w	r2, r3, #2
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d017      	beq.n	80071f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2208      	movs	r2, #8
 80071e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ea:	f043 0208 	orr.w	r2, r3, #8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d012      	beq.n	8007226 <HAL_UART_IRQHandler+0x18a>
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721c:	f043 0220 	orr.w	r2, r3, #32
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8211 	beq.w	8007654 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007236:	f003 0320 	and.w	r3, r3, #32
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00d      	beq.n	800725a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800723e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d005      	beq.n	800727e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007276:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800727a:	2b00      	cmp	r3, #0
 800727c:	d04f      	beq.n	800731e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fe4c 	bl	8007f1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b40      	cmp	r3, #64	; 0x40
 8007290:	d141      	bne.n	8007316 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3308      	adds	r3, #8
 80072ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1d9      	bne.n	8007292 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d013      	beq.n	800730e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ea:	4a13      	ldr	r2, [pc, #76]	; (8007338 <HAL_UART_IRQHandler+0x29c>)
 80072ec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fc fa3d 	bl	8003772 <HAL_DMA_Abort_IT>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d017      	beq.n	800732e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730c:	e00f      	b.n	800732e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9b4 	bl	800767c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	e00b      	b.n	800732e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f9b0 	bl	800767c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	e007      	b.n	800732e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9ac 	bl	800767c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800732c:	e192      	b.n	8007654 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732e:	bf00      	nop
    return;
 8007330:	e190      	b.n	8007654 <HAL_UART_IRQHandler+0x5b8>
 8007332:	bf00      	nop
 8007334:	04000120 	.word	0x04000120
 8007338:	08007fe5 	.word	0x08007fe5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007340:	2b01      	cmp	r3, #1
 8007342:	f040 814b 	bne.w	80075dc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734a:	f003 0310 	and.w	r3, r3, #16
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8144 	beq.w	80075dc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 813d 	beq.w	80075dc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2210      	movs	r2, #16
 8007368:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	f040 80b5 	bne.w	80074e4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007386:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8164 	beq.w	8007658 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800739a:	429a      	cmp	r2, r3
 800739c:	f080 815c 	bcs.w	8007658 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	f000 8086 	beq.w	80074c2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1da      	bne.n	80073b6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3308      	adds	r3, #8
 8007406:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007412:	f023 0301 	bic.w	r3, r3, #1
 8007416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007424:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007428:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800742c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e1      	bne.n	8007400 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800744c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800744e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007460:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007462:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007466:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800746e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e3      	bne.n	800743c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80074a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e4      	bne.n	8007482 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fc f91f 	bl	8003700 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8d7 	bl	8007690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074e2:	e0b9      	b.n	8007658 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 80ab 	beq.w	800765c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007506:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 80a6 	beq.w	800765c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800751e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007532:	647b      	str	r3, [r7, #68]	; 0x44
 8007534:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e4      	bne.n	8007510 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	623b      	str	r3, [r7, #32]
   return(result);
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3308      	adds	r3, #8
 8007566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800756a:	633a      	str	r2, [r7, #48]	; 0x30
 800756c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e3      	bne.n	8007546 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0310 	bic.w	r3, r3, #16
 80075a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	69b9      	ldr	r1, [r7, #24]
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	617b      	str	r3, [r7, #20]
   return(result);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e4      	bne.n	8007592 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f85b 	bl	8007690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075da:	e03f      	b.n	800765c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <HAL_UART_IRQHandler+0x56a>
 80075e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fed8 	bl	80083b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007604:	e02d      	b.n	8007662 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00e      	beq.n	8007630 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d008      	beq.n	8007630 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d01c      	beq.n	8007660 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
    }
    return;
 800762e:	e017      	b.n	8007660 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d012      	beq.n	8007662 <HAL_UART_IRQHandler+0x5c6>
 800763c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00c      	beq.n	8007662 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fce1 	bl	8008010 <UART_EndTransmit_IT>
    return;
 800764e:	e008      	b.n	8007662 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007650:	bf00      	nop
 8007652:	e006      	b.n	8007662 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007654:	bf00      	nop
 8007656:	e004      	b.n	8007662 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007658:	bf00      	nop
 800765a:	e002      	b.n	8007662 <HAL_UART_IRQHandler+0x5c6>
      return;
 800765c:	bf00      	nop
 800765e:	e000      	b.n	8007662 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007660:	bf00      	nop
  }

}
 8007662:	37e8      	adds	r7, #232	; 0xe8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80076d6:	f023 030c 	bic.w	r3, r3, #12
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6812      	ldr	r2, [r2, #0]
 80076de:	6979      	ldr	r1, [r7, #20]
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4aa7      	ldr	r2, [pc, #668]	; (80079c0 <UART_SetConfig+0x318>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d120      	bne.n	800776a <UART_SetConfig+0xc2>
 8007728:	4ba6      	ldr	r3, [pc, #664]	; (80079c4 <UART_SetConfig+0x31c>)
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	2b03      	cmp	r3, #3
 8007732:	d817      	bhi.n	8007764 <UART_SetConfig+0xbc>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0x94>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	0800774d 	.word	0x0800774d
 8007740:	08007759 	.word	0x08007759
 8007744:	0800775f 	.word	0x0800775f
 8007748:	08007753 	.word	0x08007753
 800774c:	2301      	movs	r3, #1
 800774e:	77fb      	strb	r3, [r7, #31]
 8007750:	e0b5      	b.n	80078be <UART_SetConfig+0x216>
 8007752:	2302      	movs	r3, #2
 8007754:	77fb      	strb	r3, [r7, #31]
 8007756:	e0b2      	b.n	80078be <UART_SetConfig+0x216>
 8007758:	2304      	movs	r3, #4
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e0af      	b.n	80078be <UART_SetConfig+0x216>
 800775e:	2308      	movs	r3, #8
 8007760:	77fb      	strb	r3, [r7, #31]
 8007762:	e0ac      	b.n	80078be <UART_SetConfig+0x216>
 8007764:	2310      	movs	r3, #16
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e0a9      	b.n	80078be <UART_SetConfig+0x216>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a96      	ldr	r2, [pc, #600]	; (80079c8 <UART_SetConfig+0x320>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d124      	bne.n	80077be <UART_SetConfig+0x116>
 8007774:	4b93      	ldr	r3, [pc, #588]	; (80079c4 <UART_SetConfig+0x31c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800777c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007780:	d011      	beq.n	80077a6 <UART_SetConfig+0xfe>
 8007782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007786:	d817      	bhi.n	80077b8 <UART_SetConfig+0x110>
 8007788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800778c:	d011      	beq.n	80077b2 <UART_SetConfig+0x10a>
 800778e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007792:	d811      	bhi.n	80077b8 <UART_SetConfig+0x110>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <UART_SetConfig+0xf8>
 8007798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779c:	d006      	beq.n	80077ac <UART_SetConfig+0x104>
 800779e:	e00b      	b.n	80077b8 <UART_SetConfig+0x110>
 80077a0:	2300      	movs	r3, #0
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e08b      	b.n	80078be <UART_SetConfig+0x216>
 80077a6:	2302      	movs	r3, #2
 80077a8:	77fb      	strb	r3, [r7, #31]
 80077aa:	e088      	b.n	80078be <UART_SetConfig+0x216>
 80077ac:	2304      	movs	r3, #4
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e085      	b.n	80078be <UART_SetConfig+0x216>
 80077b2:	2308      	movs	r3, #8
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e082      	b.n	80078be <UART_SetConfig+0x216>
 80077b8:	2310      	movs	r3, #16
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e07f      	b.n	80078be <UART_SetConfig+0x216>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a82      	ldr	r2, [pc, #520]	; (80079cc <UART_SetConfig+0x324>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d124      	bne.n	8007812 <UART_SetConfig+0x16a>
 80077c8:	4b7e      	ldr	r3, [pc, #504]	; (80079c4 <UART_SetConfig+0x31c>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80077d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80077d4:	d011      	beq.n	80077fa <UART_SetConfig+0x152>
 80077d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80077da:	d817      	bhi.n	800780c <UART_SetConfig+0x164>
 80077dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077e0:	d011      	beq.n	8007806 <UART_SetConfig+0x15e>
 80077e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077e6:	d811      	bhi.n	800780c <UART_SetConfig+0x164>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <UART_SetConfig+0x14c>
 80077ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077f0:	d006      	beq.n	8007800 <UART_SetConfig+0x158>
 80077f2:	e00b      	b.n	800780c <UART_SetConfig+0x164>
 80077f4:	2300      	movs	r3, #0
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e061      	b.n	80078be <UART_SetConfig+0x216>
 80077fa:	2302      	movs	r3, #2
 80077fc:	77fb      	strb	r3, [r7, #31]
 80077fe:	e05e      	b.n	80078be <UART_SetConfig+0x216>
 8007800:	2304      	movs	r3, #4
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	e05b      	b.n	80078be <UART_SetConfig+0x216>
 8007806:	2308      	movs	r3, #8
 8007808:	77fb      	strb	r3, [r7, #31]
 800780a:	e058      	b.n	80078be <UART_SetConfig+0x216>
 800780c:	2310      	movs	r3, #16
 800780e:	77fb      	strb	r3, [r7, #31]
 8007810:	e055      	b.n	80078be <UART_SetConfig+0x216>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a6e      	ldr	r2, [pc, #440]	; (80079d0 <UART_SetConfig+0x328>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d124      	bne.n	8007866 <UART_SetConfig+0x1be>
 800781c:	4b69      	ldr	r3, [pc, #420]	; (80079c4 <UART_SetConfig+0x31c>)
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007824:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007828:	d011      	beq.n	800784e <UART_SetConfig+0x1a6>
 800782a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800782e:	d817      	bhi.n	8007860 <UART_SetConfig+0x1b8>
 8007830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007834:	d011      	beq.n	800785a <UART_SetConfig+0x1b2>
 8007836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800783a:	d811      	bhi.n	8007860 <UART_SetConfig+0x1b8>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <UART_SetConfig+0x1a0>
 8007840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007844:	d006      	beq.n	8007854 <UART_SetConfig+0x1ac>
 8007846:	e00b      	b.n	8007860 <UART_SetConfig+0x1b8>
 8007848:	2300      	movs	r3, #0
 800784a:	77fb      	strb	r3, [r7, #31]
 800784c:	e037      	b.n	80078be <UART_SetConfig+0x216>
 800784e:	2302      	movs	r3, #2
 8007850:	77fb      	strb	r3, [r7, #31]
 8007852:	e034      	b.n	80078be <UART_SetConfig+0x216>
 8007854:	2304      	movs	r3, #4
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e031      	b.n	80078be <UART_SetConfig+0x216>
 800785a:	2308      	movs	r3, #8
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e02e      	b.n	80078be <UART_SetConfig+0x216>
 8007860:	2310      	movs	r3, #16
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e02b      	b.n	80078be <UART_SetConfig+0x216>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a5a      	ldr	r2, [pc, #360]	; (80079d4 <UART_SetConfig+0x32c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d124      	bne.n	80078ba <UART_SetConfig+0x212>
 8007870:	4b54      	ldr	r3, [pc, #336]	; (80079c4 <UART_SetConfig+0x31c>)
 8007872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007874:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007878:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800787c:	d011      	beq.n	80078a2 <UART_SetConfig+0x1fa>
 800787e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007882:	d817      	bhi.n	80078b4 <UART_SetConfig+0x20c>
 8007884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007888:	d011      	beq.n	80078ae <UART_SetConfig+0x206>
 800788a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800788e:	d811      	bhi.n	80078b4 <UART_SetConfig+0x20c>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <UART_SetConfig+0x1f4>
 8007894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007898:	d006      	beq.n	80078a8 <UART_SetConfig+0x200>
 800789a:	e00b      	b.n	80078b4 <UART_SetConfig+0x20c>
 800789c:	2300      	movs	r3, #0
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e00d      	b.n	80078be <UART_SetConfig+0x216>
 80078a2:	2302      	movs	r3, #2
 80078a4:	77fb      	strb	r3, [r7, #31]
 80078a6:	e00a      	b.n	80078be <UART_SetConfig+0x216>
 80078a8:	2304      	movs	r3, #4
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e007      	b.n	80078be <UART_SetConfig+0x216>
 80078ae:	2308      	movs	r3, #8
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e004      	b.n	80078be <UART_SetConfig+0x216>
 80078b4:	2310      	movs	r3, #16
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e001      	b.n	80078be <UART_SetConfig+0x216>
 80078ba:	2310      	movs	r3, #16
 80078bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c6:	d15b      	bne.n	8007980 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80078c8:	7ffb      	ldrb	r3, [r7, #31]
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d827      	bhi.n	800791e <UART_SetConfig+0x276>
 80078ce:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <UART_SetConfig+0x22c>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007901 	.word	0x08007901
 80078dc:	08007909 	.word	0x08007909
 80078e0:	0800791f 	.word	0x0800791f
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	0800791f 	.word	0x0800791f
 80078ec:	0800791f 	.word	0x0800791f
 80078f0:	0800791f 	.word	0x0800791f
 80078f4:	08007917 	.word	0x08007917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f8:	f7fd fd7e 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80078fc:	61b8      	str	r0, [r7, #24]
        break;
 80078fe:	e013      	b.n	8007928 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007900:	f7fd fd9c 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 8007904:	61b8      	str	r0, [r7, #24]
        break;
 8007906:	e00f      	b.n	8007928 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007908:	4b33      	ldr	r3, [pc, #204]	; (80079d8 <UART_SetConfig+0x330>)
 800790a:	61bb      	str	r3, [r7, #24]
        break;
 800790c:	e00c      	b.n	8007928 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800790e:	f7fd fcfd 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8007912:	61b8      	str	r0, [r7, #24]
        break;
 8007914:	e008      	b.n	8007928 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791a:	61bb      	str	r3, [r7, #24]
        break;
 800791c:	e004      	b.n	8007928 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	77bb      	strb	r3, [r7, #30]
        break;
 8007926:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8082 	beq.w	8007a34 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	005a      	lsls	r2, r3, #1
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	085b      	lsrs	r3, r3, #1
 800793a:	441a      	add	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	fbb2 f3f3 	udiv	r3, r2, r3
 8007944:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b0f      	cmp	r3, #15
 800794a:	d916      	bls.n	800797a <UART_SetConfig+0x2d2>
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007952:	d212      	bcs.n	800797a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f023 030f 	bic.w	r3, r3, #15
 800795c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	b29b      	uxth	r3, r3
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	b29a      	uxth	r2, r3
 800796a:	89fb      	ldrh	r3, [r7, #14]
 800796c:	4313      	orrs	r3, r2
 800796e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	89fa      	ldrh	r2, [r7, #14]
 8007976:	60da      	str	r2, [r3, #12]
 8007978:	e05c      	b.n	8007a34 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	77bb      	strb	r3, [r7, #30]
 800797e:	e059      	b.n	8007a34 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007980:	7ffb      	ldrb	r3, [r7, #31]
 8007982:	2b08      	cmp	r3, #8
 8007984:	d835      	bhi.n	80079f2 <UART_SetConfig+0x34a>
 8007986:	a201      	add	r2, pc, #4	; (adr r2, 800798c <UART_SetConfig+0x2e4>)
 8007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798c:	080079b1 	.word	0x080079b1
 8007990:	080079b9 	.word	0x080079b9
 8007994:	080079dd 	.word	0x080079dd
 8007998:	080079f3 	.word	0x080079f3
 800799c:	080079e3 	.word	0x080079e3
 80079a0:	080079f3 	.word	0x080079f3
 80079a4:	080079f3 	.word	0x080079f3
 80079a8:	080079f3 	.word	0x080079f3
 80079ac:	080079eb 	.word	0x080079eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b0:	f7fd fd22 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80079b4:	61b8      	str	r0, [r7, #24]
        break;
 80079b6:	e021      	b.n	80079fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b8:	f7fd fd40 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 80079bc:	61b8      	str	r0, [r7, #24]
        break;
 80079be:	e01d      	b.n	80079fc <UART_SetConfig+0x354>
 80079c0:	40013800 	.word	0x40013800
 80079c4:	40021000 	.word	0x40021000
 80079c8:	40004400 	.word	0x40004400
 80079cc:	40004800 	.word	0x40004800
 80079d0:	40004c00 	.word	0x40004c00
 80079d4:	40005000 	.word	0x40005000
 80079d8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079dc:	4b1b      	ldr	r3, [pc, #108]	; (8007a4c <UART_SetConfig+0x3a4>)
 80079de:	61bb      	str	r3, [r7, #24]
        break;
 80079e0:	e00c      	b.n	80079fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079e2:	f7fd fc93 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80079e6:	61b8      	str	r0, [r7, #24]
        break;
 80079e8:	e008      	b.n	80079fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ee:	61bb      	str	r3, [r7, #24]
        break;
 80079f0:	e004      	b.n	80079fc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	77bb      	strb	r3, [r7, #30]
        break;
 80079fa:	bf00      	nop
    }

    if (pclk != 0U)
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d018      	beq.n	8007a34 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	085a      	lsrs	r2, r3, #1
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	441a      	add	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b0f      	cmp	r3, #15
 8007a1a:	d909      	bls.n	8007a30 <UART_SetConfig+0x388>
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a22:	d205      	bcs.n	8007a30 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60da      	str	r2, [r3, #12]
 8007a2e:	e001      	b.n	8007a34 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a40:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3720      	adds	r7, #32
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	007a1200 	.word	0x007a1200

08007a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01a      	beq.n	8007b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b4e:	d10a      	bne.n	8007b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	605a      	str	r2, [r3, #4]
  }
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b098      	sub	sp, #96	; 0x60
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ba4:	f7fa fe9a 	bl	80028dc <HAL_GetTick>
 8007ba8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d12e      	bne.n	8007c16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f88c 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d021      	beq.n	8007c16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007be6:	653b      	str	r3, [r7, #80]	; 0x50
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	461a      	mov	r2, r3
 8007bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e6      	bne.n	8007bd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e062      	b.n	8007cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d149      	bne.n	8007cb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f856 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d03c      	beq.n	8007cb8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e6      	bne.n	8007c3e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0301 	bic.w	r3, r3, #1
 8007c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c90:	61fa      	str	r2, [r7, #28]
 8007c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	69b9      	ldr	r1, [r7, #24]
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e5      	bne.n	8007c70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e011      	b.n	8007cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3758      	adds	r7, #88	; 0x58
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf4:	e049      	b.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cfc:	d045      	beq.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cfe:	f7fa fded 	bl	80028dc <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d302      	bcc.n	8007d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e048      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d031      	beq.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d110      	bne.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f8ed 	bl	8007f1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2208      	movs	r2, #8
 8007d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e029      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d64:	d111      	bne.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f8d3 	bl	8007f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e00f      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69da      	ldr	r2, [r3, #28]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	4013      	ands	r3, r2
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	bf0c      	ite	eq
 8007d9a:	2301      	moveq	r3, #1
 8007d9c:	2300      	movne	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d0a6      	beq.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b097      	sub	sp, #92	; 0x5c
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	88fa      	ldrh	r2, [r7, #6]
 8007dcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	88fa      	ldrh	r2, [r7, #6]
 8007dd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de6:	d10e      	bne.n	8007e06 <UART_Start_Receive_IT+0x52>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <UART_Start_Receive_IT+0x48>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007df6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dfa:	e01a      	b.n	8007e32 <UART_Start_Receive_IT+0x7e>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	22ff      	movs	r2, #255	; 0xff
 8007e00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e04:	e015      	b.n	8007e32 <UART_Start_Receive_IT+0x7e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10d      	bne.n	8007e2a <UART_Start_Receive_IT+0x76>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d104      	bne.n	8007e20 <UART_Start_Receive_IT+0x6c>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	22ff      	movs	r2, #255	; 0xff
 8007e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e1e:	e008      	b.n	8007e32 <UART_Start_Receive_IT+0x7e>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	227f      	movs	r2, #127	; 0x7f
 8007e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e28:	e003      	b.n	8007e32 <UART_Start_Receive_IT+0x7e>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2222      	movs	r2, #34	; 0x22
 8007e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3308      	adds	r3, #8
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	f043 0301 	orr.w	r3, r3, #1
 8007e58:	657b      	str	r3, [r7, #84]	; 0x54
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e62:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e5      	bne.n	8007e42 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7e:	d107      	bne.n	8007e90 <UART_Start_Receive_IT+0xdc>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a22      	ldr	r2, [pc, #136]	; (8007f14 <UART_Start_Receive_IT+0x160>)
 8007e8c:	669a      	str	r2, [r3, #104]	; 0x68
 8007e8e:	e002      	b.n	8007e96 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a21      	ldr	r2, [pc, #132]	; (8007f18 <UART_Start_Receive_IT+0x164>)
 8007e94:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d019      	beq.n	8007ed2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ebe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e6      	bne.n	8007e9e <UART_Start_Receive_IT+0xea>
 8007ed0:	e018      	b.n	8007f04 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f043 0320 	orr.w	r3, r3, #32
 8007ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef0:	623b      	str	r3, [r7, #32]
 8007ef2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	69f9      	ldr	r1, [r7, #28]
 8007ef6:	6a3a      	ldr	r2, [r7, #32]
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e6      	bne.n	8007ed2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	375c      	adds	r7, #92	; 0x5c
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	0800820d 	.word	0x0800820d
 8007f18:	08008065 	.word	0x08008065

08007f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b095      	sub	sp, #84	; 0x54
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f42:	643b      	str	r3, [r7, #64]	; 0x40
 8007f44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e6      	bne.n	8007f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f023 0301 	bic.w	r3, r3, #1
 8007f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3308      	adds	r3, #8
 8007f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e5      	bne.n	8007f56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d118      	bne.n	8007fc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f023 0310 	bic.w	r3, r3, #16
 8007fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb0:	61bb      	str	r3, [r7, #24]
 8007fb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6979      	ldr	r1, [r7, #20]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e6      	bne.n	8007f92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007fd8:	bf00      	nop
 8007fda:	3754      	adds	r7, #84	; 0x54
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff fb3a 	bl	800767c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	60bb      	str	r3, [r7, #8]
   return(result);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802c:	61fb      	str	r3, [r7, #28]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6979      	ldr	r1, [r7, #20]
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	613b      	str	r3, [r7, #16]
   return(result);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e6      	bne.n	8008018 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2220      	movs	r2, #32
 800804e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fb06 	bl	8007668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800805c:	bf00      	nop
 800805e:	3720      	adds	r7, #32
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b09c      	sub	sp, #112	; 0x70
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008072:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800807c:	2b22      	cmp	r3, #34	; 0x22
 800807e:	f040 80b9 	bne.w	80081f4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008088:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800808c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008090:	b2d9      	uxtb	r1, r3
 8008092:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008096:	b2da      	uxtb	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	400a      	ands	r2, r1
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f040 809c 	bne.w	8008204 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80080ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e6      	bne.n	80080cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	667b      	str	r3, [r7, #100]	; 0x64
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800811e:	647a      	str	r2, [r7, #68]	; 0x44
 8008120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800812c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e5      	bne.n	80080fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d018      	beq.n	8008186 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	623b      	str	r3, [r7, #32]
   return(result);
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008168:	663b      	str	r3, [r7, #96]	; 0x60
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008172:	633b      	str	r3, [r7, #48]	; 0x30
 8008174:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e6      	bne.n	8008154 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800818a:	2b01      	cmp	r3, #1
 800818c:	d12e      	bne.n	80081ec <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f023 0310 	bic.w	r3, r3, #16
 80081a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b2:	61fb      	str	r3, [r7, #28]
 80081b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	69b9      	ldr	r1, [r7, #24]
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	617b      	str	r3, [r7, #20]
   return(result);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e6      	bne.n	8008194 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	d103      	bne.n	80081dc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2210      	movs	r2, #16
 80081da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fa53 	bl	8007690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081ea:	e00b      	b.n	8008204 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7f8 fd1d 	bl	8000c2c <HAL_UART_RxCpltCallback>
}
 80081f2:	e007      	b.n	8008204 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0208 	orr.w	r2, r2, #8
 8008202:	619a      	str	r2, [r3, #24]
}
 8008204:	bf00      	nop
 8008206:	3770      	adds	r7, #112	; 0x70
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b09c      	sub	sp, #112	; 0x70
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800821a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008224:	2b22      	cmp	r3, #34	; 0x22
 8008226:	f040 80b9 	bne.w	800839c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008230:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008238:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800823a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800823e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008242:	4013      	ands	r3, r2
 8008244:	b29a      	uxth	r2, r3
 8008246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008248:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	1c9a      	adds	r2, r3, #2
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800826c:	b29b      	uxth	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 809c 	bne.w	80083ac <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008288:	667b      	str	r3, [r7, #100]	; 0x64
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008292:	657b      	str	r3, [r7, #84]	; 0x54
 8008294:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008298:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e6      	bne.n	8008274 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3308      	adds	r3, #8
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	663b      	str	r3, [r7, #96]	; 0x60
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082c6:	643a      	str	r2, [r7, #64]	; 0x40
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ce:	e841 2300 	strex	r3, r2, [r1]
 80082d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1e5      	bne.n	80082a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2220      	movs	r2, #32
 80082de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d018      	beq.n	800832e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	61fb      	str	r3, [r7, #28]
   return(result);
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800831a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e6      	bne.n	80082fc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008332:	2b01      	cmp	r3, #1
 8008334:	d12e      	bne.n	8008394 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60bb      	str	r3, [r7, #8]
   return(result);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f023 0310 	bic.w	r3, r3, #16
 8008350:	65bb      	str	r3, [r7, #88]	; 0x58
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800835a:	61bb      	str	r3, [r7, #24]
 800835c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6979      	ldr	r1, [r7, #20]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	613b      	str	r3, [r7, #16]
   return(result);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e6      	bne.n	800833c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b10      	cmp	r3, #16
 800837a:	d103      	bne.n	8008384 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2210      	movs	r2, #16
 8008382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff f97f 	bl	8007690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008392:	e00b      	b.n	80083ac <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7f8 fc49 	bl	8000c2c <HAL_UART_RxCpltCallback>
}
 800839a:	e007      	b.n	80083ac <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0208 	orr.w	r2, r2, #8
 80083aa:	619a      	str	r2, [r3, #24]
}
 80083ac:	bf00      	nop
 80083ae:	3770      	adds	r7, #112	; 0x70
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80083d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	43db      	mvns	r3, r3
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	4013      	ands	r3, r2
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083fe:	b084      	sub	sp, #16
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	f107 0014 	add.w	r0, r7, #20
 800840c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	b004      	add	sp, #16
 800843e:	4770      	bx	lr

08008440 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008446:	f3ef 8305 	mrs	r3, IPSR
 800844a:	60bb      	str	r3, [r7, #8]
  return(result);
 800844c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10f      	bne.n	8008472 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008452:	f3ef 8310 	mrs	r3, PRIMASK
 8008456:	607b      	str	r3, [r7, #4]
  return(result);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <osKernelInitialize+0x32>
 800845e:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <osKernelInitialize+0x64>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b02      	cmp	r3, #2
 8008464:	d109      	bne.n	800847a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008466:	f3ef 8311 	mrs	r3, BASEPRI
 800846a:	603b      	str	r3, [r7, #0]
  return(result);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008472:	f06f 0305 	mvn.w	r3, #5
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e00c      	b.n	8008494 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800847a:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <osKernelInitialize+0x64>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d105      	bne.n	800848e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008482:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <osKernelInitialize+0x64>)
 8008484:	2201      	movs	r2, #1
 8008486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	e002      	b.n	8008494 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800848e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008492:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008494:	68fb      	ldr	r3, [r7, #12]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	200007d0 	.word	0x200007d0

080084a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ae:	f3ef 8305 	mrs	r3, IPSR
 80084b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80084b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10f      	bne.n	80084da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ba:	f3ef 8310 	mrs	r3, PRIMASK
 80084be:	607b      	str	r3, [r7, #4]
  return(result);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <osKernelStart+0x32>
 80084c6:	4b11      	ldr	r3, [pc, #68]	; (800850c <osKernelStart+0x64>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d109      	bne.n	80084e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084ce:	f3ef 8311 	mrs	r3, BASEPRI
 80084d2:	603b      	str	r3, [r7, #0]
  return(result);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80084da:	f06f 0305 	mvn.w	r3, #5
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e00e      	b.n	8008500 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80084e2:	4b0a      	ldr	r3, [pc, #40]	; (800850c <osKernelStart+0x64>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d107      	bne.n	80084fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80084ea:	4b08      	ldr	r3, [pc, #32]	; (800850c <osKernelStart+0x64>)
 80084ec:	2202      	movs	r2, #2
 80084ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80084f0:	f001 ff02 	bl	800a2f8 <vTaskStartScheduler>
      stat = osOK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e002      	b.n	8008500 <osKernelStart+0x58>
    } else {
      stat = osError;
 80084fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008500:	68fb      	ldr	r3, [r7, #12]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200007d0 	.word	0x200007d0

08008510 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b092      	sub	sp, #72	; 0x48
 8008514:	af04      	add	r7, sp, #16
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008520:	f3ef 8305 	mrs	r3, IPSR
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008528:	2b00      	cmp	r3, #0
 800852a:	f040 8094 	bne.w	8008656 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852e:	f3ef 8310 	mrs	r3, PRIMASK
 8008532:	623b      	str	r3, [r7, #32]
  return(result);
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f040 808d 	bne.w	8008656 <osThreadNew+0x146>
 800853c:	4b48      	ldr	r3, [pc, #288]	; (8008660 <osThreadNew+0x150>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d106      	bne.n	8008552 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008544:	f3ef 8311 	mrs	r3, BASEPRI
 8008548:	61fb      	str	r3, [r7, #28]
  return(result);
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f040 8082 	bne.w	8008656 <osThreadNew+0x146>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d07e      	beq.n	8008656 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008558:	2380      	movs	r3, #128	; 0x80
 800855a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800855c:	2318      	movs	r3, #24
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008560:	2300      	movs	r3, #0
 8008562:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008564:	f107 031b 	add.w	r3, r7, #27
 8008568:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d045      	beq.n	8008602 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <osThreadNew+0x74>
        name = attr->name;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <osThreadNew+0x9a>
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	2b38      	cmp	r3, #56	; 0x38
 800859c:	d805      	bhi.n	80085aa <osThreadNew+0x9a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <osThreadNew+0x9e>
        return (NULL);
 80085aa:	2300      	movs	r3, #0
 80085ac:	e054      	b.n	8008658 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	089b      	lsrs	r3, r3, #2
 80085bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00e      	beq.n	80085e4 <osThreadNew+0xd4>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	2b5b      	cmp	r3, #91	; 0x5b
 80085cc:	d90a      	bls.n	80085e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d006      	beq.n	80085e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <osThreadNew+0xd4>
        mem = 1;
 80085de:	2301      	movs	r3, #1
 80085e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085e2:	e010      	b.n	8008606 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10c      	bne.n	8008606 <osThreadNew+0xf6>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d108      	bne.n	8008606 <osThreadNew+0xf6>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <osThreadNew+0xf6>
          mem = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008600:	e001      	b.n	8008606 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	2b01      	cmp	r3, #1
 800860a:	d110      	bne.n	800862e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008614:	9202      	str	r2, [sp, #8]
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008620:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f001 fc9c 	bl	8009f60 <xTaskCreateStatic>
 8008628:	4603      	mov	r3, r0
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	e013      	b.n	8008656 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	2b00      	cmp	r3, #0
 8008632:	d110      	bne.n	8008656 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	b29a      	uxth	r2, r3
 8008638:	f107 0314 	add.w	r3, r7, #20
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f001 fce6 	bl	800a018 <xTaskCreate>
 800864c:	4603      	mov	r3, r0
 800864e:	2b01      	cmp	r3, #1
 8008650:	d001      	beq.n	8008656 <osThreadNew+0x146>
          hTask = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008656:	697b      	ldr	r3, [r7, #20]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3738      	adds	r7, #56	; 0x38
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	200007d0 	.word	0x200007d0

08008664 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800866c:	f3ef 8305 	mrs	r3, IPSR
 8008670:	613b      	str	r3, [r7, #16]
  return(result);
 8008672:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10f      	bne.n	8008698 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008678:	f3ef 8310 	mrs	r3, PRIMASK
 800867c:	60fb      	str	r3, [r7, #12]
  return(result);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d109      	bne.n	8008698 <osDelay+0x34>
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <osDelay+0x58>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d109      	bne.n	80086a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800868c:	f3ef 8311 	mrs	r3, BASEPRI
 8008690:	60bb      	str	r3, [r7, #8]
  return(result);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <osDelay+0x3c>
    stat = osErrorISR;
 8008698:	f06f 0305 	mvn.w	r3, #5
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e007      	b.n	80086b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fdf0 	bl	800a290 <vTaskDelay>
    }
  }

  return (stat);
 80086b0:	697b      	ldr	r3, [r7, #20]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200007d0 	.word	0x200007d0

080086c0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	; 0x28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086cc:	f3ef 8305 	mrs	r3, IPSR
 80086d0:	613b      	str	r3, [r7, #16]
  return(result);
 80086d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 8085 	bne.w	80087e4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086da:	f3ef 8310 	mrs	r3, PRIMASK
 80086de:	60fb      	str	r3, [r7, #12]
  return(result);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d17e      	bne.n	80087e4 <osMutexNew+0x124>
 80086e6:	4b42      	ldr	r3, [pc, #264]	; (80087f0 <osMutexNew+0x130>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d105      	bne.n	80086fa <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086ee:	f3ef 8311 	mrs	r3, BASEPRI
 80086f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d174      	bne.n	80087e4 <osMutexNew+0x124>
    if (attr != NULL) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	623b      	str	r3, [r7, #32]
 8008706:	e001      	b.n	800870c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <osMutexNew+0x5c>
      rmtx = 1U;
 8008716:	2301      	movs	r3, #1
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	e001      	b.n	8008720 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	2b00      	cmp	r3, #0
 8008728:	d15c      	bne.n	80087e4 <osMutexNew+0x124>
      mem = -1;
 800872a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800872e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d015      	beq.n	8008762 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d006      	beq.n	800874c <osMutexNew+0x8c>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b4f      	cmp	r3, #79	; 0x4f
 8008744:	d902      	bls.n	800874c <osMutexNew+0x8c>
          mem = 1;
 8008746:	2301      	movs	r3, #1
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	e00c      	b.n	8008766 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d108      	bne.n	8008766 <osMutexNew+0xa6>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d104      	bne.n	8008766 <osMutexNew+0xa6>
            mem = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	61bb      	str	r3, [r7, #24]
 8008760:	e001      	b.n	8008766 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d112      	bne.n	8008792 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	4619      	mov	r1, r3
 8008778:	2004      	movs	r0, #4
 800877a:	f000 fc9d 	bl	80090b8 <xQueueCreateMutexStatic>
 800877e:	6278      	str	r0, [r7, #36]	; 0x24
 8008780:	e016      	b.n	80087b0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	4619      	mov	r1, r3
 8008788:	2001      	movs	r0, #1
 800878a:	f000 fc95 	bl	80090b8 <xQueueCreateMutexStatic>
 800878e:	6278      	str	r0, [r7, #36]	; 0x24
 8008790:	e00e      	b.n	80087b0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10b      	bne.n	80087b0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d004      	beq.n	80087a8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800879e:	2004      	movs	r0, #4
 80087a0:	f000 fc72 	bl	8009088 <xQueueCreateMutex>
 80087a4:	6278      	str	r0, [r7, #36]	; 0x24
 80087a6:	e003      	b.n	80087b0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80087a8:	2001      	movs	r0, #1
 80087aa:	f000 fc6d 	bl	8009088 <xQueueCreateMutex>
 80087ae:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00c      	beq.n	80087d0 <osMutexNew+0x110>
        if (attr != NULL) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <osMutexNew+0x104>
          name = attr->name;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	e001      	b.n	80087c8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80087c8:	6979      	ldr	r1, [r7, #20]
 80087ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087cc:	f001 fb40 	bl	8009e50 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d006      	beq.n	80087e4 <osMutexNew+0x124>
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	f043 0301 	orr.w	r3, r3, #1
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3728      	adds	r7, #40	; 0x28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	200007d0 	.word	0x200007d0

080087f4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f023 0301 	bic.w	r3, r3, #1
 8008804:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800880e:	2300      	movs	r3, #0
 8008810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008812:	f3ef 8305 	mrs	r3, IPSR
 8008816:	613b      	str	r3, [r7, #16]
  return(result);
 8008818:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10f      	bne.n	800883e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800881e:	f3ef 8310 	mrs	r3, PRIMASK
 8008822:	60fb      	str	r3, [r7, #12]
  return(result);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <osMutexAcquire+0x4a>
 800882a:	4b20      	ldr	r3, [pc, #128]	; (80088ac <osMutexAcquire+0xb8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d109      	bne.n	8008846 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008832:	f3ef 8311 	mrs	r3, BASEPRI
 8008836:	60bb      	str	r3, [r7, #8]
  return(result);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800883e:	f06f 0305 	mvn.w	r3, #5
 8008842:	61fb      	str	r3, [r7, #28]
 8008844:	e02c      	b.n	80088a0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d103      	bne.n	8008854 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800884c:	f06f 0303 	mvn.w	r3, #3
 8008850:	61fb      	str	r3, [r7, #28]
 8008852:	e025      	b.n	80088a0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d011      	beq.n	800887e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	69b8      	ldr	r0, [r7, #24]
 800885e:	f000 fc7a 	bl	8009156 <xQueueTakeMutexRecursive>
 8008862:	4603      	mov	r3, r0
 8008864:	2b01      	cmp	r3, #1
 8008866:	d01b      	beq.n	80088a0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800886e:	f06f 0301 	mvn.w	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	e014      	b.n	80088a0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008876:	f06f 0302 	mvn.w	r3, #2
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	e010      	b.n	80088a0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	69b8      	ldr	r0, [r7, #24]
 8008882:	f001 f80d 	bl	80098a0 <xQueueSemaphoreTake>
 8008886:	4603      	mov	r3, r0
 8008888:	2b01      	cmp	r3, #1
 800888a:	d009      	beq.n	80088a0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008892:	f06f 0301 	mvn.w	r3, #1
 8008896:	61fb      	str	r3, [r7, #28]
 8008898:	e002      	b.n	80088a0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800889a:	f06f 0302 	mvn.w	r3, #2
 800889e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80088a0:	69fb      	ldr	r3, [r7, #28]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3720      	adds	r7, #32
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200007d0 	.word	0x200007d0

080088b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f023 0301 	bic.w	r3, r3, #1
 80088be:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088cc:	f3ef 8305 	mrs	r3, IPSR
 80088d0:	613b      	str	r3, [r7, #16]
  return(result);
 80088d2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10f      	bne.n	80088f8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d8:	f3ef 8310 	mrs	r3, PRIMASK
 80088dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d109      	bne.n	80088f8 <osMutexRelease+0x48>
 80088e4:	4b19      	ldr	r3, [pc, #100]	; (800894c <osMutexRelease+0x9c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d109      	bne.n	8008900 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088ec:	f3ef 8311 	mrs	r3, BASEPRI
 80088f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <osMutexRelease+0x50>
    stat = osErrorISR;
 80088f8:	f06f 0305 	mvn.w	r3, #5
 80088fc:	61fb      	str	r3, [r7, #28]
 80088fe:	e01f      	b.n	8008940 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008906:	f06f 0303 	mvn.w	r3, #3
 800890a:	61fb      	str	r3, [r7, #28]
 800890c:	e018      	b.n	8008940 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d009      	beq.n	8008928 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008914:	69b8      	ldr	r0, [r7, #24]
 8008916:	f000 fbea 	bl	80090ee <xQueueGiveMutexRecursive>
 800891a:	4603      	mov	r3, r0
 800891c:	2b01      	cmp	r3, #1
 800891e:	d00f      	beq.n	8008940 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008920:	f06f 0302 	mvn.w	r3, #2
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	e00b      	b.n	8008940 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008928:	2300      	movs	r3, #0
 800892a:	2200      	movs	r2, #0
 800892c:	2100      	movs	r1, #0
 800892e:	69b8      	ldr	r0, [r7, #24]
 8008930:	f000 fcb2 	bl	8009298 <xQueueGenericSend>
 8008934:	4603      	mov	r3, r0
 8008936:	2b01      	cmp	r3, #1
 8008938:	d002      	beq.n	8008940 <osMutexRelease+0x90>
        stat = osErrorResource;
 800893a:	f06f 0302 	mvn.w	r3, #2
 800893e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008940:	69fb      	ldr	r3, [r7, #28]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3720      	adds	r7, #32
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	200007d0 	.word	0x200007d0

08008950 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008950:	b580      	push	{r7, lr}
 8008952:	b08c      	sub	sp, #48	; 0x30
 8008954:	af02      	add	r7, sp, #8
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800895c:	2300      	movs	r3, #0
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008960:	f3ef 8305 	mrs	r3, IPSR
 8008964:	61bb      	str	r3, [r7, #24]
  return(result);
 8008966:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 8086 	bne.w	8008a7a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800896e:	f3ef 8310 	mrs	r3, PRIMASK
 8008972:	617b      	str	r3, [r7, #20]
  return(result);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d17f      	bne.n	8008a7a <osSemaphoreNew+0x12a>
 800897a:	4b42      	ldr	r3, [pc, #264]	; (8008a84 <osSemaphoreNew+0x134>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b02      	cmp	r3, #2
 8008980:	d105      	bne.n	800898e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008982:	f3ef 8311 	mrs	r3, BASEPRI
 8008986:	613b      	str	r3, [r7, #16]
  return(result);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d175      	bne.n	8008a7a <osSemaphoreNew+0x12a>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d072      	beq.n	8008a7a <osSemaphoreNew+0x12a>
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	429a      	cmp	r2, r3
 800899a:	d86e      	bhi.n	8008a7a <osSemaphoreNew+0x12a>
    mem = -1;
 800899c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d015      	beq.n	80089d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <osSemaphoreNew+0x6e>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	2b4f      	cmp	r3, #79	; 0x4f
 80089b6:	d902      	bls.n	80089be <osSemaphoreNew+0x6e>
        mem = 1;
 80089b8:	2301      	movs	r3, #1
 80089ba:	623b      	str	r3, [r7, #32]
 80089bc:	e00c      	b.n	80089d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d108      	bne.n	80089d8 <osSemaphoreNew+0x88>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <osSemaphoreNew+0x88>
          mem = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	623b      	str	r3, [r7, #32]
 80089d2:	e001      	b.n	80089d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089de:	d04c      	beq.n	8008a7a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d128      	bne.n	8008a38 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d10a      	bne.n	8008a02 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2203      	movs	r2, #3
 80089f2:	9200      	str	r2, [sp, #0]
 80089f4:	2200      	movs	r2, #0
 80089f6:	2100      	movs	r1, #0
 80089f8:	2001      	movs	r0, #1
 80089fa:	f000 fa53 	bl	8008ea4 <xQueueGenericCreateStatic>
 80089fe:	6278      	str	r0, [r7, #36]	; 0x24
 8008a00:	e005      	b.n	8008a0e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008a02:	2203      	movs	r2, #3
 8008a04:	2100      	movs	r1, #0
 8008a06:	2001      	movs	r0, #1
 8008a08:	f000 fac3 	bl	8008f92 <xQueueGenericCreate>
 8008a0c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d022      	beq.n	8008a5a <osSemaphoreNew+0x10a>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01f      	beq.n	8008a5a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2100      	movs	r1, #0
 8008a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a22:	f000 fc39 	bl	8009298 <xQueueGenericSend>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d016      	beq.n	8008a5a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a2e:	f001 f8c3 	bl	8009bb8 <vQueueDelete>
            hSemaphore = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
 8008a36:	e010      	b.n	8008a5a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d108      	bne.n	8008a50 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	461a      	mov	r2, r3
 8008a44:	68b9      	ldr	r1, [r7, #8]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fbbb 	bl	80091c2 <xQueueCreateCountingSemaphoreStatic>
 8008a4c:	6278      	str	r0, [r7, #36]	; 0x24
 8008a4e:	e004      	b.n	8008a5a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 fbec 	bl	8009230 <xQueueCreateCountingSemaphore>
 8008a58:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <osSemaphoreNew+0x11e>
          name = attr->name;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	e001      	b.n	8008a72 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008a72:	69f9      	ldr	r1, [r7, #28]
 8008a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a76:	f001 f9eb 	bl	8009e50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3728      	adds	r7, #40	; 0x28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	200007d0 	.word	0x200007d0

08008a88 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008aa0:	f06f 0303 	mvn.w	r3, #3
 8008aa4:	61fb      	str	r3, [r7, #28]
 8008aa6:	e04b      	b.n	8008b40 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aa8:	f3ef 8305 	mrs	r3, IPSR
 8008aac:	617b      	str	r3, [r7, #20]
  return(result);
 8008aae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10f      	bne.n	8008ad4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d109      	bne.n	8008ad4 <osSemaphoreAcquire+0x4c>
 8008ac0:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <osSemaphoreAcquire+0xc4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d128      	bne.n	8008b1a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8008acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d022      	beq.n	8008b1a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008ada:	f06f 0303 	mvn.w	r3, #3
 8008ade:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008ae0:	e02d      	b.n	8008b3e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	461a      	mov	r2, r3
 8008aec:	2100      	movs	r1, #0
 8008aee:	69b8      	ldr	r0, [r7, #24]
 8008af0:	f000 ffe2 	bl	8009ab8 <xQueueReceiveFromISR>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d003      	beq.n	8008b02 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008afa:	f06f 0302 	mvn.w	r3, #2
 8008afe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008b00:	e01d      	b.n	8008b3e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01a      	beq.n	8008b3e <osSemaphoreAcquire+0xb6>
 8008b08:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <osSemaphoreAcquire+0xc8>)
 8008b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008b18:	e011      	b.n	8008b3e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	69b8      	ldr	r0, [r7, #24]
 8008b1e:	f000 febf 	bl	80098a0 <xQueueSemaphoreTake>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d00b      	beq.n	8008b40 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008b2e:	f06f 0301 	mvn.w	r3, #1
 8008b32:	61fb      	str	r3, [r7, #28]
 8008b34:	e004      	b.n	8008b40 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008b36:	f06f 0302 	mvn.w	r3, #2
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	e000      	b.n	8008b40 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008b3e:	bf00      	nop
      }
    }
  }

  return (stat);
 8008b40:	69fb      	ldr	r3, [r7, #28]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200007d0 	.word	0x200007d0
 8008b50:	e000ed04 	.word	0xe000ed04

08008b54 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d103      	bne.n	8008b72 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008b6a:	f06f 0303 	mvn.w	r3, #3
 8008b6e:	61fb      	str	r3, [r7, #28]
 8008b70:	e03e      	b.n	8008bf0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b72:	f3ef 8305 	mrs	r3, IPSR
 8008b76:	617b      	str	r3, [r7, #20]
  return(result);
 8008b78:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10f      	bne.n	8008b9e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b82:	613b      	str	r3, [r7, #16]
  return(result);
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d109      	bne.n	8008b9e <osSemaphoreRelease+0x4a>
 8008b8a:	4b1c      	ldr	r3, [pc, #112]	; (8008bfc <osSemaphoreRelease+0xa8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d120      	bne.n	8008bd4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b92:	f3ef 8311 	mrs	r3, BASEPRI
 8008b96:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d01a      	beq.n	8008bd4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ba2:	f107 0308 	add.w	r3, r7, #8
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	69b8      	ldr	r0, [r7, #24]
 8008baa:	f000 fd0b 	bl	80095c4 <xQueueGiveFromISR>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d003      	beq.n	8008bbc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008bb4:	f06f 0302 	mvn.w	r3, #2
 8008bb8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008bba:	e018      	b.n	8008bee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d015      	beq.n	8008bee <osSemaphoreRelease+0x9a>
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <osSemaphoreRelease+0xac>)
 8008bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008bd2:	e00c      	b.n	8008bee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2100      	movs	r1, #0
 8008bda:	69b8      	ldr	r0, [r7, #24]
 8008bdc:	f000 fb5c 	bl	8009298 <xQueueGenericSend>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d004      	beq.n	8008bf0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008be6:	f06f 0302 	mvn.w	r3, #2
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e000      	b.n	8008bf0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008bee:	bf00      	nop
    }
  }

  return (stat);
 8008bf0:	69fb      	ldr	r3, [r7, #28]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	200007d0 	.word	0x200007d0
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	4a06      	ldr	r2, [pc, #24]	; (8008c34 <vApplicationGetIdleTaskMemory+0x30>)
 8008c1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2280      	movs	r2, #128	; 0x80
 8008c20:	601a      	str	r2, [r3, #0]
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	200007d4 	.word	0x200007d4
 8008c34:	20000830 	.word	0x20000830

08008c38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a07      	ldr	r2, [pc, #28]	; (8008c64 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4a06      	ldr	r2, [pc, #24]	; (8008c68 <vApplicationGetTimerTaskMemory+0x30>)
 8008c4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c56:	601a      	str	r2, [r3, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	20000a30 	.word	0x20000a30
 8008c68:	20000a8c 	.word	0x20000a8c

08008c6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f103 0208 	add.w	r2, r3, #8
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f103 0208 	add.w	r2, r3, #8
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f103 0208 	add.w	r2, r3, #8
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cba:	bf00      	nop
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b085      	sub	sp, #20
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	601a      	str	r2, [r3, #0]
}
 8008d02:	bf00      	nop
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d24:	d103      	bne.n	8008d2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	e00c      	b.n	8008d48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3308      	adds	r3, #8
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e002      	b.n	8008d3c <vListInsert+0x2e>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d2f6      	bcs.n	8008d36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]
}
 8008d74:	bf00      	nop
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6892      	ldr	r2, [r2, #8]
 8008d96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6852      	ldr	r2, [r2, #4]
 8008da0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d103      	bne.n	8008db4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	1e5a      	subs	r2, r3, #1
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008dfe:	f002 fd01 	bl	800b804 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e0e:	fb01 f303 	mul.w	r3, r1, r3
 8008e12:	441a      	add	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	68f9      	ldr	r1, [r7, #12]
 8008e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e34:	fb01 f303 	mul.w	r3, r1, r3
 8008e38:	441a      	add	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	22ff      	movs	r2, #255	; 0xff
 8008e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d114      	bne.n	8008e7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01a      	beq.n	8008e92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3310      	adds	r3, #16
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 fcd7 	bl	800a814 <xTaskRemoveFromEventList>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d012      	beq.n	8008e92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <xQueueGenericReset+0xcc>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	e009      	b.n	8008e92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3310      	adds	r3, #16
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff fef2 	bl	8008c6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3324      	adds	r3, #36	; 0x24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff feed 	bl	8008c6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e92:	f002 fce7 	bl	800b864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e96:	2301      	movs	r3, #1
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08e      	sub	sp, #56	; 0x38
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <xQueueGenericCreateStatic+0x52>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <xQueueGenericCreateStatic+0x56>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <xQueueGenericCreateStatic+0x58>
 8008efa:	2300      	movs	r3, #0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	623b      	str	r3, [r7, #32]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d102      	bne.n	8008f22 <xQueueGenericCreateStatic+0x7e>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <xQueueGenericCreateStatic+0x82>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <xQueueGenericCreateStatic+0x84>
 8008f26:	2300      	movs	r3, #0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	61fb      	str	r3, [r7, #28]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f42:	2350      	movs	r3, #80	; 0x50
 8008f44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b50      	cmp	r3, #80	; 0x50
 8008f4a:	d00a      	beq.n	8008f62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	61bb      	str	r3, [r7, #24]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00d      	beq.n	8008f88 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f74:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f843 	bl	800900e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3730      	adds	r7, #48	; 0x30
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b08a      	sub	sp, #40	; 0x28
 8008f96:	af02      	add	r7, sp, #8
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <xQueueGenericCreate+0x2a>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	613b      	str	r3, [r7, #16]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	61fb      	str	r3, [r7, #28]
 8008fc6:	e004      	b.n	8008fd2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	fb02 f303 	mul.w	r3, r2, r3
 8008fd0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	3350      	adds	r3, #80	; 0x50
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f002 fd36 	bl	800ba48 <pvPortMalloc>
 8008fdc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00f      	beq.n	8009004 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	3350      	adds	r3, #80	; 0x50
 8008fe8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ff2:	79fa      	ldrb	r2, [r7, #7]
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	68b9      	ldr	r1, [r7, #8]
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f000 f805 	bl	800900e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009004:	69bb      	ldr	r3, [r7, #24]
	}
 8009006:	4618      	mov	r0, r3
 8009008:	3720      	adds	r7, #32
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d103      	bne.n	800902a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	e002      	b.n	8009030 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800903c:	2101      	movs	r1, #1
 800903e:	69b8      	ldr	r0, [r7, #24]
 8009040:	f7ff fec8 	bl	8008dd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009074:	2300      	movs	r3, #0
 8009076:	2200      	movs	r2, #0
 8009078:	2100      	movs	r1, #0
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f90c 	bl	8009298 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009092:	2301      	movs	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	461a      	mov	r2, r3
 800909e:	6939      	ldr	r1, [r7, #16]
 80090a0:	6978      	ldr	r0, [r7, #20]
 80090a2:	f7ff ff76 	bl	8008f92 <xQueueGenericCreate>
 80090a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7ff ffd3 	bl	8009054 <prvInitialiseMutex>

		return pxNewQueue;
 80090ae:	68fb      	ldr	r3, [r7, #12]
	}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af02      	add	r7, sp, #8
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	2300      	movs	r3, #0
 80090ca:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	6939      	ldr	r1, [r7, #16]
 80090d6:	6978      	ldr	r0, [r7, #20]
 80090d8:	f7ff fee4 	bl	8008ea4 <xQueueGenericCreateStatic>
 80090dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff ffb8 	bl	8009054 <prvInitialiseMutex>

		return pxNewQueue;
 80090e4:	68fb      	ldr	r3, [r7, #12]
	}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80090ee:	b590      	push	{r4, r7, lr}
 80090f0:	b087      	sub	sp, #28
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	60fb      	str	r3, [r7, #12]
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	685c      	ldr	r4, [r3, #4]
 800911a:	f001 fd3f 	bl	800ab9c <xTaskGetCurrentTaskHandle>
 800911e:	4603      	mov	r3, r0
 8009120:	429c      	cmp	r4, r3
 8009122:	d111      	bne.n	8009148 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	1e5a      	subs	r2, r3, #1
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d105      	bne.n	8009142 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009136:	2300      	movs	r3, #0
 8009138:	2200      	movs	r2, #0
 800913a:	2100      	movs	r1, #0
 800913c:	6938      	ldr	r0, [r7, #16]
 800913e:	f000 f8ab 	bl	8009298 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009142:	2301      	movs	r3, #1
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e001      	b.n	800914c <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800914c:	697b      	ldr	r3, [r7, #20]
	}
 800914e:	4618      	mov	r0, r3
 8009150:	371c      	adds	r7, #28
 8009152:	46bd      	mov	sp, r7
 8009154:	bd90      	pop	{r4, r7, pc}

08009156 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009156:	b590      	push	{r4, r7, lr}
 8009158:	b087      	sub	sp, #28
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	60fb      	str	r3, [r7, #12]
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	685c      	ldr	r4, [r3, #4]
 8009184:	f001 fd0a 	bl	800ab9c <xTaskGetCurrentTaskHandle>
 8009188:	4603      	mov	r3, r0
 800918a:	429c      	cmp	r4, r3
 800918c:	d107      	bne.n	800919e <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009198:	2301      	movs	r3, #1
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	e00c      	b.n	80091b8 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6938      	ldr	r0, [r7, #16]
 80091a2:	f000 fb7d 	bl	80098a0 <xQueueSemaphoreTake>
 80091a6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d004      	beq.n	80091b8 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80091b8:	697b      	ldr	r3, [r7, #20]
	}
 80091ba:	4618      	mov	r0, r3
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd90      	pop	{r4, r7, pc}

080091c2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b08a      	sub	sp, #40	; 0x28
 80091c6:	af02      	add	r7, sp, #8
 80091c8:	60f8      	str	r0, [r7, #12]
 80091ca:	60b9      	str	r1, [r7, #8]
 80091cc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10a      	bne.n	80091ea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	61bb      	str	r3, [r7, #24]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d90a      	bls.n	8009208 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	617b      	str	r3, [r7, #20]
}
 8009204:	bf00      	nop
 8009206:	e7fe      	b.n	8009206 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009208:	2302      	movs	r3, #2
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	2100      	movs	r1, #0
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7ff fe46 	bl	8008ea4 <xQueueGenericCreateStatic>
 8009218:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009226:	69fb      	ldr	r3, [r7, #28]
	}
 8009228:	4618      	mov	r0, r3
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	613b      	str	r3, [r7, #16]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	429a      	cmp	r2, r3
 800925c:	d90a      	bls.n	8009274 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	60fb      	str	r3, [r7, #12]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009274:	2202      	movs	r2, #2
 8009276:	2100      	movs	r1, #0
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff fe8a 	bl	8008f92 <xQueueGenericCreate>
 800927e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800928c:	697b      	ldr	r3, [r7, #20]
	}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08e      	sub	sp, #56	; 0x38
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092a6:	2300      	movs	r3, #0
 80092a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10a      	bne.n	80092ca <xQueueGenericSend+0x32>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092c6:	bf00      	nop
 80092c8:	e7fe      	b.n	80092c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d103      	bne.n	80092d8 <xQueueGenericSend+0x40>
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <xQueueGenericSend+0x44>
 80092d8:	2301      	movs	r3, #1
 80092da:	e000      	b.n	80092de <xQueueGenericSend+0x46>
 80092dc:	2300      	movs	r3, #0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10a      	bne.n	80092f8 <xQueueGenericSend+0x60>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092f4:	bf00      	nop
 80092f6:	e7fe      	b.n	80092f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d103      	bne.n	8009306 <xQueueGenericSend+0x6e>
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	2b01      	cmp	r3, #1
 8009304:	d101      	bne.n	800930a <xQueueGenericSend+0x72>
 8009306:	2301      	movs	r3, #1
 8009308:	e000      	b.n	800930c <xQueueGenericSend+0x74>
 800930a:	2300      	movs	r3, #0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <xQueueGenericSend+0x8e>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	623b      	str	r3, [r7, #32]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009326:	f001 fc49 	bl	800abbc <xTaskGetSchedulerState>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <xQueueGenericSend+0x9e>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <xQueueGenericSend+0xa2>
 8009336:	2301      	movs	r3, #1
 8009338:	e000      	b.n	800933c <xQueueGenericSend+0xa4>
 800933a:	2300      	movs	r3, #0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <xQueueGenericSend+0xbe>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	61fb      	str	r3, [r7, #28]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009356:	f002 fa55 	bl	800b804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009362:	429a      	cmp	r2, r3
 8009364:	d302      	bcc.n	800936c <xQueueGenericSend+0xd4>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b02      	cmp	r3, #2
 800936a:	d129      	bne.n	80093c0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	68b9      	ldr	r1, [r7, #8]
 8009370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009372:	f000 fc5c 	bl	8009c2e <prvCopyDataToQueue>
 8009376:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	2b00      	cmp	r3, #0
 800937e:	d010      	beq.n	80093a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	3324      	adds	r3, #36	; 0x24
 8009384:	4618      	mov	r0, r3
 8009386:	f001 fa45 	bl	800a814 <xTaskRemoveFromEventList>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d013      	beq.n	80093b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009390:	4b3f      	ldr	r3, [pc, #252]	; (8009490 <xQueueGenericSend+0x1f8>)
 8009392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	e00a      	b.n	80093b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d007      	beq.n	80093b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80093a8:	4b39      	ldr	r3, [pc, #228]	; (8009490 <xQueueGenericSend+0x1f8>)
 80093aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80093b8:	f002 fa54 	bl	800b864 <vPortExitCritical>
				return pdPASS;
 80093bc:	2301      	movs	r3, #1
 80093be:	e063      	b.n	8009488 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d103      	bne.n	80093ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093c6:	f002 fa4d 	bl	800b864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	e05c      	b.n	8009488 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d106      	bne.n	80093e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093d4:	f107 0314 	add.w	r3, r7, #20
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 fa7f 	bl	800a8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093de:	2301      	movs	r3, #1
 80093e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093e2:	f002 fa3f 	bl	800b864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093e6:	f000 ffed 	bl	800a3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ea:	f002 fa0b 	bl	800b804 <vPortEnterCritical>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093f4:	b25b      	sxtb	r3, r3
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093fa:	d103      	bne.n	8009404 <xQueueGenericSend+0x16c>
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800940a:	b25b      	sxtb	r3, r3
 800940c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009410:	d103      	bne.n	800941a <xQueueGenericSend+0x182>
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800941a:	f002 fa23 	bl	800b864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800941e:	1d3a      	adds	r2, r7, #4
 8009420:	f107 0314 	add.w	r3, r7, #20
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f001 fa6e 	bl	800a908 <xTaskCheckForTimeOut>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d124      	bne.n	800947c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009434:	f000 fcf3 	bl	8009e1e <prvIsQueueFull>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d018      	beq.n	8009470 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	3310      	adds	r3, #16
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4611      	mov	r1, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f001 f994 	bl	800a774 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800944c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800944e:	f000 fc7e 	bl	8009d4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009452:	f000 ffc5 	bl	800a3e0 <xTaskResumeAll>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	f47f af7c 	bne.w	8009356 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800945e:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <xQueueGenericSend+0x1f8>)
 8009460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	e772      	b.n	8009356 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009472:	f000 fc6c 	bl	8009d4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009476:	f000 ffb3 	bl	800a3e0 <xTaskResumeAll>
 800947a:	e76c      	b.n	8009356 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800947c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800947e:	f000 fc66 	bl	8009d4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009482:	f000 ffad 	bl	800a3e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009486:	2300      	movs	r3, #0
		}
	}
}
 8009488:	4618      	mov	r0, r3
 800948a:	3738      	adds	r7, #56	; 0x38
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	e000ed04 	.word	0xe000ed04

08009494 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b08e      	sub	sp, #56	; 0x38
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <xQueueGenericSendFromISR+0x3c>
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <xQueueGenericSendFromISR+0x40>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <xQueueGenericSendFromISR+0x42>
 80094d4:	2300      	movs	r3, #0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10a      	bne.n	80094f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	623b      	str	r3, [r7, #32]
}
 80094ec:	bf00      	nop
 80094ee:	e7fe      	b.n	80094ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d103      	bne.n	80094fe <xQueueGenericSendFromISR+0x6a>
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <xQueueGenericSendFromISR+0x6e>
 80094fe:	2301      	movs	r3, #1
 8009500:	e000      	b.n	8009504 <xQueueGenericSendFromISR+0x70>
 8009502:	2300      	movs	r3, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	61fb      	str	r3, [r7, #28]
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800951e:	f002 fa53 	bl	800b9c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009522:	f3ef 8211 	mrs	r2, BASEPRI
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	61ba      	str	r2, [r7, #24]
 8009538:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800953a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800953c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009546:	429a      	cmp	r2, r3
 8009548:	d302      	bcc.n	8009550 <xQueueGenericSendFromISR+0xbc>
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d12c      	bne.n	80095aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	68b9      	ldr	r1, [r7, #8]
 800955e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009560:	f000 fb65 	bl	8009c2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009564:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800956c:	d112      	bne.n	8009594 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	2b00      	cmp	r3, #0
 8009574:	d016      	beq.n	80095a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	3324      	adds	r3, #36	; 0x24
 800957a:	4618      	mov	r0, r3
 800957c:	f001 f94a 	bl	800a814 <xTaskRemoveFromEventList>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00e      	beq.n	80095a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	e007      	b.n	80095a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009594:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009598:	3301      	adds	r3, #1
 800959a:	b2db      	uxtb	r3, r3
 800959c:	b25a      	sxtb	r2, r3
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80095a4:	2301      	movs	r3, #1
 80095a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80095a8:	e001      	b.n	80095ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	637b      	str	r3, [r7, #52]	; 0x34
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3738      	adds	r7, #56	; 0x38
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	; 0x38
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <xQueueGiveFromISR+0x2a>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	623b      	str	r3, [r7, #32]
}
 80095ea:	bf00      	nop
 80095ec:	e7fe      	b.n	80095ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <xQueueGiveFromISR+0x48>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	61fb      	str	r3, [r7, #28]
}
 8009608:	bf00      	nop
 800960a:	e7fe      	b.n	800960a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d103      	bne.n	800961c <xQueueGiveFromISR+0x58>
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <xQueueGiveFromISR+0x5c>
 800961c:	2301      	movs	r3, #1
 800961e:	e000      	b.n	8009622 <xQueueGiveFromISR+0x5e>
 8009620:	2300      	movs	r3, #0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10a      	bne.n	800963c <xQueueGiveFromISR+0x78>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	61bb      	str	r3, [r7, #24]
}
 8009638:	bf00      	nop
 800963a:	e7fe      	b.n	800963a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800963c:	f002 f9c4 	bl	800b9c8 <vPortValidateInterruptPriority>
	__asm volatile
 8009640:	f3ef 8211 	mrs	r2, BASEPRI
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	617a      	str	r2, [r7, #20]
 8009656:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009658:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800965a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009668:	429a      	cmp	r2, r3
 800966a:	d22b      	bcs.n	80096c4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800967e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009686:	d112      	bne.n	80096ae <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	2b00      	cmp	r3, #0
 800968e:	d016      	beq.n	80096be <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	3324      	adds	r3, #36	; 0x24
 8009694:	4618      	mov	r0, r3
 8009696:	f001 f8bd 	bl	800a814 <xTaskRemoveFromEventList>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00e      	beq.n	80096be <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00b      	beq.n	80096be <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2201      	movs	r2, #1
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	e007      	b.n	80096be <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b2:	3301      	adds	r3, #1
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	b25a      	sxtb	r2, r3
 80096b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80096be:	2301      	movs	r3, #1
 80096c0:	637b      	str	r3, [r7, #52]	; 0x34
 80096c2:	e001      	b.n	80096c8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	637b      	str	r3, [r7, #52]	; 0x34
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f383 8811 	msr	BASEPRI, r3
}
 80096d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3738      	adds	r7, #56	; 0x38
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08c      	sub	sp, #48	; 0x30
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <xQueueReceive+0x30>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	623b      	str	r3, [r7, #32]
}
 800970c:	bf00      	nop
 800970e:	e7fe      	b.n	800970e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d103      	bne.n	800971e <xQueueReceive+0x3e>
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <xQueueReceive+0x42>
 800971e:	2301      	movs	r3, #1
 8009720:	e000      	b.n	8009724 <xQueueReceive+0x44>
 8009722:	2300      	movs	r3, #0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <xQueueReceive+0x5e>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	61fb      	str	r3, [r7, #28]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800973e:	f001 fa3d 	bl	800abbc <xTaskGetSchedulerState>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <xQueueReceive+0x6e>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <xQueueReceive+0x72>
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <xQueueReceive+0x74>
 8009752:	2300      	movs	r3, #0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xQueueReceive+0x8e>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61bb      	str	r3, [r7, #24]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800976e:	f002 f849 	bl	800b804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	2b00      	cmp	r3, #0
 800977c:	d01f      	beq.n	80097be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009782:	f000 fabe 	bl	8009d02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	1e5a      	subs	r2, r3, #1
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00f      	beq.n	80097b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	3310      	adds	r3, #16
 800979a:	4618      	mov	r0, r3
 800979c:	f001 f83a 	bl	800a814 <xTaskRemoveFromEventList>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d007      	beq.n	80097b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097a6:	4b3d      	ldr	r3, [pc, #244]	; (800989c <xQueueReceive+0x1bc>)
 80097a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097b6:	f002 f855 	bl	800b864 <vPortExitCritical>
				return pdPASS;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e069      	b.n	8009892 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d103      	bne.n	80097cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097c4:	f002 f84e 	bl	800b864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097c8:	2300      	movs	r3, #0
 80097ca:	e062      	b.n	8009892 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d106      	bne.n	80097e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097d2:	f107 0310 	add.w	r3, r7, #16
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 f880 	bl	800a8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097dc:	2301      	movs	r3, #1
 80097de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097e0:	f002 f840 	bl	800b864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097e4:	f000 fdee 	bl	800a3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097e8:	f002 f80c 	bl	800b804 <vPortEnterCritical>
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097f2:	b25b      	sxtb	r3, r3
 80097f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f8:	d103      	bne.n	8009802 <xQueueReceive+0x122>
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009808:	b25b      	sxtb	r3, r3
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800980e:	d103      	bne.n	8009818 <xQueueReceive+0x138>
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009818:	f002 f824 	bl	800b864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800981c:	1d3a      	adds	r2, r7, #4
 800981e:	f107 0310 	add.w	r3, r7, #16
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f001 f86f 	bl	800a908 <xTaskCheckForTimeOut>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d123      	bne.n	8009878 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009832:	f000 fade 	bl	8009df2 <prvIsQueueEmpty>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d017      	beq.n	800986c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	3324      	adds	r3, #36	; 0x24
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	4611      	mov	r1, r2
 8009844:	4618      	mov	r0, r3
 8009846:	f000 ff95 	bl	800a774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800984a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984c:	f000 fa7f 	bl	8009d4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009850:	f000 fdc6 	bl	800a3e0 <xTaskResumeAll>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d189      	bne.n	800976e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800985a:	4b10      	ldr	r3, [pc, #64]	; (800989c <xQueueReceive+0x1bc>)
 800985c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	e780      	b.n	800976e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800986c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800986e:	f000 fa6e 	bl	8009d4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009872:	f000 fdb5 	bl	800a3e0 <xTaskResumeAll>
 8009876:	e77a      	b.n	800976e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800987a:	f000 fa68 	bl	8009d4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800987e:	f000 fdaf 	bl	800a3e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009884:	f000 fab5 	bl	8009df2 <prvIsQueueEmpty>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	f43f af6f 	beq.w	800976e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009892:	4618      	mov	r0, r3
 8009894:	3730      	adds	r7, #48	; 0x30
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	e000ed04 	.word	0xe000ed04

080098a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08e      	sub	sp, #56	; 0x38
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80098b2:	2300      	movs	r3, #0
 80098b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10a      	bne.n	80098d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	623b      	str	r3, [r7, #32]
}
 80098ce:	bf00      	nop
 80098d0:	e7fe      	b.n	80098d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	61fb      	str	r3, [r7, #28]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098f0:	f001 f964 	bl	800abbc <xTaskGetSchedulerState>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <xQueueSemaphoreTake+0x60>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <xQueueSemaphoreTake+0x64>
 8009900:	2301      	movs	r3, #1
 8009902:	e000      	b.n	8009906 <xQueueSemaphoreTake+0x66>
 8009904:	2300      	movs	r3, #0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10a      	bne.n	8009920 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	61bb      	str	r3, [r7, #24]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009920:	f001 ff70 	bl	800b804 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009928:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	2b00      	cmp	r3, #0
 800992e:	d024      	beq.n	800997a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	1e5a      	subs	r2, r3, #1
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d104      	bne.n	800994a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009940:	f001 fabc 	bl	800aebc <pvTaskIncrementMutexHeldCount>
 8009944:	4602      	mov	r2, r0
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00f      	beq.n	8009972 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009954:	3310      	adds	r3, #16
 8009956:	4618      	mov	r0, r3
 8009958:	f000 ff5c 	bl	800a814 <xTaskRemoveFromEventList>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d007      	beq.n	8009972 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009962:	4b54      	ldr	r3, [pc, #336]	; (8009ab4 <xQueueSemaphoreTake+0x214>)
 8009964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009972:	f001 ff77 	bl	800b864 <vPortExitCritical>
				return pdPASS;
 8009976:	2301      	movs	r3, #1
 8009978:	e097      	b.n	8009aaa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d111      	bne.n	80099a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00a      	beq.n	800999c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	617b      	str	r3, [r7, #20]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800999c:	f001 ff62 	bl	800b864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099a0:	2300      	movs	r3, #0
 80099a2:	e082      	b.n	8009aaa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099aa:	f107 030c 	add.w	r3, r7, #12
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 ff94 	bl	800a8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099b4:	2301      	movs	r3, #1
 80099b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099b8:	f001 ff54 	bl	800b864 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099bc:	f000 fd02 	bl	800a3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099c0:	f001 ff20 	bl	800b804 <vPortEnterCritical>
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099ca:	b25b      	sxtb	r3, r3
 80099cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099d0:	d103      	bne.n	80099da <xQueueSemaphoreTake+0x13a>
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099e0:	b25b      	sxtb	r3, r3
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099e6:	d103      	bne.n	80099f0 <xQueueSemaphoreTake+0x150>
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099f0:	f001 ff38 	bl	800b864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099f4:	463a      	mov	r2, r7
 80099f6:	f107 030c 	add.w	r3, r7, #12
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 ff83 	bl	800a908 <xTaskCheckForTimeOut>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d132      	bne.n	8009a6e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a0a:	f000 f9f2 	bl	8009df2 <prvIsQueueEmpty>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d026      	beq.n	8009a62 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d109      	bne.n	8009a30 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009a1c:	f001 fef2 	bl	800b804 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f001 f8e7 	bl	800abf8 <xTaskPriorityInherit>
 8009a2a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009a2c:	f001 ff1a 	bl	800b864 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	3324      	adds	r3, #36	; 0x24
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fe9b 	bl	800a774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a40:	f000 f985 	bl	8009d4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a44:	f000 fccc 	bl	800a3e0 <xTaskResumeAll>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f47f af68 	bne.w	8009920 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009a50:	4b18      	ldr	r3, [pc, #96]	; (8009ab4 <xQueueSemaphoreTake+0x214>)
 8009a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	e75e      	b.n	8009920 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a64:	f000 f973 	bl	8009d4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a68:	f000 fcba 	bl	800a3e0 <xTaskResumeAll>
 8009a6c:	e758      	b.n	8009920 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a70:	f000 f96d 	bl	8009d4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a74:	f000 fcb4 	bl	800a3e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a7a:	f000 f9ba 	bl	8009df2 <prvIsQueueEmpty>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f43f af4d 	beq.w	8009920 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00d      	beq.n	8009aa8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009a8c:	f001 feba 	bl	800b804 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a92:	f000 f8b4 	bl	8009bfe <prvGetDisinheritPriorityAfterTimeout>
 8009a96:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 f986 	bl	800adb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009aa4:	f001 fede 	bl	800b864 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009aa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3738      	adds	r7, #56	; 0x38
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	e000ed04 	.word	0xe000ed04

08009ab8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08e      	sub	sp, #56	; 0x38
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10a      	bne.n	8009ae4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	623b      	str	r3, [r7, #32]
}
 8009ae0:	bf00      	nop
 8009ae2:	e7fe      	b.n	8009ae2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <xQueueReceiveFromISR+0x3a>
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <xQueueReceiveFromISR+0x3e>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e000      	b.n	8009af8 <xQueueReceiveFromISR+0x40>
 8009af6:	2300      	movs	r3, #0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10a      	bne.n	8009b12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	61fb      	str	r3, [r7, #28]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b12:	f001 ff59 	bl	800b9c8 <vPortValidateInterruptPriority>
	__asm volatile
 8009b16:	f3ef 8211 	mrs	r2, BASEPRI
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	61ba      	str	r2, [r7, #24]
 8009b2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d02f      	beq.n	8009b9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b48:	68b9      	ldr	r1, [r7, #8]
 8009b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b4c:	f000 f8d9 	bl	8009d02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	1e5a      	subs	r2, r3, #1
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b60:	d112      	bne.n	8009b88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d016      	beq.n	8009b98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	3310      	adds	r3, #16
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fe50 	bl	800a814 <xTaskRemoveFromEventList>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00e      	beq.n	8009b98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	e007      	b.n	8009b98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	b25a      	sxtb	r2, r3
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b9c:	e001      	b.n	8009ba2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f383 8811 	msr	BASEPRI, r3
}
 8009bac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3738      	adds	r7, #56	; 0x38
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <vQueueDelete+0x28>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	60bb      	str	r3, [r7, #8]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 f95f 	bl	8009ea4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f001 ffed 	bl	800bbd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d006      	beq.n	8009c1c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	e001      	b.n	8009c20 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c20:	68fb      	ldr	r3, [r7, #12]
	}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b086      	sub	sp, #24
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10d      	bne.n	8009c68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d14d      	bne.n	8009cf0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f001 f83b 	bl	800acd4 <xTaskPriorityDisinherit>
 8009c5e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	605a      	str	r2, [r3, #4]
 8009c66:	e043      	b.n	8009cf0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d119      	bne.n	8009ca2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6898      	ldr	r0, [r3, #8]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c76:	461a      	mov	r2, r3
 8009c78:	68b9      	ldr	r1, [r7, #8]
 8009c7a:	f002 f8ed 	bl	800be58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	689a      	ldr	r2, [r3, #8]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	441a      	add	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d32b      	bcc.n	8009cf0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	609a      	str	r2, [r3, #8]
 8009ca0:	e026      	b.n	8009cf0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	68d8      	ldr	r0, [r3, #12]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	461a      	mov	r2, r3
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	f002 f8d3 	bl	800be58 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68da      	ldr	r2, [r3, #12]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	425b      	negs	r3, r3
 8009cbc:	441a      	add	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d207      	bcs.n	8009cde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	425b      	negs	r3, r3
 8009cd8:	441a      	add	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d105      	bne.n	8009cf0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009cf8:	697b      	ldr	r3, [r7, #20]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d018      	beq.n	8009d46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68da      	ldr	r2, [r3, #12]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1c:	441a      	add	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68da      	ldr	r2, [r3, #12]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d303      	bcc.n	8009d36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68d9      	ldr	r1, [r3, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	461a      	mov	r2, r3
 8009d40:	6838      	ldr	r0, [r7, #0]
 8009d42:	f002 f889 	bl	800be58 <memcpy>
	}
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d56:	f001 fd55 	bl	800b804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d62:	e011      	b.n	8009d88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d012      	beq.n	8009d92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3324      	adds	r3, #36	; 0x24
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fd4f 	bl	800a814 <xTaskRemoveFromEventList>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d7c:	f000 fe26 	bl	800a9cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dce9      	bgt.n	8009d64 <prvUnlockQueue+0x16>
 8009d90:	e000      	b.n	8009d94 <prvUnlockQueue+0x46>
					break;
 8009d92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	22ff      	movs	r2, #255	; 0xff
 8009d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d9c:	f001 fd62 	bl	800b864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009da0:	f001 fd30 	bl	800b804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009daa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dac:	e011      	b.n	8009dd2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d012      	beq.n	8009ddc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3310      	adds	r3, #16
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fd2a 	bl	800a814 <xTaskRemoveFromEventList>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009dc6:	f000 fe01 	bl	800a9cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dce9      	bgt.n	8009dae <prvUnlockQueue+0x60>
 8009dda:	e000      	b.n	8009dde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ddc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	22ff      	movs	r2, #255	; 0xff
 8009de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009de6:	f001 fd3d 	bl	800b864 <vPortExitCritical>
}
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dfa:	f001 fd03 	bl	800b804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d102      	bne.n	8009e0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e06:	2301      	movs	r3, #1
 8009e08:	60fb      	str	r3, [r7, #12]
 8009e0a:	e001      	b.n	8009e10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e10:	f001 fd28 	bl	800b864 <vPortExitCritical>

	return xReturn;
 8009e14:	68fb      	ldr	r3, [r7, #12]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e26:	f001 fced 	bl	800b804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d102      	bne.n	8009e3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e36:	2301      	movs	r3, #1
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	e001      	b.n	8009e40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e40:	f001 fd10 	bl	800b864 <vPortExitCritical>

	return xReturn;
 8009e44:	68fb      	ldr	r3, [r7, #12]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	e014      	b.n	8009e8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e60:	4a0f      	ldr	r2, [pc, #60]	; (8009ea0 <vQueueAddToRegistry+0x50>)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10b      	bne.n	8009e84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e6c:	490c      	ldr	r1, [pc, #48]	; (8009ea0 <vQueueAddToRegistry+0x50>)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e76:	4a0a      	ldr	r2, [pc, #40]	; (8009ea0 <vQueueAddToRegistry+0x50>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	4413      	add	r3, r2
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e82:	e006      	b.n	8009e92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	3301      	adds	r3, #1
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b07      	cmp	r3, #7
 8009e8e:	d9e7      	bls.n	8009e60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e90:	bf00      	nop
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000e8c 	.word	0x20000e8c

08009ea4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	e016      	b.n	8009ee0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009eb2:	4a10      	ldr	r2, [pc, #64]	; (8009ef4 <vQueueUnregisterQueue+0x50>)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	00db      	lsls	r3, r3, #3
 8009eb8:	4413      	add	r3, r2
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d10b      	bne.n	8009eda <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009ec2:	4a0c      	ldr	r2, [pc, #48]	; (8009ef4 <vQueueUnregisterQueue+0x50>)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ecc:	4a09      	ldr	r2, [pc, #36]	; (8009ef4 <vQueueUnregisterQueue+0x50>)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	4413      	add	r3, r2
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	605a      	str	r2, [r3, #4]
				break;
 8009ed8:	e006      	b.n	8009ee8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	3301      	adds	r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b07      	cmp	r3, #7
 8009ee4:	d9e5      	bls.n	8009eb2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	20000e8c 	.word	0x20000e8c

08009ef8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f08:	f001 fc7c 	bl	800b804 <vPortEnterCritical>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f12:	b25b      	sxtb	r3, r3
 8009f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f18:	d103      	bne.n	8009f22 <vQueueWaitForMessageRestricted+0x2a>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f28:	b25b      	sxtb	r3, r3
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f2e:	d103      	bne.n	8009f38 <vQueueWaitForMessageRestricted+0x40>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f38:	f001 fc94 	bl	800b864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d106      	bne.n	8009f52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	3324      	adds	r3, #36	; 0x24
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	68b9      	ldr	r1, [r7, #8]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 fc35 	bl	800a7bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f52:	6978      	ldr	r0, [r7, #20]
 8009f54:	f7ff fefb 	bl	8009d4e <prvUnlockQueue>
	}
 8009f58:	bf00      	nop
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08e      	sub	sp, #56	; 0x38
 8009f64:	af04      	add	r7, sp, #16
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	623b      	str	r3, [r7, #32]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	61fb      	str	r3, [r7, #28]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fa6:	235c      	movs	r3, #92	; 0x5c
 8009fa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	2b5c      	cmp	r3, #92	; 0x5c
 8009fae:	d00a      	beq.n	8009fc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	61bb      	str	r3, [r7, #24]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d01e      	beq.n	800a00a <xTaskCreateStatic+0xaa>
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d01b      	beq.n	800a00a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fda:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	2202      	movs	r2, #2
 8009fe0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	9303      	str	r3, [sp, #12]
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	9302      	str	r3, [sp, #8]
 8009fec:	f107 0314 	add.w	r3, r7, #20
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 f850 	bl	800a0a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a004:	f000 f8d4 	bl	800a1b0 <prvAddNewTaskToReadyList>
 800a008:	e001      	b.n	800a00e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a00e:	697b      	ldr	r3, [r7, #20]
	}
 800a010:	4618      	mov	r0, r3
 800a012:	3728      	adds	r7, #40	; 0x28
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08c      	sub	sp, #48	; 0x30
 800a01c:	af04      	add	r7, sp, #16
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	4613      	mov	r3, r2
 800a026:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a028:	88fb      	ldrh	r3, [r7, #6]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 fd0b 	bl	800ba48 <pvPortMalloc>
 800a032:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00e      	beq.n	800a058 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a03a:	205c      	movs	r0, #92	; 0x5c
 800a03c:	f001 fd04 	bl	800ba48 <pvPortMalloc>
 800a040:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	631a      	str	r2, [r3, #48]	; 0x30
 800a04e:	e005      	b.n	800a05c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a050:	6978      	ldr	r0, [r7, #20]
 800a052:	f001 fdbd 	bl	800bbd0 <vPortFree>
 800a056:	e001      	b.n	800a05c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d017      	beq.n	800a092 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a06a:	88fa      	ldrh	r2, [r7, #6]
 800a06c:	2300      	movs	r3, #0
 800a06e:	9303      	str	r3, [sp, #12]
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	9302      	str	r3, [sp, #8]
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	68b9      	ldr	r1, [r7, #8]
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 f80e 	bl	800a0a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a086:	69f8      	ldr	r0, [r7, #28]
 800a088:	f000 f892 	bl	800a1b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a08c:	2301      	movs	r3, #1
 800a08e:	61bb      	str	r3, [r7, #24]
 800a090:	e002      	b.n	800a098 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a096:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a098:	69bb      	ldr	r3, [r7, #24]
	}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b088      	sub	sp, #32
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	21a5      	movs	r1, #165	; 0xa5
 800a0bc:	f001 feda 	bl	800be74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	f023 0307 	bic.w	r3, r3, #7
 800a0d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00a      	beq.n	800a0fa <prvInitialiseNewTask+0x58>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	617b      	str	r3, [r7, #20]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	61fb      	str	r3, [r7, #28]
 800a0fe:	e012      	b.n	800a126 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	4413      	add	r3, r2
 800a106:	7819      	ldrb	r1, [r3, #0]
 800a108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	4413      	add	r3, r2
 800a10e:	3334      	adds	r3, #52	; 0x34
 800a110:	460a      	mov	r2, r1
 800a112:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4413      	add	r3, r2
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d006      	beq.n	800a12e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	3301      	adds	r3, #1
 800a124:	61fb      	str	r3, [r7, #28]
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	2b0f      	cmp	r3, #15
 800a12a:	d9e9      	bls.n	800a100 <prvInitialiseNewTask+0x5e>
 800a12c:	e000      	b.n	800a130 <prvInitialiseNewTask+0x8e>
		{
			break;
 800a12e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13a:	2b37      	cmp	r3, #55	; 0x37
 800a13c:	d901      	bls.n	800a142 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a13e:	2337      	movs	r3, #55	; 0x37
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a146:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a14c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	2200      	movs	r2, #0
 800a152:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	3304      	adds	r3, #4
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe fda7 	bl	8008cac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	3318      	adds	r3, #24
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe fda2 	bl	8008cac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a16c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a176:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a17c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	2200      	movs	r2, #0
 800a182:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	69b8      	ldr	r0, [r7, #24]
 800a192:	f001 fa0d 	bl	800b5b0 <pxPortInitialiseStack>
 800a196:	4602      	mov	r2, r0
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1a8:	bf00      	nop
 800a1aa:	3720      	adds	r7, #32
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1b8:	f001 fb24 	bl	800b804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1bc:	4b2d      	ldr	r3, [pc, #180]	; (800a274 <prvAddNewTaskToReadyList+0xc4>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	4a2c      	ldr	r2, [pc, #176]	; (800a274 <prvAddNewTaskToReadyList+0xc4>)
 800a1c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1c6:	4b2c      	ldr	r3, [pc, #176]	; (800a278 <prvAddNewTaskToReadyList+0xc8>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d109      	bne.n	800a1e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1ce:	4a2a      	ldr	r2, [pc, #168]	; (800a278 <prvAddNewTaskToReadyList+0xc8>)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1d4:	4b27      	ldr	r3, [pc, #156]	; (800a274 <prvAddNewTaskToReadyList+0xc4>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d110      	bne.n	800a1fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a1dc:	f000 fc1a 	bl	800aa14 <prvInitialiseTaskLists>
 800a1e0:	e00d      	b.n	800a1fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a1e2:	4b26      	ldr	r3, [pc, #152]	; (800a27c <prvAddNewTaskToReadyList+0xcc>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d109      	bne.n	800a1fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a1ea:	4b23      	ldr	r3, [pc, #140]	; (800a278 <prvAddNewTaskToReadyList+0xc8>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d802      	bhi.n	800a1fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1f8:	4a1f      	ldr	r2, [pc, #124]	; (800a278 <prvAddNewTaskToReadyList+0xc8>)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1fe:	4b20      	ldr	r3, [pc, #128]	; (800a280 <prvAddNewTaskToReadyList+0xd0>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	4a1e      	ldr	r2, [pc, #120]	; (800a280 <prvAddNewTaskToReadyList+0xd0>)
 800a206:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a208:	4b1d      	ldr	r3, [pc, #116]	; (800a280 <prvAddNewTaskToReadyList+0xd0>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a214:	4b1b      	ldr	r3, [pc, #108]	; (800a284 <prvAddNewTaskToReadyList+0xd4>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d903      	bls.n	800a224 <prvAddNewTaskToReadyList+0x74>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	4a18      	ldr	r2, [pc, #96]	; (800a284 <prvAddNewTaskToReadyList+0xd4>)
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4a15      	ldr	r2, [pc, #84]	; (800a288 <prvAddNewTaskToReadyList+0xd8>)
 800a232:	441a      	add	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3304      	adds	r3, #4
 800a238:	4619      	mov	r1, r3
 800a23a:	4610      	mov	r0, r2
 800a23c:	f7fe fd43 	bl	8008cc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a240:	f001 fb10 	bl	800b864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a244:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <prvAddNewTaskToReadyList+0xcc>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00e      	beq.n	800a26a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <prvAddNewTaskToReadyList+0xc8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	429a      	cmp	r2, r3
 800a258:	d207      	bcs.n	800a26a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a25a:	4b0c      	ldr	r3, [pc, #48]	; (800a28c <prvAddNewTaskToReadyList+0xdc>)
 800a25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a260:	601a      	str	r2, [r3, #0]
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a26a:	bf00      	nop
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	200013a0 	.word	0x200013a0
 800a278:	20000ecc 	.word	0x20000ecc
 800a27c:	200013ac 	.word	0x200013ac
 800a280:	200013bc 	.word	0x200013bc
 800a284:	200013a8 	.word	0x200013a8
 800a288:	20000ed0 	.word	0x20000ed0
 800a28c:	e000ed04 	.word	0xe000ed04

0800a290 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a298:	2300      	movs	r3, #0
 800a29a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d017      	beq.n	800a2d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a2a2:	4b13      	ldr	r3, [pc, #76]	; (800a2f0 <vTaskDelay+0x60>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <vTaskDelay+0x30>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	60bb      	str	r3, [r7, #8]
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a2c0:	f000 f880 	bl	800a3c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fe0c 	bl	800aee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a2cc:	f000 f888 	bl	800a3e0 <xTaskResumeAll>
 800a2d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d107      	bne.n	800a2e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a2d8:	4b06      	ldr	r3, [pc, #24]	; (800a2f4 <vTaskDelay+0x64>)
 800a2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2e8:	bf00      	nop
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	200013c8 	.word	0x200013c8
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08a      	sub	sp, #40	; 0x28
 800a2fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a306:	463a      	mov	r2, r7
 800a308:	1d39      	adds	r1, r7, #4
 800a30a:	f107 0308 	add.w	r3, r7, #8
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fc78 	bl	8008c04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	9202      	str	r2, [sp, #8]
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	2300      	movs	r3, #0
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	2300      	movs	r3, #0
 800a324:	460a      	mov	r2, r1
 800a326:	4921      	ldr	r1, [pc, #132]	; (800a3ac <vTaskStartScheduler+0xb4>)
 800a328:	4821      	ldr	r0, [pc, #132]	; (800a3b0 <vTaskStartScheduler+0xb8>)
 800a32a:	f7ff fe19 	bl	8009f60 <xTaskCreateStatic>
 800a32e:	4603      	mov	r3, r0
 800a330:	4a20      	ldr	r2, [pc, #128]	; (800a3b4 <vTaskStartScheduler+0xbc>)
 800a332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a334:	4b1f      	ldr	r3, [pc, #124]	; (800a3b4 <vTaskStartScheduler+0xbc>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a33c:	2301      	movs	r3, #1
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	e001      	b.n	800a346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d102      	bne.n	800a352 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a34c:	f000 fe1e 	bl	800af8c <xTimerCreateTimerTask>
 800a350:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d116      	bne.n	800a386 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	613b      	str	r3, [r7, #16]
}
 800a36a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a36c:	4b12      	ldr	r3, [pc, #72]	; (800a3b8 <vTaskStartScheduler+0xc0>)
 800a36e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a374:	4b11      	ldr	r3, [pc, #68]	; (800a3bc <vTaskStartScheduler+0xc4>)
 800a376:	2201      	movs	r2, #1
 800a378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a37a:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <vTaskStartScheduler+0xc8>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a380:	f001 f99e 	bl	800b6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a384:	e00e      	b.n	800a3a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a38c:	d10a      	bne.n	800a3a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	60fb      	str	r3, [r7, #12]
}
 800a3a0:	bf00      	nop
 800a3a2:	e7fe      	b.n	800a3a2 <vTaskStartScheduler+0xaa>
}
 800a3a4:	bf00      	nop
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	0800d568 	.word	0x0800d568
 800a3b0:	0800a9e5 	.word	0x0800a9e5
 800a3b4:	200013c4 	.word	0x200013c4
 800a3b8:	200013c0 	.word	0x200013c0
 800a3bc:	200013ac 	.word	0x200013ac
 800a3c0:	200013a4 	.word	0x200013a4

0800a3c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a3c8:	4b04      	ldr	r3, [pc, #16]	; (800a3dc <vTaskSuspendAll+0x18>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4a03      	ldr	r2, [pc, #12]	; (800a3dc <vTaskSuspendAll+0x18>)
 800a3d0:	6013      	str	r3, [r2, #0]
}
 800a3d2:	bf00      	nop
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	200013c8 	.word	0x200013c8

0800a3e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3ee:	4b42      	ldr	r3, [pc, #264]	; (800a4f8 <xTaskResumeAll+0x118>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10a      	bne.n	800a40c <xTaskResumeAll+0x2c>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	603b      	str	r3, [r7, #0]
}
 800a408:	bf00      	nop
 800a40a:	e7fe      	b.n	800a40a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a40c:	f001 f9fa 	bl	800b804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a410:	4b39      	ldr	r3, [pc, #228]	; (800a4f8 <xTaskResumeAll+0x118>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3b01      	subs	r3, #1
 800a416:	4a38      	ldr	r2, [pc, #224]	; (800a4f8 <xTaskResumeAll+0x118>)
 800a418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a41a:	4b37      	ldr	r3, [pc, #220]	; (800a4f8 <xTaskResumeAll+0x118>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d162      	bne.n	800a4e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a422:	4b36      	ldr	r3, [pc, #216]	; (800a4fc <xTaskResumeAll+0x11c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d05e      	beq.n	800a4e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a42a:	e02f      	b.n	800a48c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a42c:	4b34      	ldr	r3, [pc, #208]	; (800a500 <xTaskResumeAll+0x120>)
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3318      	adds	r3, #24
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fe fca1 	bl	8008d80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3304      	adds	r3, #4
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fc9c 	bl	8008d80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44c:	4b2d      	ldr	r3, [pc, #180]	; (800a504 <xTaskResumeAll+0x124>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d903      	bls.n	800a45c <xTaskResumeAll+0x7c>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	4a2a      	ldr	r2, [pc, #168]	; (800a504 <xTaskResumeAll+0x124>)
 800a45a:	6013      	str	r3, [r2, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4a27      	ldr	r2, [pc, #156]	; (800a508 <xTaskResumeAll+0x128>)
 800a46a:	441a      	add	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3304      	adds	r3, #4
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f7fe fc27 	bl	8008cc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47c:	4b23      	ldr	r3, [pc, #140]	; (800a50c <xTaskResumeAll+0x12c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a482:	429a      	cmp	r2, r3
 800a484:	d302      	bcc.n	800a48c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a486:	4b22      	ldr	r3, [pc, #136]	; (800a510 <xTaskResumeAll+0x130>)
 800a488:	2201      	movs	r2, #1
 800a48a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a48c:	4b1c      	ldr	r3, [pc, #112]	; (800a500 <xTaskResumeAll+0x120>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1cb      	bne.n	800a42c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a49a:	f000 fb59 	bl	800ab50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a49e:	4b1d      	ldr	r3, [pc, #116]	; (800a514 <xTaskResumeAll+0x134>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d010      	beq.n	800a4cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4aa:	f000 f847 	bl	800a53c <xTaskIncrementTick>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a4b4:	4b16      	ldr	r3, [pc, #88]	; (800a510 <xTaskResumeAll+0x130>)
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f1      	bne.n	800a4aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a4c6:	4b13      	ldr	r3, [pc, #76]	; (800a514 <xTaskResumeAll+0x134>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4cc:	4b10      	ldr	r3, [pc, #64]	; (800a510 <xTaskResumeAll+0x130>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d009      	beq.n	800a4e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4d8:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <xTaskResumeAll+0x138>)
 800a4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4e8:	f001 f9bc 	bl	800b864 <vPortExitCritical>

	return xAlreadyYielded;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	200013c8 	.word	0x200013c8
 800a4fc:	200013a0 	.word	0x200013a0
 800a500:	20001360 	.word	0x20001360
 800a504:	200013a8 	.word	0x200013a8
 800a508:	20000ed0 	.word	0x20000ed0
 800a50c:	20000ecc 	.word	0x20000ecc
 800a510:	200013b4 	.word	0x200013b4
 800a514:	200013b0 	.word	0x200013b0
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a522:	4b05      	ldr	r3, [pc, #20]	; (800a538 <xTaskGetTickCount+0x1c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a528:	687b      	ldr	r3, [r7, #4]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	200013a4 	.word	0x200013a4

0800a53c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a546:	4b51      	ldr	r3, [pc, #324]	; (800a68c <xTaskIncrementTick+0x150>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f040 808e 	bne.w	800a66c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a550:	4b4f      	ldr	r3, [pc, #316]	; (800a690 <xTaskIncrementTick+0x154>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3301      	adds	r3, #1
 800a556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a558:	4a4d      	ldr	r2, [pc, #308]	; (800a690 <xTaskIncrementTick+0x154>)
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d120      	bne.n	800a5a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a564:	4b4b      	ldr	r3, [pc, #300]	; (800a694 <xTaskIncrementTick+0x158>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00a      	beq.n	800a584 <xTaskIncrementTick+0x48>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	603b      	str	r3, [r7, #0]
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <xTaskIncrementTick+0x46>
 800a584:	4b43      	ldr	r3, [pc, #268]	; (800a694 <xTaskIncrementTick+0x158>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	60fb      	str	r3, [r7, #12]
 800a58a:	4b43      	ldr	r3, [pc, #268]	; (800a698 <xTaskIncrementTick+0x15c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a41      	ldr	r2, [pc, #260]	; (800a694 <xTaskIncrementTick+0x158>)
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	4a41      	ldr	r2, [pc, #260]	; (800a698 <xTaskIncrementTick+0x15c>)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	4b40      	ldr	r3, [pc, #256]	; (800a69c <xTaskIncrementTick+0x160>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3301      	adds	r3, #1
 800a59e:	4a3f      	ldr	r2, [pc, #252]	; (800a69c <xTaskIncrementTick+0x160>)
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	f000 fad5 	bl	800ab50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5a6:	4b3e      	ldr	r3, [pc, #248]	; (800a6a0 <xTaskIncrementTick+0x164>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d34e      	bcc.n	800a64e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5b0:	4b38      	ldr	r3, [pc, #224]	; (800a694 <xTaskIncrementTick+0x158>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <xTaskIncrementTick+0x82>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e000      	b.n	800a5c0 <xTaskIncrementTick+0x84>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c4:	4b36      	ldr	r3, [pc, #216]	; (800a6a0 <xTaskIncrementTick+0x164>)
 800a5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ca:	601a      	str	r2, [r3, #0]
					break;
 800a5cc:	e03f      	b.n	800a64e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a5ce:	4b31      	ldr	r3, [pc, #196]	; (800a694 <xTaskIncrementTick+0x158>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d203      	bcs.n	800a5ee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5e6:	4a2e      	ldr	r2, [pc, #184]	; (800a6a0 <xTaskIncrementTick+0x164>)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6013      	str	r3, [r2, #0]
						break;
 800a5ec:	e02f      	b.n	800a64e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe fbc4 	bl	8008d80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d004      	beq.n	800a60a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	3318      	adds	r3, #24
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe fbbb 	bl	8008d80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60e:	4b25      	ldr	r3, [pc, #148]	; (800a6a4 <xTaskIncrementTick+0x168>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d903      	bls.n	800a61e <xTaskIncrementTick+0xe2>
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61a:	4a22      	ldr	r2, [pc, #136]	; (800a6a4 <xTaskIncrementTick+0x168>)
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4a1f      	ldr	r2, [pc, #124]	; (800a6a8 <xTaskIncrementTick+0x16c>)
 800a62c:	441a      	add	r2, r3
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	3304      	adds	r3, #4
 800a632:	4619      	mov	r1, r3
 800a634:	4610      	mov	r0, r2
 800a636:	f7fe fb46 	bl	8008cc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <xTaskIncrementTick+0x170>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	429a      	cmp	r2, r3
 800a646:	d3b3      	bcc.n	800a5b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a648:	2301      	movs	r3, #1
 800a64a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a64c:	e7b0      	b.n	800a5b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a64e:	4b17      	ldr	r3, [pc, #92]	; (800a6ac <xTaskIncrementTick+0x170>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a654:	4914      	ldr	r1, [pc, #80]	; (800a6a8 <xTaskIncrementTick+0x16c>)
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d907      	bls.n	800a676 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a666:	2301      	movs	r3, #1
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	e004      	b.n	800a676 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a66c:	4b10      	ldr	r3, [pc, #64]	; (800a6b0 <xTaskIncrementTick+0x174>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3301      	adds	r3, #1
 800a672:	4a0f      	ldr	r2, [pc, #60]	; (800a6b0 <xTaskIncrementTick+0x174>)
 800a674:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a676:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <xTaskIncrementTick+0x178>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a67e:	2301      	movs	r3, #1
 800a680:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a682:	697b      	ldr	r3, [r7, #20]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	200013c8 	.word	0x200013c8
 800a690:	200013a4 	.word	0x200013a4
 800a694:	20001358 	.word	0x20001358
 800a698:	2000135c 	.word	0x2000135c
 800a69c:	200013b8 	.word	0x200013b8
 800a6a0:	200013c0 	.word	0x200013c0
 800a6a4:	200013a8 	.word	0x200013a8
 800a6a8:	20000ed0 	.word	0x20000ed0
 800a6ac:	20000ecc 	.word	0x20000ecc
 800a6b0:	200013b0 	.word	0x200013b0
 800a6b4:	200013b4 	.word	0x200013b4

0800a6b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6be:	4b28      	ldr	r3, [pc, #160]	; (800a760 <vTaskSwitchContext+0xa8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6c6:	4b27      	ldr	r3, [pc, #156]	; (800a764 <vTaskSwitchContext+0xac>)
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6cc:	e041      	b.n	800a752 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a6ce:	4b25      	ldr	r3, [pc, #148]	; (800a764 <vTaskSwitchContext+0xac>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a6d4:	4b24      	ldr	r3, [pc, #144]	; (800a768 <vTaskSwitchContext+0xb0>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	e010      	b.n	800a6fe <vTaskSwitchContext+0x46>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10a      	bne.n	800a6f8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	607b      	str	r3, [r7, #4]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <vTaskSwitchContext+0x3e>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	491b      	ldr	r1, [pc, #108]	; (800a76c <vTaskSwitchContext+0xb4>)
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4613      	mov	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0e4      	beq.n	800a6dc <vTaskSwitchContext+0x24>
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4a13      	ldr	r2, [pc, #76]	; (800a76c <vTaskSwitchContext+0xb4>)
 800a71e:	4413      	add	r3, r2
 800a720:	60bb      	str	r3, [r7, #8]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	605a      	str	r2, [r3, #4]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	685a      	ldr	r2, [r3, #4]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	3308      	adds	r3, #8
 800a734:	429a      	cmp	r2, r3
 800a736:	d104      	bne.n	800a742 <vTaskSwitchContext+0x8a>
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	605a      	str	r2, [r3, #4]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	4a09      	ldr	r2, [pc, #36]	; (800a770 <vTaskSwitchContext+0xb8>)
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	4a06      	ldr	r2, [pc, #24]	; (800a768 <vTaskSwitchContext+0xb0>)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6013      	str	r3, [r2, #0]
}
 800a752:	bf00      	nop
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	200013c8 	.word	0x200013c8
 800a764:	200013b4 	.word	0x200013b4
 800a768:	200013a8 	.word	0x200013a8
 800a76c:	20000ed0 	.word	0x20000ed0
 800a770:	20000ecc 	.word	0x20000ecc

0800a774 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	60fb      	str	r3, [r7, #12]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a79a:	4b07      	ldr	r3, [pc, #28]	; (800a7b8 <vTaskPlaceOnEventList+0x44>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3318      	adds	r3, #24
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7fe fab3 	bl	8008d0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	6838      	ldr	r0, [r7, #0]
 800a7ac:	f000 fb9a 	bl	800aee4 <prvAddCurrentTaskToDelayedList>
}
 800a7b0:	bf00      	nop
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20000ecc 	.word	0x20000ecc

0800a7bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	617b      	str	r3, [r7, #20]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7e4:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <vTaskPlaceOnEventListRestricted+0x54>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3318      	adds	r3, #24
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f7fe fa6a 	bl	8008cc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	68b8      	ldr	r0, [r7, #8]
 800a802:	f000 fb6f 	bl	800aee4 <prvAddCurrentTaskToDelayedList>
	}
 800a806:	bf00      	nop
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000ecc 	.word	0x20000ecc

0800a814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10a      	bne.n	800a840 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	60fb      	str	r3, [r7, #12]
}
 800a83c:	bf00      	nop
 800a83e:	e7fe      	b.n	800a83e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	3318      	adds	r3, #24
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fa9b 	bl	8008d80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a84a:	4b1e      	ldr	r3, [pc, #120]	; (800a8c4 <xTaskRemoveFromEventList+0xb0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d11d      	bne.n	800a88e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	3304      	adds	r3, #4
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe fa92 	bl	8008d80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a860:	4b19      	ldr	r3, [pc, #100]	; (800a8c8 <xTaskRemoveFromEventList+0xb4>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	429a      	cmp	r2, r3
 800a866:	d903      	bls.n	800a870 <xTaskRemoveFromEventList+0x5c>
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86c:	4a16      	ldr	r2, [pc, #88]	; (800a8c8 <xTaskRemoveFromEventList+0xb4>)
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a874:	4613      	mov	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4a13      	ldr	r2, [pc, #76]	; (800a8cc <xTaskRemoveFromEventList+0xb8>)
 800a87e:	441a      	add	r2, r3
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	3304      	adds	r3, #4
 800a884:	4619      	mov	r1, r3
 800a886:	4610      	mov	r0, r2
 800a888:	f7fe fa1d 	bl	8008cc6 <vListInsertEnd>
 800a88c:	e005      	b.n	800a89a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	3318      	adds	r3, #24
 800a892:	4619      	mov	r1, r3
 800a894:	480e      	ldr	r0, [pc, #56]	; (800a8d0 <xTaskRemoveFromEventList+0xbc>)
 800a896:	f7fe fa16 	bl	8008cc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89e:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <xTaskRemoveFromEventList+0xc0>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d905      	bls.n	800a8b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <xTaskRemoveFromEventList+0xc4>)
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	e001      	b.n	800a8b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a8b8:	697b      	ldr	r3, [r7, #20]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200013c8 	.word	0x200013c8
 800a8c8:	200013a8 	.word	0x200013a8
 800a8cc:	20000ed0 	.word	0x20000ed0
 800a8d0:	20001360 	.word	0x20001360
 800a8d4:	20000ecc 	.word	0x20000ecc
 800a8d8:	200013b4 	.word	0x200013b4

0800a8dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8e4:	4b06      	ldr	r3, [pc, #24]	; (800a900 <vTaskInternalSetTimeOutState+0x24>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <vTaskInternalSetTimeOutState+0x28>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	605a      	str	r2, [r3, #4]
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	200013b8 	.word	0x200013b8
 800a904:	200013a4 	.word	0x200013a4

0800a908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10a      	bne.n	800a92e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	613b      	str	r3, [r7, #16]
}
 800a92a:	bf00      	nop
 800a92c:	e7fe      	b.n	800a92c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	60fb      	str	r3, [r7, #12]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a94a:	f000 ff5b 	bl	800b804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a94e:	4b1d      	ldr	r3, [pc, #116]	; (800a9c4 <xTaskCheckForTimeOut+0xbc>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a966:	d102      	bne.n	800a96e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a968:	2300      	movs	r3, #0
 800a96a:	61fb      	str	r3, [r7, #28]
 800a96c:	e023      	b.n	800a9b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	4b15      	ldr	r3, [pc, #84]	; (800a9c8 <xTaskCheckForTimeOut+0xc0>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	429a      	cmp	r2, r3
 800a978:	d007      	beq.n	800a98a <xTaskCheckForTimeOut+0x82>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	429a      	cmp	r2, r3
 800a982:	d302      	bcc.n	800a98a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a984:	2301      	movs	r3, #1
 800a986:	61fb      	str	r3, [r7, #28]
 800a988:	e015      	b.n	800a9b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	429a      	cmp	r2, r3
 800a992:	d20b      	bcs.n	800a9ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	1ad2      	subs	r2, r2, r3
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff ff9b 	bl	800a8dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	61fb      	str	r3, [r7, #28]
 800a9aa:	e004      	b.n	800a9b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a9b6:	f000 ff55 	bl	800b864 <vPortExitCritical>

	return xReturn;
 800a9ba:	69fb      	ldr	r3, [r7, #28]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3720      	adds	r7, #32
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	200013a4 	.word	0x200013a4
 800a9c8:	200013b8 	.word	0x200013b8

0800a9cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a9d0:	4b03      	ldr	r3, [pc, #12]	; (800a9e0 <vTaskMissedYield+0x14>)
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	601a      	str	r2, [r3, #0]
}
 800a9d6:	bf00      	nop
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	200013b4 	.word	0x200013b4

0800a9e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9ec:	f000 f852 	bl	800aa94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9f0:	4b06      	ldr	r3, [pc, #24]	; (800aa0c <prvIdleTask+0x28>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d9f9      	bls.n	800a9ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9f8:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <prvIdleTask+0x2c>)
 800a9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa08:	e7f0      	b.n	800a9ec <prvIdleTask+0x8>
 800aa0a:	bf00      	nop
 800aa0c:	20000ed0 	.word	0x20000ed0
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	607b      	str	r3, [r7, #4]
 800aa1e:	e00c      	b.n	800aa3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	4613      	mov	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4a12      	ldr	r2, [pc, #72]	; (800aa74 <prvInitialiseTaskLists+0x60>)
 800aa2c:	4413      	add	r3, r2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe f91c 	bl	8008c6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3301      	adds	r3, #1
 800aa38:	607b      	str	r3, [r7, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b37      	cmp	r3, #55	; 0x37
 800aa3e:	d9ef      	bls.n	800aa20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa40:	480d      	ldr	r0, [pc, #52]	; (800aa78 <prvInitialiseTaskLists+0x64>)
 800aa42:	f7fe f913 	bl	8008c6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa46:	480d      	ldr	r0, [pc, #52]	; (800aa7c <prvInitialiseTaskLists+0x68>)
 800aa48:	f7fe f910 	bl	8008c6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa4c:	480c      	ldr	r0, [pc, #48]	; (800aa80 <prvInitialiseTaskLists+0x6c>)
 800aa4e:	f7fe f90d 	bl	8008c6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa52:	480c      	ldr	r0, [pc, #48]	; (800aa84 <prvInitialiseTaskLists+0x70>)
 800aa54:	f7fe f90a 	bl	8008c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa58:	480b      	ldr	r0, [pc, #44]	; (800aa88 <prvInitialiseTaskLists+0x74>)
 800aa5a:	f7fe f907 	bl	8008c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa5e:	4b0b      	ldr	r3, [pc, #44]	; (800aa8c <prvInitialiseTaskLists+0x78>)
 800aa60:	4a05      	ldr	r2, [pc, #20]	; (800aa78 <prvInitialiseTaskLists+0x64>)
 800aa62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa64:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <prvInitialiseTaskLists+0x7c>)
 800aa66:	4a05      	ldr	r2, [pc, #20]	; (800aa7c <prvInitialiseTaskLists+0x68>)
 800aa68:	601a      	str	r2, [r3, #0]
}
 800aa6a:	bf00      	nop
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	20000ed0 	.word	0x20000ed0
 800aa78:	20001330 	.word	0x20001330
 800aa7c:	20001344 	.word	0x20001344
 800aa80:	20001360 	.word	0x20001360
 800aa84:	20001374 	.word	0x20001374
 800aa88:	2000138c 	.word	0x2000138c
 800aa8c:	20001358 	.word	0x20001358
 800aa90:	2000135c 	.word	0x2000135c

0800aa94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa9a:	e019      	b.n	800aad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa9c:	f000 feb2 	bl	800b804 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800aaa0:	4b10      	ldr	r3, [pc, #64]	; (800aae4 <prvCheckTasksWaitingTermination+0x50>)
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fe f967 	bl	8008d80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aab2:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <prvCheckTasksWaitingTermination+0x54>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	4a0b      	ldr	r2, [pc, #44]	; (800aae8 <prvCheckTasksWaitingTermination+0x54>)
 800aaba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aabc:	4b0b      	ldr	r3, [pc, #44]	; (800aaec <prvCheckTasksWaitingTermination+0x58>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <prvCheckTasksWaitingTermination+0x58>)
 800aac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aac6:	f000 fecd 	bl	800b864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f810 	bl	800aaf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aad0:	4b06      	ldr	r3, [pc, #24]	; (800aaec <prvCheckTasksWaitingTermination+0x58>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1e1      	bne.n	800aa9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20001374 	.word	0x20001374
 800aae8:	200013a0 	.word	0x200013a0
 800aaec:	20001388 	.word	0x20001388

0800aaf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d108      	bne.n	800ab14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 f862 	bl	800bbd0 <vPortFree>
				vPortFree( pxTCB );
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 f85f 	bl	800bbd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab12:	e018      	b.n	800ab46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d103      	bne.n	800ab26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f001 f856 	bl	800bbd0 <vPortFree>
	}
 800ab24:	e00f      	b.n	800ab46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d00a      	beq.n	800ab46 <prvDeleteTCB+0x56>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	60fb      	str	r3, [r7, #12]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <prvDeleteTCB+0x54>
	}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab56:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <prvResetNextTaskUnblockTime+0x44>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <prvResetNextTaskUnblockTime+0x14>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e000      	b.n	800ab66 <prvResetNextTaskUnblockTime+0x16>
 800ab64:	2300      	movs	r3, #0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d004      	beq.n	800ab74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab6a:	4b0b      	ldr	r3, [pc, #44]	; (800ab98 <prvResetNextTaskUnblockTime+0x48>)
 800ab6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab72:	e008      	b.n	800ab86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab74:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <prvResetNextTaskUnblockTime+0x44>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	4a05      	ldr	r2, [pc, #20]	; (800ab98 <prvResetNextTaskUnblockTime+0x48>)
 800ab84:	6013      	str	r3, [r2, #0]
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20001358 	.word	0x20001358
 800ab98:	200013c0 	.word	0x200013c0

0800ab9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aba2:	4b05      	ldr	r3, [pc, #20]	; (800abb8 <xTaskGetCurrentTaskHandle+0x1c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aba8:	687b      	ldr	r3, [r7, #4]
	}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20000ecc 	.word	0x20000ecc

0800abbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abc2:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <xTaskGetSchedulerState+0x34>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abca:	2301      	movs	r3, #1
 800abcc:	607b      	str	r3, [r7, #4]
 800abce:	e008      	b.n	800abe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abd0:	4b08      	ldr	r3, [pc, #32]	; (800abf4 <xTaskGetSchedulerState+0x38>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abd8:	2302      	movs	r3, #2
 800abda:	607b      	str	r3, [r7, #4]
 800abdc:	e001      	b.n	800abe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abde:	2300      	movs	r3, #0
 800abe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abe2:	687b      	ldr	r3, [r7, #4]
	}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	200013ac 	.word	0x200013ac
 800abf4:	200013c8 	.word	0x200013c8

0800abf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ac04:	2300      	movs	r3, #0
 800ac06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d056      	beq.n	800acbc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac12:	4b2d      	ldr	r3, [pc, #180]	; (800acc8 <xTaskPriorityInherit+0xd0>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d246      	bcs.n	800acaa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	db06      	blt.n	800ac32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac24:	4b28      	ldr	r3, [pc, #160]	; (800acc8 <xTaskPriorityInherit+0xd0>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	6959      	ldr	r1, [r3, #20]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4a22      	ldr	r2, [pc, #136]	; (800accc <xTaskPriorityInherit+0xd4>)
 800ac44:	4413      	add	r3, r2
 800ac46:	4299      	cmp	r1, r3
 800ac48:	d101      	bne.n	800ac4e <xTaskPriorityInherit+0x56>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <xTaskPriorityInherit+0x58>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d022      	beq.n	800ac9a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe f891 	bl	8008d80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac5e:	4b1a      	ldr	r3, [pc, #104]	; (800acc8 <xTaskPriorityInherit+0xd0>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6c:	4b18      	ldr	r3, [pc, #96]	; (800acd0 <xTaskPriorityInherit+0xd8>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d903      	bls.n	800ac7c <xTaskPriorityInherit+0x84>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	4a15      	ldr	r2, [pc, #84]	; (800acd0 <xTaskPriorityInherit+0xd8>)
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4a10      	ldr	r2, [pc, #64]	; (800accc <xTaskPriorityInherit+0xd4>)
 800ac8a:	441a      	add	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	4619      	mov	r1, r3
 800ac92:	4610      	mov	r0, r2
 800ac94:	f7fe f817 	bl	8008cc6 <vListInsertEnd>
 800ac98:	e004      	b.n	800aca4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac9a:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <xTaskPriorityInherit+0xd0>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aca4:	2301      	movs	r3, #1
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	e008      	b.n	800acbc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <xTaskPriorityInherit+0xd0>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d201      	bcs.n	800acbc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800acb8:	2301      	movs	r3, #1
 800acba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acbc:	68fb      	ldr	r3, [r7, #12]
	}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20000ecc 	.word	0x20000ecc
 800accc:	20000ed0 	.word	0x20000ed0
 800acd0:	200013a8 	.word	0x200013a8

0800acd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d056      	beq.n	800ad98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800acea:	4b2e      	ldr	r3, [pc, #184]	; (800ada4 <xTaskPriorityDisinherit+0xd0>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d00a      	beq.n	800ad0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	60fb      	str	r3, [r7, #12]
}
 800ad06:	bf00      	nop
 800ad08:	e7fe      	b.n	800ad08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10a      	bne.n	800ad28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	60bb      	str	r3, [r7, #8]
}
 800ad24:	bf00      	nop
 800ad26:	e7fe      	b.n	800ad26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad2c:	1e5a      	subs	r2, r3, #1
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d02c      	beq.n	800ad98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d128      	bne.n	800ad98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe f818 	bl	8008d80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad68:	4b0f      	ldr	r3, [pc, #60]	; (800ada8 <xTaskPriorityDisinherit+0xd4>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d903      	bls.n	800ad78 <xTaskPriorityDisinherit+0xa4>
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	4a0c      	ldr	r2, [pc, #48]	; (800ada8 <xTaskPriorityDisinherit+0xd4>)
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4a09      	ldr	r2, [pc, #36]	; (800adac <xTaskPriorityDisinherit+0xd8>)
 800ad86:	441a      	add	r2, r3
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	4610      	mov	r0, r2
 800ad90:	f7fd ff99 	bl	8008cc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad98:	697b      	ldr	r3, [r7, #20]
	}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20000ecc 	.word	0x20000ecc
 800ada8:	200013a8 	.word	0x200013a8
 800adac:	20000ed0 	.word	0x20000ed0

0800adb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800adbe:	2301      	movs	r3, #1
 800adc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d06f      	beq.n	800aea8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10a      	bne.n	800ade6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	60fb      	str	r3, [r7, #12]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	429a      	cmp	r2, r3
 800adee:	d902      	bls.n	800adf6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	61fb      	str	r3, [r7, #28]
 800adf4:	e002      	b.n	800adfc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adfa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d050      	beq.n	800aea8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d14b      	bne.n	800aea8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ae10:	4b27      	ldr	r3, [pc, #156]	; (800aeb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	69ba      	ldr	r2, [r7, #24]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d10a      	bne.n	800ae30 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	60bb      	str	r3, [r7, #8]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	db04      	blt.n	800ae4e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	6959      	ldr	r1, [r3, #20]
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	4613      	mov	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4a15      	ldr	r2, [pc, #84]	; (800aeb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae5e:	4413      	add	r3, r2
 800ae60:	4299      	cmp	r1, r3
 800ae62:	d101      	bne.n	800ae68 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800ae64:	2301      	movs	r3, #1
 800ae66:	e000      	b.n	800ae6a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d01c      	beq.n	800aea8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	3304      	adds	r3, #4
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd ff84 	bl	8008d80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4b0e      	ldr	r3, [pc, #56]	; (800aeb8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	4a0b      	ldr	r2, [pc, #44]	; (800aeb8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4a06      	ldr	r2, [pc, #24]	; (800aeb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae9a:	441a      	add	r2, r3
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fd ff0f 	bl	8008cc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aea8:	bf00      	nop
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20000ecc 	.word	0x20000ecc
 800aeb4:	20000ed0 	.word	0x20000ed0
 800aeb8:	200013a8 	.word	0x200013a8

0800aebc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800aebc:	b480      	push	{r7}
 800aebe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aec0:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d004      	beq.n	800aed2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aece:	3201      	adds	r2, #1
 800aed0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800aed2:	4b03      	ldr	r3, [pc, #12]	; (800aee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aed4:	681b      	ldr	r3, [r3, #0]
	}
 800aed6:	4618      	mov	r0, r3
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20000ecc 	.word	0x20000ecc

0800aee4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aeee:	4b21      	ldr	r3, [pc, #132]	; (800af74 <prvAddCurrentTaskToDelayedList+0x90>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aef4:	4b20      	ldr	r3, [pc, #128]	; (800af78 <prvAddCurrentTaskToDelayedList+0x94>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3304      	adds	r3, #4
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fd ff40 	bl	8008d80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af06:	d10a      	bne.n	800af1e <prvAddCurrentTaskToDelayedList+0x3a>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d007      	beq.n	800af1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af0e:	4b1a      	ldr	r3, [pc, #104]	; (800af78 <prvAddCurrentTaskToDelayedList+0x94>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3304      	adds	r3, #4
 800af14:	4619      	mov	r1, r3
 800af16:	4819      	ldr	r0, [pc, #100]	; (800af7c <prvAddCurrentTaskToDelayedList+0x98>)
 800af18:	f7fd fed5 	bl	8008cc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af1c:	e026      	b.n	800af6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4413      	add	r3, r2
 800af24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af26:	4b14      	ldr	r3, [pc, #80]	; (800af78 <prvAddCurrentTaskToDelayedList+0x94>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	429a      	cmp	r2, r3
 800af34:	d209      	bcs.n	800af4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af36:	4b12      	ldr	r3, [pc, #72]	; (800af80 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4b0f      	ldr	r3, [pc, #60]	; (800af78 <prvAddCurrentTaskToDelayedList+0x94>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fd fee3 	bl	8008d0e <vListInsert>
}
 800af48:	e010      	b.n	800af6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af4a:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	4b0a      	ldr	r3, [pc, #40]	; (800af78 <prvAddCurrentTaskToDelayedList+0x94>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3304      	adds	r3, #4
 800af54:	4619      	mov	r1, r3
 800af56:	4610      	mov	r0, r2
 800af58:	f7fd fed9 	bl	8008d0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af5c:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	429a      	cmp	r2, r3
 800af64:	d202      	bcs.n	800af6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af66:	4a08      	ldr	r2, [pc, #32]	; (800af88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	6013      	str	r3, [r2, #0]
}
 800af6c:	bf00      	nop
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	200013a4 	.word	0x200013a4
 800af78:	20000ecc 	.word	0x20000ecc
 800af7c:	2000138c 	.word	0x2000138c
 800af80:	2000135c 	.word	0x2000135c
 800af84:	20001358 	.word	0x20001358
 800af88:	200013c0 	.word	0x200013c0

0800af8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	; 0x28
 800af90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af96:	f000 facb 	bl	800b530 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af9a:	4b1c      	ldr	r3, [pc, #112]	; (800b00c <xTimerCreateTimerTask+0x80>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d021      	beq.n	800afe6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afaa:	1d3a      	adds	r2, r7, #4
 800afac:	f107 0108 	add.w	r1, r7, #8
 800afb0:	f107 030c 	add.w	r3, r7, #12
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fd fe3f 	bl	8008c38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	9202      	str	r2, [sp, #8]
 800afc2:	9301      	str	r3, [sp, #4]
 800afc4:	2302      	movs	r3, #2
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	2300      	movs	r3, #0
 800afca:	460a      	mov	r2, r1
 800afcc:	4910      	ldr	r1, [pc, #64]	; (800b010 <xTimerCreateTimerTask+0x84>)
 800afce:	4811      	ldr	r0, [pc, #68]	; (800b014 <xTimerCreateTimerTask+0x88>)
 800afd0:	f7fe ffc6 	bl	8009f60 <xTaskCreateStatic>
 800afd4:	4603      	mov	r3, r0
 800afd6:	4a10      	ldr	r2, [pc, #64]	; (800b018 <xTimerCreateTimerTask+0x8c>)
 800afd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800afda:	4b0f      	ldr	r3, [pc, #60]	; (800b018 <xTimerCreateTimerTask+0x8c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800afe2:	2301      	movs	r3, #1
 800afe4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	613b      	str	r3, [r7, #16]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b002:	697b      	ldr	r3, [r7, #20]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3718      	adds	r7, #24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200013fc 	.word	0x200013fc
 800b010:	0800d570 	.word	0x0800d570
 800b014:	0800b139 	.word	0x0800b139
 800b018:	20001400 	.word	0x20001400

0800b01c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08a      	sub	sp, #40	; 0x28
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	623b      	str	r3, [r7, #32]
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b04a:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <xTimerGenericCommand+0x98>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d02a      	beq.n	800b0a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b05      	cmp	r3, #5
 800b062:	dc18      	bgt.n	800b096 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b064:	f7ff fdaa 	bl	800abbc <xTaskGetSchedulerState>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d109      	bne.n	800b082 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b06e:	4b11      	ldr	r3, [pc, #68]	; (800b0b4 <xTimerGenericCommand+0x98>)
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	f107 0110 	add.w	r1, r7, #16
 800b076:	2300      	movs	r3, #0
 800b078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b07a:	f7fe f90d 	bl	8009298 <xQueueGenericSend>
 800b07e:	6278      	str	r0, [r7, #36]	; 0x24
 800b080:	e012      	b.n	800b0a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b082:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <xTimerGenericCommand+0x98>)
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	f107 0110 	add.w	r1, r7, #16
 800b08a:	2300      	movs	r3, #0
 800b08c:	2200      	movs	r2, #0
 800b08e:	f7fe f903 	bl	8009298 <xQueueGenericSend>
 800b092:	6278      	str	r0, [r7, #36]	; 0x24
 800b094:	e008      	b.n	800b0a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b096:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <xTimerGenericCommand+0x98>)
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	f107 0110 	add.w	r1, r7, #16
 800b09e:	2300      	movs	r3, #0
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	f7fe f9f7 	bl	8009494 <xQueueGenericSendFromISR>
 800b0a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3728      	adds	r7, #40	; 0x28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	200013fc 	.word	0x200013fc

0800b0b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b088      	sub	sp, #32
 800b0bc:	af02      	add	r7, sp, #8
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0c2:	4b1c      	ldr	r3, [pc, #112]	; (800b134 <prvProcessExpiredTimer+0x7c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fd fe55 	bl	8008d80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d122      	bne.n	800b124 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	699a      	ldr	r2, [r3, #24]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	18d1      	adds	r1, r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	6978      	ldr	r0, [r7, #20]
 800b0ec:	f000 f8c8 	bl	800b280 <prvInsertTimerInActiveList>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d016      	beq.n	800b124 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	2100      	movs	r1, #0
 800b100:	6978      	ldr	r0, [r7, #20]
 800b102:	f7ff ff8b 	bl	800b01c <xTimerGenericCommand>
 800b106:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	60fb      	str	r3, [r7, #12]
}
 800b120:	bf00      	nop
 800b122:	e7fe      	b.n	800b122 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	6978      	ldr	r0, [r7, #20]
 800b12a:	4798      	blx	r3
}
 800b12c:	bf00      	nop
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	200013f4 	.word	0x200013f4

0800b138 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b140:	f107 0308 	add.w	r3, r7, #8
 800b144:	4618      	mov	r0, r3
 800b146:	f000 f857 	bl	800b1f8 <prvGetNextExpireTime>
 800b14a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4619      	mov	r1, r3
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f000 f803 	bl	800b15c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b156:	f000 f8d5 	bl	800b304 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b15a:	e7f1      	b.n	800b140 <prvTimerTask+0x8>

0800b15c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b166:	f7ff f92d 	bl	800a3c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b16a:	f107 0308 	add.w	r3, r7, #8
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f866 	bl	800b240 <prvSampleTimeNow>
 800b174:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d130      	bne.n	800b1de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <prvProcessTimerOrBlockTask+0x3c>
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	429a      	cmp	r2, r3
 800b188:	d806      	bhi.n	800b198 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b18a:	f7ff f929 	bl	800a3e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b18e:	68f9      	ldr	r1, [r7, #12]
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff ff91 	bl	800b0b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b196:	e024      	b.n	800b1e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d008      	beq.n	800b1b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <prvProcessTimerOrBlockTask+0x90>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	bf0c      	ite	eq
 800b1a8:	2301      	moveq	r3, #1
 800b1aa:	2300      	movne	r3, #0
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <prvProcessTimerOrBlockTask+0x94>)
 800b1b2:	6818      	ldr	r0, [r3, #0]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	4619      	mov	r1, r3
 800b1be:	f7fe fe9b 	bl	8009ef8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b1c2:	f7ff f90d 	bl	800a3e0 <xTaskResumeAll>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b1cc:	4b09      	ldr	r3, [pc, #36]	; (800b1f4 <prvProcessTimerOrBlockTask+0x98>)
 800b1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	f3bf 8f6f 	isb	sy
}
 800b1dc:	e001      	b.n	800b1e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b1de:	f7ff f8ff 	bl	800a3e0 <xTaskResumeAll>
}
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200013f8 	.word	0x200013f8
 800b1f0:	200013fc 	.word	0x200013fc
 800b1f4:	e000ed04 	.word	0xe000ed04

0800b1f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b200:	4b0e      	ldr	r3, [pc, #56]	; (800b23c <prvGetNextExpireTime+0x44>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	bf0c      	ite	eq
 800b20a:	2301      	moveq	r3, #1
 800b20c:	2300      	movne	r3, #0
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	461a      	mov	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d105      	bne.n	800b22a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b21e:	4b07      	ldr	r3, [pc, #28]	; (800b23c <prvGetNextExpireTime+0x44>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	60fb      	str	r3, [r7, #12]
 800b228:	e001      	b.n	800b22e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b22e:	68fb      	ldr	r3, [r7, #12]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	200013f4 	.word	0x200013f4

0800b240 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b248:	f7ff f968 	bl	800a51c <xTaskGetTickCount>
 800b24c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b24e:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <prvSampleTimeNow+0x3c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	429a      	cmp	r2, r3
 800b256:	d205      	bcs.n	800b264 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b258:	f000 f908 	bl	800b46c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e002      	b.n	800b26a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b26a:	4a04      	ldr	r2, [pc, #16]	; (800b27c <prvSampleTimeNow+0x3c>)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b270:	68fb      	ldr	r3, [r7, #12]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20001404 	.word	0x20001404

0800b280 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b28e:	2300      	movs	r3, #0
 800b290:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d812      	bhi.n	800b2cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d302      	bcc.n	800b2ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	e01b      	b.n	800b2f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b2ba:	4b10      	ldr	r3, [pc, #64]	; (800b2fc <prvInsertTimerInActiveList+0x7c>)
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	f7fd fd22 	bl	8008d0e <vListInsert>
 800b2ca:	e012      	b.n	800b2f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d206      	bcs.n	800b2e2 <prvInsertTimerInActiveList+0x62>
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d302      	bcc.n	800b2e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	e007      	b.n	800b2f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2e2:	4b07      	ldr	r3, [pc, #28]	; (800b300 <prvInsertTimerInActiveList+0x80>)
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	f7fd fd0e 	bl	8008d0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b2f2:	697b      	ldr	r3, [r7, #20]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	200013f8 	.word	0x200013f8
 800b300:	200013f4 	.word	0x200013f4

0800b304 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08e      	sub	sp, #56	; 0x38
 800b308:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b30a:	e09d      	b.n	800b448 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	da18      	bge.n	800b344 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b312:	1d3b      	adds	r3, r7, #4
 800b314:	3304      	adds	r3, #4
 800b316:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10a      	bne.n	800b334 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	61fb      	str	r3, [r7, #28]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b33a:	6850      	ldr	r0, [r2, #4]
 800b33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b33e:	6892      	ldr	r2, [r2, #8]
 800b340:	4611      	mov	r1, r2
 800b342:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	db7d      	blt.n	800b446 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b358:	3304      	adds	r3, #4
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fd fd10 	bl	8008d80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b360:	463b      	mov	r3, r7
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff ff6c 	bl	800b240 <prvSampleTimeNow>
 800b368:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b09      	cmp	r3, #9
 800b36e:	d86b      	bhi.n	800b448 <prvProcessReceivedCommands+0x144>
 800b370:	a201      	add	r2, pc, #4	; (adr r2, 800b378 <prvProcessReceivedCommands+0x74>)
 800b372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b376:	bf00      	nop
 800b378:	0800b3a1 	.word	0x0800b3a1
 800b37c:	0800b3a1 	.word	0x0800b3a1
 800b380:	0800b3a1 	.word	0x0800b3a1
 800b384:	0800b449 	.word	0x0800b449
 800b388:	0800b3fd 	.word	0x0800b3fd
 800b38c:	0800b435 	.word	0x0800b435
 800b390:	0800b3a1 	.word	0x0800b3a1
 800b394:	0800b3a1 	.word	0x0800b3a1
 800b398:	0800b449 	.word	0x0800b449
 800b39c:	0800b3fd 	.word	0x0800b3fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	18d1      	adds	r1, r2, r3
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ae:	f7ff ff67 	bl	800b280 <prvInsertTimerInActiveList>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d047      	beq.n	800b448 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d13f      	bne.n	800b448 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	441a      	add	r2, r3
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3da:	f7ff fe1f 	bl	800b01c <xTimerGenericCommand>
 800b3de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d130      	bne.n	800b448 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	61bb      	str	r3, [r7, #24]
}
 800b3f8:	bf00      	nop
 800b3fa:	e7fe      	b.n	800b3fa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b400:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10a      	bne.n	800b420 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	617b      	str	r3, [r7, #20]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b422:	699a      	ldr	r2, [r3, #24]
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	18d1      	adds	r1, r2, r3
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b42e:	f7ff ff27 	bl	800b280 <prvInsertTimerInActiveList>
					break;
 800b432:	e009      	b.n	800b448 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d104      	bne.n	800b448 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800b43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b440:	f000 fbc6 	bl	800bbd0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b444:	e000      	b.n	800b448 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b446:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b448:	4b07      	ldr	r3, [pc, #28]	; (800b468 <prvProcessReceivedCommands+0x164>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	1d39      	adds	r1, r7, #4
 800b44e:	2200      	movs	r2, #0
 800b450:	4618      	mov	r0, r3
 800b452:	f7fe f945 	bl	80096e0 <xQueueReceive>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f47f af57 	bne.w	800b30c <prvProcessReceivedCommands+0x8>
	}
}
 800b45e:	bf00      	nop
 800b460:	bf00      	nop
 800b462:	3730      	adds	r7, #48	; 0x30
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	200013fc 	.word	0x200013fc

0800b46c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b472:	e045      	b.n	800b500 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b474:	4b2c      	ldr	r3, [pc, #176]	; (800b528 <prvSwitchTimerLists+0xbc>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b47e:	4b2a      	ldr	r3, [pc, #168]	; (800b528 <prvSwitchTimerLists+0xbc>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fd fc77 	bl	8008d80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d12e      	bne.n	800b500 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d90e      	bls.n	800b4d2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4c0:	4b19      	ldr	r3, [pc, #100]	; (800b528 <prvSwitchTimerLists+0xbc>)
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	f7fd fc1f 	bl	8008d0e <vListInsert>
 800b4d0:	e016      	b.n	800b500 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	2100      	movs	r1, #0
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f7ff fd9d 	bl	800b01c <xTimerGenericCommand>
 800b4e2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10a      	bne.n	800b500 <prvSwitchTimerLists+0x94>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	603b      	str	r3, [r7, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b500:	4b09      	ldr	r3, [pc, #36]	; (800b528 <prvSwitchTimerLists+0xbc>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1b4      	bne.n	800b474 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b50a:	4b07      	ldr	r3, [pc, #28]	; (800b528 <prvSwitchTimerLists+0xbc>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <prvSwitchTimerLists+0xc0>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a04      	ldr	r2, [pc, #16]	; (800b528 <prvSwitchTimerLists+0xbc>)
 800b516:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b518:	4a04      	ldr	r2, [pc, #16]	; (800b52c <prvSwitchTimerLists+0xc0>)
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	6013      	str	r3, [r2, #0]
}
 800b51e:	bf00      	nop
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	200013f4 	.word	0x200013f4
 800b52c:	200013f8 	.word	0x200013f8

0800b530 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b536:	f000 f965 	bl	800b804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b53a:	4b15      	ldr	r3, [pc, #84]	; (800b590 <prvCheckForValidListAndQueue+0x60>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d120      	bne.n	800b584 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b542:	4814      	ldr	r0, [pc, #80]	; (800b594 <prvCheckForValidListAndQueue+0x64>)
 800b544:	f7fd fb92 	bl	8008c6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b548:	4813      	ldr	r0, [pc, #76]	; (800b598 <prvCheckForValidListAndQueue+0x68>)
 800b54a:	f7fd fb8f 	bl	8008c6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b54e:	4b13      	ldr	r3, [pc, #76]	; (800b59c <prvCheckForValidListAndQueue+0x6c>)
 800b550:	4a10      	ldr	r2, [pc, #64]	; (800b594 <prvCheckForValidListAndQueue+0x64>)
 800b552:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b554:	4b12      	ldr	r3, [pc, #72]	; (800b5a0 <prvCheckForValidListAndQueue+0x70>)
 800b556:	4a10      	ldr	r2, [pc, #64]	; (800b598 <prvCheckForValidListAndQueue+0x68>)
 800b558:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b55a:	2300      	movs	r3, #0
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <prvCheckForValidListAndQueue+0x74>)
 800b560:	4a11      	ldr	r2, [pc, #68]	; (800b5a8 <prvCheckForValidListAndQueue+0x78>)
 800b562:	2110      	movs	r1, #16
 800b564:	200a      	movs	r0, #10
 800b566:	f7fd fc9d 	bl	8008ea4 <xQueueGenericCreateStatic>
 800b56a:	4603      	mov	r3, r0
 800b56c:	4a08      	ldr	r2, [pc, #32]	; (800b590 <prvCheckForValidListAndQueue+0x60>)
 800b56e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b570:	4b07      	ldr	r3, [pc, #28]	; (800b590 <prvCheckForValidListAndQueue+0x60>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d005      	beq.n	800b584 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b578:	4b05      	ldr	r3, [pc, #20]	; (800b590 <prvCheckForValidListAndQueue+0x60>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	490b      	ldr	r1, [pc, #44]	; (800b5ac <prvCheckForValidListAndQueue+0x7c>)
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fe fc66 	bl	8009e50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b584:	f000 f96e 	bl	800b864 <vPortExitCritical>
}
 800b588:	bf00      	nop
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	200013fc 	.word	0x200013fc
 800b594:	200013cc 	.word	0x200013cc
 800b598:	200013e0 	.word	0x200013e0
 800b59c:	200013f4 	.word	0x200013f4
 800b5a0:	200013f8 	.word	0x200013f8
 800b5a4:	200014a8 	.word	0x200014a8
 800b5a8:	20001408 	.word	0x20001408
 800b5ac:	0800d578 	.word	0x0800d578

0800b5b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	3b04      	subs	r3, #4
 800b5c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b5c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3b04      	subs	r3, #4
 800b5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	f023 0201 	bic.w	r2, r3, #1
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3b04      	subs	r3, #4
 800b5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5e0:	4a0c      	ldr	r2, [pc, #48]	; (800b614 <pxPortInitialiseStack+0x64>)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3b14      	subs	r3, #20
 800b5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3b04      	subs	r3, #4
 800b5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f06f 0202 	mvn.w	r2, #2
 800b5fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3b20      	subs	r3, #32
 800b604:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b606:	68fb      	ldr	r3, [r7, #12]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	0800b619 	.word	0x0800b619

0800b618 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b622:	4b12      	ldr	r3, [pc, #72]	; (800b66c <prvTaskExitError+0x54>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b62a:	d00a      	beq.n	800b642 <prvTaskExitError+0x2a>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	60fb      	str	r3, [r7, #12]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <prvTaskExitError+0x28>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	60bb      	str	r3, [r7, #8]
}
 800b654:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b656:	bf00      	nop
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0fc      	beq.n	800b658 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b65e:	bf00      	nop
 800b660:	bf00      	nop
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	20000024 	.word	0x20000024

0800b670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b670:	4b07      	ldr	r3, [pc, #28]	; (800b690 <pxCurrentTCBConst2>)
 800b672:	6819      	ldr	r1, [r3, #0]
 800b674:	6808      	ldr	r0, [r1, #0]
 800b676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67a:	f380 8809 	msr	PSP, r0
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f04f 0000 	mov.w	r0, #0
 800b686:	f380 8811 	msr	BASEPRI, r0
 800b68a:	4770      	bx	lr
 800b68c:	f3af 8000 	nop.w

0800b690 <pxCurrentTCBConst2>:
 800b690:	20000ecc 	.word	0x20000ecc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b694:	bf00      	nop
 800b696:	bf00      	nop

0800b698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b698:	4808      	ldr	r0, [pc, #32]	; (800b6bc <prvPortStartFirstTask+0x24>)
 800b69a:	6800      	ldr	r0, [r0, #0]
 800b69c:	6800      	ldr	r0, [r0, #0]
 800b69e:	f380 8808 	msr	MSP, r0
 800b6a2:	f04f 0000 	mov.w	r0, #0
 800b6a6:	f380 8814 	msr	CONTROL, r0
 800b6aa:	b662      	cpsie	i
 800b6ac:	b661      	cpsie	f
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	df00      	svc	0
 800b6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6ba:	bf00      	nop
 800b6bc:	e000ed08 	.word	0xe000ed08

0800b6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6c6:	4b46      	ldr	r3, [pc, #280]	; (800b7e0 <xPortStartScheduler+0x120>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a46      	ldr	r2, [pc, #280]	; (800b7e4 <xPortStartScheduler+0x124>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d10a      	bne.n	800b6e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	613b      	str	r3, [r7, #16]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b6e6:	4b3e      	ldr	r3, [pc, #248]	; (800b7e0 <xPortStartScheduler+0x120>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a3f      	ldr	r2, [pc, #252]	; (800b7e8 <xPortStartScheduler+0x128>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d10a      	bne.n	800b706 <xPortStartScheduler+0x46>
	__asm volatile
 800b6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	60fb      	str	r3, [r7, #12]
}
 800b702:	bf00      	nop
 800b704:	e7fe      	b.n	800b704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b706:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <xPortStartScheduler+0x12c>)
 800b708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	22ff      	movs	r2, #255	; 0xff
 800b716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	4b31      	ldr	r3, [pc, #196]	; (800b7f0 <xPortStartScheduler+0x130>)
 800b72c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b72e:	4b31      	ldr	r3, [pc, #196]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b730:	2207      	movs	r2, #7
 800b732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b734:	e009      	b.n	800b74a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b736:	4b2f      	ldr	r3, [pc, #188]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	4a2d      	ldr	r2, [pc, #180]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b73e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	b2db      	uxtb	r3, r3
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	b2db      	uxtb	r3, r3
 800b748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b74a:	78fb      	ldrb	r3, [r7, #3]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b752:	2b80      	cmp	r3, #128	; 0x80
 800b754:	d0ef      	beq.n	800b736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b756:	4b27      	ldr	r3, [pc, #156]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f1c3 0307 	rsb	r3, r3, #7
 800b75e:	2b04      	cmp	r3, #4
 800b760:	d00a      	beq.n	800b778 <xPortStartScheduler+0xb8>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	60bb      	str	r3, [r7, #8]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b778:	4b1e      	ldr	r3, [pc, #120]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	4a1d      	ldr	r2, [pc, #116]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b782:	4b1c      	ldr	r3, [pc, #112]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b78a:	4a1a      	ldr	r2, [pc, #104]	; (800b7f4 <xPortStartScheduler+0x134>)
 800b78c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	b2da      	uxtb	r2, r3
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b796:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <xPortStartScheduler+0x138>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a17      	ldr	r2, [pc, #92]	; (800b7f8 <xPortStartScheduler+0x138>)
 800b79c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7a2:	4b15      	ldr	r3, [pc, #84]	; (800b7f8 <xPortStartScheduler+0x138>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a14      	ldr	r2, [pc, #80]	; (800b7f8 <xPortStartScheduler+0x138>)
 800b7a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b7ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7ae:	f000 f8dd 	bl	800b96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7b2:	4b12      	ldr	r3, [pc, #72]	; (800b7fc <xPortStartScheduler+0x13c>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7b8:	f000 f8fc 	bl	800b9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7bc:	4b10      	ldr	r3, [pc, #64]	; (800b800 <xPortStartScheduler+0x140>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a0f      	ldr	r2, [pc, #60]	; (800b800 <xPortStartScheduler+0x140>)
 800b7c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b7c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7c8:	f7ff ff66 	bl	800b698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7cc:	f7fe ff74 	bl	800a6b8 <vTaskSwitchContext>
	prvTaskExitError();
 800b7d0:	f7ff ff22 	bl	800b618 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	e000ed00 	.word	0xe000ed00
 800b7e4:	410fc271 	.word	0x410fc271
 800b7e8:	410fc270 	.word	0x410fc270
 800b7ec:	e000e400 	.word	0xe000e400
 800b7f0:	200014f8 	.word	0x200014f8
 800b7f4:	200014fc 	.word	0x200014fc
 800b7f8:	e000ed20 	.word	0xe000ed20
 800b7fc:	20000024 	.word	0x20000024
 800b800:	e000ef34 	.word	0xe000ef34

0800b804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	607b      	str	r3, [r7, #4]
}
 800b81c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b81e:	4b0f      	ldr	r3, [pc, #60]	; (800b85c <vPortEnterCritical+0x58>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3301      	adds	r3, #1
 800b824:	4a0d      	ldr	r2, [pc, #52]	; (800b85c <vPortEnterCritical+0x58>)
 800b826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b828:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <vPortEnterCritical+0x58>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d10f      	bne.n	800b850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b830:	4b0b      	ldr	r3, [pc, #44]	; (800b860 <vPortEnterCritical+0x5c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00a      	beq.n	800b850 <vPortEnterCritical+0x4c>
	__asm volatile
 800b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83e:	f383 8811 	msr	BASEPRI, r3
 800b842:	f3bf 8f6f 	isb	sy
 800b846:	f3bf 8f4f 	dsb	sy
 800b84a:	603b      	str	r3, [r7, #0]
}
 800b84c:	bf00      	nop
 800b84e:	e7fe      	b.n	800b84e <vPortEnterCritical+0x4a>
	}
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	20000024 	.word	0x20000024
 800b860:	e000ed04 	.word	0xe000ed04

0800b864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b86a:	4b12      	ldr	r3, [pc, #72]	; (800b8b4 <vPortExitCritical+0x50>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <vPortExitCritical+0x24>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	607b      	str	r3, [r7, #4]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <vPortExitCritical+0x50>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	4a09      	ldr	r2, [pc, #36]	; (800b8b4 <vPortExitCritical+0x50>)
 800b890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b892:	4b08      	ldr	r3, [pc, #32]	; (800b8b4 <vPortExitCritical+0x50>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d105      	bne.n	800b8a6 <vPortExitCritical+0x42>
 800b89a:	2300      	movs	r3, #0
 800b89c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	f383 8811 	msr	BASEPRI, r3
}
 800b8a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	20000024 	.word	0x20000024
	...

0800b8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8c0:	f3ef 8009 	mrs	r0, PSP
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	4b15      	ldr	r3, [pc, #84]	; (800b920 <pxCurrentTCBConst>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	f01e 0f10 	tst.w	lr, #16
 800b8d0:	bf08      	it	eq
 800b8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8da:	6010      	str	r0, [r2, #0]
 800b8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8e4:	f380 8811 	msr	BASEPRI, r0
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f7fe fee2 	bl	800a6b8 <vTaskSwitchContext>
 800b8f4:	f04f 0000 	mov.w	r0, #0
 800b8f8:	f380 8811 	msr	BASEPRI, r0
 800b8fc:	bc09      	pop	{r0, r3}
 800b8fe:	6819      	ldr	r1, [r3, #0]
 800b900:	6808      	ldr	r0, [r1, #0]
 800b902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b906:	f01e 0f10 	tst.w	lr, #16
 800b90a:	bf08      	it	eq
 800b90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b910:	f380 8809 	msr	PSP, r0
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	f3af 8000 	nop.w

0800b920 <pxCurrentTCBConst>:
 800b920:	20000ecc 	.word	0x20000ecc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop

0800b928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b942:	f7fe fdfb 	bl	800a53c <xTaskIncrementTick>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b94c:	4b06      	ldr	r3, [pc, #24]	; (800b968 <SysTick_Handler+0x40>)
 800b94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	2300      	movs	r3, #0
 800b956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	f383 8811 	msr	BASEPRI, r3
}
 800b95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b970:	4b0b      	ldr	r3, [pc, #44]	; (800b9a0 <vPortSetupTimerInterrupt+0x34>)
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b976:	4b0b      	ldr	r3, [pc, #44]	; (800b9a4 <vPortSetupTimerInterrupt+0x38>)
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b97c:	4b0a      	ldr	r3, [pc, #40]	; (800b9a8 <vPortSetupTimerInterrupt+0x3c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <vPortSetupTimerInterrupt+0x40>)
 800b982:	fba2 2303 	umull	r2, r3, r2, r3
 800b986:	099b      	lsrs	r3, r3, #6
 800b988:	4a09      	ldr	r2, [pc, #36]	; (800b9b0 <vPortSetupTimerInterrupt+0x44>)
 800b98a:	3b01      	subs	r3, #1
 800b98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b98e:	4b04      	ldr	r3, [pc, #16]	; (800b9a0 <vPortSetupTimerInterrupt+0x34>)
 800b990:	2207      	movs	r2, #7
 800b992:	601a      	str	r2, [r3, #0]
}
 800b994:	bf00      	nop
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	e000e010 	.word	0xe000e010
 800b9a4:	e000e018 	.word	0xe000e018
 800b9a8:	20000018 	.word	0x20000018
 800b9ac:	10624dd3 	.word	0x10624dd3
 800b9b0:	e000e014 	.word	0xe000e014

0800b9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9c4 <vPortEnableVFP+0x10>
 800b9b8:	6801      	ldr	r1, [r0, #0]
 800b9ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b9be:	6001      	str	r1, [r0, #0]
 800b9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9c2:	bf00      	nop
 800b9c4:	e000ed88 	.word	0xe000ed88

0800b9c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9ce:	f3ef 8305 	mrs	r3, IPSR
 800b9d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b0f      	cmp	r3, #15
 800b9d8:	d914      	bls.n	800ba04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9da:	4a17      	ldr	r2, [pc, #92]	; (800ba38 <vPortValidateInterruptPriority+0x70>)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4413      	add	r3, r2
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9e4:	4b15      	ldr	r3, [pc, #84]	; (800ba3c <vPortValidateInterruptPriority+0x74>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	7afa      	ldrb	r2, [r7, #11]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d20a      	bcs.n	800ba04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	607b      	str	r3, [r7, #4]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba04:	4b0e      	ldr	r3, [pc, #56]	; (800ba40 <vPortValidateInterruptPriority+0x78>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba0c:	4b0d      	ldr	r3, [pc, #52]	; (800ba44 <vPortValidateInterruptPriority+0x7c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d90a      	bls.n	800ba2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	603b      	str	r3, [r7, #0]
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <vPortValidateInterruptPriority+0x60>
	}
 800ba2a:	bf00      	nop
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	e000e3f0 	.word	0xe000e3f0
 800ba3c:	200014f8 	.word	0x200014f8
 800ba40:	e000ed0c 	.word	0xe000ed0c
 800ba44:	200014fc 	.word	0x200014fc

0800ba48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08a      	sub	sp, #40	; 0x28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba54:	f7fe fcb6 	bl	800a3c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba58:	4b58      	ldr	r3, [pc, #352]	; (800bbbc <pvPortMalloc+0x174>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba60:	f000 f910 	bl	800bc84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba64:	4b56      	ldr	r3, [pc, #344]	; (800bbc0 <pvPortMalloc+0x178>)
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 808e 	bne.w	800bb8e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d01d      	beq.n	800bab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ba78:	2208      	movs	r2, #8
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f003 0307 	and.w	r3, r3, #7
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d014      	beq.n	800bab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f023 0307 	bic.w	r3, r3, #7
 800ba90:	3308      	adds	r3, #8
 800ba92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00a      	beq.n	800bab4 <pvPortMalloc+0x6c>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	617b      	str	r3, [r7, #20]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d069      	beq.n	800bb8e <pvPortMalloc+0x146>
 800baba:	4b42      	ldr	r3, [pc, #264]	; (800bbc4 <pvPortMalloc+0x17c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d864      	bhi.n	800bb8e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bac4:	4b40      	ldr	r3, [pc, #256]	; (800bbc8 <pvPortMalloc+0x180>)
 800bac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bac8:	4b3f      	ldr	r3, [pc, #252]	; (800bbc8 <pvPortMalloc+0x180>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bace:	e004      	b.n	800bada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d903      	bls.n	800baec <pvPortMalloc+0xa4>
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1f1      	bne.n	800bad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800baec:	4b33      	ldr	r3, [pc, #204]	; (800bbbc <pvPortMalloc+0x174>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d04b      	beq.n	800bb8e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2208      	movs	r2, #8
 800bafc:	4413      	add	r3, r2
 800bafe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	6a3b      	ldr	r3, [r7, #32]
 800bb06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	1ad2      	subs	r2, r2, r3
 800bb10:	2308      	movs	r3, #8
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d91f      	bls.n	800bb58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	f003 0307 	and.w	r3, r3, #7
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00a      	beq.n	800bb40 <pvPortMalloc+0xf8>
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	613b      	str	r3, [r7, #16]
}
 800bb3c:	bf00      	nop
 800bb3e:	e7fe      	b.n	800bb3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	1ad2      	subs	r2, r2, r3
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb52:	69b8      	ldr	r0, [r7, #24]
 800bb54:	f000 f8f8 	bl	800bd48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb58:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <pvPortMalloc+0x17c>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	4a18      	ldr	r2, [pc, #96]	; (800bbc4 <pvPortMalloc+0x17c>)
 800bb64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb66:	4b17      	ldr	r3, [pc, #92]	; (800bbc4 <pvPortMalloc+0x17c>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	4b18      	ldr	r3, [pc, #96]	; (800bbcc <pvPortMalloc+0x184>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d203      	bcs.n	800bb7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb72:	4b14      	ldr	r3, [pc, #80]	; (800bbc4 <pvPortMalloc+0x17c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a15      	ldr	r2, [pc, #84]	; (800bbcc <pvPortMalloc+0x184>)
 800bb78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	4b10      	ldr	r3, [pc, #64]	; (800bbc0 <pvPortMalloc+0x178>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	431a      	orrs	r2, r3
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb8e:	f7fe fc27 	bl	800a3e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	f003 0307 	and.w	r3, r3, #7
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00a      	beq.n	800bbb2 <pvPortMalloc+0x16a>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	60fb      	str	r3, [r7, #12]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <pvPortMalloc+0x168>
	return pvReturn;
 800bbb2:	69fb      	ldr	r3, [r7, #28]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3728      	adds	r7, #40	; 0x28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	20002108 	.word	0x20002108
 800bbc0:	20002114 	.word	0x20002114
 800bbc4:	2000210c 	.word	0x2000210c
 800bbc8:	20002100 	.word	0x20002100
 800bbcc:	20002110 	.word	0x20002110

0800bbd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d048      	beq.n	800bc74 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bbe2:	2308      	movs	r3, #8
 800bbe4:	425b      	negs	r3, r3
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4413      	add	r3, r2
 800bbea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	4b21      	ldr	r3, [pc, #132]	; (800bc7c <vPortFree+0xac>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10a      	bne.n	800bc14 <vPortFree+0x44>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	60fb      	str	r3, [r7, #12]
}
 800bc10:	bf00      	nop
 800bc12:	e7fe      	b.n	800bc12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00a      	beq.n	800bc32 <vPortFree+0x62>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	60bb      	str	r3, [r7, #8]
}
 800bc2e:	bf00      	nop
 800bc30:	e7fe      	b.n	800bc30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <vPortFree+0xac>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d019      	beq.n	800bc74 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d115      	bne.n	800bc74 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <vPortFree+0xac>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	43db      	mvns	r3, r3
 800bc52:	401a      	ands	r2, r3
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc58:	f7fe fbb4 	bl	800a3c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	685a      	ldr	r2, [r3, #4]
 800bc60:	4b07      	ldr	r3, [pc, #28]	; (800bc80 <vPortFree+0xb0>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4413      	add	r3, r2
 800bc66:	4a06      	ldr	r2, [pc, #24]	; (800bc80 <vPortFree+0xb0>)
 800bc68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc6a:	6938      	ldr	r0, [r7, #16]
 800bc6c:	f000 f86c 	bl	800bd48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bc70:	f7fe fbb6 	bl	800a3e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc74:	bf00      	nop
 800bc76:	3718      	adds	r7, #24
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	20002114 	.word	0x20002114
 800bc80:	2000210c 	.word	0x2000210c

0800bc84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bc8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc90:	4b27      	ldr	r3, [pc, #156]	; (800bd30 <prvHeapInit+0xac>)
 800bc92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f003 0307 	and.w	r3, r3, #7
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00c      	beq.n	800bcb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3307      	adds	r3, #7
 800bca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0307 	bic.w	r3, r3, #7
 800bcaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	4a1f      	ldr	r2, [pc, #124]	; (800bd30 <prvHeapInit+0xac>)
 800bcb4:	4413      	add	r3, r2
 800bcb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcbc:	4a1d      	ldr	r2, [pc, #116]	; (800bd34 <prvHeapInit+0xb0>)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcc2:	4b1c      	ldr	r3, [pc, #112]	; (800bd34 <prvHeapInit+0xb0>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	4413      	add	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bcd0:	2208      	movs	r2, #8
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	1a9b      	subs	r3, r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f023 0307 	bic.w	r3, r3, #7
 800bcde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	4a15      	ldr	r2, [pc, #84]	; (800bd38 <prvHeapInit+0xb4>)
 800bce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bce6:	4b14      	ldr	r3, [pc, #80]	; (800bd38 <prvHeapInit+0xb4>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2200      	movs	r2, #0
 800bcec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bcee:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <prvHeapInit+0xb4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	1ad2      	subs	r2, r2, r3
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd04:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <prvHeapInit+0xb4>)
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	4a0a      	ldr	r2, [pc, #40]	; (800bd3c <prvHeapInit+0xb8>)
 800bd12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	4a09      	ldr	r2, [pc, #36]	; (800bd40 <prvHeapInit+0xbc>)
 800bd1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd1c:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <prvHeapInit+0xc0>)
 800bd1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd22:	601a      	str	r2, [r3, #0]
}
 800bd24:	bf00      	nop
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	20001500 	.word	0x20001500
 800bd34:	20002100 	.word	0x20002100
 800bd38:	20002108 	.word	0x20002108
 800bd3c:	20002110 	.word	0x20002110
 800bd40:	2000210c 	.word	0x2000210c
 800bd44:	20002114 	.word	0x20002114

0800bd48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd50:	4b28      	ldr	r3, [pc, #160]	; (800bdf4 <prvInsertBlockIntoFreeList+0xac>)
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	e002      	b.n	800bd5c <prvInsertBlockIntoFreeList+0x14>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	60fb      	str	r3, [r7, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d8f7      	bhi.n	800bd56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	4413      	add	r3, r2
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d108      	bne.n	800bd8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	441a      	add	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	441a      	add	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d118      	bne.n	800bdd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	4b15      	ldr	r3, [pc, #84]	; (800bdf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d00d      	beq.n	800bdc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	441a      	add	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	e008      	b.n	800bdd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdc6:	4b0c      	ldr	r3, [pc, #48]	; (800bdf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	e003      	b.n	800bdd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bdd8:	68fa      	ldr	r2, [r7, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d002      	beq.n	800bde6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bde6:	bf00      	nop
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20002100 	.word	0x20002100
 800bdf8:	20002108 	.word	0x20002108

0800bdfc <atoi>:
 800bdfc:	220a      	movs	r2, #10
 800bdfe:	2100      	movs	r1, #0
 800be00:	f000 b970 	b.w	800c0e4 <strtol>

0800be04 <__errno>:
 800be04:	4b01      	ldr	r3, [pc, #4]	; (800be0c <__errno+0x8>)
 800be06:	6818      	ldr	r0, [r3, #0]
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	20000028 	.word	0x20000028

0800be10 <__libc_init_array>:
 800be10:	b570      	push	{r4, r5, r6, lr}
 800be12:	4d0d      	ldr	r5, [pc, #52]	; (800be48 <__libc_init_array+0x38>)
 800be14:	4c0d      	ldr	r4, [pc, #52]	; (800be4c <__libc_init_array+0x3c>)
 800be16:	1b64      	subs	r4, r4, r5
 800be18:	10a4      	asrs	r4, r4, #2
 800be1a:	2600      	movs	r6, #0
 800be1c:	42a6      	cmp	r6, r4
 800be1e:	d109      	bne.n	800be34 <__libc_init_array+0x24>
 800be20:	4d0b      	ldr	r5, [pc, #44]	; (800be50 <__libc_init_array+0x40>)
 800be22:	4c0c      	ldr	r4, [pc, #48]	; (800be54 <__libc_init_array+0x44>)
 800be24:	f001 fb10 	bl	800d448 <_init>
 800be28:	1b64      	subs	r4, r4, r5
 800be2a:	10a4      	asrs	r4, r4, #2
 800be2c:	2600      	movs	r6, #0
 800be2e:	42a6      	cmp	r6, r4
 800be30:	d105      	bne.n	800be3e <__libc_init_array+0x2e>
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	f855 3b04 	ldr.w	r3, [r5], #4
 800be38:	4798      	blx	r3
 800be3a:	3601      	adds	r6, #1
 800be3c:	e7ee      	b.n	800be1c <__libc_init_array+0xc>
 800be3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800be42:	4798      	blx	r3
 800be44:	3601      	adds	r6, #1
 800be46:	e7f2      	b.n	800be2e <__libc_init_array+0x1e>
 800be48:	0800d8ec 	.word	0x0800d8ec
 800be4c:	0800d8ec 	.word	0x0800d8ec
 800be50:	0800d8ec 	.word	0x0800d8ec
 800be54:	0800d8f0 	.word	0x0800d8f0

0800be58 <memcpy>:
 800be58:	440a      	add	r2, r1
 800be5a:	4291      	cmp	r1, r2
 800be5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800be60:	d100      	bne.n	800be64 <memcpy+0xc>
 800be62:	4770      	bx	lr
 800be64:	b510      	push	{r4, lr}
 800be66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be6e:	4291      	cmp	r1, r2
 800be70:	d1f9      	bne.n	800be66 <memcpy+0xe>
 800be72:	bd10      	pop	{r4, pc}

0800be74 <memset>:
 800be74:	4402      	add	r2, r0
 800be76:	4603      	mov	r3, r0
 800be78:	4293      	cmp	r3, r2
 800be7a:	d100      	bne.n	800be7e <memset+0xa>
 800be7c:	4770      	bx	lr
 800be7e:	f803 1b01 	strb.w	r1, [r3], #1
 800be82:	e7f9      	b.n	800be78 <memset+0x4>

0800be84 <siprintf>:
 800be84:	b40e      	push	{r1, r2, r3}
 800be86:	b500      	push	{lr}
 800be88:	b09c      	sub	sp, #112	; 0x70
 800be8a:	ab1d      	add	r3, sp, #116	; 0x74
 800be8c:	9002      	str	r0, [sp, #8]
 800be8e:	9006      	str	r0, [sp, #24]
 800be90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be94:	4809      	ldr	r0, [pc, #36]	; (800bebc <siprintf+0x38>)
 800be96:	9107      	str	r1, [sp, #28]
 800be98:	9104      	str	r1, [sp, #16]
 800be9a:	4909      	ldr	r1, [pc, #36]	; (800bec0 <siprintf+0x3c>)
 800be9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea0:	9105      	str	r1, [sp, #20]
 800bea2:	6800      	ldr	r0, [r0, #0]
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	a902      	add	r1, sp, #8
 800bea8:	f000 fa9a 	bl	800c3e0 <_svfiprintf_r>
 800beac:	9b02      	ldr	r3, [sp, #8]
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	b01c      	add	sp, #112	; 0x70
 800beb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800beb8:	b003      	add	sp, #12
 800beba:	4770      	bx	lr
 800bebc:	20000028 	.word	0x20000028
 800bec0:	ffff0208 	.word	0xffff0208

0800bec4 <strcpy>:
 800bec4:	4603      	mov	r3, r0
 800bec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beca:	f803 2b01 	strb.w	r2, [r3], #1
 800bece:	2a00      	cmp	r2, #0
 800bed0:	d1f9      	bne.n	800bec6 <strcpy+0x2>
 800bed2:	4770      	bx	lr

0800bed4 <strncmp>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	b17a      	cbz	r2, 800bef8 <strncmp+0x24>
 800bed8:	4603      	mov	r3, r0
 800beda:	3901      	subs	r1, #1
 800bedc:	1884      	adds	r4, r0, r2
 800bede:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bee2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bee6:	4290      	cmp	r0, r2
 800bee8:	d101      	bne.n	800beee <strncmp+0x1a>
 800beea:	42a3      	cmp	r3, r4
 800beec:	d101      	bne.n	800bef2 <strncmp+0x1e>
 800beee:	1a80      	subs	r0, r0, r2
 800bef0:	bd10      	pop	{r4, pc}
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d1f3      	bne.n	800bede <strncmp+0xa>
 800bef6:	e7fa      	b.n	800beee <strncmp+0x1a>
 800bef8:	4610      	mov	r0, r2
 800befa:	e7f9      	b.n	800bef0 <strncmp+0x1c>

0800befc <strstr>:
 800befc:	780a      	ldrb	r2, [r1, #0]
 800befe:	b570      	push	{r4, r5, r6, lr}
 800bf00:	b96a      	cbnz	r2, 800bf1e <strstr+0x22>
 800bf02:	bd70      	pop	{r4, r5, r6, pc}
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d109      	bne.n	800bf1c <strstr+0x20>
 800bf08:	460c      	mov	r4, r1
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d0f6      	beq.n	800bf02 <strstr+0x6>
 800bf14:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bf18:	429e      	cmp	r6, r3
 800bf1a:	d0f7      	beq.n	800bf0c <strstr+0x10>
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	7803      	ldrb	r3, [r0, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1ef      	bne.n	800bf04 <strstr+0x8>
 800bf24:	4618      	mov	r0, r3
 800bf26:	e7ec      	b.n	800bf02 <strstr+0x6>

0800bf28 <strtok>:
 800bf28:	4b16      	ldr	r3, [pc, #88]	; (800bf84 <strtok+0x5c>)
 800bf2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf2c:	681e      	ldr	r6, [r3, #0]
 800bf2e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800bf30:	4605      	mov	r5, r0
 800bf32:	b9fc      	cbnz	r4, 800bf74 <strtok+0x4c>
 800bf34:	2050      	movs	r0, #80	; 0x50
 800bf36:	9101      	str	r1, [sp, #4]
 800bf38:	f000 f90e 	bl	800c158 <malloc>
 800bf3c:	9901      	ldr	r1, [sp, #4]
 800bf3e:	65b0      	str	r0, [r6, #88]	; 0x58
 800bf40:	4602      	mov	r2, r0
 800bf42:	b920      	cbnz	r0, 800bf4e <strtok+0x26>
 800bf44:	4b10      	ldr	r3, [pc, #64]	; (800bf88 <strtok+0x60>)
 800bf46:	4811      	ldr	r0, [pc, #68]	; (800bf8c <strtok+0x64>)
 800bf48:	2157      	movs	r1, #87	; 0x57
 800bf4a:	f000 f8d5 	bl	800c0f8 <__assert_func>
 800bf4e:	e9c0 4400 	strd	r4, r4, [r0]
 800bf52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bf56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bf5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bf5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bf62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bf66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bf6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bf6e:	6184      	str	r4, [r0, #24]
 800bf70:	7704      	strb	r4, [r0, #28]
 800bf72:	6244      	str	r4, [r0, #36]	; 0x24
 800bf74:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800bf76:	2301      	movs	r3, #1
 800bf78:	4628      	mov	r0, r5
 800bf7a:	b002      	add	sp, #8
 800bf7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf80:	f000 b806 	b.w	800bf90 <__strtok_r>
 800bf84:	20000028 	.word	0x20000028
 800bf88:	0800d6a8 	.word	0x0800d6a8
 800bf8c:	0800d6bf 	.word	0x0800d6bf

0800bf90 <__strtok_r>:
 800bf90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf92:	b908      	cbnz	r0, 800bf98 <__strtok_r+0x8>
 800bf94:	6810      	ldr	r0, [r2, #0]
 800bf96:	b188      	cbz	r0, 800bfbc <__strtok_r+0x2c>
 800bf98:	4604      	mov	r4, r0
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bfa0:	460f      	mov	r7, r1
 800bfa2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bfa6:	b91e      	cbnz	r6, 800bfb0 <__strtok_r+0x20>
 800bfa8:	b965      	cbnz	r5, 800bfc4 <__strtok_r+0x34>
 800bfaa:	6015      	str	r5, [r2, #0]
 800bfac:	4628      	mov	r0, r5
 800bfae:	e005      	b.n	800bfbc <__strtok_r+0x2c>
 800bfb0:	42b5      	cmp	r5, r6
 800bfb2:	d1f6      	bne.n	800bfa2 <__strtok_r+0x12>
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1f0      	bne.n	800bf9a <__strtok_r+0xa>
 800bfb8:	6014      	str	r4, [r2, #0]
 800bfba:	7003      	strb	r3, [r0, #0]
 800bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfbe:	461c      	mov	r4, r3
 800bfc0:	e00c      	b.n	800bfdc <__strtok_r+0x4c>
 800bfc2:	b915      	cbnz	r5, 800bfca <__strtok_r+0x3a>
 800bfc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bfc8:	460e      	mov	r6, r1
 800bfca:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bfce:	42ab      	cmp	r3, r5
 800bfd0:	d1f7      	bne.n	800bfc2 <__strtok_r+0x32>
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0f3      	beq.n	800bfbe <__strtok_r+0x2e>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bfdc:	6014      	str	r4, [r2, #0]
 800bfde:	e7ed      	b.n	800bfbc <__strtok_r+0x2c>

0800bfe0 <_strtol_l.constprop.0>:
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe6:	d001      	beq.n	800bfec <_strtol_l.constprop.0+0xc>
 800bfe8:	2b24      	cmp	r3, #36	; 0x24
 800bfea:	d906      	bls.n	800bffa <_strtol_l.constprop.0+0x1a>
 800bfec:	f7ff ff0a 	bl	800be04 <__errno>
 800bff0:	2316      	movs	r3, #22
 800bff2:	6003      	str	r3, [r0, #0]
 800bff4:	2000      	movs	r0, #0
 800bff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c0e0 <_strtol_l.constprop.0+0x100>
 800bffe:	460d      	mov	r5, r1
 800c000:	462e      	mov	r6, r5
 800c002:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c006:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c00a:	f017 0708 	ands.w	r7, r7, #8
 800c00e:	d1f7      	bne.n	800c000 <_strtol_l.constprop.0+0x20>
 800c010:	2c2d      	cmp	r4, #45	; 0x2d
 800c012:	d132      	bne.n	800c07a <_strtol_l.constprop.0+0x9a>
 800c014:	782c      	ldrb	r4, [r5, #0]
 800c016:	2701      	movs	r7, #1
 800c018:	1cb5      	adds	r5, r6, #2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d05b      	beq.n	800c0d6 <_strtol_l.constprop.0+0xf6>
 800c01e:	2b10      	cmp	r3, #16
 800c020:	d109      	bne.n	800c036 <_strtol_l.constprop.0+0x56>
 800c022:	2c30      	cmp	r4, #48	; 0x30
 800c024:	d107      	bne.n	800c036 <_strtol_l.constprop.0+0x56>
 800c026:	782c      	ldrb	r4, [r5, #0]
 800c028:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c02c:	2c58      	cmp	r4, #88	; 0x58
 800c02e:	d14d      	bne.n	800c0cc <_strtol_l.constprop.0+0xec>
 800c030:	786c      	ldrb	r4, [r5, #1]
 800c032:	2310      	movs	r3, #16
 800c034:	3502      	adds	r5, #2
 800c036:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c03a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c03e:	f04f 0c00 	mov.w	ip, #0
 800c042:	fbb8 f9f3 	udiv	r9, r8, r3
 800c046:	4666      	mov	r6, ip
 800c048:	fb03 8a19 	mls	sl, r3, r9, r8
 800c04c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c050:	f1be 0f09 	cmp.w	lr, #9
 800c054:	d816      	bhi.n	800c084 <_strtol_l.constprop.0+0xa4>
 800c056:	4674      	mov	r4, lr
 800c058:	42a3      	cmp	r3, r4
 800c05a:	dd24      	ble.n	800c0a6 <_strtol_l.constprop.0+0xc6>
 800c05c:	f1bc 0f00 	cmp.w	ip, #0
 800c060:	db1e      	blt.n	800c0a0 <_strtol_l.constprop.0+0xc0>
 800c062:	45b1      	cmp	r9, r6
 800c064:	d31c      	bcc.n	800c0a0 <_strtol_l.constprop.0+0xc0>
 800c066:	d101      	bne.n	800c06c <_strtol_l.constprop.0+0x8c>
 800c068:	45a2      	cmp	sl, r4
 800c06a:	db19      	blt.n	800c0a0 <_strtol_l.constprop.0+0xc0>
 800c06c:	fb06 4603 	mla	r6, r6, r3, r4
 800c070:	f04f 0c01 	mov.w	ip, #1
 800c074:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c078:	e7e8      	b.n	800c04c <_strtol_l.constprop.0+0x6c>
 800c07a:	2c2b      	cmp	r4, #43	; 0x2b
 800c07c:	bf04      	itt	eq
 800c07e:	782c      	ldrbeq	r4, [r5, #0]
 800c080:	1cb5      	addeq	r5, r6, #2
 800c082:	e7ca      	b.n	800c01a <_strtol_l.constprop.0+0x3a>
 800c084:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c088:	f1be 0f19 	cmp.w	lr, #25
 800c08c:	d801      	bhi.n	800c092 <_strtol_l.constprop.0+0xb2>
 800c08e:	3c37      	subs	r4, #55	; 0x37
 800c090:	e7e2      	b.n	800c058 <_strtol_l.constprop.0+0x78>
 800c092:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c096:	f1be 0f19 	cmp.w	lr, #25
 800c09a:	d804      	bhi.n	800c0a6 <_strtol_l.constprop.0+0xc6>
 800c09c:	3c57      	subs	r4, #87	; 0x57
 800c09e:	e7db      	b.n	800c058 <_strtol_l.constprop.0+0x78>
 800c0a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c0a4:	e7e6      	b.n	800c074 <_strtol_l.constprop.0+0x94>
 800c0a6:	f1bc 0f00 	cmp.w	ip, #0
 800c0aa:	da05      	bge.n	800c0b8 <_strtol_l.constprop.0+0xd8>
 800c0ac:	2322      	movs	r3, #34	; 0x22
 800c0ae:	6003      	str	r3, [r0, #0]
 800c0b0:	4646      	mov	r6, r8
 800c0b2:	b942      	cbnz	r2, 800c0c6 <_strtol_l.constprop.0+0xe6>
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	e79e      	b.n	800bff6 <_strtol_l.constprop.0+0x16>
 800c0b8:	b107      	cbz	r7, 800c0bc <_strtol_l.constprop.0+0xdc>
 800c0ba:	4276      	negs	r6, r6
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	d0f9      	beq.n	800c0b4 <_strtol_l.constprop.0+0xd4>
 800c0c0:	f1bc 0f00 	cmp.w	ip, #0
 800c0c4:	d000      	beq.n	800c0c8 <_strtol_l.constprop.0+0xe8>
 800c0c6:	1e69      	subs	r1, r5, #1
 800c0c8:	6011      	str	r1, [r2, #0]
 800c0ca:	e7f3      	b.n	800c0b4 <_strtol_l.constprop.0+0xd4>
 800c0cc:	2430      	movs	r4, #48	; 0x30
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1b1      	bne.n	800c036 <_strtol_l.constprop.0+0x56>
 800c0d2:	2308      	movs	r3, #8
 800c0d4:	e7af      	b.n	800c036 <_strtol_l.constprop.0+0x56>
 800c0d6:	2c30      	cmp	r4, #48	; 0x30
 800c0d8:	d0a5      	beq.n	800c026 <_strtol_l.constprop.0+0x46>
 800c0da:	230a      	movs	r3, #10
 800c0dc:	e7ab      	b.n	800c036 <_strtol_l.constprop.0+0x56>
 800c0de:	bf00      	nop
 800c0e0:	0800d759 	.word	0x0800d759

0800c0e4 <strtol>:
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	460a      	mov	r2, r1
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	4802      	ldr	r0, [pc, #8]	; (800c0f4 <strtol+0x10>)
 800c0ec:	6800      	ldr	r0, [r0, #0]
 800c0ee:	f7ff bf77 	b.w	800bfe0 <_strtol_l.constprop.0>
 800c0f2:	bf00      	nop
 800c0f4:	20000028 	.word	0x20000028

0800c0f8 <__assert_func>:
 800c0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0fa:	4614      	mov	r4, r2
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	4b09      	ldr	r3, [pc, #36]	; (800c124 <__assert_func+0x2c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4605      	mov	r5, r0
 800c104:	68d8      	ldr	r0, [r3, #12]
 800c106:	b14c      	cbz	r4, 800c11c <__assert_func+0x24>
 800c108:	4b07      	ldr	r3, [pc, #28]	; (800c128 <__assert_func+0x30>)
 800c10a:	9100      	str	r1, [sp, #0]
 800c10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c110:	4906      	ldr	r1, [pc, #24]	; (800c12c <__assert_func+0x34>)
 800c112:	462b      	mov	r3, r5
 800c114:	f000 f80e 	bl	800c134 <fiprintf>
 800c118:	f000 fe20 	bl	800cd5c <abort>
 800c11c:	4b04      	ldr	r3, [pc, #16]	; (800c130 <__assert_func+0x38>)
 800c11e:	461c      	mov	r4, r3
 800c120:	e7f3      	b.n	800c10a <__assert_func+0x12>
 800c122:	bf00      	nop
 800c124:	20000028 	.word	0x20000028
 800c128:	0800d71c 	.word	0x0800d71c
 800c12c:	0800d729 	.word	0x0800d729
 800c130:	0800d757 	.word	0x0800d757

0800c134 <fiprintf>:
 800c134:	b40e      	push	{r1, r2, r3}
 800c136:	b503      	push	{r0, r1, lr}
 800c138:	4601      	mov	r1, r0
 800c13a:	ab03      	add	r3, sp, #12
 800c13c:	4805      	ldr	r0, [pc, #20]	; (800c154 <fiprintf+0x20>)
 800c13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c142:	6800      	ldr	r0, [r0, #0]
 800c144:	9301      	str	r3, [sp, #4]
 800c146:	f000 fa75 	bl	800c634 <_vfiprintf_r>
 800c14a:	b002      	add	sp, #8
 800c14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c150:	b003      	add	sp, #12
 800c152:	4770      	bx	lr
 800c154:	20000028 	.word	0x20000028

0800c158 <malloc>:
 800c158:	4b02      	ldr	r3, [pc, #8]	; (800c164 <malloc+0xc>)
 800c15a:	4601      	mov	r1, r0
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	f000 b86f 	b.w	800c240 <_malloc_r>
 800c162:	bf00      	nop
 800c164:	20000028 	.word	0x20000028

0800c168 <_free_r>:
 800c168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c16a:	2900      	cmp	r1, #0
 800c16c:	d044      	beq.n	800c1f8 <_free_r+0x90>
 800c16e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c172:	9001      	str	r0, [sp, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	f1a1 0404 	sub.w	r4, r1, #4
 800c17a:	bfb8      	it	lt
 800c17c:	18e4      	addlt	r4, r4, r3
 800c17e:	f001 f82f 	bl	800d1e0 <__malloc_lock>
 800c182:	4a1e      	ldr	r2, [pc, #120]	; (800c1fc <_free_r+0x94>)
 800c184:	9801      	ldr	r0, [sp, #4]
 800c186:	6813      	ldr	r3, [r2, #0]
 800c188:	b933      	cbnz	r3, 800c198 <_free_r+0x30>
 800c18a:	6063      	str	r3, [r4, #4]
 800c18c:	6014      	str	r4, [r2, #0]
 800c18e:	b003      	add	sp, #12
 800c190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c194:	f001 b82a 	b.w	800d1ec <__malloc_unlock>
 800c198:	42a3      	cmp	r3, r4
 800c19a:	d908      	bls.n	800c1ae <_free_r+0x46>
 800c19c:	6825      	ldr	r5, [r4, #0]
 800c19e:	1961      	adds	r1, r4, r5
 800c1a0:	428b      	cmp	r3, r1
 800c1a2:	bf01      	itttt	eq
 800c1a4:	6819      	ldreq	r1, [r3, #0]
 800c1a6:	685b      	ldreq	r3, [r3, #4]
 800c1a8:	1949      	addeq	r1, r1, r5
 800c1aa:	6021      	streq	r1, [r4, #0]
 800c1ac:	e7ed      	b.n	800c18a <_free_r+0x22>
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	b10b      	cbz	r3, 800c1b8 <_free_r+0x50>
 800c1b4:	42a3      	cmp	r3, r4
 800c1b6:	d9fa      	bls.n	800c1ae <_free_r+0x46>
 800c1b8:	6811      	ldr	r1, [r2, #0]
 800c1ba:	1855      	adds	r5, r2, r1
 800c1bc:	42a5      	cmp	r5, r4
 800c1be:	d10b      	bne.n	800c1d8 <_free_r+0x70>
 800c1c0:	6824      	ldr	r4, [r4, #0]
 800c1c2:	4421      	add	r1, r4
 800c1c4:	1854      	adds	r4, r2, r1
 800c1c6:	42a3      	cmp	r3, r4
 800c1c8:	6011      	str	r1, [r2, #0]
 800c1ca:	d1e0      	bne.n	800c18e <_free_r+0x26>
 800c1cc:	681c      	ldr	r4, [r3, #0]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	6053      	str	r3, [r2, #4]
 800c1d2:	4421      	add	r1, r4
 800c1d4:	6011      	str	r1, [r2, #0]
 800c1d6:	e7da      	b.n	800c18e <_free_r+0x26>
 800c1d8:	d902      	bls.n	800c1e0 <_free_r+0x78>
 800c1da:	230c      	movs	r3, #12
 800c1dc:	6003      	str	r3, [r0, #0]
 800c1de:	e7d6      	b.n	800c18e <_free_r+0x26>
 800c1e0:	6825      	ldr	r5, [r4, #0]
 800c1e2:	1961      	adds	r1, r4, r5
 800c1e4:	428b      	cmp	r3, r1
 800c1e6:	bf04      	itt	eq
 800c1e8:	6819      	ldreq	r1, [r3, #0]
 800c1ea:	685b      	ldreq	r3, [r3, #4]
 800c1ec:	6063      	str	r3, [r4, #4]
 800c1ee:	bf04      	itt	eq
 800c1f0:	1949      	addeq	r1, r1, r5
 800c1f2:	6021      	streq	r1, [r4, #0]
 800c1f4:	6054      	str	r4, [r2, #4]
 800c1f6:	e7ca      	b.n	800c18e <_free_r+0x26>
 800c1f8:	b003      	add	sp, #12
 800c1fa:	bd30      	pop	{r4, r5, pc}
 800c1fc:	20002118 	.word	0x20002118

0800c200 <sbrk_aligned>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	4e0e      	ldr	r6, [pc, #56]	; (800c23c <sbrk_aligned+0x3c>)
 800c204:	460c      	mov	r4, r1
 800c206:	6831      	ldr	r1, [r6, #0]
 800c208:	4605      	mov	r5, r0
 800c20a:	b911      	cbnz	r1, 800c212 <sbrk_aligned+0x12>
 800c20c:	f000 fcd6 	bl	800cbbc <_sbrk_r>
 800c210:	6030      	str	r0, [r6, #0]
 800c212:	4621      	mov	r1, r4
 800c214:	4628      	mov	r0, r5
 800c216:	f000 fcd1 	bl	800cbbc <_sbrk_r>
 800c21a:	1c43      	adds	r3, r0, #1
 800c21c:	d00a      	beq.n	800c234 <sbrk_aligned+0x34>
 800c21e:	1cc4      	adds	r4, r0, #3
 800c220:	f024 0403 	bic.w	r4, r4, #3
 800c224:	42a0      	cmp	r0, r4
 800c226:	d007      	beq.n	800c238 <sbrk_aligned+0x38>
 800c228:	1a21      	subs	r1, r4, r0
 800c22a:	4628      	mov	r0, r5
 800c22c:	f000 fcc6 	bl	800cbbc <_sbrk_r>
 800c230:	3001      	adds	r0, #1
 800c232:	d101      	bne.n	800c238 <sbrk_aligned+0x38>
 800c234:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c238:	4620      	mov	r0, r4
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	2000211c 	.word	0x2000211c

0800c240 <_malloc_r>:
 800c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c244:	1ccd      	adds	r5, r1, #3
 800c246:	f025 0503 	bic.w	r5, r5, #3
 800c24a:	3508      	adds	r5, #8
 800c24c:	2d0c      	cmp	r5, #12
 800c24e:	bf38      	it	cc
 800c250:	250c      	movcc	r5, #12
 800c252:	2d00      	cmp	r5, #0
 800c254:	4607      	mov	r7, r0
 800c256:	db01      	blt.n	800c25c <_malloc_r+0x1c>
 800c258:	42a9      	cmp	r1, r5
 800c25a:	d905      	bls.n	800c268 <_malloc_r+0x28>
 800c25c:	230c      	movs	r3, #12
 800c25e:	603b      	str	r3, [r7, #0]
 800c260:	2600      	movs	r6, #0
 800c262:	4630      	mov	r0, r6
 800c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c268:	4e2e      	ldr	r6, [pc, #184]	; (800c324 <_malloc_r+0xe4>)
 800c26a:	f000 ffb9 	bl	800d1e0 <__malloc_lock>
 800c26e:	6833      	ldr	r3, [r6, #0]
 800c270:	461c      	mov	r4, r3
 800c272:	bb34      	cbnz	r4, 800c2c2 <_malloc_r+0x82>
 800c274:	4629      	mov	r1, r5
 800c276:	4638      	mov	r0, r7
 800c278:	f7ff ffc2 	bl	800c200 <sbrk_aligned>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	4604      	mov	r4, r0
 800c280:	d14d      	bne.n	800c31e <_malloc_r+0xde>
 800c282:	6834      	ldr	r4, [r6, #0]
 800c284:	4626      	mov	r6, r4
 800c286:	2e00      	cmp	r6, #0
 800c288:	d140      	bne.n	800c30c <_malloc_r+0xcc>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	4631      	mov	r1, r6
 800c28e:	4638      	mov	r0, r7
 800c290:	eb04 0803 	add.w	r8, r4, r3
 800c294:	f000 fc92 	bl	800cbbc <_sbrk_r>
 800c298:	4580      	cmp	r8, r0
 800c29a:	d13a      	bne.n	800c312 <_malloc_r+0xd2>
 800c29c:	6821      	ldr	r1, [r4, #0]
 800c29e:	3503      	adds	r5, #3
 800c2a0:	1a6d      	subs	r5, r5, r1
 800c2a2:	f025 0503 	bic.w	r5, r5, #3
 800c2a6:	3508      	adds	r5, #8
 800c2a8:	2d0c      	cmp	r5, #12
 800c2aa:	bf38      	it	cc
 800c2ac:	250c      	movcc	r5, #12
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f7ff ffa5 	bl	800c200 <sbrk_aligned>
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	d02b      	beq.n	800c312 <_malloc_r+0xd2>
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	442b      	add	r3, r5
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	e00e      	b.n	800c2e0 <_malloc_r+0xa0>
 800c2c2:	6822      	ldr	r2, [r4, #0]
 800c2c4:	1b52      	subs	r2, r2, r5
 800c2c6:	d41e      	bmi.n	800c306 <_malloc_r+0xc6>
 800c2c8:	2a0b      	cmp	r2, #11
 800c2ca:	d916      	bls.n	800c2fa <_malloc_r+0xba>
 800c2cc:	1961      	adds	r1, r4, r5
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	6025      	str	r5, [r4, #0]
 800c2d2:	bf18      	it	ne
 800c2d4:	6059      	strne	r1, [r3, #4]
 800c2d6:	6863      	ldr	r3, [r4, #4]
 800c2d8:	bf08      	it	eq
 800c2da:	6031      	streq	r1, [r6, #0]
 800c2dc:	5162      	str	r2, [r4, r5]
 800c2de:	604b      	str	r3, [r1, #4]
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f104 060b 	add.w	r6, r4, #11
 800c2e6:	f000 ff81 	bl	800d1ec <__malloc_unlock>
 800c2ea:	f026 0607 	bic.w	r6, r6, #7
 800c2ee:	1d23      	adds	r3, r4, #4
 800c2f0:	1af2      	subs	r2, r6, r3
 800c2f2:	d0b6      	beq.n	800c262 <_malloc_r+0x22>
 800c2f4:	1b9b      	subs	r3, r3, r6
 800c2f6:	50a3      	str	r3, [r4, r2]
 800c2f8:	e7b3      	b.n	800c262 <_malloc_r+0x22>
 800c2fa:	6862      	ldr	r2, [r4, #4]
 800c2fc:	42a3      	cmp	r3, r4
 800c2fe:	bf0c      	ite	eq
 800c300:	6032      	streq	r2, [r6, #0]
 800c302:	605a      	strne	r2, [r3, #4]
 800c304:	e7ec      	b.n	800c2e0 <_malloc_r+0xa0>
 800c306:	4623      	mov	r3, r4
 800c308:	6864      	ldr	r4, [r4, #4]
 800c30a:	e7b2      	b.n	800c272 <_malloc_r+0x32>
 800c30c:	4634      	mov	r4, r6
 800c30e:	6876      	ldr	r6, [r6, #4]
 800c310:	e7b9      	b.n	800c286 <_malloc_r+0x46>
 800c312:	230c      	movs	r3, #12
 800c314:	603b      	str	r3, [r7, #0]
 800c316:	4638      	mov	r0, r7
 800c318:	f000 ff68 	bl	800d1ec <__malloc_unlock>
 800c31c:	e7a1      	b.n	800c262 <_malloc_r+0x22>
 800c31e:	6025      	str	r5, [r4, #0]
 800c320:	e7de      	b.n	800c2e0 <_malloc_r+0xa0>
 800c322:	bf00      	nop
 800c324:	20002118 	.word	0x20002118

0800c328 <__ssputs_r>:
 800c328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c32c:	688e      	ldr	r6, [r1, #8]
 800c32e:	429e      	cmp	r6, r3
 800c330:	4682      	mov	sl, r0
 800c332:	460c      	mov	r4, r1
 800c334:	4690      	mov	r8, r2
 800c336:	461f      	mov	r7, r3
 800c338:	d838      	bhi.n	800c3ac <__ssputs_r+0x84>
 800c33a:	898a      	ldrh	r2, [r1, #12]
 800c33c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c340:	d032      	beq.n	800c3a8 <__ssputs_r+0x80>
 800c342:	6825      	ldr	r5, [r4, #0]
 800c344:	6909      	ldr	r1, [r1, #16]
 800c346:	eba5 0901 	sub.w	r9, r5, r1
 800c34a:	6965      	ldr	r5, [r4, #20]
 800c34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c354:	3301      	adds	r3, #1
 800c356:	444b      	add	r3, r9
 800c358:	106d      	asrs	r5, r5, #1
 800c35a:	429d      	cmp	r5, r3
 800c35c:	bf38      	it	cc
 800c35e:	461d      	movcc	r5, r3
 800c360:	0553      	lsls	r3, r2, #21
 800c362:	d531      	bpl.n	800c3c8 <__ssputs_r+0xa0>
 800c364:	4629      	mov	r1, r5
 800c366:	f7ff ff6b 	bl	800c240 <_malloc_r>
 800c36a:	4606      	mov	r6, r0
 800c36c:	b950      	cbnz	r0, 800c384 <__ssputs_r+0x5c>
 800c36e:	230c      	movs	r3, #12
 800c370:	f8ca 3000 	str.w	r3, [sl]
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c37a:	81a3      	strh	r3, [r4, #12]
 800c37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c384:	6921      	ldr	r1, [r4, #16]
 800c386:	464a      	mov	r2, r9
 800c388:	f7ff fd66 	bl	800be58 <memcpy>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c396:	81a3      	strh	r3, [r4, #12]
 800c398:	6126      	str	r6, [r4, #16]
 800c39a:	6165      	str	r5, [r4, #20]
 800c39c:	444e      	add	r6, r9
 800c39e:	eba5 0509 	sub.w	r5, r5, r9
 800c3a2:	6026      	str	r6, [r4, #0]
 800c3a4:	60a5      	str	r5, [r4, #8]
 800c3a6:	463e      	mov	r6, r7
 800c3a8:	42be      	cmp	r6, r7
 800c3aa:	d900      	bls.n	800c3ae <__ssputs_r+0x86>
 800c3ac:	463e      	mov	r6, r7
 800c3ae:	6820      	ldr	r0, [r4, #0]
 800c3b0:	4632      	mov	r2, r6
 800c3b2:	4641      	mov	r1, r8
 800c3b4:	f000 fefa 	bl	800d1ac <memmove>
 800c3b8:	68a3      	ldr	r3, [r4, #8]
 800c3ba:	1b9b      	subs	r3, r3, r6
 800c3bc:	60a3      	str	r3, [r4, #8]
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	4433      	add	r3, r6
 800c3c2:	6023      	str	r3, [r4, #0]
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e7db      	b.n	800c380 <__ssputs_r+0x58>
 800c3c8:	462a      	mov	r2, r5
 800c3ca:	f000 ff15 	bl	800d1f8 <_realloc_r>
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d1e1      	bne.n	800c398 <__ssputs_r+0x70>
 800c3d4:	6921      	ldr	r1, [r4, #16]
 800c3d6:	4650      	mov	r0, sl
 800c3d8:	f7ff fec6 	bl	800c168 <_free_r>
 800c3dc:	e7c7      	b.n	800c36e <__ssputs_r+0x46>
	...

0800c3e0 <_svfiprintf_r>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	4698      	mov	r8, r3
 800c3e6:	898b      	ldrh	r3, [r1, #12]
 800c3e8:	061b      	lsls	r3, r3, #24
 800c3ea:	b09d      	sub	sp, #116	; 0x74
 800c3ec:	4607      	mov	r7, r0
 800c3ee:	460d      	mov	r5, r1
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	d50e      	bpl.n	800c412 <_svfiprintf_r+0x32>
 800c3f4:	690b      	ldr	r3, [r1, #16]
 800c3f6:	b963      	cbnz	r3, 800c412 <_svfiprintf_r+0x32>
 800c3f8:	2140      	movs	r1, #64	; 0x40
 800c3fa:	f7ff ff21 	bl	800c240 <_malloc_r>
 800c3fe:	6028      	str	r0, [r5, #0]
 800c400:	6128      	str	r0, [r5, #16]
 800c402:	b920      	cbnz	r0, 800c40e <_svfiprintf_r+0x2e>
 800c404:	230c      	movs	r3, #12
 800c406:	603b      	str	r3, [r7, #0]
 800c408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c40c:	e0d1      	b.n	800c5b2 <_svfiprintf_r+0x1d2>
 800c40e:	2340      	movs	r3, #64	; 0x40
 800c410:	616b      	str	r3, [r5, #20]
 800c412:	2300      	movs	r3, #0
 800c414:	9309      	str	r3, [sp, #36]	; 0x24
 800c416:	2320      	movs	r3, #32
 800c418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c41c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c420:	2330      	movs	r3, #48	; 0x30
 800c422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c5cc <_svfiprintf_r+0x1ec>
 800c426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c42a:	f04f 0901 	mov.w	r9, #1
 800c42e:	4623      	mov	r3, r4
 800c430:	469a      	mov	sl, r3
 800c432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c436:	b10a      	cbz	r2, 800c43c <_svfiprintf_r+0x5c>
 800c438:	2a25      	cmp	r2, #37	; 0x25
 800c43a:	d1f9      	bne.n	800c430 <_svfiprintf_r+0x50>
 800c43c:	ebba 0b04 	subs.w	fp, sl, r4
 800c440:	d00b      	beq.n	800c45a <_svfiprintf_r+0x7a>
 800c442:	465b      	mov	r3, fp
 800c444:	4622      	mov	r2, r4
 800c446:	4629      	mov	r1, r5
 800c448:	4638      	mov	r0, r7
 800c44a:	f7ff ff6d 	bl	800c328 <__ssputs_r>
 800c44e:	3001      	adds	r0, #1
 800c450:	f000 80aa 	beq.w	800c5a8 <_svfiprintf_r+0x1c8>
 800c454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c456:	445a      	add	r2, fp
 800c458:	9209      	str	r2, [sp, #36]	; 0x24
 800c45a:	f89a 3000 	ldrb.w	r3, [sl]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 80a2 	beq.w	800c5a8 <_svfiprintf_r+0x1c8>
 800c464:	2300      	movs	r3, #0
 800c466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c46e:	f10a 0a01 	add.w	sl, sl, #1
 800c472:	9304      	str	r3, [sp, #16]
 800c474:	9307      	str	r3, [sp, #28]
 800c476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c47a:	931a      	str	r3, [sp, #104]	; 0x68
 800c47c:	4654      	mov	r4, sl
 800c47e:	2205      	movs	r2, #5
 800c480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c484:	4851      	ldr	r0, [pc, #324]	; (800c5cc <_svfiprintf_r+0x1ec>)
 800c486:	f7f3 feab 	bl	80001e0 <memchr>
 800c48a:	9a04      	ldr	r2, [sp, #16]
 800c48c:	b9d8      	cbnz	r0, 800c4c6 <_svfiprintf_r+0xe6>
 800c48e:	06d0      	lsls	r0, r2, #27
 800c490:	bf44      	itt	mi
 800c492:	2320      	movmi	r3, #32
 800c494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c498:	0711      	lsls	r1, r2, #28
 800c49a:	bf44      	itt	mi
 800c49c:	232b      	movmi	r3, #43	; 0x2b
 800c49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a8:	d015      	beq.n	800c4d6 <_svfiprintf_r+0xf6>
 800c4aa:	9a07      	ldr	r2, [sp, #28]
 800c4ac:	4654      	mov	r4, sl
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	f04f 0c0a 	mov.w	ip, #10
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ba:	3b30      	subs	r3, #48	; 0x30
 800c4bc:	2b09      	cmp	r3, #9
 800c4be:	d94e      	bls.n	800c55e <_svfiprintf_r+0x17e>
 800c4c0:	b1b0      	cbz	r0, 800c4f0 <_svfiprintf_r+0x110>
 800c4c2:	9207      	str	r2, [sp, #28]
 800c4c4:	e014      	b.n	800c4f0 <_svfiprintf_r+0x110>
 800c4c6:	eba0 0308 	sub.w	r3, r0, r8
 800c4ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	9304      	str	r3, [sp, #16]
 800c4d2:	46a2      	mov	sl, r4
 800c4d4:	e7d2      	b.n	800c47c <_svfiprintf_r+0x9c>
 800c4d6:	9b03      	ldr	r3, [sp, #12]
 800c4d8:	1d19      	adds	r1, r3, #4
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	9103      	str	r1, [sp, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	bfbb      	ittet	lt
 800c4e2:	425b      	neglt	r3, r3
 800c4e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4e8:	9307      	strge	r3, [sp, #28]
 800c4ea:	9307      	strlt	r3, [sp, #28]
 800c4ec:	bfb8      	it	lt
 800c4ee:	9204      	strlt	r2, [sp, #16]
 800c4f0:	7823      	ldrb	r3, [r4, #0]
 800c4f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f4:	d10c      	bne.n	800c510 <_svfiprintf_r+0x130>
 800c4f6:	7863      	ldrb	r3, [r4, #1]
 800c4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fa:	d135      	bne.n	800c568 <_svfiprintf_r+0x188>
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	1d1a      	adds	r2, r3, #4
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	9203      	str	r2, [sp, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	bfb8      	it	lt
 800c508:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c50c:	3402      	adds	r4, #2
 800c50e:	9305      	str	r3, [sp, #20]
 800c510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c5dc <_svfiprintf_r+0x1fc>
 800c514:	7821      	ldrb	r1, [r4, #0]
 800c516:	2203      	movs	r2, #3
 800c518:	4650      	mov	r0, sl
 800c51a:	f7f3 fe61 	bl	80001e0 <memchr>
 800c51e:	b140      	cbz	r0, 800c532 <_svfiprintf_r+0x152>
 800c520:	2340      	movs	r3, #64	; 0x40
 800c522:	eba0 000a 	sub.w	r0, r0, sl
 800c526:	fa03 f000 	lsl.w	r0, r3, r0
 800c52a:	9b04      	ldr	r3, [sp, #16]
 800c52c:	4303      	orrs	r3, r0
 800c52e:	3401      	adds	r4, #1
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c536:	4826      	ldr	r0, [pc, #152]	; (800c5d0 <_svfiprintf_r+0x1f0>)
 800c538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c53c:	2206      	movs	r2, #6
 800c53e:	f7f3 fe4f 	bl	80001e0 <memchr>
 800c542:	2800      	cmp	r0, #0
 800c544:	d038      	beq.n	800c5b8 <_svfiprintf_r+0x1d8>
 800c546:	4b23      	ldr	r3, [pc, #140]	; (800c5d4 <_svfiprintf_r+0x1f4>)
 800c548:	bb1b      	cbnz	r3, 800c592 <_svfiprintf_r+0x1b2>
 800c54a:	9b03      	ldr	r3, [sp, #12]
 800c54c:	3307      	adds	r3, #7
 800c54e:	f023 0307 	bic.w	r3, r3, #7
 800c552:	3308      	adds	r3, #8
 800c554:	9303      	str	r3, [sp, #12]
 800c556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c558:	4433      	add	r3, r6
 800c55a:	9309      	str	r3, [sp, #36]	; 0x24
 800c55c:	e767      	b.n	800c42e <_svfiprintf_r+0x4e>
 800c55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c562:	460c      	mov	r4, r1
 800c564:	2001      	movs	r0, #1
 800c566:	e7a5      	b.n	800c4b4 <_svfiprintf_r+0xd4>
 800c568:	2300      	movs	r3, #0
 800c56a:	3401      	adds	r4, #1
 800c56c:	9305      	str	r3, [sp, #20]
 800c56e:	4619      	mov	r1, r3
 800c570:	f04f 0c0a 	mov.w	ip, #10
 800c574:	4620      	mov	r0, r4
 800c576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c57a:	3a30      	subs	r2, #48	; 0x30
 800c57c:	2a09      	cmp	r2, #9
 800c57e:	d903      	bls.n	800c588 <_svfiprintf_r+0x1a8>
 800c580:	2b00      	cmp	r3, #0
 800c582:	d0c5      	beq.n	800c510 <_svfiprintf_r+0x130>
 800c584:	9105      	str	r1, [sp, #20]
 800c586:	e7c3      	b.n	800c510 <_svfiprintf_r+0x130>
 800c588:	fb0c 2101 	mla	r1, ip, r1, r2
 800c58c:	4604      	mov	r4, r0
 800c58e:	2301      	movs	r3, #1
 800c590:	e7f0      	b.n	800c574 <_svfiprintf_r+0x194>
 800c592:	ab03      	add	r3, sp, #12
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	462a      	mov	r2, r5
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <_svfiprintf_r+0x1f8>)
 800c59a:	a904      	add	r1, sp, #16
 800c59c:	4638      	mov	r0, r7
 800c59e:	f3af 8000 	nop.w
 800c5a2:	1c42      	adds	r2, r0, #1
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	d1d6      	bne.n	800c556 <_svfiprintf_r+0x176>
 800c5a8:	89ab      	ldrh	r3, [r5, #12]
 800c5aa:	065b      	lsls	r3, r3, #25
 800c5ac:	f53f af2c 	bmi.w	800c408 <_svfiprintf_r+0x28>
 800c5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5b2:	b01d      	add	sp, #116	; 0x74
 800c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b8:	ab03      	add	r3, sp, #12
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	462a      	mov	r2, r5
 800c5be:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <_svfiprintf_r+0x1f8>)
 800c5c0:	a904      	add	r1, sp, #16
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f000 f9d4 	bl	800c970 <_printf_i>
 800c5c8:	e7eb      	b.n	800c5a2 <_svfiprintf_r+0x1c2>
 800c5ca:	bf00      	nop
 800c5cc:	0800d859 	.word	0x0800d859
 800c5d0:	0800d863 	.word	0x0800d863
 800c5d4:	00000000 	.word	0x00000000
 800c5d8:	0800c329 	.word	0x0800c329
 800c5dc:	0800d85f 	.word	0x0800d85f

0800c5e0 <__sfputc_r>:
 800c5e0:	6893      	ldr	r3, [r2, #8]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	b410      	push	{r4}
 800c5e8:	6093      	str	r3, [r2, #8]
 800c5ea:	da08      	bge.n	800c5fe <__sfputc_r+0x1e>
 800c5ec:	6994      	ldr	r4, [r2, #24]
 800c5ee:	42a3      	cmp	r3, r4
 800c5f0:	db01      	blt.n	800c5f6 <__sfputc_r+0x16>
 800c5f2:	290a      	cmp	r1, #10
 800c5f4:	d103      	bne.n	800c5fe <__sfputc_r+0x1e>
 800c5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5fa:	f000 baef 	b.w	800cbdc <__swbuf_r>
 800c5fe:	6813      	ldr	r3, [r2, #0]
 800c600:	1c58      	adds	r0, r3, #1
 800c602:	6010      	str	r0, [r2, #0]
 800c604:	7019      	strb	r1, [r3, #0]
 800c606:	4608      	mov	r0, r1
 800c608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <__sfputs_r>:
 800c60e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c610:	4606      	mov	r6, r0
 800c612:	460f      	mov	r7, r1
 800c614:	4614      	mov	r4, r2
 800c616:	18d5      	adds	r5, r2, r3
 800c618:	42ac      	cmp	r4, r5
 800c61a:	d101      	bne.n	800c620 <__sfputs_r+0x12>
 800c61c:	2000      	movs	r0, #0
 800c61e:	e007      	b.n	800c630 <__sfputs_r+0x22>
 800c620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c624:	463a      	mov	r2, r7
 800c626:	4630      	mov	r0, r6
 800c628:	f7ff ffda 	bl	800c5e0 <__sfputc_r>
 800c62c:	1c43      	adds	r3, r0, #1
 800c62e:	d1f3      	bne.n	800c618 <__sfputs_r+0xa>
 800c630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c634 <_vfiprintf_r>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	460d      	mov	r5, r1
 800c63a:	b09d      	sub	sp, #116	; 0x74
 800c63c:	4614      	mov	r4, r2
 800c63e:	4698      	mov	r8, r3
 800c640:	4606      	mov	r6, r0
 800c642:	b118      	cbz	r0, 800c64c <_vfiprintf_r+0x18>
 800c644:	6983      	ldr	r3, [r0, #24]
 800c646:	b90b      	cbnz	r3, 800c64c <_vfiprintf_r+0x18>
 800c648:	f000 fcaa 	bl	800cfa0 <__sinit>
 800c64c:	4b89      	ldr	r3, [pc, #548]	; (800c874 <_vfiprintf_r+0x240>)
 800c64e:	429d      	cmp	r5, r3
 800c650:	d11b      	bne.n	800c68a <_vfiprintf_r+0x56>
 800c652:	6875      	ldr	r5, [r6, #4]
 800c654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c656:	07d9      	lsls	r1, r3, #31
 800c658:	d405      	bmi.n	800c666 <_vfiprintf_r+0x32>
 800c65a:	89ab      	ldrh	r3, [r5, #12]
 800c65c:	059a      	lsls	r2, r3, #22
 800c65e:	d402      	bmi.n	800c666 <_vfiprintf_r+0x32>
 800c660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c662:	f000 fd3b 	bl	800d0dc <__retarget_lock_acquire_recursive>
 800c666:	89ab      	ldrh	r3, [r5, #12]
 800c668:	071b      	lsls	r3, r3, #28
 800c66a:	d501      	bpl.n	800c670 <_vfiprintf_r+0x3c>
 800c66c:	692b      	ldr	r3, [r5, #16]
 800c66e:	b9eb      	cbnz	r3, 800c6ac <_vfiprintf_r+0x78>
 800c670:	4629      	mov	r1, r5
 800c672:	4630      	mov	r0, r6
 800c674:	f000 fb04 	bl	800cc80 <__swsetup_r>
 800c678:	b1c0      	cbz	r0, 800c6ac <_vfiprintf_r+0x78>
 800c67a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c67c:	07dc      	lsls	r4, r3, #31
 800c67e:	d50e      	bpl.n	800c69e <_vfiprintf_r+0x6a>
 800c680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c684:	b01d      	add	sp, #116	; 0x74
 800c686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68a:	4b7b      	ldr	r3, [pc, #492]	; (800c878 <_vfiprintf_r+0x244>)
 800c68c:	429d      	cmp	r5, r3
 800c68e:	d101      	bne.n	800c694 <_vfiprintf_r+0x60>
 800c690:	68b5      	ldr	r5, [r6, #8]
 800c692:	e7df      	b.n	800c654 <_vfiprintf_r+0x20>
 800c694:	4b79      	ldr	r3, [pc, #484]	; (800c87c <_vfiprintf_r+0x248>)
 800c696:	429d      	cmp	r5, r3
 800c698:	bf08      	it	eq
 800c69a:	68f5      	ldreq	r5, [r6, #12]
 800c69c:	e7da      	b.n	800c654 <_vfiprintf_r+0x20>
 800c69e:	89ab      	ldrh	r3, [r5, #12]
 800c6a0:	0598      	lsls	r0, r3, #22
 800c6a2:	d4ed      	bmi.n	800c680 <_vfiprintf_r+0x4c>
 800c6a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6a6:	f000 fd1a 	bl	800d0de <__retarget_lock_release_recursive>
 800c6aa:	e7e9      	b.n	800c680 <_vfiprintf_r+0x4c>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b0:	2320      	movs	r3, #32
 800c6b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ba:	2330      	movs	r3, #48	; 0x30
 800c6bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c880 <_vfiprintf_r+0x24c>
 800c6c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6c4:	f04f 0901 	mov.w	r9, #1
 800c6c8:	4623      	mov	r3, r4
 800c6ca:	469a      	mov	sl, r3
 800c6cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d0:	b10a      	cbz	r2, 800c6d6 <_vfiprintf_r+0xa2>
 800c6d2:	2a25      	cmp	r2, #37	; 0x25
 800c6d4:	d1f9      	bne.n	800c6ca <_vfiprintf_r+0x96>
 800c6d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c6da:	d00b      	beq.n	800c6f4 <_vfiprintf_r+0xc0>
 800c6dc:	465b      	mov	r3, fp
 800c6de:	4622      	mov	r2, r4
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	f7ff ff93 	bl	800c60e <__sfputs_r>
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	f000 80aa 	beq.w	800c842 <_vfiprintf_r+0x20e>
 800c6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f0:	445a      	add	r2, fp
 800c6f2:	9209      	str	r2, [sp, #36]	; 0x24
 800c6f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 80a2 	beq.w	800c842 <_vfiprintf_r+0x20e>
 800c6fe:	2300      	movs	r3, #0
 800c700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c708:	f10a 0a01 	add.w	sl, sl, #1
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	9307      	str	r3, [sp, #28]
 800c710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c714:	931a      	str	r3, [sp, #104]	; 0x68
 800c716:	4654      	mov	r4, sl
 800c718:	2205      	movs	r2, #5
 800c71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71e:	4858      	ldr	r0, [pc, #352]	; (800c880 <_vfiprintf_r+0x24c>)
 800c720:	f7f3 fd5e 	bl	80001e0 <memchr>
 800c724:	9a04      	ldr	r2, [sp, #16]
 800c726:	b9d8      	cbnz	r0, 800c760 <_vfiprintf_r+0x12c>
 800c728:	06d1      	lsls	r1, r2, #27
 800c72a:	bf44      	itt	mi
 800c72c:	2320      	movmi	r3, #32
 800c72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c732:	0713      	lsls	r3, r2, #28
 800c734:	bf44      	itt	mi
 800c736:	232b      	movmi	r3, #43	; 0x2b
 800c738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c73c:	f89a 3000 	ldrb.w	r3, [sl]
 800c740:	2b2a      	cmp	r3, #42	; 0x2a
 800c742:	d015      	beq.n	800c770 <_vfiprintf_r+0x13c>
 800c744:	9a07      	ldr	r2, [sp, #28]
 800c746:	4654      	mov	r4, sl
 800c748:	2000      	movs	r0, #0
 800c74a:	f04f 0c0a 	mov.w	ip, #10
 800c74e:	4621      	mov	r1, r4
 800c750:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c754:	3b30      	subs	r3, #48	; 0x30
 800c756:	2b09      	cmp	r3, #9
 800c758:	d94e      	bls.n	800c7f8 <_vfiprintf_r+0x1c4>
 800c75a:	b1b0      	cbz	r0, 800c78a <_vfiprintf_r+0x156>
 800c75c:	9207      	str	r2, [sp, #28]
 800c75e:	e014      	b.n	800c78a <_vfiprintf_r+0x156>
 800c760:	eba0 0308 	sub.w	r3, r0, r8
 800c764:	fa09 f303 	lsl.w	r3, r9, r3
 800c768:	4313      	orrs	r3, r2
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	46a2      	mov	sl, r4
 800c76e:	e7d2      	b.n	800c716 <_vfiprintf_r+0xe2>
 800c770:	9b03      	ldr	r3, [sp, #12]
 800c772:	1d19      	adds	r1, r3, #4
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	9103      	str	r1, [sp, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	bfbb      	ittet	lt
 800c77c:	425b      	neglt	r3, r3
 800c77e:	f042 0202 	orrlt.w	r2, r2, #2
 800c782:	9307      	strge	r3, [sp, #28]
 800c784:	9307      	strlt	r3, [sp, #28]
 800c786:	bfb8      	it	lt
 800c788:	9204      	strlt	r2, [sp, #16]
 800c78a:	7823      	ldrb	r3, [r4, #0]
 800c78c:	2b2e      	cmp	r3, #46	; 0x2e
 800c78e:	d10c      	bne.n	800c7aa <_vfiprintf_r+0x176>
 800c790:	7863      	ldrb	r3, [r4, #1]
 800c792:	2b2a      	cmp	r3, #42	; 0x2a
 800c794:	d135      	bne.n	800c802 <_vfiprintf_r+0x1ce>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	1d1a      	adds	r2, r3, #4
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	9203      	str	r2, [sp, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	bfb8      	it	lt
 800c7a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7a6:	3402      	adds	r4, #2
 800c7a8:	9305      	str	r3, [sp, #20]
 800c7aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c890 <_vfiprintf_r+0x25c>
 800c7ae:	7821      	ldrb	r1, [r4, #0]
 800c7b0:	2203      	movs	r2, #3
 800c7b2:	4650      	mov	r0, sl
 800c7b4:	f7f3 fd14 	bl	80001e0 <memchr>
 800c7b8:	b140      	cbz	r0, 800c7cc <_vfiprintf_r+0x198>
 800c7ba:	2340      	movs	r3, #64	; 0x40
 800c7bc:	eba0 000a 	sub.w	r0, r0, sl
 800c7c0:	fa03 f000 	lsl.w	r0, r3, r0
 800c7c4:	9b04      	ldr	r3, [sp, #16]
 800c7c6:	4303      	orrs	r3, r0
 800c7c8:	3401      	adds	r4, #1
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d0:	482c      	ldr	r0, [pc, #176]	; (800c884 <_vfiprintf_r+0x250>)
 800c7d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7d6:	2206      	movs	r2, #6
 800c7d8:	f7f3 fd02 	bl	80001e0 <memchr>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d03f      	beq.n	800c860 <_vfiprintf_r+0x22c>
 800c7e0:	4b29      	ldr	r3, [pc, #164]	; (800c888 <_vfiprintf_r+0x254>)
 800c7e2:	bb1b      	cbnz	r3, 800c82c <_vfiprintf_r+0x1f8>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	3307      	adds	r3, #7
 800c7e8:	f023 0307 	bic.w	r3, r3, #7
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	9303      	str	r3, [sp, #12]
 800c7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f2:	443b      	add	r3, r7
 800c7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f6:	e767      	b.n	800c6c8 <_vfiprintf_r+0x94>
 800c7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	2001      	movs	r0, #1
 800c800:	e7a5      	b.n	800c74e <_vfiprintf_r+0x11a>
 800c802:	2300      	movs	r3, #0
 800c804:	3401      	adds	r4, #1
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	4619      	mov	r1, r3
 800c80a:	f04f 0c0a 	mov.w	ip, #10
 800c80e:	4620      	mov	r0, r4
 800c810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c814:	3a30      	subs	r2, #48	; 0x30
 800c816:	2a09      	cmp	r2, #9
 800c818:	d903      	bls.n	800c822 <_vfiprintf_r+0x1ee>
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0c5      	beq.n	800c7aa <_vfiprintf_r+0x176>
 800c81e:	9105      	str	r1, [sp, #20]
 800c820:	e7c3      	b.n	800c7aa <_vfiprintf_r+0x176>
 800c822:	fb0c 2101 	mla	r1, ip, r1, r2
 800c826:	4604      	mov	r4, r0
 800c828:	2301      	movs	r3, #1
 800c82a:	e7f0      	b.n	800c80e <_vfiprintf_r+0x1da>
 800c82c:	ab03      	add	r3, sp, #12
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	462a      	mov	r2, r5
 800c832:	4b16      	ldr	r3, [pc, #88]	; (800c88c <_vfiprintf_r+0x258>)
 800c834:	a904      	add	r1, sp, #16
 800c836:	4630      	mov	r0, r6
 800c838:	f3af 8000 	nop.w
 800c83c:	4607      	mov	r7, r0
 800c83e:	1c78      	adds	r0, r7, #1
 800c840:	d1d6      	bne.n	800c7f0 <_vfiprintf_r+0x1bc>
 800c842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c844:	07d9      	lsls	r1, r3, #31
 800c846:	d405      	bmi.n	800c854 <_vfiprintf_r+0x220>
 800c848:	89ab      	ldrh	r3, [r5, #12]
 800c84a:	059a      	lsls	r2, r3, #22
 800c84c:	d402      	bmi.n	800c854 <_vfiprintf_r+0x220>
 800c84e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c850:	f000 fc45 	bl	800d0de <__retarget_lock_release_recursive>
 800c854:	89ab      	ldrh	r3, [r5, #12]
 800c856:	065b      	lsls	r3, r3, #25
 800c858:	f53f af12 	bmi.w	800c680 <_vfiprintf_r+0x4c>
 800c85c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c85e:	e711      	b.n	800c684 <_vfiprintf_r+0x50>
 800c860:	ab03      	add	r3, sp, #12
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	462a      	mov	r2, r5
 800c866:	4b09      	ldr	r3, [pc, #36]	; (800c88c <_vfiprintf_r+0x258>)
 800c868:	a904      	add	r1, sp, #16
 800c86a:	4630      	mov	r0, r6
 800c86c:	f000 f880 	bl	800c970 <_printf_i>
 800c870:	e7e4      	b.n	800c83c <_vfiprintf_r+0x208>
 800c872:	bf00      	nop
 800c874:	0800d8ac 	.word	0x0800d8ac
 800c878:	0800d8cc 	.word	0x0800d8cc
 800c87c:	0800d88c 	.word	0x0800d88c
 800c880:	0800d859 	.word	0x0800d859
 800c884:	0800d863 	.word	0x0800d863
 800c888:	00000000 	.word	0x00000000
 800c88c:	0800c60f 	.word	0x0800c60f
 800c890:	0800d85f 	.word	0x0800d85f

0800c894 <_printf_common>:
 800c894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c898:	4616      	mov	r6, r2
 800c89a:	4699      	mov	r9, r3
 800c89c:	688a      	ldr	r2, [r1, #8]
 800c89e:	690b      	ldr	r3, [r1, #16]
 800c8a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	bfb8      	it	lt
 800c8a8:	4613      	movlt	r3, r2
 800c8aa:	6033      	str	r3, [r6, #0]
 800c8ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	b10a      	cbz	r2, 800c8ba <_printf_common+0x26>
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	6033      	str	r3, [r6, #0]
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	0699      	lsls	r1, r3, #26
 800c8be:	bf42      	ittt	mi
 800c8c0:	6833      	ldrmi	r3, [r6, #0]
 800c8c2:	3302      	addmi	r3, #2
 800c8c4:	6033      	strmi	r3, [r6, #0]
 800c8c6:	6825      	ldr	r5, [r4, #0]
 800c8c8:	f015 0506 	ands.w	r5, r5, #6
 800c8cc:	d106      	bne.n	800c8dc <_printf_common+0x48>
 800c8ce:	f104 0a19 	add.w	sl, r4, #25
 800c8d2:	68e3      	ldr	r3, [r4, #12]
 800c8d4:	6832      	ldr	r2, [r6, #0]
 800c8d6:	1a9b      	subs	r3, r3, r2
 800c8d8:	42ab      	cmp	r3, r5
 800c8da:	dc26      	bgt.n	800c92a <_printf_common+0x96>
 800c8dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8e0:	1e13      	subs	r3, r2, #0
 800c8e2:	6822      	ldr	r2, [r4, #0]
 800c8e4:	bf18      	it	ne
 800c8e6:	2301      	movne	r3, #1
 800c8e8:	0692      	lsls	r2, r2, #26
 800c8ea:	d42b      	bmi.n	800c944 <_printf_common+0xb0>
 800c8ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8f0:	4649      	mov	r1, r9
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	47c0      	blx	r8
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	d01e      	beq.n	800c938 <_printf_common+0xa4>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	68e5      	ldr	r5, [r4, #12]
 800c8fe:	6832      	ldr	r2, [r6, #0]
 800c900:	f003 0306 	and.w	r3, r3, #6
 800c904:	2b04      	cmp	r3, #4
 800c906:	bf08      	it	eq
 800c908:	1aad      	subeq	r5, r5, r2
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	6922      	ldr	r2, [r4, #16]
 800c90e:	bf0c      	ite	eq
 800c910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c914:	2500      	movne	r5, #0
 800c916:	4293      	cmp	r3, r2
 800c918:	bfc4      	itt	gt
 800c91a:	1a9b      	subgt	r3, r3, r2
 800c91c:	18ed      	addgt	r5, r5, r3
 800c91e:	2600      	movs	r6, #0
 800c920:	341a      	adds	r4, #26
 800c922:	42b5      	cmp	r5, r6
 800c924:	d11a      	bne.n	800c95c <_printf_common+0xc8>
 800c926:	2000      	movs	r0, #0
 800c928:	e008      	b.n	800c93c <_printf_common+0xa8>
 800c92a:	2301      	movs	r3, #1
 800c92c:	4652      	mov	r2, sl
 800c92e:	4649      	mov	r1, r9
 800c930:	4638      	mov	r0, r7
 800c932:	47c0      	blx	r8
 800c934:	3001      	adds	r0, #1
 800c936:	d103      	bne.n	800c940 <_printf_common+0xac>
 800c938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c940:	3501      	adds	r5, #1
 800c942:	e7c6      	b.n	800c8d2 <_printf_common+0x3e>
 800c944:	18e1      	adds	r1, r4, r3
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	2030      	movs	r0, #48	; 0x30
 800c94a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c94e:	4422      	add	r2, r4
 800c950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c958:	3302      	adds	r3, #2
 800c95a:	e7c7      	b.n	800c8ec <_printf_common+0x58>
 800c95c:	2301      	movs	r3, #1
 800c95e:	4622      	mov	r2, r4
 800c960:	4649      	mov	r1, r9
 800c962:	4638      	mov	r0, r7
 800c964:	47c0      	blx	r8
 800c966:	3001      	adds	r0, #1
 800c968:	d0e6      	beq.n	800c938 <_printf_common+0xa4>
 800c96a:	3601      	adds	r6, #1
 800c96c:	e7d9      	b.n	800c922 <_printf_common+0x8e>
	...

0800c970 <_printf_i>:
 800c970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c974:	7e0f      	ldrb	r7, [r1, #24]
 800c976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c978:	2f78      	cmp	r7, #120	; 0x78
 800c97a:	4691      	mov	r9, r2
 800c97c:	4680      	mov	r8, r0
 800c97e:	460c      	mov	r4, r1
 800c980:	469a      	mov	sl, r3
 800c982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c986:	d807      	bhi.n	800c998 <_printf_i+0x28>
 800c988:	2f62      	cmp	r7, #98	; 0x62
 800c98a:	d80a      	bhi.n	800c9a2 <_printf_i+0x32>
 800c98c:	2f00      	cmp	r7, #0
 800c98e:	f000 80d8 	beq.w	800cb42 <_printf_i+0x1d2>
 800c992:	2f58      	cmp	r7, #88	; 0x58
 800c994:	f000 80a3 	beq.w	800cade <_printf_i+0x16e>
 800c998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c99c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9a0:	e03a      	b.n	800ca18 <_printf_i+0xa8>
 800c9a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9a6:	2b15      	cmp	r3, #21
 800c9a8:	d8f6      	bhi.n	800c998 <_printf_i+0x28>
 800c9aa:	a101      	add	r1, pc, #4	; (adr r1, 800c9b0 <_printf_i+0x40>)
 800c9ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9b0:	0800ca09 	.word	0x0800ca09
 800c9b4:	0800ca1d 	.word	0x0800ca1d
 800c9b8:	0800c999 	.word	0x0800c999
 800c9bc:	0800c999 	.word	0x0800c999
 800c9c0:	0800c999 	.word	0x0800c999
 800c9c4:	0800c999 	.word	0x0800c999
 800c9c8:	0800ca1d 	.word	0x0800ca1d
 800c9cc:	0800c999 	.word	0x0800c999
 800c9d0:	0800c999 	.word	0x0800c999
 800c9d4:	0800c999 	.word	0x0800c999
 800c9d8:	0800c999 	.word	0x0800c999
 800c9dc:	0800cb29 	.word	0x0800cb29
 800c9e0:	0800ca4d 	.word	0x0800ca4d
 800c9e4:	0800cb0b 	.word	0x0800cb0b
 800c9e8:	0800c999 	.word	0x0800c999
 800c9ec:	0800c999 	.word	0x0800c999
 800c9f0:	0800cb4b 	.word	0x0800cb4b
 800c9f4:	0800c999 	.word	0x0800c999
 800c9f8:	0800ca4d 	.word	0x0800ca4d
 800c9fc:	0800c999 	.word	0x0800c999
 800ca00:	0800c999 	.word	0x0800c999
 800ca04:	0800cb13 	.word	0x0800cb13
 800ca08:	682b      	ldr	r3, [r5, #0]
 800ca0a:	1d1a      	adds	r2, r3, #4
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	602a      	str	r2, [r5, #0]
 800ca10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e0a3      	b.n	800cb64 <_printf_i+0x1f4>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	6829      	ldr	r1, [r5, #0]
 800ca20:	0606      	lsls	r6, r0, #24
 800ca22:	f101 0304 	add.w	r3, r1, #4
 800ca26:	d50a      	bpl.n	800ca3e <_printf_i+0xce>
 800ca28:	680e      	ldr	r6, [r1, #0]
 800ca2a:	602b      	str	r3, [r5, #0]
 800ca2c:	2e00      	cmp	r6, #0
 800ca2e:	da03      	bge.n	800ca38 <_printf_i+0xc8>
 800ca30:	232d      	movs	r3, #45	; 0x2d
 800ca32:	4276      	negs	r6, r6
 800ca34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca38:	485e      	ldr	r0, [pc, #376]	; (800cbb4 <_printf_i+0x244>)
 800ca3a:	230a      	movs	r3, #10
 800ca3c:	e019      	b.n	800ca72 <_printf_i+0x102>
 800ca3e:	680e      	ldr	r6, [r1, #0]
 800ca40:	602b      	str	r3, [r5, #0]
 800ca42:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca46:	bf18      	it	ne
 800ca48:	b236      	sxthne	r6, r6
 800ca4a:	e7ef      	b.n	800ca2c <_printf_i+0xbc>
 800ca4c:	682b      	ldr	r3, [r5, #0]
 800ca4e:	6820      	ldr	r0, [r4, #0]
 800ca50:	1d19      	adds	r1, r3, #4
 800ca52:	6029      	str	r1, [r5, #0]
 800ca54:	0601      	lsls	r1, r0, #24
 800ca56:	d501      	bpl.n	800ca5c <_printf_i+0xec>
 800ca58:	681e      	ldr	r6, [r3, #0]
 800ca5a:	e002      	b.n	800ca62 <_printf_i+0xf2>
 800ca5c:	0646      	lsls	r6, r0, #25
 800ca5e:	d5fb      	bpl.n	800ca58 <_printf_i+0xe8>
 800ca60:	881e      	ldrh	r6, [r3, #0]
 800ca62:	4854      	ldr	r0, [pc, #336]	; (800cbb4 <_printf_i+0x244>)
 800ca64:	2f6f      	cmp	r7, #111	; 0x6f
 800ca66:	bf0c      	ite	eq
 800ca68:	2308      	moveq	r3, #8
 800ca6a:	230a      	movne	r3, #10
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca72:	6865      	ldr	r5, [r4, #4]
 800ca74:	60a5      	str	r5, [r4, #8]
 800ca76:	2d00      	cmp	r5, #0
 800ca78:	bfa2      	ittt	ge
 800ca7a:	6821      	ldrge	r1, [r4, #0]
 800ca7c:	f021 0104 	bicge.w	r1, r1, #4
 800ca80:	6021      	strge	r1, [r4, #0]
 800ca82:	b90e      	cbnz	r6, 800ca88 <_printf_i+0x118>
 800ca84:	2d00      	cmp	r5, #0
 800ca86:	d04d      	beq.n	800cb24 <_printf_i+0x1b4>
 800ca88:	4615      	mov	r5, r2
 800ca8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca8e:	fb03 6711 	mls	r7, r3, r1, r6
 800ca92:	5dc7      	ldrb	r7, [r0, r7]
 800ca94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca98:	4637      	mov	r7, r6
 800ca9a:	42bb      	cmp	r3, r7
 800ca9c:	460e      	mov	r6, r1
 800ca9e:	d9f4      	bls.n	800ca8a <_printf_i+0x11a>
 800caa0:	2b08      	cmp	r3, #8
 800caa2:	d10b      	bne.n	800cabc <_printf_i+0x14c>
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	07de      	lsls	r6, r3, #31
 800caa8:	d508      	bpl.n	800cabc <_printf_i+0x14c>
 800caaa:	6923      	ldr	r3, [r4, #16]
 800caac:	6861      	ldr	r1, [r4, #4]
 800caae:	4299      	cmp	r1, r3
 800cab0:	bfde      	ittt	le
 800cab2:	2330      	movle	r3, #48	; 0x30
 800cab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cab8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cabc:	1b52      	subs	r2, r2, r5
 800cabe:	6122      	str	r2, [r4, #16]
 800cac0:	f8cd a000 	str.w	sl, [sp]
 800cac4:	464b      	mov	r3, r9
 800cac6:	aa03      	add	r2, sp, #12
 800cac8:	4621      	mov	r1, r4
 800caca:	4640      	mov	r0, r8
 800cacc:	f7ff fee2 	bl	800c894 <_printf_common>
 800cad0:	3001      	adds	r0, #1
 800cad2:	d14c      	bne.n	800cb6e <_printf_i+0x1fe>
 800cad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cad8:	b004      	add	sp, #16
 800cada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cade:	4835      	ldr	r0, [pc, #212]	; (800cbb4 <_printf_i+0x244>)
 800cae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cae4:	6829      	ldr	r1, [r5, #0]
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	f851 6b04 	ldr.w	r6, [r1], #4
 800caec:	6029      	str	r1, [r5, #0]
 800caee:	061d      	lsls	r5, r3, #24
 800caf0:	d514      	bpl.n	800cb1c <_printf_i+0x1ac>
 800caf2:	07df      	lsls	r7, r3, #31
 800caf4:	bf44      	itt	mi
 800caf6:	f043 0320 	orrmi.w	r3, r3, #32
 800cafa:	6023      	strmi	r3, [r4, #0]
 800cafc:	b91e      	cbnz	r6, 800cb06 <_printf_i+0x196>
 800cafe:	6823      	ldr	r3, [r4, #0]
 800cb00:	f023 0320 	bic.w	r3, r3, #32
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	2310      	movs	r3, #16
 800cb08:	e7b0      	b.n	800ca6c <_printf_i+0xfc>
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	f043 0320 	orr.w	r3, r3, #32
 800cb10:	6023      	str	r3, [r4, #0]
 800cb12:	2378      	movs	r3, #120	; 0x78
 800cb14:	4828      	ldr	r0, [pc, #160]	; (800cbb8 <_printf_i+0x248>)
 800cb16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb1a:	e7e3      	b.n	800cae4 <_printf_i+0x174>
 800cb1c:	0659      	lsls	r1, r3, #25
 800cb1e:	bf48      	it	mi
 800cb20:	b2b6      	uxthmi	r6, r6
 800cb22:	e7e6      	b.n	800caf2 <_printf_i+0x182>
 800cb24:	4615      	mov	r5, r2
 800cb26:	e7bb      	b.n	800caa0 <_printf_i+0x130>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	6826      	ldr	r6, [r4, #0]
 800cb2c:	6961      	ldr	r1, [r4, #20]
 800cb2e:	1d18      	adds	r0, r3, #4
 800cb30:	6028      	str	r0, [r5, #0]
 800cb32:	0635      	lsls	r5, r6, #24
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	d501      	bpl.n	800cb3c <_printf_i+0x1cc>
 800cb38:	6019      	str	r1, [r3, #0]
 800cb3a:	e002      	b.n	800cb42 <_printf_i+0x1d2>
 800cb3c:	0670      	lsls	r0, r6, #25
 800cb3e:	d5fb      	bpl.n	800cb38 <_printf_i+0x1c8>
 800cb40:	8019      	strh	r1, [r3, #0]
 800cb42:	2300      	movs	r3, #0
 800cb44:	6123      	str	r3, [r4, #16]
 800cb46:	4615      	mov	r5, r2
 800cb48:	e7ba      	b.n	800cac0 <_printf_i+0x150>
 800cb4a:	682b      	ldr	r3, [r5, #0]
 800cb4c:	1d1a      	adds	r2, r3, #4
 800cb4e:	602a      	str	r2, [r5, #0]
 800cb50:	681d      	ldr	r5, [r3, #0]
 800cb52:	6862      	ldr	r2, [r4, #4]
 800cb54:	2100      	movs	r1, #0
 800cb56:	4628      	mov	r0, r5
 800cb58:	f7f3 fb42 	bl	80001e0 <memchr>
 800cb5c:	b108      	cbz	r0, 800cb62 <_printf_i+0x1f2>
 800cb5e:	1b40      	subs	r0, r0, r5
 800cb60:	6060      	str	r0, [r4, #4]
 800cb62:	6863      	ldr	r3, [r4, #4]
 800cb64:	6123      	str	r3, [r4, #16]
 800cb66:	2300      	movs	r3, #0
 800cb68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb6c:	e7a8      	b.n	800cac0 <_printf_i+0x150>
 800cb6e:	6923      	ldr	r3, [r4, #16]
 800cb70:	462a      	mov	r2, r5
 800cb72:	4649      	mov	r1, r9
 800cb74:	4640      	mov	r0, r8
 800cb76:	47d0      	blx	sl
 800cb78:	3001      	adds	r0, #1
 800cb7a:	d0ab      	beq.n	800cad4 <_printf_i+0x164>
 800cb7c:	6823      	ldr	r3, [r4, #0]
 800cb7e:	079b      	lsls	r3, r3, #30
 800cb80:	d413      	bmi.n	800cbaa <_printf_i+0x23a>
 800cb82:	68e0      	ldr	r0, [r4, #12]
 800cb84:	9b03      	ldr	r3, [sp, #12]
 800cb86:	4298      	cmp	r0, r3
 800cb88:	bfb8      	it	lt
 800cb8a:	4618      	movlt	r0, r3
 800cb8c:	e7a4      	b.n	800cad8 <_printf_i+0x168>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	4632      	mov	r2, r6
 800cb92:	4649      	mov	r1, r9
 800cb94:	4640      	mov	r0, r8
 800cb96:	47d0      	blx	sl
 800cb98:	3001      	adds	r0, #1
 800cb9a:	d09b      	beq.n	800cad4 <_printf_i+0x164>
 800cb9c:	3501      	adds	r5, #1
 800cb9e:	68e3      	ldr	r3, [r4, #12]
 800cba0:	9903      	ldr	r1, [sp, #12]
 800cba2:	1a5b      	subs	r3, r3, r1
 800cba4:	42ab      	cmp	r3, r5
 800cba6:	dcf2      	bgt.n	800cb8e <_printf_i+0x21e>
 800cba8:	e7eb      	b.n	800cb82 <_printf_i+0x212>
 800cbaa:	2500      	movs	r5, #0
 800cbac:	f104 0619 	add.w	r6, r4, #25
 800cbb0:	e7f5      	b.n	800cb9e <_printf_i+0x22e>
 800cbb2:	bf00      	nop
 800cbb4:	0800d86a 	.word	0x0800d86a
 800cbb8:	0800d87b 	.word	0x0800d87b

0800cbbc <_sbrk_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4d06      	ldr	r5, [pc, #24]	; (800cbd8 <_sbrk_r+0x1c>)
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	602b      	str	r3, [r5, #0]
 800cbc8:	f7f5 fdec 	bl	80027a4 <_sbrk>
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	d102      	bne.n	800cbd6 <_sbrk_r+0x1a>
 800cbd0:	682b      	ldr	r3, [r5, #0]
 800cbd2:	b103      	cbz	r3, 800cbd6 <_sbrk_r+0x1a>
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
 800cbd8:	20002124 	.word	0x20002124

0800cbdc <__swbuf_r>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	460e      	mov	r6, r1
 800cbe0:	4614      	mov	r4, r2
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	b118      	cbz	r0, 800cbee <__swbuf_r+0x12>
 800cbe6:	6983      	ldr	r3, [r0, #24]
 800cbe8:	b90b      	cbnz	r3, 800cbee <__swbuf_r+0x12>
 800cbea:	f000 f9d9 	bl	800cfa0 <__sinit>
 800cbee:	4b21      	ldr	r3, [pc, #132]	; (800cc74 <__swbuf_r+0x98>)
 800cbf0:	429c      	cmp	r4, r3
 800cbf2:	d12b      	bne.n	800cc4c <__swbuf_r+0x70>
 800cbf4:	686c      	ldr	r4, [r5, #4]
 800cbf6:	69a3      	ldr	r3, [r4, #24]
 800cbf8:	60a3      	str	r3, [r4, #8]
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	071a      	lsls	r2, r3, #28
 800cbfe:	d52f      	bpl.n	800cc60 <__swbuf_r+0x84>
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	b36b      	cbz	r3, 800cc60 <__swbuf_r+0x84>
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	6820      	ldr	r0, [r4, #0]
 800cc08:	1ac0      	subs	r0, r0, r3
 800cc0a:	6963      	ldr	r3, [r4, #20]
 800cc0c:	b2f6      	uxtb	r6, r6
 800cc0e:	4283      	cmp	r3, r0
 800cc10:	4637      	mov	r7, r6
 800cc12:	dc04      	bgt.n	800cc1e <__swbuf_r+0x42>
 800cc14:	4621      	mov	r1, r4
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 f92e 	bl	800ce78 <_fflush_r>
 800cc1c:	bb30      	cbnz	r0, 800cc6c <__swbuf_r+0x90>
 800cc1e:	68a3      	ldr	r3, [r4, #8]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	60a3      	str	r3, [r4, #8]
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	6022      	str	r2, [r4, #0]
 800cc2a:	701e      	strb	r6, [r3, #0]
 800cc2c:	6963      	ldr	r3, [r4, #20]
 800cc2e:	3001      	adds	r0, #1
 800cc30:	4283      	cmp	r3, r0
 800cc32:	d004      	beq.n	800cc3e <__swbuf_r+0x62>
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	07db      	lsls	r3, r3, #31
 800cc38:	d506      	bpl.n	800cc48 <__swbuf_r+0x6c>
 800cc3a:	2e0a      	cmp	r6, #10
 800cc3c:	d104      	bne.n	800cc48 <__swbuf_r+0x6c>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4628      	mov	r0, r5
 800cc42:	f000 f919 	bl	800ce78 <_fflush_r>
 800cc46:	b988      	cbnz	r0, 800cc6c <__swbuf_r+0x90>
 800cc48:	4638      	mov	r0, r7
 800cc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <__swbuf_r+0x9c>)
 800cc4e:	429c      	cmp	r4, r3
 800cc50:	d101      	bne.n	800cc56 <__swbuf_r+0x7a>
 800cc52:	68ac      	ldr	r4, [r5, #8]
 800cc54:	e7cf      	b.n	800cbf6 <__swbuf_r+0x1a>
 800cc56:	4b09      	ldr	r3, [pc, #36]	; (800cc7c <__swbuf_r+0xa0>)
 800cc58:	429c      	cmp	r4, r3
 800cc5a:	bf08      	it	eq
 800cc5c:	68ec      	ldreq	r4, [r5, #12]
 800cc5e:	e7ca      	b.n	800cbf6 <__swbuf_r+0x1a>
 800cc60:	4621      	mov	r1, r4
 800cc62:	4628      	mov	r0, r5
 800cc64:	f000 f80c 	bl	800cc80 <__swsetup_r>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d0cb      	beq.n	800cc04 <__swbuf_r+0x28>
 800cc6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cc70:	e7ea      	b.n	800cc48 <__swbuf_r+0x6c>
 800cc72:	bf00      	nop
 800cc74:	0800d8ac 	.word	0x0800d8ac
 800cc78:	0800d8cc 	.word	0x0800d8cc
 800cc7c:	0800d88c 	.word	0x0800d88c

0800cc80 <__swsetup_r>:
 800cc80:	4b32      	ldr	r3, [pc, #200]	; (800cd4c <__swsetup_r+0xcc>)
 800cc82:	b570      	push	{r4, r5, r6, lr}
 800cc84:	681d      	ldr	r5, [r3, #0]
 800cc86:	4606      	mov	r6, r0
 800cc88:	460c      	mov	r4, r1
 800cc8a:	b125      	cbz	r5, 800cc96 <__swsetup_r+0x16>
 800cc8c:	69ab      	ldr	r3, [r5, #24]
 800cc8e:	b913      	cbnz	r3, 800cc96 <__swsetup_r+0x16>
 800cc90:	4628      	mov	r0, r5
 800cc92:	f000 f985 	bl	800cfa0 <__sinit>
 800cc96:	4b2e      	ldr	r3, [pc, #184]	; (800cd50 <__swsetup_r+0xd0>)
 800cc98:	429c      	cmp	r4, r3
 800cc9a:	d10f      	bne.n	800ccbc <__swsetup_r+0x3c>
 800cc9c:	686c      	ldr	r4, [r5, #4]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cca4:	0719      	lsls	r1, r3, #28
 800cca6:	d42c      	bmi.n	800cd02 <__swsetup_r+0x82>
 800cca8:	06dd      	lsls	r5, r3, #27
 800ccaa:	d411      	bmi.n	800ccd0 <__swsetup_r+0x50>
 800ccac:	2309      	movs	r3, #9
 800ccae:	6033      	str	r3, [r6, #0]
 800ccb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccb4:	81a3      	strh	r3, [r4, #12]
 800ccb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccba:	e03e      	b.n	800cd3a <__swsetup_r+0xba>
 800ccbc:	4b25      	ldr	r3, [pc, #148]	; (800cd54 <__swsetup_r+0xd4>)
 800ccbe:	429c      	cmp	r4, r3
 800ccc0:	d101      	bne.n	800ccc6 <__swsetup_r+0x46>
 800ccc2:	68ac      	ldr	r4, [r5, #8]
 800ccc4:	e7eb      	b.n	800cc9e <__swsetup_r+0x1e>
 800ccc6:	4b24      	ldr	r3, [pc, #144]	; (800cd58 <__swsetup_r+0xd8>)
 800ccc8:	429c      	cmp	r4, r3
 800ccca:	bf08      	it	eq
 800cccc:	68ec      	ldreq	r4, [r5, #12]
 800ccce:	e7e6      	b.n	800cc9e <__swsetup_r+0x1e>
 800ccd0:	0758      	lsls	r0, r3, #29
 800ccd2:	d512      	bpl.n	800ccfa <__swsetup_r+0x7a>
 800ccd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccd6:	b141      	cbz	r1, 800ccea <__swsetup_r+0x6a>
 800ccd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	d002      	beq.n	800cce6 <__swsetup_r+0x66>
 800cce0:	4630      	mov	r0, r6
 800cce2:	f7ff fa41 	bl	800c168 <_free_r>
 800cce6:	2300      	movs	r3, #0
 800cce8:	6363      	str	r3, [r4, #52]	; 0x34
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	6023      	str	r3, [r4, #0]
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	f043 0308 	orr.w	r3, r3, #8
 800cd00:	81a3      	strh	r3, [r4, #12]
 800cd02:	6923      	ldr	r3, [r4, #16]
 800cd04:	b94b      	cbnz	r3, 800cd1a <__swsetup_r+0x9a>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd10:	d003      	beq.n	800cd1a <__swsetup_r+0x9a>
 800cd12:	4621      	mov	r1, r4
 800cd14:	4630      	mov	r0, r6
 800cd16:	f000 fa09 	bl	800d12c <__smakebuf_r>
 800cd1a:	89a0      	ldrh	r0, [r4, #12]
 800cd1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd20:	f010 0301 	ands.w	r3, r0, #1
 800cd24:	d00a      	beq.n	800cd3c <__swsetup_r+0xbc>
 800cd26:	2300      	movs	r3, #0
 800cd28:	60a3      	str	r3, [r4, #8]
 800cd2a:	6963      	ldr	r3, [r4, #20]
 800cd2c:	425b      	negs	r3, r3
 800cd2e:	61a3      	str	r3, [r4, #24]
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	b943      	cbnz	r3, 800cd46 <__swsetup_r+0xc6>
 800cd34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd38:	d1ba      	bne.n	800ccb0 <__swsetup_r+0x30>
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	0781      	lsls	r1, r0, #30
 800cd3e:	bf58      	it	pl
 800cd40:	6963      	ldrpl	r3, [r4, #20]
 800cd42:	60a3      	str	r3, [r4, #8]
 800cd44:	e7f4      	b.n	800cd30 <__swsetup_r+0xb0>
 800cd46:	2000      	movs	r0, #0
 800cd48:	e7f7      	b.n	800cd3a <__swsetup_r+0xba>
 800cd4a:	bf00      	nop
 800cd4c:	20000028 	.word	0x20000028
 800cd50:	0800d8ac 	.word	0x0800d8ac
 800cd54:	0800d8cc 	.word	0x0800d8cc
 800cd58:	0800d88c 	.word	0x0800d88c

0800cd5c <abort>:
 800cd5c:	b508      	push	{r3, lr}
 800cd5e:	2006      	movs	r0, #6
 800cd60:	f000 faa2 	bl	800d2a8 <raise>
 800cd64:	2001      	movs	r0, #1
 800cd66:	f7f5 fca5 	bl	80026b4 <_exit>
	...

0800cd6c <__sflush_r>:
 800cd6c:	898a      	ldrh	r2, [r1, #12]
 800cd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd72:	4605      	mov	r5, r0
 800cd74:	0710      	lsls	r0, r2, #28
 800cd76:	460c      	mov	r4, r1
 800cd78:	d458      	bmi.n	800ce2c <__sflush_r+0xc0>
 800cd7a:	684b      	ldr	r3, [r1, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	dc05      	bgt.n	800cd8c <__sflush_r+0x20>
 800cd80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	dc02      	bgt.n	800cd8c <__sflush_r+0x20>
 800cd86:	2000      	movs	r0, #0
 800cd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd8e:	2e00      	cmp	r6, #0
 800cd90:	d0f9      	beq.n	800cd86 <__sflush_r+0x1a>
 800cd92:	2300      	movs	r3, #0
 800cd94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd98:	682f      	ldr	r7, [r5, #0]
 800cd9a:	602b      	str	r3, [r5, #0]
 800cd9c:	d032      	beq.n	800ce04 <__sflush_r+0x98>
 800cd9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cda0:	89a3      	ldrh	r3, [r4, #12]
 800cda2:	075a      	lsls	r2, r3, #29
 800cda4:	d505      	bpl.n	800cdb2 <__sflush_r+0x46>
 800cda6:	6863      	ldr	r3, [r4, #4]
 800cda8:	1ac0      	subs	r0, r0, r3
 800cdaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdac:	b10b      	cbz	r3, 800cdb2 <__sflush_r+0x46>
 800cdae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cdb0:	1ac0      	subs	r0, r0, r3
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdb8:	6a21      	ldr	r1, [r4, #32]
 800cdba:	4628      	mov	r0, r5
 800cdbc:	47b0      	blx	r6
 800cdbe:	1c43      	adds	r3, r0, #1
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	d106      	bne.n	800cdd2 <__sflush_r+0x66>
 800cdc4:	6829      	ldr	r1, [r5, #0]
 800cdc6:	291d      	cmp	r1, #29
 800cdc8:	d82c      	bhi.n	800ce24 <__sflush_r+0xb8>
 800cdca:	4a2a      	ldr	r2, [pc, #168]	; (800ce74 <__sflush_r+0x108>)
 800cdcc:	40ca      	lsrs	r2, r1
 800cdce:	07d6      	lsls	r6, r2, #31
 800cdd0:	d528      	bpl.n	800ce24 <__sflush_r+0xb8>
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	6062      	str	r2, [r4, #4]
 800cdd6:	04d9      	lsls	r1, r3, #19
 800cdd8:	6922      	ldr	r2, [r4, #16]
 800cdda:	6022      	str	r2, [r4, #0]
 800cddc:	d504      	bpl.n	800cde8 <__sflush_r+0x7c>
 800cdde:	1c42      	adds	r2, r0, #1
 800cde0:	d101      	bne.n	800cde6 <__sflush_r+0x7a>
 800cde2:	682b      	ldr	r3, [r5, #0]
 800cde4:	b903      	cbnz	r3, 800cde8 <__sflush_r+0x7c>
 800cde6:	6560      	str	r0, [r4, #84]	; 0x54
 800cde8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdea:	602f      	str	r7, [r5, #0]
 800cdec:	2900      	cmp	r1, #0
 800cdee:	d0ca      	beq.n	800cd86 <__sflush_r+0x1a>
 800cdf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdf4:	4299      	cmp	r1, r3
 800cdf6:	d002      	beq.n	800cdfe <__sflush_r+0x92>
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	f7ff f9b5 	bl	800c168 <_free_r>
 800cdfe:	2000      	movs	r0, #0
 800ce00:	6360      	str	r0, [r4, #52]	; 0x34
 800ce02:	e7c1      	b.n	800cd88 <__sflush_r+0x1c>
 800ce04:	6a21      	ldr	r1, [r4, #32]
 800ce06:	2301      	movs	r3, #1
 800ce08:	4628      	mov	r0, r5
 800ce0a:	47b0      	blx	r6
 800ce0c:	1c41      	adds	r1, r0, #1
 800ce0e:	d1c7      	bne.n	800cda0 <__sflush_r+0x34>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d0c4      	beq.n	800cda0 <__sflush_r+0x34>
 800ce16:	2b1d      	cmp	r3, #29
 800ce18:	d001      	beq.n	800ce1e <__sflush_r+0xb2>
 800ce1a:	2b16      	cmp	r3, #22
 800ce1c:	d101      	bne.n	800ce22 <__sflush_r+0xb6>
 800ce1e:	602f      	str	r7, [r5, #0]
 800ce20:	e7b1      	b.n	800cd86 <__sflush_r+0x1a>
 800ce22:	89a3      	ldrh	r3, [r4, #12]
 800ce24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce28:	81a3      	strh	r3, [r4, #12]
 800ce2a:	e7ad      	b.n	800cd88 <__sflush_r+0x1c>
 800ce2c:	690f      	ldr	r7, [r1, #16]
 800ce2e:	2f00      	cmp	r7, #0
 800ce30:	d0a9      	beq.n	800cd86 <__sflush_r+0x1a>
 800ce32:	0793      	lsls	r3, r2, #30
 800ce34:	680e      	ldr	r6, [r1, #0]
 800ce36:	bf08      	it	eq
 800ce38:	694b      	ldreq	r3, [r1, #20]
 800ce3a:	600f      	str	r7, [r1, #0]
 800ce3c:	bf18      	it	ne
 800ce3e:	2300      	movne	r3, #0
 800ce40:	eba6 0807 	sub.w	r8, r6, r7
 800ce44:	608b      	str	r3, [r1, #8]
 800ce46:	f1b8 0f00 	cmp.w	r8, #0
 800ce4a:	dd9c      	ble.n	800cd86 <__sflush_r+0x1a>
 800ce4c:	6a21      	ldr	r1, [r4, #32]
 800ce4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce50:	4643      	mov	r3, r8
 800ce52:	463a      	mov	r2, r7
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b0      	blx	r6
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	dc06      	bgt.n	800ce6a <__sflush_r+0xfe>
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce68:	e78e      	b.n	800cd88 <__sflush_r+0x1c>
 800ce6a:	4407      	add	r7, r0
 800ce6c:	eba8 0800 	sub.w	r8, r8, r0
 800ce70:	e7e9      	b.n	800ce46 <__sflush_r+0xda>
 800ce72:	bf00      	nop
 800ce74:	20400001 	.word	0x20400001

0800ce78 <_fflush_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	690b      	ldr	r3, [r1, #16]
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	b913      	cbnz	r3, 800ce88 <_fflush_r+0x10>
 800ce82:	2500      	movs	r5, #0
 800ce84:	4628      	mov	r0, r5
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	b118      	cbz	r0, 800ce92 <_fflush_r+0x1a>
 800ce8a:	6983      	ldr	r3, [r0, #24]
 800ce8c:	b90b      	cbnz	r3, 800ce92 <_fflush_r+0x1a>
 800ce8e:	f000 f887 	bl	800cfa0 <__sinit>
 800ce92:	4b14      	ldr	r3, [pc, #80]	; (800cee4 <_fflush_r+0x6c>)
 800ce94:	429c      	cmp	r4, r3
 800ce96:	d11b      	bne.n	800ced0 <_fflush_r+0x58>
 800ce98:	686c      	ldr	r4, [r5, #4]
 800ce9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d0ef      	beq.n	800ce82 <_fflush_r+0xa>
 800cea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cea4:	07d0      	lsls	r0, r2, #31
 800cea6:	d404      	bmi.n	800ceb2 <_fflush_r+0x3a>
 800cea8:	0599      	lsls	r1, r3, #22
 800ceaa:	d402      	bmi.n	800ceb2 <_fflush_r+0x3a>
 800ceac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceae:	f000 f915 	bl	800d0dc <__retarget_lock_acquire_recursive>
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	f7ff ff59 	bl	800cd6c <__sflush_r>
 800ceba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cebc:	07da      	lsls	r2, r3, #31
 800cebe:	4605      	mov	r5, r0
 800cec0:	d4e0      	bmi.n	800ce84 <_fflush_r+0xc>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	059b      	lsls	r3, r3, #22
 800cec6:	d4dd      	bmi.n	800ce84 <_fflush_r+0xc>
 800cec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceca:	f000 f908 	bl	800d0de <__retarget_lock_release_recursive>
 800cece:	e7d9      	b.n	800ce84 <_fflush_r+0xc>
 800ced0:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <_fflush_r+0x70>)
 800ced2:	429c      	cmp	r4, r3
 800ced4:	d101      	bne.n	800ceda <_fflush_r+0x62>
 800ced6:	68ac      	ldr	r4, [r5, #8]
 800ced8:	e7df      	b.n	800ce9a <_fflush_r+0x22>
 800ceda:	4b04      	ldr	r3, [pc, #16]	; (800ceec <_fflush_r+0x74>)
 800cedc:	429c      	cmp	r4, r3
 800cede:	bf08      	it	eq
 800cee0:	68ec      	ldreq	r4, [r5, #12]
 800cee2:	e7da      	b.n	800ce9a <_fflush_r+0x22>
 800cee4:	0800d8ac 	.word	0x0800d8ac
 800cee8:	0800d8cc 	.word	0x0800d8cc
 800ceec:	0800d88c 	.word	0x0800d88c

0800cef0 <std>:
 800cef0:	2300      	movs	r3, #0
 800cef2:	b510      	push	{r4, lr}
 800cef4:	4604      	mov	r4, r0
 800cef6:	e9c0 3300 	strd	r3, r3, [r0]
 800cefa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cefe:	6083      	str	r3, [r0, #8]
 800cf00:	8181      	strh	r1, [r0, #12]
 800cf02:	6643      	str	r3, [r0, #100]	; 0x64
 800cf04:	81c2      	strh	r2, [r0, #14]
 800cf06:	6183      	str	r3, [r0, #24]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	305c      	adds	r0, #92	; 0x5c
 800cf0e:	f7fe ffb1 	bl	800be74 <memset>
 800cf12:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <std+0x38>)
 800cf14:	6263      	str	r3, [r4, #36]	; 0x24
 800cf16:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <std+0x3c>)
 800cf18:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf1a:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <std+0x40>)
 800cf1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf1e:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <std+0x44>)
 800cf20:	6224      	str	r4, [r4, #32]
 800cf22:	6323      	str	r3, [r4, #48]	; 0x30
 800cf24:	bd10      	pop	{r4, pc}
 800cf26:	bf00      	nop
 800cf28:	0800d2e1 	.word	0x0800d2e1
 800cf2c:	0800d303 	.word	0x0800d303
 800cf30:	0800d33b 	.word	0x0800d33b
 800cf34:	0800d35f 	.word	0x0800d35f

0800cf38 <_cleanup_r>:
 800cf38:	4901      	ldr	r1, [pc, #4]	; (800cf40 <_cleanup_r+0x8>)
 800cf3a:	f000 b8af 	b.w	800d09c <_fwalk_reent>
 800cf3e:	bf00      	nop
 800cf40:	0800ce79 	.word	0x0800ce79

0800cf44 <__sfmoreglue>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	2268      	movs	r2, #104	; 0x68
 800cf48:	1e4d      	subs	r5, r1, #1
 800cf4a:	4355      	muls	r5, r2
 800cf4c:	460e      	mov	r6, r1
 800cf4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf52:	f7ff f975 	bl	800c240 <_malloc_r>
 800cf56:	4604      	mov	r4, r0
 800cf58:	b140      	cbz	r0, 800cf6c <__sfmoreglue+0x28>
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	e9c0 1600 	strd	r1, r6, [r0]
 800cf60:	300c      	adds	r0, #12
 800cf62:	60a0      	str	r0, [r4, #8]
 800cf64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf68:	f7fe ff84 	bl	800be74 <memset>
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}

0800cf70 <__sfp_lock_acquire>:
 800cf70:	4801      	ldr	r0, [pc, #4]	; (800cf78 <__sfp_lock_acquire+0x8>)
 800cf72:	f000 b8b3 	b.w	800d0dc <__retarget_lock_acquire_recursive>
 800cf76:	bf00      	nop
 800cf78:	20002121 	.word	0x20002121

0800cf7c <__sfp_lock_release>:
 800cf7c:	4801      	ldr	r0, [pc, #4]	; (800cf84 <__sfp_lock_release+0x8>)
 800cf7e:	f000 b8ae 	b.w	800d0de <__retarget_lock_release_recursive>
 800cf82:	bf00      	nop
 800cf84:	20002121 	.word	0x20002121

0800cf88 <__sinit_lock_acquire>:
 800cf88:	4801      	ldr	r0, [pc, #4]	; (800cf90 <__sinit_lock_acquire+0x8>)
 800cf8a:	f000 b8a7 	b.w	800d0dc <__retarget_lock_acquire_recursive>
 800cf8e:	bf00      	nop
 800cf90:	20002122 	.word	0x20002122

0800cf94 <__sinit_lock_release>:
 800cf94:	4801      	ldr	r0, [pc, #4]	; (800cf9c <__sinit_lock_release+0x8>)
 800cf96:	f000 b8a2 	b.w	800d0de <__retarget_lock_release_recursive>
 800cf9a:	bf00      	nop
 800cf9c:	20002122 	.word	0x20002122

0800cfa0 <__sinit>:
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	f7ff fff0 	bl	800cf88 <__sinit_lock_acquire>
 800cfa8:	69a3      	ldr	r3, [r4, #24]
 800cfaa:	b11b      	cbz	r3, 800cfb4 <__sinit+0x14>
 800cfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb0:	f7ff bff0 	b.w	800cf94 <__sinit_lock_release>
 800cfb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfb8:	6523      	str	r3, [r4, #80]	; 0x50
 800cfba:	4b13      	ldr	r3, [pc, #76]	; (800d008 <__sinit+0x68>)
 800cfbc:	4a13      	ldr	r2, [pc, #76]	; (800d00c <__sinit+0x6c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfc2:	42a3      	cmp	r3, r4
 800cfc4:	bf04      	itt	eq
 800cfc6:	2301      	moveq	r3, #1
 800cfc8:	61a3      	streq	r3, [r4, #24]
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f000 f820 	bl	800d010 <__sfp>
 800cfd0:	6060      	str	r0, [r4, #4]
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f000 f81c 	bl	800d010 <__sfp>
 800cfd8:	60a0      	str	r0, [r4, #8]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 f818 	bl	800d010 <__sfp>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	60e0      	str	r0, [r4, #12]
 800cfe4:	2104      	movs	r1, #4
 800cfe6:	6860      	ldr	r0, [r4, #4]
 800cfe8:	f7ff ff82 	bl	800cef0 <std>
 800cfec:	68a0      	ldr	r0, [r4, #8]
 800cfee:	2201      	movs	r2, #1
 800cff0:	2109      	movs	r1, #9
 800cff2:	f7ff ff7d 	bl	800cef0 <std>
 800cff6:	68e0      	ldr	r0, [r4, #12]
 800cff8:	2202      	movs	r2, #2
 800cffa:	2112      	movs	r1, #18
 800cffc:	f7ff ff78 	bl	800cef0 <std>
 800d000:	2301      	movs	r3, #1
 800d002:	61a3      	str	r3, [r4, #24]
 800d004:	e7d2      	b.n	800cfac <__sinit+0xc>
 800d006:	bf00      	nop
 800d008:	0800d6a4 	.word	0x0800d6a4
 800d00c:	0800cf39 	.word	0x0800cf39

0800d010 <__sfp>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	4607      	mov	r7, r0
 800d014:	f7ff ffac 	bl	800cf70 <__sfp_lock_acquire>
 800d018:	4b1e      	ldr	r3, [pc, #120]	; (800d094 <__sfp+0x84>)
 800d01a:	681e      	ldr	r6, [r3, #0]
 800d01c:	69b3      	ldr	r3, [r6, #24]
 800d01e:	b913      	cbnz	r3, 800d026 <__sfp+0x16>
 800d020:	4630      	mov	r0, r6
 800d022:	f7ff ffbd 	bl	800cfa0 <__sinit>
 800d026:	3648      	adds	r6, #72	; 0x48
 800d028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	d503      	bpl.n	800d038 <__sfp+0x28>
 800d030:	6833      	ldr	r3, [r6, #0]
 800d032:	b30b      	cbz	r3, 800d078 <__sfp+0x68>
 800d034:	6836      	ldr	r6, [r6, #0]
 800d036:	e7f7      	b.n	800d028 <__sfp+0x18>
 800d038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d03c:	b9d5      	cbnz	r5, 800d074 <__sfp+0x64>
 800d03e:	4b16      	ldr	r3, [pc, #88]	; (800d098 <__sfp+0x88>)
 800d040:	60e3      	str	r3, [r4, #12]
 800d042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d046:	6665      	str	r5, [r4, #100]	; 0x64
 800d048:	f000 f847 	bl	800d0da <__retarget_lock_init_recursive>
 800d04c:	f7ff ff96 	bl	800cf7c <__sfp_lock_release>
 800d050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d058:	6025      	str	r5, [r4, #0]
 800d05a:	61a5      	str	r5, [r4, #24]
 800d05c:	2208      	movs	r2, #8
 800d05e:	4629      	mov	r1, r5
 800d060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d064:	f7fe ff06 	bl	800be74 <memset>
 800d068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d06c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d070:	4620      	mov	r0, r4
 800d072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d074:	3468      	adds	r4, #104	; 0x68
 800d076:	e7d9      	b.n	800d02c <__sfp+0x1c>
 800d078:	2104      	movs	r1, #4
 800d07a:	4638      	mov	r0, r7
 800d07c:	f7ff ff62 	bl	800cf44 <__sfmoreglue>
 800d080:	4604      	mov	r4, r0
 800d082:	6030      	str	r0, [r6, #0]
 800d084:	2800      	cmp	r0, #0
 800d086:	d1d5      	bne.n	800d034 <__sfp+0x24>
 800d088:	f7ff ff78 	bl	800cf7c <__sfp_lock_release>
 800d08c:	230c      	movs	r3, #12
 800d08e:	603b      	str	r3, [r7, #0]
 800d090:	e7ee      	b.n	800d070 <__sfp+0x60>
 800d092:	bf00      	nop
 800d094:	0800d6a4 	.word	0x0800d6a4
 800d098:	ffff0001 	.word	0xffff0001

0800d09c <_fwalk_reent>:
 800d09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	4688      	mov	r8, r1
 800d0a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0a8:	2700      	movs	r7, #0
 800d0aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0ae:	f1b9 0901 	subs.w	r9, r9, #1
 800d0b2:	d505      	bpl.n	800d0c0 <_fwalk_reent+0x24>
 800d0b4:	6824      	ldr	r4, [r4, #0]
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	d1f7      	bne.n	800d0aa <_fwalk_reent+0xe>
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c0:	89ab      	ldrh	r3, [r5, #12]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d907      	bls.n	800d0d6 <_fwalk_reent+0x3a>
 800d0c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	d003      	beq.n	800d0d6 <_fwalk_reent+0x3a>
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	47c0      	blx	r8
 800d0d4:	4307      	orrs	r7, r0
 800d0d6:	3568      	adds	r5, #104	; 0x68
 800d0d8:	e7e9      	b.n	800d0ae <_fwalk_reent+0x12>

0800d0da <__retarget_lock_init_recursive>:
 800d0da:	4770      	bx	lr

0800d0dc <__retarget_lock_acquire_recursive>:
 800d0dc:	4770      	bx	lr

0800d0de <__retarget_lock_release_recursive>:
 800d0de:	4770      	bx	lr

0800d0e0 <__swhatbuf_r>:
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	460e      	mov	r6, r1
 800d0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e8:	2900      	cmp	r1, #0
 800d0ea:	b096      	sub	sp, #88	; 0x58
 800d0ec:	4614      	mov	r4, r2
 800d0ee:	461d      	mov	r5, r3
 800d0f0:	da08      	bge.n	800d104 <__swhatbuf_r+0x24>
 800d0f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	602a      	str	r2, [r5, #0]
 800d0fa:	061a      	lsls	r2, r3, #24
 800d0fc:	d410      	bmi.n	800d120 <__swhatbuf_r+0x40>
 800d0fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d102:	e00e      	b.n	800d122 <__swhatbuf_r+0x42>
 800d104:	466a      	mov	r2, sp
 800d106:	f000 f951 	bl	800d3ac <_fstat_r>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	dbf1      	blt.n	800d0f2 <__swhatbuf_r+0x12>
 800d10e:	9a01      	ldr	r2, [sp, #4]
 800d110:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d114:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d118:	425a      	negs	r2, r3
 800d11a:	415a      	adcs	r2, r3
 800d11c:	602a      	str	r2, [r5, #0]
 800d11e:	e7ee      	b.n	800d0fe <__swhatbuf_r+0x1e>
 800d120:	2340      	movs	r3, #64	; 0x40
 800d122:	2000      	movs	r0, #0
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	b016      	add	sp, #88	; 0x58
 800d128:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d12c <__smakebuf_r>:
 800d12c:	898b      	ldrh	r3, [r1, #12]
 800d12e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d130:	079d      	lsls	r5, r3, #30
 800d132:	4606      	mov	r6, r0
 800d134:	460c      	mov	r4, r1
 800d136:	d507      	bpl.n	800d148 <__smakebuf_r+0x1c>
 800d138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	6123      	str	r3, [r4, #16]
 800d140:	2301      	movs	r3, #1
 800d142:	6163      	str	r3, [r4, #20]
 800d144:	b002      	add	sp, #8
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	ab01      	add	r3, sp, #4
 800d14a:	466a      	mov	r2, sp
 800d14c:	f7ff ffc8 	bl	800d0e0 <__swhatbuf_r>
 800d150:	9900      	ldr	r1, [sp, #0]
 800d152:	4605      	mov	r5, r0
 800d154:	4630      	mov	r0, r6
 800d156:	f7ff f873 	bl	800c240 <_malloc_r>
 800d15a:	b948      	cbnz	r0, 800d170 <__smakebuf_r+0x44>
 800d15c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d160:	059a      	lsls	r2, r3, #22
 800d162:	d4ef      	bmi.n	800d144 <__smakebuf_r+0x18>
 800d164:	f023 0303 	bic.w	r3, r3, #3
 800d168:	f043 0302 	orr.w	r3, r3, #2
 800d16c:	81a3      	strh	r3, [r4, #12]
 800d16e:	e7e3      	b.n	800d138 <__smakebuf_r+0xc>
 800d170:	4b0d      	ldr	r3, [pc, #52]	; (800d1a8 <__smakebuf_r+0x7c>)
 800d172:	62b3      	str	r3, [r6, #40]	; 0x28
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	6020      	str	r0, [r4, #0]
 800d178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d17c:	81a3      	strh	r3, [r4, #12]
 800d17e:	9b00      	ldr	r3, [sp, #0]
 800d180:	6163      	str	r3, [r4, #20]
 800d182:	9b01      	ldr	r3, [sp, #4]
 800d184:	6120      	str	r0, [r4, #16]
 800d186:	b15b      	cbz	r3, 800d1a0 <__smakebuf_r+0x74>
 800d188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d18c:	4630      	mov	r0, r6
 800d18e:	f000 f91f 	bl	800d3d0 <_isatty_r>
 800d192:	b128      	cbz	r0, 800d1a0 <__smakebuf_r+0x74>
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	f023 0303 	bic.w	r3, r3, #3
 800d19a:	f043 0301 	orr.w	r3, r3, #1
 800d19e:	81a3      	strh	r3, [r4, #12]
 800d1a0:	89a0      	ldrh	r0, [r4, #12]
 800d1a2:	4305      	orrs	r5, r0
 800d1a4:	81a5      	strh	r5, [r4, #12]
 800d1a6:	e7cd      	b.n	800d144 <__smakebuf_r+0x18>
 800d1a8:	0800cf39 	.word	0x0800cf39

0800d1ac <memmove>:
 800d1ac:	4288      	cmp	r0, r1
 800d1ae:	b510      	push	{r4, lr}
 800d1b0:	eb01 0402 	add.w	r4, r1, r2
 800d1b4:	d902      	bls.n	800d1bc <memmove+0x10>
 800d1b6:	4284      	cmp	r4, r0
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	d807      	bhi.n	800d1cc <memmove+0x20>
 800d1bc:	1e43      	subs	r3, r0, #1
 800d1be:	42a1      	cmp	r1, r4
 800d1c0:	d008      	beq.n	800d1d4 <memmove+0x28>
 800d1c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1ca:	e7f8      	b.n	800d1be <memmove+0x12>
 800d1cc:	4402      	add	r2, r0
 800d1ce:	4601      	mov	r1, r0
 800d1d0:	428a      	cmp	r2, r1
 800d1d2:	d100      	bne.n	800d1d6 <memmove+0x2a>
 800d1d4:	bd10      	pop	{r4, pc}
 800d1d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1de:	e7f7      	b.n	800d1d0 <memmove+0x24>

0800d1e0 <__malloc_lock>:
 800d1e0:	4801      	ldr	r0, [pc, #4]	; (800d1e8 <__malloc_lock+0x8>)
 800d1e2:	f7ff bf7b 	b.w	800d0dc <__retarget_lock_acquire_recursive>
 800d1e6:	bf00      	nop
 800d1e8:	20002120 	.word	0x20002120

0800d1ec <__malloc_unlock>:
 800d1ec:	4801      	ldr	r0, [pc, #4]	; (800d1f4 <__malloc_unlock+0x8>)
 800d1ee:	f7ff bf76 	b.w	800d0de <__retarget_lock_release_recursive>
 800d1f2:	bf00      	nop
 800d1f4:	20002120 	.word	0x20002120

0800d1f8 <_realloc_r>:
 800d1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1fc:	4680      	mov	r8, r0
 800d1fe:	4614      	mov	r4, r2
 800d200:	460e      	mov	r6, r1
 800d202:	b921      	cbnz	r1, 800d20e <_realloc_r+0x16>
 800d204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d208:	4611      	mov	r1, r2
 800d20a:	f7ff b819 	b.w	800c240 <_malloc_r>
 800d20e:	b92a      	cbnz	r2, 800d21c <_realloc_r+0x24>
 800d210:	f7fe ffaa 	bl	800c168 <_free_r>
 800d214:	4625      	mov	r5, r4
 800d216:	4628      	mov	r0, r5
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	f000 f8fa 	bl	800d414 <_malloc_usable_size_r>
 800d220:	4284      	cmp	r4, r0
 800d222:	4607      	mov	r7, r0
 800d224:	d802      	bhi.n	800d22c <_realloc_r+0x34>
 800d226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d22a:	d812      	bhi.n	800d252 <_realloc_r+0x5a>
 800d22c:	4621      	mov	r1, r4
 800d22e:	4640      	mov	r0, r8
 800d230:	f7ff f806 	bl	800c240 <_malloc_r>
 800d234:	4605      	mov	r5, r0
 800d236:	2800      	cmp	r0, #0
 800d238:	d0ed      	beq.n	800d216 <_realloc_r+0x1e>
 800d23a:	42bc      	cmp	r4, r7
 800d23c:	4622      	mov	r2, r4
 800d23e:	4631      	mov	r1, r6
 800d240:	bf28      	it	cs
 800d242:	463a      	movcs	r2, r7
 800d244:	f7fe fe08 	bl	800be58 <memcpy>
 800d248:	4631      	mov	r1, r6
 800d24a:	4640      	mov	r0, r8
 800d24c:	f7fe ff8c 	bl	800c168 <_free_r>
 800d250:	e7e1      	b.n	800d216 <_realloc_r+0x1e>
 800d252:	4635      	mov	r5, r6
 800d254:	e7df      	b.n	800d216 <_realloc_r+0x1e>

0800d256 <_raise_r>:
 800d256:	291f      	cmp	r1, #31
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4604      	mov	r4, r0
 800d25c:	460d      	mov	r5, r1
 800d25e:	d904      	bls.n	800d26a <_raise_r+0x14>
 800d260:	2316      	movs	r3, #22
 800d262:	6003      	str	r3, [r0, #0]
 800d264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d268:	bd38      	pop	{r3, r4, r5, pc}
 800d26a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d26c:	b112      	cbz	r2, 800d274 <_raise_r+0x1e>
 800d26e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d272:	b94b      	cbnz	r3, 800d288 <_raise_r+0x32>
 800d274:	4620      	mov	r0, r4
 800d276:	f000 f831 	bl	800d2dc <_getpid_r>
 800d27a:	462a      	mov	r2, r5
 800d27c:	4601      	mov	r1, r0
 800d27e:	4620      	mov	r0, r4
 800d280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d284:	f000 b818 	b.w	800d2b8 <_kill_r>
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d00a      	beq.n	800d2a2 <_raise_r+0x4c>
 800d28c:	1c59      	adds	r1, r3, #1
 800d28e:	d103      	bne.n	800d298 <_raise_r+0x42>
 800d290:	2316      	movs	r3, #22
 800d292:	6003      	str	r3, [r0, #0]
 800d294:	2001      	movs	r0, #1
 800d296:	e7e7      	b.n	800d268 <_raise_r+0x12>
 800d298:	2400      	movs	r4, #0
 800d29a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d29e:	4628      	mov	r0, r5
 800d2a0:	4798      	blx	r3
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	e7e0      	b.n	800d268 <_raise_r+0x12>
	...

0800d2a8 <raise>:
 800d2a8:	4b02      	ldr	r3, [pc, #8]	; (800d2b4 <raise+0xc>)
 800d2aa:	4601      	mov	r1, r0
 800d2ac:	6818      	ldr	r0, [r3, #0]
 800d2ae:	f7ff bfd2 	b.w	800d256 <_raise_r>
 800d2b2:	bf00      	nop
 800d2b4:	20000028 	.word	0x20000028

0800d2b8 <_kill_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4d07      	ldr	r5, [pc, #28]	; (800d2d8 <_kill_r+0x20>)
 800d2bc:	2300      	movs	r3, #0
 800d2be:	4604      	mov	r4, r0
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	602b      	str	r3, [r5, #0]
 800d2c6:	f7f5 f9e5 	bl	8002694 <_kill>
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d102      	bne.n	800d2d4 <_kill_r+0x1c>
 800d2ce:	682b      	ldr	r3, [r5, #0]
 800d2d0:	b103      	cbz	r3, 800d2d4 <_kill_r+0x1c>
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	bd38      	pop	{r3, r4, r5, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20002124 	.word	0x20002124

0800d2dc <_getpid_r>:
 800d2dc:	f7f5 b9d2 	b.w	8002684 <_getpid>

0800d2e0 <__sread>:
 800d2e0:	b510      	push	{r4, lr}
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e8:	f000 f89c 	bl	800d424 <_read_r>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	bfab      	itete	ge
 800d2f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2f2:	89a3      	ldrhlt	r3, [r4, #12]
 800d2f4:	181b      	addge	r3, r3, r0
 800d2f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2fa:	bfac      	ite	ge
 800d2fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2fe:	81a3      	strhlt	r3, [r4, #12]
 800d300:	bd10      	pop	{r4, pc}

0800d302 <__swrite>:
 800d302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d306:	461f      	mov	r7, r3
 800d308:	898b      	ldrh	r3, [r1, #12]
 800d30a:	05db      	lsls	r3, r3, #23
 800d30c:	4605      	mov	r5, r0
 800d30e:	460c      	mov	r4, r1
 800d310:	4616      	mov	r6, r2
 800d312:	d505      	bpl.n	800d320 <__swrite+0x1e>
 800d314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d318:	2302      	movs	r3, #2
 800d31a:	2200      	movs	r2, #0
 800d31c:	f000 f868 	bl	800d3f0 <_lseek_r>
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d32a:	81a3      	strh	r3, [r4, #12]
 800d32c:	4632      	mov	r2, r6
 800d32e:	463b      	mov	r3, r7
 800d330:	4628      	mov	r0, r5
 800d332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d336:	f000 b817 	b.w	800d368 <_write_r>

0800d33a <__sseek>:
 800d33a:	b510      	push	{r4, lr}
 800d33c:	460c      	mov	r4, r1
 800d33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d342:	f000 f855 	bl	800d3f0 <_lseek_r>
 800d346:	1c43      	adds	r3, r0, #1
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	bf15      	itete	ne
 800d34c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d34e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d356:	81a3      	strheq	r3, [r4, #12]
 800d358:	bf18      	it	ne
 800d35a:	81a3      	strhne	r3, [r4, #12]
 800d35c:	bd10      	pop	{r4, pc}

0800d35e <__sclose>:
 800d35e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d362:	f000 b813 	b.w	800d38c <_close_r>
	...

0800d368 <_write_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d07      	ldr	r5, [pc, #28]	; (800d388 <_write_r+0x20>)
 800d36c:	4604      	mov	r4, r0
 800d36e:	4608      	mov	r0, r1
 800d370:	4611      	mov	r1, r2
 800d372:	2200      	movs	r2, #0
 800d374:	602a      	str	r2, [r5, #0]
 800d376:	461a      	mov	r2, r3
 800d378:	f7f5 f9c3 	bl	8002702 <_write>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_write_r+0x1e>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_write_r+0x1e>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	20002124 	.word	0x20002124

0800d38c <_close_r>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	4d06      	ldr	r5, [pc, #24]	; (800d3a8 <_close_r+0x1c>)
 800d390:	2300      	movs	r3, #0
 800d392:	4604      	mov	r4, r0
 800d394:	4608      	mov	r0, r1
 800d396:	602b      	str	r3, [r5, #0]
 800d398:	f7f5 f9cf 	bl	800273a <_close>
 800d39c:	1c43      	adds	r3, r0, #1
 800d39e:	d102      	bne.n	800d3a6 <_close_r+0x1a>
 800d3a0:	682b      	ldr	r3, [r5, #0]
 800d3a2:	b103      	cbz	r3, 800d3a6 <_close_r+0x1a>
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	bd38      	pop	{r3, r4, r5, pc}
 800d3a8:	20002124 	.word	0x20002124

0800d3ac <_fstat_r>:
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	4d07      	ldr	r5, [pc, #28]	; (800d3cc <_fstat_r+0x20>)
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	4608      	mov	r0, r1
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	602b      	str	r3, [r5, #0]
 800d3ba:	f7f5 f9ca 	bl	8002752 <_fstat>
 800d3be:	1c43      	adds	r3, r0, #1
 800d3c0:	d102      	bne.n	800d3c8 <_fstat_r+0x1c>
 800d3c2:	682b      	ldr	r3, [r5, #0]
 800d3c4:	b103      	cbz	r3, 800d3c8 <_fstat_r+0x1c>
 800d3c6:	6023      	str	r3, [r4, #0]
 800d3c8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20002124 	.word	0x20002124

0800d3d0 <_isatty_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	4d06      	ldr	r5, [pc, #24]	; (800d3ec <_isatty_r+0x1c>)
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	4608      	mov	r0, r1
 800d3da:	602b      	str	r3, [r5, #0]
 800d3dc:	f7f5 f9c9 	bl	8002772 <_isatty>
 800d3e0:	1c43      	adds	r3, r0, #1
 800d3e2:	d102      	bne.n	800d3ea <_isatty_r+0x1a>
 800d3e4:	682b      	ldr	r3, [r5, #0]
 800d3e6:	b103      	cbz	r3, 800d3ea <_isatty_r+0x1a>
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	bd38      	pop	{r3, r4, r5, pc}
 800d3ec:	20002124 	.word	0x20002124

0800d3f0 <_lseek_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4d07      	ldr	r5, [pc, #28]	; (800d410 <_lseek_r+0x20>)
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	4608      	mov	r0, r1
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	602a      	str	r2, [r5, #0]
 800d3fe:	461a      	mov	r2, r3
 800d400:	f7f5 f9c2 	bl	8002788 <_lseek>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_lseek_r+0x1e>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_lseek_r+0x1e>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	20002124 	.word	0x20002124

0800d414 <_malloc_usable_size_r>:
 800d414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d418:	1f18      	subs	r0, r3, #4
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	bfbc      	itt	lt
 800d41e:	580b      	ldrlt	r3, [r1, r0]
 800d420:	18c0      	addlt	r0, r0, r3
 800d422:	4770      	bx	lr

0800d424 <_read_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4d07      	ldr	r5, [pc, #28]	; (800d444 <_read_r+0x20>)
 800d428:	4604      	mov	r4, r0
 800d42a:	4608      	mov	r0, r1
 800d42c:	4611      	mov	r1, r2
 800d42e:	2200      	movs	r2, #0
 800d430:	602a      	str	r2, [r5, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	f7f5 f948 	bl	80026c8 <_read>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_read_r+0x1e>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_read_r+0x1e>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	20002124 	.word	0x20002124

0800d448 <_init>:
 800d448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44a:	bf00      	nop
 800d44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d44e:	bc08      	pop	{r3}
 800d450:	469e      	mov	lr, r3
 800d452:	4770      	bx	lr

0800d454 <_fini>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	bf00      	nop
 800d458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d45a:	bc08      	pop	{r3}
 800d45c:	469e      	mov	lr, r3
 800d45e:	4770      	bx	lr
