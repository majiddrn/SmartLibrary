
TableController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008988  08008988  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008988  08008988  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008988  08008988  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800898c  0800898c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001ed0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ee0  20001ee0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002350a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042cf  00000000  00000000  0004354a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  00047820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019f0  00000000  00000000  000493a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002078a  00000000  00000000  0004ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d0d  00000000  00000000  0006b522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e38  00000000  00000000  0008d22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154067  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000756c  00000000  00000000  001540b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008860 	.word	0x08008860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008860 	.word	0x08008860

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <HAL_UART_RxCpltCallback>:
extern osSemaphoreId_t diffRxDataHandle;
extern char data_c;
extern char data[150];
extern uint8_t data_c_idx;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
	if (huart->Instance == huart2.Instance) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <HAL_UART_RxCpltCallback+0x68>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d124      	bne.n	800023e <HAL_UART_RxCpltCallback+0x5e>
	        data[data_c_idx] = data_c;
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <HAL_UART_RxCpltCallback+0x6c>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b15      	ldr	r3, [pc, #84]	; (8000250 <HAL_UART_RxCpltCallback+0x70>)
 80001fc:	7819      	ldrb	r1, [r3, #0]
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <HAL_UART_RxCpltCallback+0x74>)
 8000200:	5499      	strb	r1, [r3, r2]
	        if (data_c == '\r') {
 8000202:	4b13      	ldr	r3, [pc, #76]	; (8000250 <HAL_UART_RxCpltCallback+0x70>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b0d      	cmp	r3, #13
 8000208:	d10e      	bne.n	8000228 <HAL_UART_RxCpltCallback+0x48>
	            data[data_c_idx] = '\0';
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <HAL_UART_RxCpltCallback+0x6c>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	461a      	mov	r2, r3
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <HAL_UART_RxCpltCallback+0x74>)
 8000212:	2100      	movs	r1, #0
 8000214:	5499      	strb	r1, [r3, r2]
	            data_c_idx = 0;
 8000216:	4b0d      	ldr	r3, [pc, #52]	; (800024c <HAL_UART_RxCpltCallback+0x6c>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
	            osSemaphoreRelease(diffRxDataHandle);
 800021c:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <HAL_UART_RxCpltCallback+0x78>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4618      	mov	r0, r3
 8000222:	f005 fa03 	bl	800562c <osSemaphoreRelease>
 8000226:	e005      	b.n	8000234 <HAL_UART_RxCpltCallback+0x54>
	        } else
	        	data_c_idx++;
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_UART_RxCpltCallback+0x6c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <HAL_UART_RxCpltCallback+0x6c>)
 8000232:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Receive_IT(&huart2, &data_c, 1);
 8000234:	2201      	movs	r2, #1
 8000236:	4906      	ldr	r1, [pc, #24]	; (8000250 <HAL_UART_RxCpltCallback+0x70>)
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <HAL_UART_RxCpltCallback+0x68>)
 800023a:	f003 fbc1 	bl	80039c0 <HAL_UART_Receive_IT>
	}
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	200000e4 	.word	0x200000e4
 800024c:	20000547 	.word	0x20000547
 8000250:	20000546 	.word	0x20000546
 8000254:	200004b0 	.word	0x200004b0
 8000258:	200004a8 	.word	0x200004a8

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f000 fcb8 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 f858 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f000 f9a8 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 800026c:	f000 f988 	bl	8000580 <MX_DMA_Init>
  MX_I2C1_Init();
 8000270:	f000 f8b6 	bl	80003e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000274:	f000 f8f4 	bl	8000460 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000278:	f000 f960 	bl	800053c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 800027c:	f000 f92e 	bl	80004dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &data_c, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	4917      	ldr	r1, [pc, #92]	; (80002e0 <main+0x84>)
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <main+0x88>)
 8000286:	f003 fb9b 	bl	80039c0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800028a:	f004 fef3 	bl	8005074 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of diffBufferRead */
  diffBufferReadHandle = osMutexNew(&diffBufferRead_attributes);
 800028e:	4816      	ldr	r0, [pc, #88]	; (80002e8 <main+0x8c>)
 8000290:	f005 f830 	bl	80052f4 <osMutexNew>
 8000294:	4603      	mov	r3, r0
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <main+0x90>)
 8000298:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of diffRxData */
  diffRxDataHandle = osSemaphoreNew(1, 1, &diffRxData_attributes);
 800029a:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <main+0x94>)
 800029c:	2101      	movs	r1, #1
 800029e:	2001      	movs	r0, #1
 80002a0:	f005 f8c2 	bl	8005428 <osSemaphoreNew>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <main+0x98>)
 80002a8:	6013      	str	r3, [r2, #0]

  /* creation of dataBufferSemaphore */
  dataBufferSemaphoreHandle = osSemaphoreNew(1, 1, &dataBufferSemaphore_attributes);
 80002aa:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <main+0x9c>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	2001      	movs	r0, #1
 80002b0:	f005 f8ba 	bl	8005428 <osSemaphoreNew>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a11      	ldr	r2, [pc, #68]	; (80002fc <main+0xa0>)
 80002b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <main+0xa4>)
 80002bc:	2100      	movs	r1, #0
 80002be:	4811      	ldr	r0, [pc, #68]	; (8000304 <main+0xa8>)
 80002c0:	f004 ff40 	bl	8005144 <osThreadNew>
 80002c4:	4603      	mov	r3, r0
 80002c6:	4a10      	ldr	r2, [pc, #64]	; (8000308 <main+0xac>)
 80002c8:	6013      	str	r3, [r2, #0]

  /* creation of uartRxDiff */
  uartRxDiffHandle = osThreadNew(uartRxDiff_f, NULL, &uartRxDiff_attributes);
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <main+0xb0>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	4810      	ldr	r0, [pc, #64]	; (8000310 <main+0xb4>)
 80002d0:	f004 ff38 	bl	8005144 <osThreadNew>
 80002d4:	4603      	mov	r3, r0
 80002d6:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <main+0xb8>)
 80002d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002da:	f004 feff 	bl	80050dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002de:	e7fe      	b.n	80002de <main+0x82>
 80002e0:	20000546 	.word	0x20000546
 80002e4:	200000e4 	.word	0x200000e4
 80002e8:	08008920 	.word	0x08008920
 80002ec:	200004a4 	.word	0x200004a4
 80002f0:	08008930 	.word	0x08008930
 80002f4:	200004a8 	.word	0x200004a8
 80002f8:	08008940 	.word	0x08008940
 80002fc:	200004ac 	.word	0x200004ac
 8000300:	080088d8 	.word	0x080088d8
 8000304:	080006b9 	.word	0x080006b9
 8000308:	2000049c 	.word	0x2000049c
 800030c:	080088fc 	.word	0x080088fc
 8000310:	080006c9 	.word	0x080006c9
 8000314:	200004a0 	.word	0x200004a0

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09e      	sub	sp, #120	; 0x78
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f008 fa92 	bl	8008850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	223c      	movs	r2, #60	; 0x3c
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f008 fa84 	bl	8008850 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000348:	2303      	movs	r3, #3
 800034a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800034c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000350:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2310      	movs	r3, #16
 800035c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000366:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000368:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800036c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fb14 	bl	80019a0 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800037e:	f000 f9db 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000392:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000398:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800039c:	2101      	movs	r1, #1
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fb3c 	bl	8002a1c <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003aa:	f000 f9c5 	bl	8000738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <SystemClock_Config+0xc4>)
 80003b0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fd92 	bl	8002eec <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003ce:	f000 f9b3 	bl	8000738 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3778      	adds	r7, #120	; 0x78
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	00020022 	.word	0x00020022

080003e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_I2C1_Init+0x74>)
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <MX_I2C1_Init+0x78>)
 80003e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_I2C1_Init+0x74>)
 80003ec:	4a1b      	ldr	r2, [pc, #108]	; (800045c <MX_I2C1_Init+0x7c>)
 80003ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_I2C1_Init+0x74>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_I2C1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_I2C1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800041a:	480e      	ldr	r0, [pc, #56]	; (8000454 <MX_I2C1_Init+0x74>)
 800041c:	f001 f8c8 	bl	80015b0 <HAL_I2C_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000426:	f000 f987 	bl	8000738 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800042a:	2100      	movs	r1, #0
 800042c:	4809      	ldr	r0, [pc, #36]	; (8000454 <MX_I2C1_Init+0x74>)
 800042e:	f001 f94e 	bl	80016ce <HAL_I2CEx_ConfigAnalogFilter>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000438:	f000 f97e 	bl	8000738 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800043c:	2100      	movs	r1, #0
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_I2C1_Init+0x74>)
 8000440:	f001 f990 	bl	8001764 <HAL_I2CEx_ConfigDigitalFilter>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800044a:	f000 f975 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000002c 	.word	0x2000002c
 8000458:	40005400 	.word	0x40005400
 800045c:	2000090e 	.word	0x2000090e

08000460 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000466:	4a1c      	ldr	r2, [pc, #112]	; (80004d8 <MX_SPI1_Init+0x78>)
 8000468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_SPI1_Init+0x74>)
 800046c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <MX_SPI1_Init+0x74>)
 800047a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800047e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000480:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_SPI1_Init+0x74>)
 800048e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000492:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000496:	2208      	movs	r2, #8
 8000498:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004ae:	2207      	movs	r2, #7
 80004b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004ba:	2208      	movs	r2, #8
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004c0:	f002 fec4 	bl	800324c <HAL_SPI_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004ca:	f000 f935 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000080 	.word	0x20000080
 80004d8:	40013000 	.word	0x40013000

080004dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004e2:	4a15      	ldr	r2, [pc, #84]	; (8000538 <MX_USART2_UART_Init+0x5c>)
 80004e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_USART2_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_USART2_UART_Init+0x58>)
 8000502:	220c      	movs	r2, #12
 8000504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MX_USART2_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_USART2_UART_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_USART2_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_USART2_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_USART2_UART_Init+0x58>)
 8000520:	f003 fa00 	bl	8003924 <HAL_UART_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800052a:	f000 f905 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000e4 	.word	0x200000e4
 8000538:	40004400 	.word	0x40004400

0800053c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <MX_USB_PCD_Init+0x3c>)
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <MX_USB_PCD_Init+0x40>)
 8000544:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_USB_PCD_Init+0x3c>)
 8000548:	2208      	movs	r2, #8
 800054a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_USB_PCD_Init+0x3c>)
 800054e:	2202      	movs	r2, #2
 8000550:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_USB_PCD_Init+0x3c>)
 8000554:	2202      	movs	r2, #2
 8000556:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <MX_USB_PCD_Init+0x3c>)
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_USB_PCD_Init+0x3c>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_USB_PCD_Init+0x3c>)
 8000566:	f001 f949 	bl	80017fc <HAL_PCD_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000570:	f000 f8e2 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200001b0 	.word	0x200001b0
 800057c:	40005c00 	.word	0x40005c00

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x38>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x38>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x38>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2105      	movs	r1, #5
 80005a2:	2011      	movs	r0, #17
 80005a4:	f000 fc04 	bl	8000db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005a8:	2011      	movs	r0, #17
 80005aa:	f000 fc1d 	bl	8000de8 <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a36      	ldr	r2, [pc, #216]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a30      	ldr	r2, [pc, #192]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <MX_GPIO_Init+0xf4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800064a:	2200      	movs	r2, #0
 800064c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000650:	4818      	ldr	r0, [pc, #96]	; (80006b4 <MX_GPIO_Init+0xf8>)
 8000652:	f000 ff7b 	bl	800154c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000656:	2337      	movs	r3, #55	; 0x37
 8000658:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800065a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <MX_GPIO_Init+0xf8>)
 800066c:	f000 fdf4 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000670:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000674:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	480a      	ldr	r0, [pc, #40]	; (80006b4 <MX_GPIO_Init+0xf8>)
 800068a:	f000 fde5 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068e:	2301      	movs	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 fdd8 	bl	8001258 <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48001000 	.word	0x48001000

080006b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
//		osMutexAcquire(diffBufferReadHandle, portMAX_DELAY);
//		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//		osMutexRelease(diffBufferReadHandle);
//	}
//	osMutexAcquire(mutex_id, timeout)
    osDelay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f004 fde9 	bl	8005298 <osDelay>
 80006c6:	e7fb      	b.n	80006c0 <StartDefaultTask+0x8>

080006c8 <uartRxDiff_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartRxDiff_f */
void uartRxDiff_f(void *argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0a8      	sub	sp, #160	; 0xa0
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartRxDiff_f */
  /* Infinite loop */
  char d[150];
  for(;;)
  {
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <uartRxDiff_f+0x3c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 ff41 	bl	8005560 <osSemaphoreAcquire>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80006de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <uartRxDiff_f+0x40>)
 80006e4:	f000 ff4a 	bl	800157c <HAL_GPIO_TogglePin>
//	sprintf(d, "%d", strlen(data));
	HAL_UART_Transmit_DMA(&huart2, data, (uint16_t)(strlen(data)));
 80006e8:	4808      	ldr	r0, [pc, #32]	; (800070c <uartRxDiff_f+0x44>)
 80006ea:	f7ff fd71 	bl	80001d0 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	4905      	ldr	r1, [pc, #20]	; (800070c <uartRxDiff_f+0x44>)
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <uartRxDiff_f+0x48>)
 80006f8:	f003 f9a6 	bl	8003a48 <HAL_UART_Transmit_DMA>
//	if (data_c == '\r') {
//		data_c_idx = 0;
//		data[data_c_idx] = '\0';
////		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//	}
    osDelay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f004 fdcb 	bl	8005298 <osDelay>
  {
 8000702:	e7e5      	b.n	80006d0 <uartRxDiff_f+0x8>
 8000704:	200004a8 	.word	0x200004a8
 8000708:	48001000 	.word	0x48001000
 800070c:	200004b0 	.word	0x200004b0
 8000710:	200000e4 	.word	0x200000e4

08000714 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d101      	bne.n	800072a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000726:	f000 fa6b 	bl	8000c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40012c00 	.word	0x40012c00

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_MspInit+0x4c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <HAL_MspInit+0x4c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_MspInit+0x4c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_MspInit+0x4c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_MspInit+0x4c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_MspInit+0x4c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	210f      	movs	r1, #15
 800077e:	f06f 0001 	mvn.w	r0, #1
 8000782:	f000 fb15 	bl	8000db0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <HAL_I2C_MspInit+0x7c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d127      	bne.n	8000806 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007ce:	23c0      	movs	r3, #192	; 0xc0
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d2:	2312      	movs	r3, #18
 80007d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007de:	2304      	movs	r3, #4
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <HAL_I2C_MspInit+0x84>)
 80007ea:	f000 fd35 	bl	8001258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40005400 	.word	0x40005400
 8000814:	40021000 	.word	0x40021000
 8000818:	48000400 	.word	0x48000400

0800081c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_SPI_MspInit+0x7c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d128      	bne.n	8000890 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_SPI_MspInit+0x80>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_SPI_MspInit+0x80>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800086e:	23e0      	movs	r3, #224	; 0xe0
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087e:	2305      	movs	r3, #5
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fce4 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013000 	.word	0x40013000
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a2f      	ldr	r2, [pc, #188]	; (800097c <HAL_UART_MspInit+0xdc>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d157      	bne.n	8000972 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <HAL_UART_MspInit+0xe0>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <HAL_UART_MspInit+0xe0>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <HAL_UART_MspInit+0xe0>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_UART_MspInit+0xe0>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a28      	ldr	r2, [pc, #160]	; (8000980 <HAL_UART_MspInit+0xe0>)
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	6153      	str	r3, [r2, #20]
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_UART_MspInit+0xe0>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008f2:	230c      	movs	r3, #12
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000902:	2307      	movs	r3, #7
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f000 fca2 	bl	8001258 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_UART_MspInit+0xe4>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <HAL_UART_MspInit+0xe8>)
 8000918:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <HAL_UART_MspInit+0xe4>)
 800091c:	2210      	movs	r2, #16
 800091e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_UART_MspInit+0xe4>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_UART_MspInit+0xe4>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_UART_MspInit+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_UART_MspInit+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0xe4>)
 8000940:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000944:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000946:	480f      	ldr	r0, [pc, #60]	; (8000984 <HAL_UART_MspInit+0xe4>)
 8000948:	f000 fa5c 	bl	8000e04 <HAL_DMA_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000952:	f7ff fef1 	bl	8000738 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_UART_MspInit+0xe4>)
 800095a:	671a      	str	r2, [r3, #112]	; 0x70
 800095c:	4a09      	ldr	r2, [pc, #36]	; (8000984 <HAL_UART_MspInit+0xe4>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2105      	movs	r1, #5
 8000966:	2026      	movs	r0, #38	; 0x26
 8000968:	f000 fa22 	bl	8000db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800096c:	2026      	movs	r0, #38	; 0x26
 800096e:	f000 fa3b 	bl	8000de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40004400 	.word	0x40004400
 8000980:	40021000 	.word	0x40021000
 8000984:	2000016c 	.word	0x2000016c
 8000988:	40020080 	.word	0x40020080

0800098c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <HAL_PCD_MspInit+0x80>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d129      	bne.n	8000a02 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_PCD_MspInit+0x84>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_PCD_MspInit+0x84>)
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_PCD_MspInit+0x84>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009d8:	230e      	movs	r3, #14
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fc37 	bl	8001258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_PCD_MspInit+0x84>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_PCD_MspInit+0x84>)
 80009f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_PCD_MspInit+0x84>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40005c00 	.word	0x40005c00
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <HAL_InitTick+0xcc>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a2d      	ldr	r2, [pc, #180]	; (8000ae0 <HAL_InitTick+0xcc>)
 8000a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <HAL_InitTick+0xcc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3c:	f107 020c 	add.w	r2, r7, #12
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 fa1e 	bl	8002e88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a4c:	f002 f9fa 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8000a50:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a54:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <HAL_InitTick+0xd0>)
 8000a56:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5a:	0c9b      	lsrs	r3, r3, #18
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a62:	4a22      	ldr	r2, [pc, #136]	; (8000aec <HAL_InitTick+0xd8>)
 8000a64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a88:	f002 fc8b 	bl	80033a2 <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d11b      	bne.n	8000ad2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a9a:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a9c:	f002 fce2 	bl	8003464 <HAL_TIM_Base_Start_IT>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d111      	bne.n	8000ad2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f000 f99a 	bl	8000de8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b0f      	cmp	r3, #15
 8000ab8:	d808      	bhi.n	8000acc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000aba:	2200      	movs	r2, #0
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	2019      	movs	r0, #25
 8000ac0:	f000 f976 	bl	8000db0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_InitTick+0xdc>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e002      	b.n	8000ad2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3730      	adds	r7, #48	; 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	431bde83 	.word	0x431bde83
 8000ae8:	20000548 	.word	0x20000548
 8000aec:	40012c00 	.word	0x40012c00
 8000af0:	20000004 	.word	0x20000004

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <DMA1_Channel7_IRQHandler+0x10>)
 8000b26:	f000 fa8a 	bl	800103e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000016c 	.word	0x2000016c

08000b34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b3a:	f002 fcfd 	bl	8003538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000548 	.word	0x20000548

08000b48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <USART2_IRQHandler+0x10>)
 8000b4e:	f002 fff7 	bl	8003b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000e4 	.word	0x200000e4

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f007 fe1d 	bl	80087ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fb53 	bl	800025c <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bc4:	08008990 	.word	0x08008990
  ldr r2, =_sbss
 8000bc8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bcc:	20001ee0 	.word	0x20001ee0

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x28>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x28>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f8d8 	bl	8000d9a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	200f      	movs	r0, #15
 8000bec:	f7ff ff12 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fda8 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000594 	.word	0x20000594

08000c28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000594 	.word	0x20000594

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff4c 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc2:	f7ff ff61 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	6978      	ldr	r0, [r7, #20]
 8000dce:	f7ff ffb1 	bl	8000d34 <NVIC_EncodePriority>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff80 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff54 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e037      	b.n	8000e8a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e30:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e34:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f9b7 	bl	80011e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}  
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d101      	bne.n	8000eb2 <HAL_DMA_Start_IT+0x20>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e04a      	b.n	8000f48 <HAL_DMA_Start_IT+0xb6>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d13a      	bne.n	8000f3a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0201 	bic.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f000 f94b 	bl	8001184 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d008      	beq.n	8000f08 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 020e 	orr.w	r2, r2, #14
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e00f      	b.n	8000f28 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 020a 	orr.w	r2, r2, #10
 8000f16:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0204 	bic.w	r2, r2, #4
 8000f26:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0201 	orr.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e005      	b.n	8000f46 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000f42:	2302      	movs	r3, #2
 8000f44:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d008      	beq.n	8000f74 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2204      	movs	r2, #4
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e020      	b.n	8000fb6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 020e 	bic.w	r2, r2, #14
 8000f82:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0201 	bic.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d005      	beq.n	8000fe4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e027      	b.n	8001034 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 020e 	bic.w	r2, r2, #14
 8000ff2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	4798      	blx	r3
    } 
  }
  return status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	2204      	movs	r2, #4
 800105c:	409a      	lsls	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d024      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x72>
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01f      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	2b00      	cmp	r3, #0
 800107c:	d107      	bne.n	800108e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0204 	bic.w	r2, r2, #4
 800108c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001096:	2104      	movs	r1, #4
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d06a      	beq.n	800117c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80010ae:	e065      	b.n	800117c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	2202      	movs	r2, #2
 80010b6:	409a      	lsls	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d02c      	beq.n	800111a <HAL_DMA_IRQHandler+0xdc>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d027      	beq.n	800111a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10b      	bne.n	80010f0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 020a 	bic.w	r2, r2, #10
 80010e6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f8:	2102      	movs	r1, #2
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	2b00      	cmp	r3, #0
 800110e:	d035      	beq.n	800117c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001118:	e030      	b.n	800117c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	2208      	movs	r2, #8
 8001120:	409a      	lsls	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d028      	beq.n	800117c <HAL_DMA_IRQHandler+0x13e>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d023      	beq.n	800117c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 020e 	bic.w	r2, r2, #14
 8001142:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114c:	2101      	movs	r1, #1
 800114e:	fa01 f202 	lsl.w	r2, r1, r2
 8001152:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	4798      	blx	r3
    }
  }
}  
 800117a:	e7ff      	b.n	800117c <HAL_DMA_IRQHandler+0x13e>
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119a:	2101      	movs	r1, #1
 800119c:	fa01 f202 	lsl.w	r2, r1, r2
 80011a0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d108      	bne.n	80011c4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011c2:	e007      	b.n	80011d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	60da      	str	r2, [r3, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <DMA_CalcBaseAndBitshift+0x60>)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d80f      	bhi.n	8001214 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <DMA_CalcBaseAndBitshift+0x64>)
 80011fc:	4413      	add	r3, r2
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <DMA_CalcBaseAndBitshift+0x68>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	009a      	lsls	r2, r3, #2
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <DMA_CalcBaseAndBitshift+0x6c>)
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001212:	e00e      	b.n	8001232 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <DMA_CalcBaseAndBitshift+0x70>)
 800121c:	4413      	add	r3, r2
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <DMA_CalcBaseAndBitshift+0x68>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	009a      	lsls	r2, r3, #2
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <DMA_CalcBaseAndBitshift+0x74>)
 8001230:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40020407 	.word	0x40020407
 8001244:	bffdfff8 	.word	0xbffdfff8
 8001248:	cccccccd 	.word	0xcccccccd
 800124c:	40020000 	.word	0x40020000
 8001250:	bffdfbf8 	.word	0xbffdfbf8
 8001254:	40020400 	.word	0x40020400

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001266:	e154      	b.n	8001512 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8146 	beq.w	800150c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d005      	beq.n	8001298 <HAL_GPIO_Init+0x40>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d130      	bne.n	80012fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ce:	2201      	movs	r2, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 0201 	and.w	r2, r3, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b03      	cmp	r3, #3
 8001304:	d017      	beq.n	8001336 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d123      	bne.n	800138a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	6939      	ldr	r1, [r7, #16]
 8001386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0203 	and.w	r2, r3, #3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80a0 	beq.w	800150c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013cc:	4b58      	ldr	r3, [pc, #352]	; (8001530 <HAL_GPIO_Init+0x2d8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a57      	ldr	r2, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x2d8>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b55      	ldr	r3, [pc, #340]	; (8001530 <HAL_GPIO_Init+0x2d8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e4:	4a53      	ldr	r2, [pc, #332]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800140e:	d019      	beq.n	8001444 <HAL_GPIO_Init+0x1ec>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_GPIO_Init+0x2e0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d013      	beq.n	8001440 <HAL_GPIO_Init+0x1e8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_GPIO_Init+0x2e4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00d      	beq.n	800143c <HAL_GPIO_Init+0x1e4>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_GPIO_Init+0x2e8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x1e0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_GPIO_Init+0x2ec>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_GPIO_Init+0x1dc>
 8001430:	2304      	movs	r3, #4
 8001432:	e008      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001434:	2305      	movs	r3, #5
 8001436:	e006      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001438:	2303      	movs	r3, #3
 800143a:	e004      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 800143c:	2302      	movs	r3, #2
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001444:	2300      	movs	r3, #0
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4093      	lsls	r3, r2
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001456:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001488:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014b2:	4a25      	ldr	r2, [pc, #148]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014dc:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_GPIO_Init+0x2f0>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f aea3 	bne.w	8001268 <HAL_GPIO_Init+0x10>
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	48000c00 	.word	0x48000c00
 8001544:	48001000 	.word	0x48001000
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001568:	e002      	b.n	8001570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43d9      	mvns	r1, r3
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	400b      	ands	r3, r1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e081      	b.n	80016c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff f8dc 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2224      	movs	r2, #36	; 0x24
 80015e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001600:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001610:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	e006      	b.n	8001638 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001636:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d104      	bne.n	800164a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001648:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800166c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69d9      	ldr	r1, [r3, #28]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1a      	ldr	r2, [r3, #32]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d138      	bne.n	8001756 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e032      	b.n	8001758 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2224      	movs	r2, #36	; 0x24
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001720:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6819      	ldr	r1, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2220      	movs	r2, #32
 8001746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001756:	2302      	movs	r3, #2
  }
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b20      	cmp	r3, #32
 8001778:	d139      	bne.n	80017ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001784:	2302      	movs	r3, #2
 8001786:	e033      	b.n	80017f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2224      	movs	r2, #36	; 0x24
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017ee:	2302      	movs	r3, #2
  }
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	b08b      	sub	sp, #44	; 0x2c
 8001800:	af06      	add	r7, sp, #24
 8001802:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0c4      	b.n	8001998 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff f8b2 	bl	800098c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2203      	movs	r2, #3
 800182c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fbe0 	bl	8004ffa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e040      	b.n	80018c2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	3301      	adds	r3, #1
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3303      	adds	r3, #3
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	3338      	adds	r3, #56	; 0x38
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	333c      	adds	r3, #60	; 0x3c
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3340      	adds	r3, #64	; 0x40
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	3301      	adds	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d3b9      	bcc.n	8001840 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e044      	b.n	800195c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	3301      	adds	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3b5      	bcc.n	80018d2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	687e      	ldr	r6, [r7, #4]
 800196e:	466d      	mov	r5, sp
 8001970:	f106 0410 	add.w	r4, r6, #16
 8001974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	602b      	str	r3, [r5, #0]
 800197c:	1d33      	adds	r3, r6, #4
 800197e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001980:	6838      	ldr	r0, [r7, #0]
 8001982:	f003 fb55 	bl	8005030 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f001 b823 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 817d 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019dc:	4bbc      	ldr	r3, [pc, #752]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d00c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e8:	4bb9      	ldr	r3, [pc, #740]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d15c      	bne.n	8001aae <HAL_RCC_OscConfig+0x10e>
 80019f4:	4bb6      	ldr	r3, [pc, #728]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d155      	bne.n	8001aae <HAL_RCC_OscConfig+0x10e>
 8001a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a06:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_OscConfig+0x94>
 8001a2e:	4ba8      	ldr	r3, [pc, #672]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	e015      	b.n	8001a60 <HAL_RCC_OscConfig+0xc0>
 8001a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a38:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a4c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a50:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a5c:	4b9c      	ldr	r3, [pc, #624]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a64:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a68:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a6c:	fa92 f2a2 	rbit	r2, r2
 8001a70:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a74:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a78:	fab2 f282 	clz	r2, r2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f002 021f 	and.w	r2, r2, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 811f 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x334>
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 8116 	bne.w	8001cd4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f000 bfaf 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x12e>
 8001ac0:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a82      	ldr	r2, [pc, #520]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e036      	b.n	8001b3c <HAL_RCC_OscConfig+0x19c>
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x158>
 8001ade:	4b7c      	ldr	r3, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7b      	ldr	r2, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b79      	ldr	r3, [pc, #484]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a78      	ldr	r2, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e021      	b.n	8001b3c <HAL_RCC_OscConfig+0x19c>
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x184>
 8001b0a:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a70      	ldr	r2, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b6e      	ldr	r3, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6d      	ldr	r2, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0x19c>
 8001b24:	4b6a      	ldr	r3, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a69      	ldr	r2, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b3c:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f023 020f 	bic.w	r2, r3, #15
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	495f      	ldr	r1, [pc, #380]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d059      	beq.n	8001c1a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff f85f 	bl	8000c28 <HAL_GetTick>
 8001b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f85a 	bl	8000c28 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b64      	cmp	r3, #100	; 0x64
 8001b7e:	d902      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	f000 bf43 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>
 8001b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x218>
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	e015      	b.n	8001be4 <HAL_RCC_OscConfig+0x244>
 8001bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bbc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001bd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001be8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bf0:	fa92 f2a2 	rbit	r2, r2
 8001bf4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bf8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ab      	beq.n	8001b70 <HAL_RCC_OscConfig+0x1d0>
 8001c18:	e05d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f805 	bl	8000c28 <HAL_GetTick>
 8001c1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff f800 	bl	8000c28 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b64      	cmp	r3, #100	; 0x64
 8001c32:	d902      	bls.n	8001c3a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	f000 bee9 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>
 8001c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d102      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2cc>
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	e015      	b.n	8001c98 <HAL_RCC_OscConfig+0x2f8>
 8001c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c70:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c84:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_RCC_OscConfig+0x330>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c9c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ca0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ca4:	fa92 f2a2 	rbit	r2, r2
 8001ca8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001cac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f042 0220 	orr.w	r2, r2, #32
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ab      	bne.n	8001c24 <HAL_RCC_OscConfig+0x284>
 8001ccc:	e003      	b.n	8001cd6 <HAL_RCC_OscConfig+0x336>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 817d 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cec:	4ba6      	ldr	r3, [pc, #664]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cf8:	4ba3      	ldr	r3, [pc, #652]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d172      	bne.n	8001dea <HAL_RCC_OscConfig+0x44a>
 8001d04:	4ba0      	ldr	r3, [pc, #640]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d16c      	bne.n	8001dea <HAL_RCC_OscConfig+0x44a>
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d22:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3a0>
 8001d3a:	4b93      	ldr	r3, [pc, #588]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	e013      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c8>
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d52:	2302      	movs	r3, #2
 8001d54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d64:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d72:	fa92 f2a2 	rbit	r2, r2
 8001d76:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d7e:	fab2 f282 	clz	r2, r2
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f042 0220 	orr.w	r2, r2, #32
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f002 021f 	and.w	r2, r2, #31
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_RCC_OscConfig+0x410>
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f000 be2e 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	21f8      	movs	r1, #248	; 0xf8
 8001dc6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001dce:	fa91 f1a1 	rbit	r1, r1
 8001dd2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001dd6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001dda:	fab1 f181 	clz	r1, r1
 8001dde:	b2c9      	uxtb	r1, r1
 8001de0:	408b      	lsls	r3, r1
 8001de2:	4969      	ldr	r1, [pc, #420]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de8:	e0fd      	b.n	8001fe6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8088 	beq.w	8001f0c <HAL_RCC_OscConfig+0x56c>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	461a      	mov	r2, r3
 8001e24:	2301      	movs	r3, #1
 8001e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7fe fefe 	bl	8000c28 <HAL_GetTick>
 8001e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e32:	f7fe fef9 	bl	8000c28 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d902      	bls.n	8001e48 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	f000 bde2 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4d8>
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e013      	b.n	8001ea0 <HAL_RCC_OscConfig+0x500>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ea6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001eaa:	fa92 f2a2 	rbit	r2, r2
 8001eae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001eb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0af      	beq.n	8001e32 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	21f8      	movs	r1, #248	; 0xf8
 8001ee8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ef0:	fa91 f1a1 	rbit	r1, r1
 8001ef4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ef8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001efc:	fab1 f181 	clz	r1, r1
 8001f00:	b2c9      	uxtb	r1, r1
 8001f02:	408b      	lsls	r3, r1
 8001f04:	4920      	ldr	r1, [pc, #128]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
 8001f0a:	e06c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x646>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	461a      	mov	r2, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fe76 	bl	8000c28 <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f42:	f7fe fe71 	bl	8000c28 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d902      	bls.n	8001f58 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	f000 bd5a 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d104      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5ec>
 8001f82:	4b01      	ldr	r3, [pc, #4]	; (8001f88 <HAL_RCC_OscConfig+0x5e8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e015      	b.n	8001fb4 <HAL_RCC_OscConfig+0x614>
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001fa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fb0:	4bc8      	ldr	r3, [pc, #800]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001fba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fbe:	fa92 f2a2 	rbit	r2, r2
 8001fc2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001fc6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fca:	fab2 f282 	clz	r2, r2
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f042 0220 	orr.w	r2, r2, #32
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f002 021f 	and.w	r2, r2, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1ad      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8110 	beq.w	800221c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d079      	beq.n	8002100 <HAL_RCC_OscConfig+0x760>
 800200c:	2301      	movs	r3, #1
 800200e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800201e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	4bab      	ldr	r3, [pc, #684]	; (80022d8 <HAL_RCC_OscConfig+0x938>)
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	461a      	mov	r2, r3
 8002032:	2301      	movs	r3, #1
 8002034:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7fe fdf7 	bl	8000c28 <HAL_GetTick>
 800203a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe fdf2 	bl	8000c28 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d902      	bls.n	8002056 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	f000 bcdb 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b0:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 80020b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020bc:	2102      	movs	r1, #2
 80020be:	6019      	str	r1, [r3, #0]
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fa93 f1a3 	rbit	r1, r3
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020d6:	6019      	str	r1, [r3, #0]
  return result;
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0a0      	beq.n	8002040 <HAL_RCC_OscConfig+0x6a0>
 80020fe:	e08d      	b.n	800221c <HAL_RCC_OscConfig+0x87c>
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	fa93 f2a3 	rbit	r2, r3
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002122:	601a      	str	r2, [r3, #0]
  return result;
 8002124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002128:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800212c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <HAL_RCC_OscConfig+0x938>)
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	461a      	mov	r2, r3
 800213e:	2300      	movs	r3, #0
 8002140:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7fe fd71 	bl	8000c28 <HAL_GetTick>
 8002146:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214c:	f7fe fd6c 	bl	8000c28 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d902      	bls.n	8002162 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	f000 bc55 	b.w	8002a0c <HAL_RCC_OscConfig+0x106c>
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800216a:	2202      	movs	r2, #2
 800216c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f2a3 	rbit	r2, r3
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800218e:	2202      	movs	r2, #2
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021b2:	2202      	movs	r2, #2
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	fa93 f2a3 	rbit	r2, r3
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80021cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 80021d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021da:	2102      	movs	r1, #2
 80021dc:	6019      	str	r1, [r3, #0]
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fa93 f1a3 	rbit	r1, r3
 80021ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021f4:	6019      	str	r1, [r3, #0]
  return result;
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d197      	bne.n	800214c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 81a1 	beq.w	8002574 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d116      	bne.n	8002272 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 800224a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224e:	61d3      	str	r3, [r2, #28]
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800226a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800226c:	2301      	movs	r3, #1
 800226e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_RCC_OscConfig+0x93c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11a      	bne.n	80022b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_RCC_OscConfig+0x93c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_RCC_OscConfig+0x93c>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7fe fccd 	bl	8000c28 <HAL_GetTick>
 800228e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	e009      	b.n	80022a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002294:	f7fe fcc8 	bl	8000c28 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e3b1      	b.n	8002a0c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_RCC_OscConfig+0x93c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10d      	bne.n	80022e0 <HAL_RCC_OscConfig+0x940>
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a02      	ldr	r2, [pc, #8]	; (80022d4 <HAL_RCC_OscConfig+0x934>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	e03c      	b.n	800234c <HAL_RCC_OscConfig+0x9ac>
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	10908120 	.word	0x10908120
 80022dc:	40007000 	.word	0x40007000
 80022e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10c      	bne.n	800230a <HAL_RCC_OscConfig+0x96a>
 80022f0:	4bc1      	ldr	r3, [pc, #772]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4ac0      	ldr	r2, [pc, #768]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	4bbe      	ldr	r3, [pc, #760]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4abd      	ldr	r2, [pc, #756]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002302:	f023 0304 	bic.w	r3, r3, #4
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	e020      	b.n	800234c <HAL_RCC_OscConfig+0x9ac>
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x994>
 800231a:	4bb7      	ldr	r3, [pc, #732]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4ab6      	ldr	r2, [pc, #728]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	4bb4      	ldr	r3, [pc, #720]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4ab3      	ldr	r2, [pc, #716]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x9ac>
 8002334:	4bb0      	ldr	r3, [pc, #704]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4aaf      	ldr	r2, [pc, #700]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	4bad      	ldr	r3, [pc, #692]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4aac      	ldr	r2, [pc, #688]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8081 	beq.w	8002460 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7fe fc63 	bl	8000c28 <HAL_GetTick>
 8002362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fc5e 	bl	8000c28 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e345      	b.n	8002a0c <HAL_RCC_OscConfig+0x106c>
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002388:	2202      	movs	r2, #2
 800238a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	fa93 f2a3 	rbit	r2, r3
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023ac:	2202      	movs	r2, #2
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023c6:	601a      	str	r2, [r3, #0]
  return result;
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_OscConfig+0xa4c>
 80023e6:	4b84      	ldr	r3, [pc, #528]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	e013      	b.n	8002414 <HAL_RCC_OscConfig+0xa74>
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023f4:	2202      	movs	r2, #2
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	4b79      	ldr	r3, [pc, #484]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002418:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800241c:	2102      	movs	r1, #2
 800241e:	6011      	str	r1, [r2, #0]
 8002420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002424:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	fa92 f1a2 	rbit	r1, r2
 800242e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002432:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002436:	6011      	str	r1, [r2, #0]
  return result;
 8002438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800243c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	fab2 f282 	clz	r2, r2
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f002 021f 	and.w	r2, r2, #31
 8002452:	2101      	movs	r1, #1
 8002454:	fa01 f202 	lsl.w	r2, r1, r2
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d084      	beq.n	8002368 <HAL_RCC_OscConfig+0x9c8>
 800245e:	e07f      	b.n	8002560 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe fbe2 	bl	8000c28 <HAL_GetTick>
 8002464:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fbdd 	bl	8000c28 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e2c4      	b.n	8002a0c <HAL_RCC_OscConfig+0x106c>
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800248a:	2202      	movs	r2, #2
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	fa93 f2a3 	rbit	r2, r3
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024ae:	2202      	movs	r2, #2
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_OscConfig+0xb4e>
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	e013      	b.n	8002516 <HAL_RCC_OscConfig+0xb76>
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800251a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800251e:	2102      	movs	r1, #2
 8002520:	6011      	str	r1, [r2, #0]
 8002522:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002526:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fa92 f1a2 	rbit	r1, r2
 8002530:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002534:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002538:	6011      	str	r1, [r2, #0]
  return result;
 800253a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800253e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	fab2 f282 	clz	r2, r2
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f002 021f 	and.w	r2, r2, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f202 	lsl.w	r2, r1, r2
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d184      	bne.n	800246a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002560:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 800256e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002572:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8242 	beq.w	8002a0a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_RCC_OscConfig+0xc58>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	f000 8213 	beq.w	80029ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	f040 8162 	bne.w	800286a <HAL_RCC_OscConfig+0xeca>
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025ca:	601a      	str	r2, [r3, #0]
  return result;
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	461a      	mov	r2, r3
 80025e8:	2300      	movs	r3, #0
 80025ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fb1c 	bl	8000c28 <HAL_GetTick>
 80025f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	e00c      	b.n	8002610 <HAL_RCC_OscConfig+0xc70>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fb14 	bl	8000c28 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1fd      	b.n	8002a0c <HAL_RCC_OscConfig+0x106c>
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002618:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002634:	601a      	str	r2, [r3, #0]
  return result;
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800263e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d102      	bne.n	800265a <HAL_RCC_OscConfig+0xcba>
 8002654:	4bb0      	ldr	r3, [pc, #704]	; (8002918 <HAL_RCC_OscConfig+0xf78>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	e027      	b.n	80026aa <HAL_RCC_OscConfig+0xd0a>
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	4b9c      	ldr	r3, [pc, #624]	; (8002918 <HAL_RCC_OscConfig+0xf78>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026b6:	6011      	str	r1, [r2, #0]
 80026b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	fa92 f1a2 	rbit	r1, r2
 80026c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026ce:	6011      	str	r1, [r2, #0]
  return result;
 80026d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d182      	bne.n	80025fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f6:	4b88      	ldr	r3, [pc, #544]	; (8002918 <HAL_RCC_OscConfig+0xf78>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	430b      	orrs	r3, r1
 8002718:	497f      	ldr	r1, [pc, #508]	; (8002918 <HAL_RCC_OscConfig+0xf78>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002726:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800272a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002742:	601a      	str	r2, [r3, #0]
  return result;
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800274c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	2301      	movs	r3, #1
 8002762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fa60 	bl	8000c28 <HAL_GetTick>
 8002768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276c:	e009      	b.n	8002782 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe fa5b 	bl	8000c28 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e144      	b.n	8002a0c <HAL_RCC_OscConfig+0x106c>
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800278a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027a6:	601a      	str	r2, [r3, #0]
  return result;
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80027b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0xe2c>
 80027c6:	4b54      	ldr	r3, [pc, #336]	; (8002918 <HAL_RCC_OscConfig+0xf78>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e027      	b.n	800281c <HAL_RCC_OscConfig+0xe7c>
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <HAL_RCC_OscConfig+0xf78>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002820:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002824:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002828:	6011      	str	r1, [r2, #0]
 800282a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	fa92 f1a2 	rbit	r1, r2
 8002838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800283c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002840:	6011      	str	r1, [r2, #0]
  return result;
 8002842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002846:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	fab2 f282 	clz	r2, r2
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	f042 0220 	orr.w	r2, r2, #32
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f002 021f 	and.w	r2, r2, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f202 	lsl.w	r2, r1, r2
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d082      	beq.n	800276e <HAL_RCC_OscConfig+0xdce>
 8002868:	e0cf      	b.n	8002a0a <HAL_RCC_OscConfig+0x106a>
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002872:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800288e:	601a      	str	r2, [r3, #0]
  return result;
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002898:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	461a      	mov	r2, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f9ba 	bl	8000c28 <HAL_GetTick>
 80028b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	e009      	b.n	80028ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe f9b5 	bl	8000c28 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e09e      	b.n	8002a0c <HAL_RCC_OscConfig+0x106c>
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028f2:	601a      	str	r2, [r3, #0]
  return result;
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d104      	bne.n	800291c <HAL_RCC_OscConfig+0xf7c>
 8002912:	4b01      	ldr	r3, [pc, #4]	; (8002918 <HAL_RCC_OscConfig+0xf78>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e029      	b.n	800296c <HAL_RCC_OscConfig+0xfcc>
 8002918:	40021000 	.word	0x40021000
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800294a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_OscConfig+0x1078>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002970:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002974:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002978:	6011      	str	r1, [r2, #0]
 800297a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	fa92 f1a2 	rbit	r1, r2
 8002988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800298c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002990:	6011      	str	r1, [r2, #0]
  return result;
 8002992:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002996:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	fab2 f282 	clz	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f042 0220 	orr.w	r2, r2, #32
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f002 021f 	and.w	r2, r2, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f202 	lsl.w	r2, r1, r2
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d180      	bne.n	80028ba <HAL_RCC_OscConfig+0xf1a>
 80029b8:	e027      	b.n	8002a0a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e01e      	b.n	8002a0c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_OscConfig+0x1078>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d10b      	bne.n	8002a06 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b09e      	sub	sp, #120	; 0x78
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e162      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b90      	ldr	r3, [pc, #576]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b8d      	ldr	r3, [pc, #564]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	498b      	ldr	r1, [pc, #556]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e14a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b82      	ldr	r3, [pc, #520]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	497f      	ldr	r1, [pc, #508]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80dc 	beq.w	8002c48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d13c      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xf6>
 8002a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xa6>
 8002abc:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	e00f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0xc6>
 8002ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	667b      	str	r3, [r7, #100]	; 0x64
 8002ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ae6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002af2:	fab2 f282 	clz	r2, r2
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f042 0220 	orr.w	r2, r2, #32
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f002 021f 	and.w	r2, r2, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d17b      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0f3      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d13c      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x178>
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x128>
 8002b3e:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e00f      	b.n	8002b64 <HAL_RCC_ClockConfig+0x148>
 8002b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
 8002b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
 8002b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b68:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f042 0220 	orr.w	r2, r2, #32
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f002 021f 	and.w	r2, r2, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d13a      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b2      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
 8002b94:	2302      	movs	r3, #2
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x1a0>
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e00d      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x1bc>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc8:	2302      	movs	r3, #2
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2202      	movs	r2, #2
 8002bda:	61ba      	str	r2, [r7, #24]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	fa92 f2a2 	rbit	r2, r2
 8002be2:	617a      	str	r2, [r7, #20]
  return result;
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	fab2 f282 	clz	r2, r2
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f042 0220 	orr.w	r2, r2, #32
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e079      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	491a      	ldr	r1, [pc, #104]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c18:	f7fe f806 	bl	8000c28 <HAL_GetTick>
 8002c1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7fe f802 	bl	8000c28 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e061      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 020c 	and.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1eb      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d214      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4906      	ldr	r1, [pc, #24]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e040      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	491a      	ldr	r1, [pc, #104]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4912      	ldr	r1, [pc, #72]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cbe:	f000 f829 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ccc:	22f0      	movs	r2, #240	; 0xf0
 8002cce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	fa92 f2a2 	rbit	r2, r2
 8002cd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	fab2 f282 	clz	r2, r2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	40d3      	lsrs	r3, r2
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x2ec>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_RCC_ClockConfig+0x2f0>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_RCC_ClockConfig+0x2f4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fe8e 	bl	8000a14 <HAL_InitTick>
  
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3778      	adds	r7, #120	; 0x78
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08008950 	.word	0x08008950
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b08b      	sub	sp, #44	; 0x2c
 8002d18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x30>
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x36>
 8002d42:	e03c      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d46:	623b      	str	r3, [r7, #32]
      break;
 8002d48:	e03c      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	607a      	str	r2, [r7, #4]
  return result;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	40d3      	lsrs	r3, r2
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	220f      	movs	r2, #15
 8002d78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	fa92 f2a2 	rbit	r2, r2
 8002d80:	60fa      	str	r2, [r7, #12]
  return result;
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	40d3      	lsrs	r3, r2
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	e004      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	623b      	str	r3, [r7, #32]
      break;
 8002dbc:	e002      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dc0:	623b      	str	r3, [r7, #32]
      break;
 8002dc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	372c      	adds	r7, #44	; 0x2c
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	007a1200 	.word	0x007a1200
 8002ddc:	08008968 	.word	0x08008968
 8002de0:	08008978 	.word	0x08008978
 8002de4:	003d0900 	.word	0x003d0900

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000000 	.word	0x20000000

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e06:	f7ff ffef 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e0a:	4601      	mov	r1, r0
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	fa92 f2a2 	rbit	r2, r2
 8002e20:	603a      	str	r2, [r7, #0]
  return result;
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	fab2 f282 	clz	r2, r2
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	40d3      	lsrs	r3, r2
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e2e:	5cd3      	ldrb	r3, [r2, r3]
 8002e30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	08008960 	.word	0x08008960

08002e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e4a:	f7ff ffcd 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e4e:	4601      	mov	r1, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	603a      	str	r2, [r7, #0]
  return result;
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	40d3      	lsrs	r3, r2
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	08008960 	.word	0x08008960

08002e88 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	220f      	movs	r2, #15
 8002e96:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	08db      	lsrs	r3, r3, #3
 8002ec2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <HAL_RCC_GetClockConfig+0x60>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	601a      	str	r2, [r3, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40022000 	.word	0x40022000

08002eec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b092      	sub	sp, #72	; 0x48
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80d4 	beq.w	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f10:	4b4e      	ldr	r3, [pc, #312]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10e      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4a4a      	ldr	r2, [pc, #296]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f26:	61d3      	str	r3, [r2, #28]
 8002f28:	4b48      	ldr	r3, [pc, #288]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b45      	ldr	r3, [pc, #276]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b42      	ldr	r3, [pc, #264]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a41      	ldr	r2, [pc, #260]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fd fe69 	bl	8000c28 <HAL_GetTick>
 8002f56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fd fe65 	bl	8000c28 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	; 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e169      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b38      	ldr	r3, [pc, #224]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8084 	beq.w	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d07c      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f98:	4b2c      	ldr	r3, [pc, #176]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b26      	ldr	r3, [pc, #152]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fea:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d04b      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fd fe15 	bl	8000c28 <HAL_GetTick>
 8002ffe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fd fe11 	bl	8000c28 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e113      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003018:	2302      	movs	r3, #2
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
 8003024:	2302      	movs	r3, #2
 8003026:	623b      	str	r3, [r7, #32]
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	61fb      	str	r3, [r7, #28]
  return result;
 8003030:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d108      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003046:	4b01      	ldr	r3, [pc, #4]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	e00d      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800304c:	40021000 	.word	0x40021000
 8003050:	40007000 	.word	0x40007000
 8003054:	10908100 	.word	0x10908100
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	4b78      	ldr	r3, [pc, #480]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2202      	movs	r2, #2
 800306a:	613a      	str	r2, [r7, #16]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	fa92 f2a2 	rbit	r2, r2
 8003072:	60fa      	str	r2, [r7, #12]
  return result;
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	fab2 f282 	clz	r2, r2
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	f002 021f 	and.w	r2, r2, #31
 8003086:	2101      	movs	r1, #1
 8003088:	fa01 f202 	lsl.w	r2, r1, r2
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0b7      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003092:	4b6d      	ldr	r3, [pc, #436]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	496a      	ldr	r1, [pc, #424]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c4:	4b60      	ldr	r3, [pc, #384]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f023 0203 	bic.w	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	495d      	ldr	r1, [pc, #372]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4956      	ldr	r1, [pc, #344]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003100:	4b51      	ldr	r3, [pc, #324]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	494e      	ldr	r1, [pc, #312]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310e:	4313      	orrs	r3, r2
 8003110:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f023 0210 	bic.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4947      	ldr	r1, [pc, #284]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800313c:	4b42      	ldr	r3, [pc, #264]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	493f      	ldr	r1, [pc, #252]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f023 0220 	bic.w	r2, r3, #32
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4938      	ldr	r1, [pc, #224]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003168:	4313      	orrs	r3, r2
 800316a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	4930      	ldr	r1, [pc, #192]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003186:	4313      	orrs	r3, r2
 8003188:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	4929      	ldr	r1, [pc, #164]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	4921      	ldr	r1, [pc, #132]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	491a      	ldr	r1, [pc, #104]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	4912      	ldr	r1, [pc, #72]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	490b      	ldr	r1, [pc, #44]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800321c:	4313      	orrs	r3, r2
 800321e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	4903      	ldr	r1, [pc, #12]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3748      	adds	r7, #72	; 0x48
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e09d      	b.n	800339a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326e:	d009      	beq.n	8003284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
 8003276:	e005      	b.n	8003284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fabc 	bl	800081c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032c4:	d902      	bls.n	80032cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	e002      	b.n	80032d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032da:	d007      	beq.n	80032ec <HAL_SPI_Init+0xa0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	ea42 0103 	orr.w	r1, r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	f003 0204 	and.w	r2, r3, #4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003368:	ea42 0103 	orr.w	r1, r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e049      	b.n	8003448 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f841 	bl	8003450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3304      	adds	r3, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f000 f9f1 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e04a      	b.n	8003512 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_TIM_Base_Start_IT+0xbc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d018      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x6c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d013      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x6c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_TIM_Base_Start_IT+0xc0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x6c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_TIM_Base_Start_IT+0xc4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x6c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_TIM_Base_Start_IT+0xc8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x6c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_TIM_Base_Start_IT+0xcc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d115      	bne.n	80034fc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_TIM_Base_Start_IT+0xd0>)
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d015      	beq.n	800350e <HAL_TIM_Base_Start_IT+0xaa>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d011      	beq.n	800350e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	e008      	b.n	800350e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e000      	b.n	8003510 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40013400 	.word	0x40013400
 8003530:	40014000 	.word	0x40014000
 8003534:	00010007 	.word	0x00010007

08003538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0202 	mvn.w	r2, #2
 8003564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f905 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8f7 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f908 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0204 	mvn.w	r2, #4
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8db 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8cd 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8de 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d122      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0208 	mvn.w	r2, #8
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2204      	movs	r2, #4
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8b1 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8a3 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8b4 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b10      	cmp	r3, #16
 8003648:	d122      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d11b      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0210 	mvn.w	r2, #16
 8003660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2208      	movs	r2, #8
 8003666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f887 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f879 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f88a 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0201 	mvn.w	r2, #1
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd f82c 	bl	8000714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f90a 	bl	80038fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f6:	d10e      	bne.n	8003716 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d107      	bne.n	8003716 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f8fd 	bl	8003910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d10e      	bne.n	8003742 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d107      	bne.n	8003742 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800373a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f838 	bl	80037b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d10e      	bne.n	800376e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b20      	cmp	r3, #32
 800375c:	d107      	bne.n	800376e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f06f 0220 	mvn.w	r2, #32
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8bd 	bl	80038e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a3c      	ldr	r2, [pc, #240]	; (80038cc <TIM_Base_SetConfig+0x104>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00f      	beq.n	8003800 <TIM_Base_SetConfig+0x38>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d00b      	beq.n	8003800 <TIM_Base_SetConfig+0x38>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a39      	ldr	r2, [pc, #228]	; (80038d0 <TIM_Base_SetConfig+0x108>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_Base_SetConfig+0x38>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a38      	ldr	r2, [pc, #224]	; (80038d4 <TIM_Base_SetConfig+0x10c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0x38>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a37      	ldr	r2, [pc, #220]	; (80038d8 <TIM_Base_SetConfig+0x110>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d108      	bne.n	8003812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a2d      	ldr	r2, [pc, #180]	; (80038cc <TIM_Base_SetConfig+0x104>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01b      	beq.n	8003852 <TIM_Base_SetConfig+0x8a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d017      	beq.n	8003852 <TIM_Base_SetConfig+0x8a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <TIM_Base_SetConfig+0x108>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <TIM_Base_SetConfig+0x8a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <TIM_Base_SetConfig+0x10c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00f      	beq.n	8003852 <TIM_Base_SetConfig+0x8a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <TIM_Base_SetConfig+0x110>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00b      	beq.n	8003852 <TIM_Base_SetConfig+0x8a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a27      	ldr	r2, [pc, #156]	; (80038dc <TIM_Base_SetConfig+0x114>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <TIM_Base_SetConfig+0x8a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <TIM_Base_SetConfig+0x118>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <TIM_Base_SetConfig+0x11c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d108      	bne.n	8003864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a10      	ldr	r2, [pc, #64]	; (80038cc <TIM_Base_SetConfig+0x104>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00f      	beq.n	80038b0 <TIM_Base_SetConfig+0xe8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <TIM_Base_SetConfig+0x110>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0xe8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <TIM_Base_SetConfig+0x114>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0xe8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <TIM_Base_SetConfig+0x118>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0xe8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <TIM_Base_SetConfig+0x11c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d103      	bne.n	80038b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	615a      	str	r2, [r3, #20]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800
 80038d8:	40013400 	.word	0x40013400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800

080038e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e040      	b.n	80039b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fc ffaa 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fbfc 	bl	8004160 <UART_SetConfig>
 8003968:	4603      	mov	r3, r0
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e022      	b.n	80039b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fdc4 	bl	8004508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800398e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fe4b 	bl	800464c <UART_CheckIdleState>
 80039b6:	4603      	mov	r3, r0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d132      	bne.n	8003a3e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Receive_IT+0x24>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e02b      	b.n	8003a40 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d018      	beq.n	8003a2e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	69f9      	ldr	r1, [r7, #28]
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e6      	bne.n	80039fc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	461a      	mov	r2, r3
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 ff19 	bl	800486c <UART_Start_Receive_IT>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	e000      	b.n	8003a40 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3728      	adds	r7, #40	; 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d165      	bne.n	8003b2a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_UART_Transmit_DMA+0x22>
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e05e      	b.n	8003b2c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2221      	movs	r2, #33	; 0x21
 8003a90:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d027      	beq.n	8003aea <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <HAL_UART_Transmit_DMA+0xec>)
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <HAL_UART_Transmit_DMA+0xf0>)
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <HAL_UART_Transmit_DMA+0xf4>)
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3328      	adds	r3, #40	; 0x28
 8003aca:	461a      	mov	r2, r3
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	f7fd f9e0 	bl	8000e92 <HAL_DMA_Start_IT>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2210      	movs	r2, #16
 8003adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e020      	b.n	8003b2c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	613b      	str	r3, [r7, #16]
   return(result);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	623a      	str	r2, [r7, #32]
 8003b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	69f9      	ldr	r1, [r7, #28]
 8003b18:	6a3a      	ldr	r2, [r7, #32]
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3728      	adds	r7, #40	; 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	08004ae9 	.word	0x08004ae9
 8003b38:	08004b7d 	.word	0x08004b7d
 8003b3c:	08004b99 	.word	0x08004b99

08003b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b0ba      	sub	sp, #232	; 0xe8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b6e:	4013      	ands	r3, r2
 8003b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d115      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00f      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 82ab 	beq.w	80040f4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
      }
      return;
 8003ba6:	e2a5      	b.n	80040f4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8117 	beq.w	8003de0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bc2:	4b85      	ldr	r3, [pc, #532]	; (8003dd8 <HAL_UART_IRQHandler+0x298>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 810a 	beq.w	8003de0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d011      	beq.n	8003bfc <HAL_UART_IRQHandler+0xbc>
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf2:	f043 0201 	orr.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d011      	beq.n	8003c2c <HAL_UART_IRQHandler+0xec>
 8003c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d011      	beq.n	8003c5c <HAL_UART_IRQHandler+0x11c>
 8003c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2204      	movs	r2, #4
 8003c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c52:	f043 0202 	orr.w	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2208      	movs	r2, #8
 8003c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8e:	f043 0208 	orr.w	r2, r3, #8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_UART_IRQHandler+0x18a>
 8003ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8211 	beq.w	80040f8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d005      	beq.n	8003d22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d04f      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fe7c 	bl	8004a20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d141      	bne.n	8003dba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1d9      	bne.n	8003d36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d013      	beq.n	8003db2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_UART_IRQHandler+0x29c>)
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd f913 	bl	8000fc2 <HAL_DMA_Abort_IT>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dac:	4610      	mov	r0, r2
 8003dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e00f      	b.n	8003dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f9be 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00b      	b.n	8003dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9ba 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e007      	b.n	8003dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f9b6 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003dd0:	e192      	b.n	80040f8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	bf00      	nop
    return;
 8003dd4:	e190      	b.n	80040f8 <HAL_UART_IRQHandler+0x5b8>
 8003dd6:	bf00      	nop
 8003dd8:	04000120 	.word	0x04000120
 8003ddc:	08004c17 	.word	0x08004c17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	f040 814b 	bne.w	8004080 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8144 	beq.w	8004080 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 813d 	beq.w	8004080 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	f040 80b5 	bne.w	8003f88 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8164 	beq.w	80040fc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	f080 815c 	bcs.w	80040fc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	f000 8086 	beq.w	8003f66 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e88:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1da      	bne.n	8003e5a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ec8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ed0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e1      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e3      	bne.n	8003ee0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f36:	f023 0310 	bic.w	r3, r3, #16
 8003f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e4      	bne.n	8003f26 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc fff5 	bl	8000f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8e1 	bl	8004148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f86:	e0b9      	b.n	80040fc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80ab 	beq.w	8004100 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80a6 	beq.w	8004100 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e4      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800400e:	633a      	str	r2, [r7, #48]	; 0x30
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e3      	bne.n	8003fea <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60fb      	str	r3, [r7, #12]
   return(result);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	617b      	str	r3, [r7, #20]
   return(result);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e4      	bne.n	8004036 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004072:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f865 	bl	8004148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800407e:	e03f      	b.n	8004100 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00e      	beq.n	80040aa <HAL_UART_IRQHandler+0x56a>
 800408c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 ff9f 	bl	8004fe6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040a8:	e02d      	b.n	8004106 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00e      	beq.n	80040d4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01c      	beq.n	8004104 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
    }
    return;
 80040d2:	e017      	b.n	8004104 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d012      	beq.n	8004106 <HAL_UART_IRQHandler+0x5c6>
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fda8 	bl	8004c42 <UART_EndTransmit_IT>
    return;
 80040f2:	e008      	b.n	8004106 <HAL_UART_IRQHandler+0x5c6>
      return;
 80040f4:	bf00      	nop
 80040f6:	e006      	b.n	8004106 <HAL_UART_IRQHandler+0x5c6>
    return;
 80040f8:	bf00      	nop
 80040fa:	e004      	b.n	8004106 <HAL_UART_IRQHandler+0x5c6>
      return;
 80040fc:	bf00      	nop
 80040fe:	e002      	b.n	8004106 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004100:	bf00      	nop
 8004102:	e000      	b.n	8004106 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004104:	bf00      	nop
  }

}
 8004106:	37e8      	adds	r7, #232	; 0xe8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800418e:	f023 030c 	bic.w	r3, r3, #12
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6979      	ldr	r1, [r7, #20]
 8004198:	430b      	orrs	r3, r1
 800419a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4aa7      	ldr	r2, [pc, #668]	; (8004478 <UART_SetConfig+0x318>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d120      	bne.n	8004222 <UART_SetConfig+0xc2>
 80041e0:	4ba6      	ldr	r3, [pc, #664]	; (800447c <UART_SetConfig+0x31c>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d817      	bhi.n	800421c <UART_SetConfig+0xbc>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <UART_SetConfig+0x94>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004211 	.word	0x08004211
 80041fc:	08004217 	.word	0x08004217
 8004200:	0800420b 	.word	0x0800420b
 8004204:	2301      	movs	r3, #1
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e0b5      	b.n	8004376 <UART_SetConfig+0x216>
 800420a:	2302      	movs	r3, #2
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e0b2      	b.n	8004376 <UART_SetConfig+0x216>
 8004210:	2304      	movs	r3, #4
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e0af      	b.n	8004376 <UART_SetConfig+0x216>
 8004216:	2308      	movs	r3, #8
 8004218:	77fb      	strb	r3, [r7, #31]
 800421a:	e0ac      	b.n	8004376 <UART_SetConfig+0x216>
 800421c:	2310      	movs	r3, #16
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e0a9      	b.n	8004376 <UART_SetConfig+0x216>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a96      	ldr	r2, [pc, #600]	; (8004480 <UART_SetConfig+0x320>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d124      	bne.n	8004276 <UART_SetConfig+0x116>
 800422c:	4b93      	ldr	r3, [pc, #588]	; (800447c <UART_SetConfig+0x31c>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004234:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004238:	d011      	beq.n	800425e <UART_SetConfig+0xfe>
 800423a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800423e:	d817      	bhi.n	8004270 <UART_SetConfig+0x110>
 8004240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004244:	d011      	beq.n	800426a <UART_SetConfig+0x10a>
 8004246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800424a:	d811      	bhi.n	8004270 <UART_SetConfig+0x110>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <UART_SetConfig+0xf8>
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004254:	d006      	beq.n	8004264 <UART_SetConfig+0x104>
 8004256:	e00b      	b.n	8004270 <UART_SetConfig+0x110>
 8004258:	2300      	movs	r3, #0
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e08b      	b.n	8004376 <UART_SetConfig+0x216>
 800425e:	2302      	movs	r3, #2
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e088      	b.n	8004376 <UART_SetConfig+0x216>
 8004264:	2304      	movs	r3, #4
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e085      	b.n	8004376 <UART_SetConfig+0x216>
 800426a:	2308      	movs	r3, #8
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e082      	b.n	8004376 <UART_SetConfig+0x216>
 8004270:	2310      	movs	r3, #16
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e07f      	b.n	8004376 <UART_SetConfig+0x216>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a82      	ldr	r2, [pc, #520]	; (8004484 <UART_SetConfig+0x324>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d124      	bne.n	80042ca <UART_SetConfig+0x16a>
 8004280:	4b7e      	ldr	r3, [pc, #504]	; (800447c <UART_SetConfig+0x31c>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004288:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800428c:	d011      	beq.n	80042b2 <UART_SetConfig+0x152>
 800428e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004292:	d817      	bhi.n	80042c4 <UART_SetConfig+0x164>
 8004294:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004298:	d011      	beq.n	80042be <UART_SetConfig+0x15e>
 800429a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800429e:	d811      	bhi.n	80042c4 <UART_SetConfig+0x164>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <UART_SetConfig+0x14c>
 80042a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042a8:	d006      	beq.n	80042b8 <UART_SetConfig+0x158>
 80042aa:	e00b      	b.n	80042c4 <UART_SetConfig+0x164>
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e061      	b.n	8004376 <UART_SetConfig+0x216>
 80042b2:	2302      	movs	r3, #2
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e05e      	b.n	8004376 <UART_SetConfig+0x216>
 80042b8:	2304      	movs	r3, #4
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e05b      	b.n	8004376 <UART_SetConfig+0x216>
 80042be:	2308      	movs	r3, #8
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e058      	b.n	8004376 <UART_SetConfig+0x216>
 80042c4:	2310      	movs	r3, #16
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e055      	b.n	8004376 <UART_SetConfig+0x216>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a6e      	ldr	r2, [pc, #440]	; (8004488 <UART_SetConfig+0x328>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d124      	bne.n	800431e <UART_SetConfig+0x1be>
 80042d4:	4b69      	ldr	r3, [pc, #420]	; (800447c <UART_SetConfig+0x31c>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80042dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042e0:	d011      	beq.n	8004306 <UART_SetConfig+0x1a6>
 80042e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042e6:	d817      	bhi.n	8004318 <UART_SetConfig+0x1b8>
 80042e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ec:	d011      	beq.n	8004312 <UART_SetConfig+0x1b2>
 80042ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f2:	d811      	bhi.n	8004318 <UART_SetConfig+0x1b8>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <UART_SetConfig+0x1a0>
 80042f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fc:	d006      	beq.n	800430c <UART_SetConfig+0x1ac>
 80042fe:	e00b      	b.n	8004318 <UART_SetConfig+0x1b8>
 8004300:	2300      	movs	r3, #0
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e037      	b.n	8004376 <UART_SetConfig+0x216>
 8004306:	2302      	movs	r3, #2
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e034      	b.n	8004376 <UART_SetConfig+0x216>
 800430c:	2304      	movs	r3, #4
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e031      	b.n	8004376 <UART_SetConfig+0x216>
 8004312:	2308      	movs	r3, #8
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e02e      	b.n	8004376 <UART_SetConfig+0x216>
 8004318:	2310      	movs	r3, #16
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e02b      	b.n	8004376 <UART_SetConfig+0x216>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a5a      	ldr	r2, [pc, #360]	; (800448c <UART_SetConfig+0x32c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d124      	bne.n	8004372 <UART_SetConfig+0x212>
 8004328:	4b54      	ldr	r3, [pc, #336]	; (800447c <UART_SetConfig+0x31c>)
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004330:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004334:	d011      	beq.n	800435a <UART_SetConfig+0x1fa>
 8004336:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800433a:	d817      	bhi.n	800436c <UART_SetConfig+0x20c>
 800433c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004340:	d011      	beq.n	8004366 <UART_SetConfig+0x206>
 8004342:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004346:	d811      	bhi.n	800436c <UART_SetConfig+0x20c>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <UART_SetConfig+0x1f4>
 800434c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004350:	d006      	beq.n	8004360 <UART_SetConfig+0x200>
 8004352:	e00b      	b.n	800436c <UART_SetConfig+0x20c>
 8004354:	2300      	movs	r3, #0
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e00d      	b.n	8004376 <UART_SetConfig+0x216>
 800435a:	2302      	movs	r3, #2
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e00a      	b.n	8004376 <UART_SetConfig+0x216>
 8004360:	2304      	movs	r3, #4
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e007      	b.n	8004376 <UART_SetConfig+0x216>
 8004366:	2308      	movs	r3, #8
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e004      	b.n	8004376 <UART_SetConfig+0x216>
 800436c:	2310      	movs	r3, #16
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e001      	b.n	8004376 <UART_SetConfig+0x216>
 8004372:	2310      	movs	r3, #16
 8004374:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437e:	d15b      	bne.n	8004438 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004380:	7ffb      	ldrb	r3, [r7, #31]
 8004382:	2b08      	cmp	r3, #8
 8004384:	d827      	bhi.n	80043d6 <UART_SetConfig+0x276>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x22c>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe fd26 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 80043b4:	61b8      	str	r0, [r7, #24]
        break;
 80043b6:	e013      	b.n	80043e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe fd44 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 80043bc:	61b8      	str	r0, [r7, #24]
        break;
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <UART_SetConfig+0x330>)
 80043c2:	61bb      	str	r3, [r7, #24]
        break;
 80043c4:	e00c      	b.n	80043e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7fe fca5 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 80043ca:	61b8      	str	r0, [r7, #24]
        break;
 80043cc:	e008      	b.n	80043e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	61bb      	str	r3, [r7, #24]
        break;
 80043d4:	e004      	b.n	80043e0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	77bb      	strb	r3, [r7, #30]
        break;
 80043de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8082 	beq.w	80044ec <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	005a      	lsls	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	441a      	add	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b0f      	cmp	r3, #15
 8004402:	d916      	bls.n	8004432 <UART_SetConfig+0x2d2>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440a:	d212      	bcs.n	8004432 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f023 030f 	bic.w	r3, r3, #15
 8004414:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	b29b      	uxth	r3, r3
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	b29a      	uxth	r2, r3
 8004422:	89fb      	ldrh	r3, [r7, #14]
 8004424:	4313      	orrs	r3, r2
 8004426:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	89fa      	ldrh	r2, [r7, #14]
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	e05c      	b.n	80044ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	77bb      	strb	r3, [r7, #30]
 8004436:	e059      	b.n	80044ec <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004438:	7ffb      	ldrb	r3, [r7, #31]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d835      	bhi.n	80044aa <UART_SetConfig+0x34a>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x2e4>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	08004495 	.word	0x08004495
 8004450:	080044ab 	.word	0x080044ab
 8004454:	0800449b 	.word	0x0800449b
 8004458:	080044ab 	.word	0x080044ab
 800445c:	080044ab 	.word	0x080044ab
 8004460:	080044ab 	.word	0x080044ab
 8004464:	080044a3 	.word	0x080044a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fe fcca 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 800446c:	61b8      	str	r0, [r7, #24]
        break;
 800446e:	e021      	b.n	80044b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004470:	f7fe fce8 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8004474:	61b8      	str	r0, [r7, #24]
        break;
 8004476:	e01d      	b.n	80044b4 <UART_SetConfig+0x354>
 8004478:	40013800 	.word	0x40013800
 800447c:	40021000 	.word	0x40021000
 8004480:	40004400 	.word	0x40004400
 8004484:	40004800 	.word	0x40004800
 8004488:	40004c00 	.word	0x40004c00
 800448c:	40005000 	.word	0x40005000
 8004490:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <UART_SetConfig+0x3a4>)
 8004496:	61bb      	str	r3, [r7, #24]
        break;
 8004498:	e00c      	b.n	80044b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449a:	f7fe fc3b 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 800449e:	61b8      	str	r0, [r7, #24]
        break;
 80044a0:	e008      	b.n	80044b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a6:	61bb      	str	r3, [r7, #24]
        break;
 80044a8:	e004      	b.n	80044b4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	77bb      	strb	r3, [r7, #30]
        break;
 80044b2:	bf00      	nop
    }

    if (pclk != 0U)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	085a      	lsrs	r2, r3, #1
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	441a      	add	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d909      	bls.n	80044e8 <UART_SetConfig+0x388>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044da:	d205      	bcs.n	80044e8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	e001      	b.n	80044ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	007a1200 	.word	0x007a1200

08004508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01a      	beq.n	800461e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004606:	d10a      	bne.n	800461e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b098      	sub	sp, #96	; 0x60
 8004650:	af02      	add	r7, sp, #8
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800465c:	f7fc fae4 	bl	8000c28 <HAL_GetTick>
 8004660:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b08      	cmp	r3, #8
 800466e:	d12e      	bne.n	80046ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004678:	2200      	movs	r2, #0
 800467a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f88c 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d021      	beq.n	80046ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800469e:	653b      	str	r3, [r7, #80]	; 0x50
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a8:	647b      	str	r3, [r7, #68]	; 0x44
 80046aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e062      	b.n	8004794 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d149      	bne.n	8004770 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f856 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03c      	beq.n	8004770 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	623b      	str	r3, [r7, #32]
   return(result);
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004714:	633b      	str	r3, [r7, #48]	; 0x30
 8004716:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800471a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e6      	bne.n	80046f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	60fb      	str	r3, [r7, #12]
   return(result);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e011      	b.n	8004794 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3758      	adds	r7, #88	; 0x58
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	e049      	b.n	8004842 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b4:	d045      	beq.n	8004842 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fc fa37 	bl	8000c28 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e048      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d031      	beq.n	8004842 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d110      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2208      	movs	r2, #8
 80047f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f913 	bl	8004a20 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2208      	movs	r2, #8
 80047fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e029      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481c:	d111      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f8f9 	bl	8004a20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e00f      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	429a      	cmp	r2, r3
 800485e:	d0a6      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800486c:	b480      	push	{r7}
 800486e:	b097      	sub	sp, #92	; 0x5c
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	4613      	mov	r3, r2
 8004878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	d10e      	bne.n	80048be <UART_Start_Receive_IT+0x52>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <UART_Start_Receive_IT+0x48>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048b2:	e01a      	b.n	80048ea <UART_Start_Receive_IT+0x7e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	22ff      	movs	r2, #255	; 0xff
 80048b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048bc:	e015      	b.n	80048ea <UART_Start_Receive_IT+0x7e>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10d      	bne.n	80048e2 <UART_Start_Receive_IT+0x76>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <UART_Start_Receive_IT+0x6c>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	22ff      	movs	r2, #255	; 0xff
 80048d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048d6:	e008      	b.n	80048ea <UART_Start_Receive_IT+0x7e>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	227f      	movs	r2, #127	; 0x7f
 80048dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048e0:	e003      	b.n	80048ea <UART_Start_Receive_IT+0x7e>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2222      	movs	r2, #34	; 0x22
 80048f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3308      	adds	r3, #8
 8004900:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	657b      	str	r3, [r7, #84]	; 0x54
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800491a:	64ba      	str	r2, [r7, #72]	; 0x48
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e5      	bne.n	80048fa <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d107      	bne.n	8004948 <UART_Start_Receive_IT+0xdc>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a22      	ldr	r2, [pc, #136]	; (80049cc <UART_Start_Receive_IT+0x160>)
 8004944:	669a      	str	r2, [r3, #104]	; 0x68
 8004946:	e002      	b.n	800494e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <UART_Start_Receive_IT+0x164>)
 800494c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d019      	beq.n	800498a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800496a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
 8004976:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800497a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e6      	bne.n	8004956 <UART_Start_Receive_IT+0xea>
 8004988:	e018      	b.n	80049bc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	613b      	str	r3, [r7, #16]
   return(result);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f043 0320 	orr.w	r3, r3, #32
 800499e:	653b      	str	r3, [r7, #80]	; 0x50
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a8:	623b      	str	r3, [r7, #32]
 80049aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	69f9      	ldr	r1, [r7, #28]
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e6      	bne.n	800498a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	375c      	adds	r7, #92	; 0x5c
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	08004e3f 	.word	0x08004e3f
 80049d0:	08004c97 	.word	0x08004c97

080049d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	6979      	ldr	r1, [r7, #20]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	613b      	str	r3, [r7, #16]
   return(result);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e6      	bne.n	80049dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004a14:	bf00      	nop
 8004a16:	3724      	adds	r7, #36	; 0x24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b095      	sub	sp, #84	; 0x54
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a46:	643b      	str	r3, [r7, #64]	; 0x40
 8004a48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e6      	bne.n	8004a28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d118      	bne.n	8004ac8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f023 0310 	bic.w	r3, r3, #16
 8004aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6979      	ldr	r1, [r7, #20]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004adc:	bf00      	nop
 8004ade:	3754      	adds	r7, #84	; 0x54
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b090      	sub	sp, #64	; 0x40
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d037      	beq.n	8004b6e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	623b      	str	r3, [r7, #32]
   return(result);
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b26:	633a      	str	r2, [r7, #48]	; 0x30
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e5      	bne.n	8004b06 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	69b9      	ldr	r1, [r7, #24]
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	617b      	str	r3, [r7, #20]
   return(result);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e6      	bne.n	8004b3a <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b6c:	e002      	b.n	8004b74 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8004b6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b70:	f7ff facc 	bl	800410c <HAL_UART_TxCpltCallback>
}
 8004b74:	bf00      	nop
 8004b76:	3740      	adds	r7, #64	; 0x40
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fac8 	bl	8004120 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004baa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d109      	bne.n	8004bd6 <UART_DMAError+0x3e>
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b21      	cmp	r3, #33	; 0x21
 8004bc6:	d106      	bne.n	8004bd6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004bd0:	6978      	ldr	r0, [r7, #20]
 8004bd2:	f7ff feff 	bl	80049d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d109      	bne.n	8004bf8 <UART_DMAError+0x60>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b22      	cmp	r3, #34	; 0x22
 8004be8:	d106      	bne.n	8004bf8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004bf2:	6978      	ldr	r0, [r7, #20]
 8004bf4:	f7ff ff14 	bl	8004a20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfe:	f043 0210 	orr.w	r2, r3, #16
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c08:	6978      	ldr	r0, [r7, #20]
 8004c0a:	f7ff fa93 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff fa7d 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b088      	sub	sp, #32
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6979      	ldr	r1, [r7, #20]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	613b      	str	r3, [r7, #16]
   return(result);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e6      	bne.n	8004c4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fa3f 	bl	800410c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c8e:	bf00      	nop
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b09c      	sub	sp, #112	; 0x70
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ca4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cae:	2b22      	cmp	r3, #34	; 0x22
 8004cb0:	f040 80b9 	bne.w	8004e26 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004cbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004cc2:	b2d9      	uxtb	r1, r3
 8004cc4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	400a      	ands	r2, r1
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f040 809c 	bne.w	8004e36 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e6      	bne.n	8004cfe <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	667b      	str	r3, [r7, #100]	; 0x64
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d50:	647a      	str	r2, [r7, #68]	; 0x44
 8004d52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d018      	beq.n	8004db8 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	623b      	str	r3, [r7, #32]
   return(result);
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	633b      	str	r3, [r7, #48]	; 0x30
 8004da6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e6      	bne.n	8004d86 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d12e      	bne.n	8004e1e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	617b      	str	r3, [r7, #20]
   return(result);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d103      	bne.n	8004e0e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2210      	movs	r2, #16
 8004e0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff f996 	bl	8004148 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e1c:	e00b      	b.n	8004e36 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fb f9de 	bl	80001e0 <HAL_UART_RxCpltCallback>
}
 8004e24:	e007      	b.n	8004e36 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0208 	orr.w	r2, r2, #8
 8004e34:	619a      	str	r2, [r3, #24]
}
 8004e36:	bf00      	nop
 8004e38:	3770      	adds	r7, #112	; 0x70
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b09c      	sub	sp, #112	; 0x70
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e4c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e56:	2b22      	cmp	r3, #34	; 0x22
 8004e58:	f040 80b9 	bne.w	8004fce <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e62:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e6c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004e70:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e74:	4013      	ands	r3, r2
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e7a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	1c9a      	adds	r2, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f040 809c 	bne.w	8004fde <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eba:	667b      	str	r3, [r7, #100]	; 0x64
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004eca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e6      	bne.n	8004ea6 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	f023 0301 	bic.w	r3, r3, #1
 8004eee:	663b      	str	r3, [r7, #96]	; 0x60
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ef8:	643a      	str	r2, [r7, #64]	; 0x40
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e5      	bne.n	8004ed8 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d018      	beq.n	8004f60 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e6      	bne.n	8004f2e <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d12e      	bne.n	8004fc6 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f023 0310 	bic.w	r3, r3, #16
 8004f82:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6979      	ldr	r1, [r7, #20]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e6      	bne.n	8004f6e <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d103      	bne.n	8004fb6 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff f8c2 	bl	8004148 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fc4:	e00b      	b.n	8004fde <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fb f90a 	bl	80001e0 <HAL_UART_RxCpltCallback>
}
 8004fcc:	e007      	b.n	8004fde <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0208 	orr.w	r2, r2, #8
 8004fdc:	619a      	str	r2, [r3, #24]
}
 8004fde:	bf00      	nop
 8004fe0:	3770      	adds	r7, #112	; 0x70
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005002:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005006:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	b29b      	uxth	r3, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	b29b      	uxth	r3, r3
 8005018:	4013      	ands	r3, r2
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005030:	b084      	sub	sp, #16
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	f107 0014 	add.w	r0, r7, #20
 800503e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	b004      	add	sp, #16
 8005070:	4770      	bx	lr
	...

08005074 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800507a:	f3ef 8305 	mrs	r3, IPSR
 800507e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005080:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005086:	f3ef 8310 	mrs	r3, PRIMASK
 800508a:	607b      	str	r3, [r7, #4]
  return(result);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <osKernelInitialize+0x32>
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <osKernelInitialize+0x64>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d109      	bne.n	80050ae <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800509a:	f3ef 8311 	mrs	r3, BASEPRI
 800509e:	603b      	str	r3, [r7, #0]
  return(result);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80050a6:	f06f 0305 	mvn.w	r3, #5
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	e00c      	b.n	80050c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <osKernelInitialize+0x64>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d105      	bne.n	80050c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80050b6:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <osKernelInitialize+0x64>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e002      	b.n	80050c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80050c8:	68fb      	ldr	r3, [r7, #12]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000598 	.word	0x20000598

080050dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e2:	f3ef 8305 	mrs	r3, IPSR
 80050e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80050e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10f      	bne.n	800510e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ee:	f3ef 8310 	mrs	r3, PRIMASK
 80050f2:	607b      	str	r3, [r7, #4]
  return(result);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <osKernelStart+0x32>
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <osKernelStart+0x64>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d109      	bne.n	8005116 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005102:	f3ef 8311 	mrs	r3, BASEPRI
 8005106:	603b      	str	r3, [r7, #0]
  return(result);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osKernelStart+0x3a>
    stat = osErrorISR;
 800510e:	f06f 0305 	mvn.w	r3, #5
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e00e      	b.n	8005134 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <osKernelStart+0x64>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d107      	bne.n	800512e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800511e:	4b08      	ldr	r3, [pc, #32]	; (8005140 <osKernelStart+0x64>)
 8005120:	2202      	movs	r2, #2
 8005122:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005124:	f001 fdea 	bl	8006cfc <vTaskStartScheduler>
      stat = osOK;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e002      	b.n	8005134 <osKernelStart+0x58>
    } else {
      stat = osError;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005132:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005134:	68fb      	ldr	r3, [r7, #12]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000598 	.word	0x20000598

08005144 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b092      	sub	sp, #72	; 0x48
 8005148:	af04      	add	r7, sp, #16
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005154:	f3ef 8305 	mrs	r3, IPSR
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 8094 	bne.w	800528a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005162:	f3ef 8310 	mrs	r3, PRIMASK
 8005166:	623b      	str	r3, [r7, #32]
  return(result);
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 808d 	bne.w	800528a <osThreadNew+0x146>
 8005170:	4b48      	ldr	r3, [pc, #288]	; (8005294 <osThreadNew+0x150>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d106      	bne.n	8005186 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005178:	f3ef 8311 	mrs	r3, BASEPRI
 800517c:	61fb      	str	r3, [r7, #28]
  return(result);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	f040 8082 	bne.w	800528a <osThreadNew+0x146>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d07e      	beq.n	800528a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005190:	2318      	movs	r3, #24
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005194:	2300      	movs	r3, #0
 8005196:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005198:	f107 031b 	add.w	r3, r7, #27
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d045      	beq.n	8005236 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <osThreadNew+0x74>
        name = attr->name;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <osThreadNew+0x9a>
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	2b38      	cmp	r3, #56	; 0x38
 80051d0:	d805      	bhi.n	80051de <osThreadNew+0x9a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <osThreadNew+0x9e>
        return (NULL);
 80051de:	2300      	movs	r3, #0
 80051e0:	e054      	b.n	800528c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00e      	beq.n	8005218 <osThreadNew+0xd4>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b5b      	cmp	r3, #91	; 0x5b
 8005200:	d90a      	bls.n	8005218 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <osThreadNew+0xd4>
        mem = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
 8005216:	e010      	b.n	800523a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10c      	bne.n	800523a <osThreadNew+0xf6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d108      	bne.n	800523a <osThreadNew+0xf6>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <osThreadNew+0xf6>
          mem = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
 8005234:	e001      	b.n	800523a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	2b01      	cmp	r3, #1
 800523e:	d110      	bne.n	8005262 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005248:	9202      	str	r2, [sp, #8]
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005254:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f001 fb84 	bl	8006964 <xTaskCreateStatic>
 800525c:	4603      	mov	r3, r0
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e013      	b.n	800528a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	d110      	bne.n	800528a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	b29a      	uxth	r2, r3
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f001 fbce 	bl	8006a1c <xTaskCreate>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d001      	beq.n	800528a <osThreadNew+0x146>
          hTask = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800528a:	697b      	ldr	r3, [r7, #20]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3738      	adds	r7, #56	; 0x38
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000598 	.word	0x20000598

08005298 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052a0:	f3ef 8305 	mrs	r3, IPSR
 80052a4:	613b      	str	r3, [r7, #16]
  return(result);
 80052a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10f      	bne.n	80052cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ac:	f3ef 8310 	mrs	r3, PRIMASK
 80052b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <osDelay+0x34>
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <osDelay+0x58>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d109      	bne.n	80052d4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052c0:	f3ef 8311 	mrs	r3, BASEPRI
 80052c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <osDelay+0x3c>
    stat = osErrorISR;
 80052cc:	f06f 0305 	mvn.w	r3, #5
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e007      	b.n	80052e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fcd8 	bl	8006c94 <vTaskDelay>
    }
  }

  return (stat);
 80052e4:	697b      	ldr	r3, [r7, #20]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000598 	.word	0x20000598

080052f4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005300:	f3ef 8305 	mrs	r3, IPSR
 8005304:	613b      	str	r3, [r7, #16]
  return(result);
 8005306:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005308:	2b00      	cmp	r3, #0
 800530a:	f040 8085 	bne.w	8005418 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530e:	f3ef 8310 	mrs	r3, PRIMASK
 8005312:	60fb      	str	r3, [r7, #12]
  return(result);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d17e      	bne.n	8005418 <osMutexNew+0x124>
 800531a:	4b42      	ldr	r3, [pc, #264]	; (8005424 <osMutexNew+0x130>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d105      	bne.n	800532e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005322:	f3ef 8311 	mrs	r3, BASEPRI
 8005326:	60bb      	str	r3, [r7, #8]
  return(result);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d174      	bne.n	8005418 <osMutexNew+0x124>
    if (attr != NULL) {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <osMutexNew+0x48>
      type = attr->attr_bits;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	e001      	b.n	8005340 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <osMutexNew+0x5c>
      rmtx = 1U;
 800534a:	2301      	movs	r3, #1
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	e001      	b.n	8005354 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d15c      	bne.n	8005418 <osMutexNew+0x124>
      mem = -1;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005362:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d015      	beq.n	8005396 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d006      	beq.n	8005380 <osMutexNew+0x8c>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b4f      	cmp	r3, #79	; 0x4f
 8005378:	d902      	bls.n	8005380 <osMutexNew+0x8c>
          mem = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	e00c      	b.n	800539a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <osMutexNew+0xa6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <osMutexNew+0xa6>
            mem = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e001      	b.n	800539a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d112      	bne.n	80053c6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4619      	mov	r1, r3
 80053ac:	2004      	movs	r0, #4
 80053ae:	f000 fbef 	bl	8005b90 <xQueueCreateMutexStatic>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24
 80053b4:	e016      	b.n	80053e4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	4619      	mov	r1, r3
 80053bc:	2001      	movs	r0, #1
 80053be:	f000 fbe7 	bl	8005b90 <xQueueCreateMutexStatic>
 80053c2:	6278      	str	r0, [r7, #36]	; 0x24
 80053c4:	e00e      	b.n	80053e4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80053d2:	2004      	movs	r0, #4
 80053d4:	f000 fbc4 	bl	8005b60 <xQueueCreateMutex>
 80053d8:	6278      	str	r0, [r7, #36]	; 0x24
 80053da:	e003      	b.n	80053e4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80053dc:	2001      	movs	r0, #1
 80053de:	f000 fbbf 	bl	8005b60 <xQueueCreateMutex>
 80053e2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00c      	beq.n	8005404 <osMutexNew+0x110>
        if (attr != NULL) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <osMutexNew+0x104>
          name = attr->name;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e001      	b.n	80053fc <osMutexNew+0x108>
        } else {
          name = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80053fc:	6979      	ldr	r1, [r7, #20]
 80053fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005400:	f001 fa28 	bl	8006854 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d006      	beq.n	8005418 <osMutexNew+0x124>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800541a:	4618      	mov	r0, r3
 800541c:	3728      	adds	r7, #40	; 0x28
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000598 	.word	0x20000598

08005428 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b08c      	sub	sp, #48	; 0x30
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005438:	f3ef 8305 	mrs	r3, IPSR
 800543c:	61bb      	str	r3, [r7, #24]
  return(result);
 800543e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005440:	2b00      	cmp	r3, #0
 8005442:	f040 8086 	bne.w	8005552 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005446:	f3ef 8310 	mrs	r3, PRIMASK
 800544a:	617b      	str	r3, [r7, #20]
  return(result);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d17f      	bne.n	8005552 <osSemaphoreNew+0x12a>
 8005452:	4b42      	ldr	r3, [pc, #264]	; (800555c <osSemaphoreNew+0x134>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d105      	bne.n	8005466 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800545a:	f3ef 8311 	mrs	r3, BASEPRI
 800545e:	613b      	str	r3, [r7, #16]
  return(result);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d175      	bne.n	8005552 <osSemaphoreNew+0x12a>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d072      	beq.n	8005552 <osSemaphoreNew+0x12a>
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d86e      	bhi.n	8005552 <osSemaphoreNew+0x12a>
    mem = -1;
 8005474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005478:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d015      	beq.n	80054ac <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d006      	beq.n	8005496 <osSemaphoreNew+0x6e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b4f      	cmp	r3, #79	; 0x4f
 800548e:	d902      	bls.n	8005496 <osSemaphoreNew+0x6e>
        mem = 1;
 8005490:	2301      	movs	r3, #1
 8005492:	623b      	str	r3, [r7, #32]
 8005494:	e00c      	b.n	80054b0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d108      	bne.n	80054b0 <osSemaphoreNew+0x88>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <osSemaphoreNew+0x88>
          mem = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	623b      	str	r3, [r7, #32]
 80054aa:	e001      	b.n	80054b0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b6:	d04c      	beq.n	8005552 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d128      	bne.n	8005510 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d10a      	bne.n	80054da <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2203      	movs	r2, #3
 80054ca:	9200      	str	r2, [sp, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	2100      	movs	r1, #0
 80054d0:	2001      	movs	r0, #1
 80054d2:	f000 fa53 	bl	800597c <xQueueGenericCreateStatic>
 80054d6:	6278      	str	r0, [r7, #36]	; 0x24
 80054d8:	e005      	b.n	80054e6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80054da:	2203      	movs	r2, #3
 80054dc:	2100      	movs	r1, #0
 80054de:	2001      	movs	r0, #1
 80054e0:	f000 fac3 	bl	8005a6a <xQueueGenericCreate>
 80054e4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d022      	beq.n	8005532 <osSemaphoreNew+0x10a>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01f      	beq.n	8005532 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80054f2:	2300      	movs	r3, #0
 80054f4:	2200      	movs	r2, #0
 80054f6:	2100      	movs	r1, #0
 80054f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054fa:	f000 fbcf 	bl	8005c9c <xQueueGenericSend>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	d016      	beq.n	8005532 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005506:	f001 f859 	bl	80065bc <vQueueDelete>
            hSemaphore = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
 800550e:	e010      	b.n	8005532 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d108      	bne.n	8005528 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	461a      	mov	r2, r3
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fb51 	bl	8005bc6 <xQueueCreateCountingSemaphoreStatic>
 8005524:	6278      	str	r0, [r7, #36]	; 0x24
 8005526:	e004      	b.n	8005532 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fb82 	bl	8005c34 <xQueueCreateCountingSemaphore>
 8005530:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <osSemaphoreNew+0x11e>
          name = attr->name;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e001      	b.n	800554a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800554a:	69f9      	ldr	r1, [r7, #28]
 800554c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800554e:	f001 f981 	bl	8006854 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005554:	4618      	mov	r0, r3
 8005556:	3728      	adds	r7, #40	; 0x28
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000598 	.word	0x20000598

08005560 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d103      	bne.n	8005580 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005578:	f06f 0303 	mvn.w	r3, #3
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	e04b      	b.n	8005618 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005580:	f3ef 8305 	mrs	r3, IPSR
 8005584:	617b      	str	r3, [r7, #20]
  return(result);
 8005586:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10f      	bne.n	80055ac <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800558c:	f3ef 8310 	mrs	r3, PRIMASK
 8005590:	613b      	str	r3, [r7, #16]
  return(result);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <osSemaphoreAcquire+0x4c>
 8005598:	4b22      	ldr	r3, [pc, #136]	; (8005624 <osSemaphoreAcquire+0xc4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d128      	bne.n	80055f2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a0:	f3ef 8311 	mrs	r3, BASEPRI
 80055a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d022      	beq.n	80055f2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80055b2:	f06f 0303 	mvn.w	r3, #3
 80055b6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80055b8:	e02d      	b.n	8005616 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80055be:	f107 0308 	add.w	r3, r7, #8
 80055c2:	461a      	mov	r2, r3
 80055c4:	2100      	movs	r1, #0
 80055c6:	69b8      	ldr	r0, [r7, #24]
 80055c8:	f000 ff78 	bl	80064bc <xQueueReceiveFromISR>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d003      	beq.n	80055da <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80055d2:	f06f 0302 	mvn.w	r3, #2
 80055d6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80055d8:	e01d      	b.n	8005616 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01a      	beq.n	8005616 <osSemaphoreAcquire+0xb6>
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <osSemaphoreAcquire+0xc8>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80055f0:	e011      	b.n	8005616 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	69b8      	ldr	r0, [r7, #24]
 80055f6:	f000 fe55 	bl	80062a4 <xQueueSemaphoreTake>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d00b      	beq.n	8005618 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005606:	f06f 0301 	mvn.w	r3, #1
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	e004      	b.n	8005618 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800560e:	f06f 0302 	mvn.w	r3, #2
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	e000      	b.n	8005618 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005616:	bf00      	nop
      }
    }
  }

  return (stat);
 8005618:	69fb      	ldr	r3, [r7, #28]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000598 	.word	0x20000598
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005642:	f06f 0303 	mvn.w	r3, #3
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e03e      	b.n	80056c8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564a:	f3ef 8305 	mrs	r3, IPSR
 800564e:	617b      	str	r3, [r7, #20]
  return(result);
 8005650:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10f      	bne.n	8005676 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005656:	f3ef 8310 	mrs	r3, PRIMASK
 800565a:	613b      	str	r3, [r7, #16]
  return(result);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <osSemaphoreRelease+0x4a>
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <osSemaphoreRelease+0xa8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d120      	bne.n	80056ac <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800566a:	f3ef 8311 	mrs	r3, BASEPRI
 800566e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01a      	beq.n	80056ac <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4619      	mov	r1, r3
 8005680:	69b8      	ldr	r0, [r7, #24]
 8005682:	f000 fca1 	bl	8005fc8 <xQueueGiveFromISR>
 8005686:	4603      	mov	r3, r0
 8005688:	2b01      	cmp	r3, #1
 800568a:	d003      	beq.n	8005694 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800568c:	f06f 0302 	mvn.w	r3, #2
 8005690:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005692:	e018      	b.n	80056c6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d015      	beq.n	80056c6 <osSemaphoreRelease+0x9a>
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <osSemaphoreRelease+0xac>)
 800569c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056aa:	e00c      	b.n	80056c6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056ac:	2300      	movs	r3, #0
 80056ae:	2200      	movs	r2, #0
 80056b0:	2100      	movs	r1, #0
 80056b2:	69b8      	ldr	r0, [r7, #24]
 80056b4:	f000 faf2 	bl	8005c9c <xQueueGenericSend>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d004      	beq.n	80056c8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80056be:	f06f 0302 	mvn.w	r3, #2
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	e000      	b.n	80056c8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056c6:	bf00      	nop
    }
  }

  return (stat);
 80056c8:	69fb      	ldr	r3, [r7, #28]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000598 	.word	0x20000598
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a07      	ldr	r2, [pc, #28]	; (8005708 <vApplicationGetIdleTaskMemory+0x2c>)
 80056ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4a06      	ldr	r2, [pc, #24]	; (800570c <vApplicationGetIdleTaskMemory+0x30>)
 80056f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2280      	movs	r2, #128	; 0x80
 80056f8:	601a      	str	r2, [r3, #0]
}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	2000059c 	.word	0x2000059c
 800570c:	200005f8 	.word	0x200005f8

08005710 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a07      	ldr	r2, [pc, #28]	; (800573c <vApplicationGetTimerTaskMemory+0x2c>)
 8005720:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4a06      	ldr	r2, [pc, #24]	; (8005740 <vApplicationGetTimerTaskMemory+0x30>)
 8005726:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572e:	601a      	str	r2, [r3, #0]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	200007f8 	.word	0x200007f8
 8005740:	20000854 	.word	0x20000854

08005744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f103 0208 	add.w	r2, r3, #8
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800575c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f103 0208 	add.w	r2, r3, #8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f103 0208 	add.w	r2, r3, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fc:	d103      	bne.n	8005806 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e00c      	b.n	8005820 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3308      	adds	r3, #8
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e002      	b.n	8005814 <vListInsert+0x2e>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d2f6      	bcs.n	800580e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	601a      	str	r2, [r3, #0]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6892      	ldr	r2, [r2, #8]
 800586e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6852      	ldr	r2, [r2, #4]
 8005878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	429a      	cmp	r2, r3
 8005882:	d103      	bne.n	800588c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058d6:	f002 fc8d 	bl	80081f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	441a      	add	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	3b01      	subs	r3, #1
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	441a      	add	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	22ff      	movs	r2, #255	; 0xff
 800591a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d114      	bne.n	8005956 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01a      	beq.n	800596a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3310      	adds	r3, #16
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fc6d 	bl	8007218 <xTaskRemoveFromEventList>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d012      	beq.n	800596a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <xQueueGenericReset+0xcc>)
 8005946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	e009      	b.n	800596a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3310      	adds	r3, #16
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fef2 	bl	8005744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3324      	adds	r3, #36	; 0x24
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff feed 	bl	8005744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800596a:	f002 fc73 	bl	8008254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800596e:	2301      	movs	r3, #1
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	; 0x38
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <xQueueGenericCreateStatic+0x52>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <xQueueGenericCreateStatic+0x56>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueGenericCreateStatic+0x58>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	623b      	str	r3, [r7, #32]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <xQueueGenericCreateStatic+0x7e>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <xQueueGenericCreateStatic+0x82>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueGenericCreateStatic+0x84>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	61fb      	str	r3, [r7, #28]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a1a:	2350      	movs	r3, #80	; 0x50
 8005a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b50      	cmp	r3, #80	; 0x50
 8005a22:	d00a      	beq.n	8005a3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61bb      	str	r3, [r7, #24]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00d      	beq.n	8005a60 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f843 	bl	8005ae6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3730      	adds	r7, #48	; 0x30
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b08a      	sub	sp, #40	; 0x28
 8005a6e:	af02      	add	r7, sp, #8
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	4613      	mov	r3, r2
 8005a76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	613b      	str	r3, [r7, #16]
}
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	e004      	b.n	8005aaa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3350      	adds	r3, #80	; 0x50
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f002 fcc2 	bl	8008438 <pvPortMalloc>
 8005ab4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00f      	beq.n	8005adc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	3350      	adds	r3, #80	; 0x50
 8005ac0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aca:	79fa      	ldrb	r2, [r7, #7]
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f805 	bl	8005ae6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005adc:	69bb      	ldr	r3, [r7, #24]
	}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e002      	b.n	8005b08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b14:	2101      	movs	r1, #1
 8005b16:	69b8      	ldr	r0, [r7, #24]
 8005b18:	f7ff fec8 	bl	80058ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2100      	movs	r1, #0
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8a2 	bl	8005c9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6939      	ldr	r1, [r7, #16]
 8005b78:	6978      	ldr	r0, [r7, #20]
 8005b7a:	f7ff ff76 	bl	8005a6a <xQueueGenericCreate>
 8005b7e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff ffd3 	bl	8005b2c <prvInitialiseMutex>

		return pxNewQueue;
 8005b86:	68fb      	ldr	r3, [r7, #12]
	}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	4603      	mov	r3, r0
 8005b98:	6039      	str	r1, [r7, #0]
 8005b9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	6939      	ldr	r1, [r7, #16]
 8005bae:	6978      	ldr	r0, [r7, #20]
 8005bb0:	f7ff fee4 	bl	800597c <xQueueGenericCreateStatic>
 8005bb4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff ffb8 	bl	8005b2c <prvInitialiseMutex>

		return pxNewQueue;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b08a      	sub	sp, #40	; 0x28
 8005bca:	af02      	add	r7, sp, #8
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	61bb      	str	r3, [r7, #24]
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d90a      	bls.n	8005c0c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	617b      	str	r3, [r7, #20]
}
 8005c08:	bf00      	nop
 8005c0a:	e7fe      	b.n	8005c0a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	2100      	movs	r1, #0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff feb0 	bl	800597c <xQueueGenericCreateStatic>
 8005c1c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
	}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3720      	adds	r7, #32
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	613b      	str	r3, [r7, #16]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d90a      	bls.n	8005c78 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60fb      	str	r3, [r7, #12]
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c78:	2202      	movs	r2, #2
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fef4 	bl	8005a6a <xQueueGenericCreate>
 8005c82:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c90:	697b      	ldr	r3, [r7, #20]
	}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08e      	sub	sp, #56	; 0x38
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005caa:	2300      	movs	r3, #0
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xQueueGenericSend+0x32>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d103      	bne.n	8005cdc <xQueueGenericSend+0x40>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <xQueueGenericSend+0x44>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <xQueueGenericSend+0x46>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <xQueueGenericSend+0x60>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d103      	bne.n	8005d0a <xQueueGenericSend+0x6e>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <xQueueGenericSend+0x72>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericSend+0x74>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueGenericSend+0x8e>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	623b      	str	r3, [r7, #32]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2a:	f001 fc39 	bl	80075a0 <xTaskGetSchedulerState>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <xQueueGenericSend+0x9e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <xQueueGenericSend+0xa2>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <xQueueGenericSend+0xa4>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xQueueGenericSend+0xbe>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	61fb      	str	r3, [r7, #28]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d5a:	f002 fa4b 	bl	80081f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d302      	bcc.n	8005d70 <xQueueGenericSend+0xd4>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d129      	bne.n	8005dc4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d76:	f000 fc5c 	bl	8006632 <prvCopyDataToQueue>
 8005d7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d010      	beq.n	8005da6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	3324      	adds	r3, #36	; 0x24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 fa45 	bl	8007218 <xTaskRemoveFromEventList>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d94:	4b3f      	ldr	r3, [pc, #252]	; (8005e94 <xQueueGenericSend+0x1f8>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	e00a      	b.n	8005dbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005dac:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <xQueueGenericSend+0x1f8>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005dbc:	f002 fa4a 	bl	8008254 <vPortExitCritical>
				return pdPASS;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e063      	b.n	8005e8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dca:	f002 fa43 	bl	8008254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e05c      	b.n	8005e8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 fa7f 	bl	80072e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005de2:	2301      	movs	r3, #1
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005de6:	f002 fa35 	bl	8008254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dea:	f000 ffed 	bl	8006dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dee:	f002 fa01 	bl	80081f4 <vPortEnterCritical>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dfe:	d103      	bne.n	8005e08 <xQueueGenericSend+0x16c>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e0e:	b25b      	sxtb	r3, r3
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e14:	d103      	bne.n	8005e1e <xQueueGenericSend+0x182>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e1e:	f002 fa19 	bl	8008254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e22:	1d3a      	adds	r2, r7, #4
 8005e24:	f107 0314 	add.w	r3, r7, #20
 8005e28:	4611      	mov	r1, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fa6e 	bl	800730c <xTaskCheckForTimeOut>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d124      	bne.n	8005e80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e38:	f000 fcf3 	bl	8006822 <prvIsQueueFull>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d018      	beq.n	8005e74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	3310      	adds	r3, #16
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 f994 	bl	8007178 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e52:	f000 fc7e 	bl	8006752 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e56:	f000 ffc5 	bl	8006de4 <xTaskResumeAll>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f47f af7c 	bne.w	8005d5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e62:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <xQueueGenericSend+0x1f8>)
 8005e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	e772      	b.n	8005d5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e76:	f000 fc6c 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e7a:	f000 ffb3 	bl	8006de4 <xTaskResumeAll>
 8005e7e:	e76c      	b.n	8005d5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e82:	f000 fc66 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e86:	f000 ffad 	bl	8006de4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e8a:	2300      	movs	r3, #0
		}
	}
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3738      	adds	r7, #56	; 0x38
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d103      	bne.n	8005ed4 <xQueueGenericSendFromISR+0x3c>
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <xQueueGenericSendFromISR+0x40>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <xQueueGenericSendFromISR+0x42>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	623b      	str	r3, [r7, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d103      	bne.n	8005f02 <xQueueGenericSendFromISR+0x6a>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <xQueueGenericSendFromISR+0x6e>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <xQueueGenericSendFromISR+0x70>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61fb      	str	r3, [r7, #28]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f22:	f002 fa49 	bl	80083b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f26:	f3ef 8211 	mrs	r2, BASEPRI
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	61ba      	str	r2, [r7, #24]
 8005f3c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <xQueueGenericSendFromISR+0xbc>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d12c      	bne.n	8005fae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f64:	f000 fb65 	bl	8006632 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f68:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f70:	d112      	bne.n	8005f98 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d016      	beq.n	8005fa8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	3324      	adds	r3, #36	; 0x24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f94a 	bl	8007218 <xTaskRemoveFromEventList>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	e007      	b.n	8005fa8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	b25a      	sxtb	r2, r3
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005fac:	e001      	b.n	8005fb2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3738      	adds	r7, #56	; 0x38
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08e      	sub	sp, #56	; 0x38
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	623b      	str	r3, [r7, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	61fb      	str	r3, [r7, #28]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <xQueueGiveFromISR+0x58>
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <xQueueGiveFromISR+0x5c>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <xQueueGiveFromISR+0x5e>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <xQueueGiveFromISR+0x78>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	61bb      	str	r3, [r7, #24]
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006040:	f002 f9ba 	bl	80083b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006044:	f3ef 8211 	mrs	r2, BASEPRI
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	617a      	str	r2, [r7, #20]
 800605a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800605c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800606c:	429a      	cmp	r2, r3
 800606e:	d22b      	bcs.n	80060c8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006082:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800608a:	d112      	bne.n	80060b2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	d016      	beq.n	80060c2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	4618      	mov	r0, r3
 800609a:	f001 f8bd 	bl	8007218 <xTaskRemoveFromEventList>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00e      	beq.n	80060c2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e007      	b.n	80060c2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060b6:	3301      	adds	r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	b25a      	sxtb	r2, r3
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060c2:	2301      	movs	r3, #1
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
 80060c6:	e001      	b.n	80060cc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f383 8811 	msr	BASEPRI, r3
}
 80060d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3738      	adds	r7, #56	; 0x38
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08c      	sub	sp, #48	; 0x30
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <xQueueReceive+0x30>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	623b      	str	r3, [r7, #32]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <xQueueReceive+0x3e>
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <xQueueReceive+0x42>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <xQueueReceive+0x44>
 8006126:	2300      	movs	r3, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xQueueReceive+0x5e>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	61fb      	str	r3, [r7, #28]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006142:	f001 fa2d 	bl	80075a0 <xTaskGetSchedulerState>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <xQueueReceive+0x6e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <xQueueReceive+0x72>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <xQueueReceive+0x74>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xQueueReceive+0x8e>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	61bb      	str	r3, [r7, #24]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006172:	f002 f83f 	bl	80081f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01f      	beq.n	80061c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006186:	f000 fabe 	bl	8006706 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	1e5a      	subs	r2, r3, #1
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00f      	beq.n	80061ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	3310      	adds	r3, #16
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 f83a 	bl	8007218 <xTaskRemoveFromEventList>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061aa:	4b3d      	ldr	r3, [pc, #244]	; (80062a0 <xQueueReceive+0x1bc>)
 80061ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061ba:	f002 f84b 	bl	8008254 <vPortExitCritical>
				return pdPASS;
 80061be:	2301      	movs	r3, #1
 80061c0:	e069      	b.n	8006296 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061c8:	f002 f844 	bl	8008254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061cc:	2300      	movs	r3, #0
 80061ce:	e062      	b.n	8006296 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061d6:	f107 0310 	add.w	r3, r7, #16
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f880 	bl	80072e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061e4:	f002 f836 	bl	8008254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061e8:	f000 fdee 	bl	8006dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ec:	f002 f802 	bl	80081f4 <vPortEnterCritical>
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061fc:	d103      	bne.n	8006206 <xQueueReceive+0x122>
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800620c:	b25b      	sxtb	r3, r3
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006212:	d103      	bne.n	800621c <xQueueReceive+0x138>
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800621c:	f002 f81a 	bl	8008254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006220:	1d3a      	adds	r2, r7, #4
 8006222:	f107 0310 	add.w	r3, r7, #16
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f001 f86f 	bl	800730c <xTaskCheckForTimeOut>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d123      	bne.n	800627c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006236:	f000 fade 	bl	80067f6 <prvIsQueueEmpty>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d017      	beq.n	8006270 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	3324      	adds	r3, #36	; 0x24
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f000 ff95 	bl	8007178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800624e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006250:	f000 fa7f 	bl	8006752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006254:	f000 fdc6 	bl	8006de4 <xTaskResumeAll>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d189      	bne.n	8006172 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <xQueueReceive+0x1bc>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	e780      	b.n	8006172 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006272:	f000 fa6e 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006276:	f000 fdb5 	bl	8006de4 <xTaskResumeAll>
 800627a:	e77a      	b.n	8006172 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800627c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800627e:	f000 fa68 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006282:	f000 fdaf 	bl	8006de4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006288:	f000 fab5 	bl	80067f6 <prvIsQueueEmpty>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	f43f af6f 	beq.w	8006172 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006294:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006296:	4618      	mov	r0, r3
 8006298:	3730      	adds	r7, #48	; 0x30
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08e      	sub	sp, #56	; 0x38
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	623b      	str	r3, [r7, #32]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	61fb      	str	r3, [r7, #28]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062f4:	f001 f954 	bl	80075a0 <xTaskGetSchedulerState>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <xQueueSemaphoreTake+0x60>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <xQueueSemaphoreTake+0x64>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <xQueueSemaphoreTake+0x66>
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	61bb      	str	r3, [r7, #24]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006324:	f001 ff66 	bl	80081f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d024      	beq.n	800637e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	1e5a      	subs	r2, r3, #1
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006344:	f001 faac 	bl	80078a0 <pvTaskIncrementMutexHeldCount>
 8006348:	4602      	mov	r2, r0
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00f      	beq.n	8006376 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	3310      	adds	r3, #16
 800635a:	4618      	mov	r0, r3
 800635c:	f000 ff5c 	bl	8007218 <xTaskRemoveFromEventList>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d007      	beq.n	8006376 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006366:	4b54      	ldr	r3, [pc, #336]	; (80064b8 <xQueueSemaphoreTake+0x214>)
 8006368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006376:	f001 ff6d 	bl	8008254 <vPortExitCritical>
				return pdPASS;
 800637a:	2301      	movs	r3, #1
 800637c:	e097      	b.n	80064ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d111      	bne.n	80063a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	617b      	str	r3, [r7, #20]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80063a0:	f001 ff58 	bl	8008254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e082      	b.n	80064ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063ae:	f107 030c 	add.w	r3, r7, #12
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 ff94 	bl	80072e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063bc:	f001 ff4a 	bl	8008254 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063c0:	f000 fd02 	bl	8006dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063c4:	f001 ff16 	bl	80081f4 <vPortEnterCritical>
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d4:	d103      	bne.n	80063de <xQueueSemaphoreTake+0x13a>
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ea:	d103      	bne.n	80063f4 <xQueueSemaphoreTake+0x150>
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063f4:	f001 ff2e 	bl	8008254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063f8:	463a      	mov	r2, r7
 80063fa:	f107 030c 	add.w	r3, r7, #12
 80063fe:	4611      	mov	r1, r2
 8006400:	4618      	mov	r0, r3
 8006402:	f000 ff83 	bl	800730c <xTaskCheckForTimeOut>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d132      	bne.n	8006472 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800640c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800640e:	f000 f9f2 	bl	80067f6 <prvIsQueueEmpty>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d026      	beq.n	8006466 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006420:	f001 fee8 	bl	80081f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4618      	mov	r0, r3
 800642a:	f001 f8d7 	bl	80075dc <xTaskPriorityInherit>
 800642e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006430:	f001 ff10 	bl	8008254 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fe9b 	bl	8007178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006444:	f000 f985 	bl	8006752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006448:	f000 fccc 	bl	8006de4 <xTaskResumeAll>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	f47f af68 	bne.w	8006324 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006454:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <xQueueSemaphoreTake+0x214>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	e75e      	b.n	8006324 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006468:	f000 f973 	bl	8006752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800646c:	f000 fcba 	bl	8006de4 <xTaskResumeAll>
 8006470:	e758      	b.n	8006324 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006474:	f000 f96d 	bl	8006752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006478:	f000 fcb4 	bl	8006de4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800647c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800647e:	f000 f9ba 	bl	80067f6 <prvIsQueueEmpty>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	f43f af4d 	beq.w	8006324 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00d      	beq.n	80064ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006490:	f001 feb0 	bl	80081f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006496:	f000 f8b4 	bl	8006602 <prvGetDisinheritPriorityAfterTimeout>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 f976 	bl	8007794 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80064a8:	f001 fed4 	bl	8008254 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3738      	adds	r7, #56	; 0x38
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08e      	sub	sp, #56	; 0x38
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	623b      	str	r3, [r7, #32]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <xQueueReceiveFromISR+0x3a>
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <xQueueReceiveFromISR+0x3e>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <xQueueReceiveFromISR+0x40>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	61fb      	str	r3, [r7, #28]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006516:	f001 ff4f 	bl	80083b8 <vPortValidateInterruptPriority>
	__asm volatile
 800651a:	f3ef 8211 	mrs	r2, BASEPRI
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	61ba      	str	r2, [r7, #24]
 8006530:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006532:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2b00      	cmp	r3, #0
 8006540:	d02f      	beq.n	80065a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006550:	f000 f8d9 	bl	8006706 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	1e5a      	subs	r2, r3, #1
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800655c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006564:	d112      	bne.n	800658c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d016      	beq.n	800659c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	3310      	adds	r3, #16
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fe50 	bl	8007218 <xTaskRemoveFromEventList>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00e      	beq.n	800659c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	e007      	b.n	800659c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800658c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006590:	3301      	adds	r3, #1
 8006592:	b2db      	uxtb	r3, r3
 8006594:	b25a      	sxtb	r2, r3
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800659c:	2301      	movs	r3, #1
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
 80065a0:	e001      	b.n	80065a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f383 8811 	msr	BASEPRI, r3
}
 80065b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3738      	adds	r7, #56	; 0x38
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <vQueueDelete+0x28>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60bb      	str	r3, [r7, #8]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f95f 	bl	80068a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 ffe3 	bl	80085c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d006      	beq.n	8006620 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e001      	b.n	8006624 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006624:	68fb      	ldr	r3, [r7, #12]
	}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10d      	bne.n	800666c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d14d      	bne.n	80066f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	4618      	mov	r0, r3
 800665e:	f001 f82b 	bl	80076b8 <xTaskPriorityDisinherit>
 8006662:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	e043      	b.n	80066f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d119      	bne.n	80066a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6898      	ldr	r0, [r3, #8]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	461a      	mov	r2, r3
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	f002 f8d9 	bl	8008834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	441a      	add	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	d32b      	bcc.n	80066f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	609a      	str	r2, [r3, #8]
 80066a4:	e026      	b.n	80066f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68d8      	ldr	r0, [r3, #12]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	461a      	mov	r2, r3
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	f002 f8bf 	bl	8008834 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	425b      	negs	r3, r3
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d207      	bcs.n	80066e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	425b      	negs	r3, r3
 80066dc:	441a      	add	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d105      	bne.n	80066f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066fc:	697b      	ldr	r3, [r7, #20]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d018      	beq.n	800674a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	429a      	cmp	r2, r3
 8006730:	d303      	bcc.n	800673a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68d9      	ldr	r1, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	461a      	mov	r2, r3
 8006744:	6838      	ldr	r0, [r7, #0]
 8006746:	f002 f875 	bl	8008834 <memcpy>
	}
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800675a:	f001 fd4b 	bl	80081f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006764:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006766:	e011      	b.n	800678c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d012      	beq.n	8006796 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fd4f 	bl	8007218 <xTaskRemoveFromEventList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006780:	f000 fe26 	bl	80073d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	3b01      	subs	r3, #1
 8006788:	b2db      	uxtb	r3, r3
 800678a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800678c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	dce9      	bgt.n	8006768 <prvUnlockQueue+0x16>
 8006794:	e000      	b.n	8006798 <prvUnlockQueue+0x46>
					break;
 8006796:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	22ff      	movs	r2, #255	; 0xff
 800679c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067a0:	f001 fd58 	bl	8008254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067a4:	f001 fd26 	bl	80081f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067b0:	e011      	b.n	80067d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d012      	beq.n	80067e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3310      	adds	r3, #16
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fd2a 	bl	8007218 <xTaskRemoveFromEventList>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067ca:	f000 fe01 	bl	80073d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dce9      	bgt.n	80067b2 <prvUnlockQueue+0x60>
 80067de:	e000      	b.n	80067e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067ea:	f001 fd33 	bl	8008254 <vPortExitCritical>
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067fe:	f001 fcf9 	bl	80081f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e001      	b.n	8006814 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006814:	f001 fd1e 	bl	8008254 <vPortExitCritical>

	return xReturn;
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800682a:	f001 fce3 	bl	80081f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	429a      	cmp	r2, r3
 8006838:	d102      	bne.n	8006840 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800683a:	2301      	movs	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e001      	b.n	8006844 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006844:	f001 fd06 	bl	8008254 <vPortExitCritical>

	return xReturn;
 8006848:	68fb      	ldr	r3, [r7, #12]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e014      	b.n	800688e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006864:	4a0f      	ldr	r2, [pc, #60]	; (80068a4 <vQueueAddToRegistry+0x50>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006870:	490c      	ldr	r1, [pc, #48]	; (80068a4 <vQueueAddToRegistry+0x50>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800687a:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <vQueueAddToRegistry+0x50>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4413      	add	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006886:	e006      	b.n	8006896 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b07      	cmp	r3, #7
 8006892:	d9e7      	bls.n	8006864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000c54 	.word	0x20000c54

080068a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e016      	b.n	80068e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068b6:	4a10      	ldr	r2, [pc, #64]	; (80068f8 <vQueueUnregisterQueue+0x50>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	4413      	add	r3, r2
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d10b      	bne.n	80068de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80068c6:	4a0c      	ldr	r2, [pc, #48]	; (80068f8 <vQueueUnregisterQueue+0x50>)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2100      	movs	r1, #0
 80068cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80068d0:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <vQueueUnregisterQueue+0x50>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	2200      	movs	r2, #0
 80068da:	605a      	str	r2, [r3, #4]
				break;
 80068dc:	e006      	b.n	80068ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b07      	cmp	r3, #7
 80068e8:	d9e5      	bls.n	80068b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	20000c54 	.word	0x20000c54

080068fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800690c:	f001 fc72 	bl	80081f4 <vPortEnterCritical>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006916:	b25b      	sxtb	r3, r3
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800691c:	d103      	bne.n	8006926 <vQueueWaitForMessageRestricted+0x2a>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800692c:	b25b      	sxtb	r3, r3
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006932:	d103      	bne.n	800693c <vQueueWaitForMessageRestricted+0x40>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800693c:	f001 fc8a 	bl	8008254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3324      	adds	r3, #36	; 0x24
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fc35 	bl	80071c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006956:	6978      	ldr	r0, [r7, #20]
 8006958:	f7ff fefb 	bl	8006752 <prvUnlockQueue>
	}
 800695c:	bf00      	nop
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	; 0x38
 8006968:	af04      	add	r7, sp, #16
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	623b      	str	r3, [r7, #32]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <xTaskCreateStatic+0x46>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	61fb      	str	r3, [r7, #28]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069aa:	235c      	movs	r3, #92	; 0x5c
 80069ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b5c      	cmp	r3, #92	; 0x5c
 80069b2:	d00a      	beq.n	80069ca <xTaskCreateStatic+0x66>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	61bb      	str	r3, [r7, #24]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01e      	beq.n	8006a0e <xTaskCreateStatic+0xaa>
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01b      	beq.n	8006a0e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069e8:	2300      	movs	r3, #0
 80069ea:	9303      	str	r3, [sp, #12]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	9302      	str	r3, [sp, #8]
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f850 	bl	8006aa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a08:	f000 f8d4 	bl	8006bb4 <prvAddNewTaskToReadyList>
 8006a0c:	e001      	b.n	8006a12 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a12:	697b      	ldr	r3, [r7, #20]
	}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3728      	adds	r7, #40	; 0x28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08c      	sub	sp, #48	; 0x30
 8006a20:	af04      	add	r7, sp, #16
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 fd01 	bl	8008438 <pvPortMalloc>
 8006a36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006a3e:	205c      	movs	r0, #92	; 0x5c
 8006a40:	f001 fcfa 	bl	8008438 <pvPortMalloc>
 8006a44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	631a      	str	r2, [r3, #48]	; 0x30
 8006a52:	e005      	b.n	8006a60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a54:	6978      	ldr	r0, [r7, #20]
 8006a56:	f001 fdb3 	bl	80085c0 <vPortFree>
 8006a5a:	e001      	b.n	8006a60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d017      	beq.n	8006a96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	2300      	movs	r3, #0
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	9302      	str	r3, [sp, #8]
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f80e 	bl	8006aa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a8a:	69f8      	ldr	r0, [r7, #28]
 8006a8c:	f000 f892 	bl	8006bb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a90:	2301      	movs	r3, #1
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	e002      	b.n	8006a9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
	}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b088      	sub	sp, #32
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
 8006ab2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	461a      	mov	r2, r3
 8006abe:	21a5      	movs	r1, #165	; 0xa5
 8006ac0:	f001 fec6 	bl	8008850 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	f023 0307 	bic.w	r3, r3, #7
 8006adc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	617b      	str	r3, [r7, #20]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e012      	b.n	8006b2a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	7819      	ldrb	r1, [r3, #0]
 8006b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	3334      	adds	r3, #52	; 0x34
 8006b14:	460a      	mov	r2, r1
 8006b16:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b0f      	cmp	r3, #15
 8006b2e:	d9e9      	bls.n	8006b04 <prvInitialiseNewTask+0x5e>
 8006b30:	e000      	b.n	8006b34 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006b32:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	2b37      	cmp	r3, #55	; 0x37
 8006b40:	d901      	bls.n	8006b46 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b42:	2337      	movs	r3, #55	; 0x37
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	2200      	movs	r2, #0
 8006b56:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fe11 	bl	8005784 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	3318      	adds	r3, #24
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fe0c 	bl	8005784 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	2200      	movs	r2, #0
 8006b86:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	69b8      	ldr	r0, [r7, #24]
 8006b96:	f001 f9fd 	bl	8007f94 <pxPortInitialiseStack>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bac:	bf00      	nop
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bbc:	f001 fb1a 	bl	80081f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bc0:	4b2d      	ldr	r3, [pc, #180]	; (8006c78 <prvAddNewTaskToReadyList+0xc4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <prvAddNewTaskToReadyList+0xc4>)
 8006bc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bca:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <prvAddNewTaskToReadyList+0xc8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bd2:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <prvAddNewTaskToReadyList+0xc8>)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bd8:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <prvAddNewTaskToReadyList+0xc4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d110      	bne.n	8006c02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006be0:	f000 fc1a 	bl	8007418 <prvInitialiseTaskLists>
 8006be4:	e00d      	b.n	8006c02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006be6:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <prvAddNewTaskToReadyList+0xcc>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bee:	4b23      	ldr	r3, [pc, #140]	; (8006c7c <prvAddNewTaskToReadyList+0xc8>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d802      	bhi.n	8006c02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bfc:	4a1f      	ldr	r2, [pc, #124]	; (8006c7c <prvAddNewTaskToReadyList+0xc8>)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c02:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <prvAddNewTaskToReadyList+0xd0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	4a1e      	ldr	r2, [pc, #120]	; (8006c84 <prvAddNewTaskToReadyList+0xd0>)
 8006c0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c0c:	4b1d      	ldr	r3, [pc, #116]	; (8006c84 <prvAddNewTaskToReadyList+0xd0>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c18:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <prvAddNewTaskToReadyList+0xd4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d903      	bls.n	8006c28 <prvAddNewTaskToReadyList+0x74>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <prvAddNewTaskToReadyList+0xd4>)
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <prvAddNewTaskToReadyList+0xd8>)
 8006c36:	441a      	add	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f7fe fdad 	bl	800579e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c44:	f001 fb06 	bl	8008254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <prvAddNewTaskToReadyList+0xcc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <prvAddNewTaskToReadyList+0xc8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d207      	bcs.n	8006c6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <prvAddNewTaskToReadyList+0xdc>)
 8006c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20001168 	.word	0x20001168
 8006c7c:	20000c94 	.word	0x20000c94
 8006c80:	20001174 	.word	0x20001174
 8006c84:	20001184 	.word	0x20001184
 8006c88:	20001170 	.word	0x20001170
 8006c8c:	20000c98 	.word	0x20000c98
 8006c90:	e000ed04 	.word	0xe000ed04

08006c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d017      	beq.n	8006cd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ca6:	4b13      	ldr	r3, [pc, #76]	; (8006cf4 <vTaskDelay+0x60>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <vTaskDelay+0x30>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60bb      	str	r3, [r7, #8]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cc4:	f000 f880 	bl	8006dc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cc8:	2100      	movs	r1, #0
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fdfc 	bl	80078c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cd0:	f000 f888 	bl	8006de4 <xTaskResumeAll>
 8006cd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d107      	bne.n	8006cec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006cdc:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <vTaskDelay+0x64>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20001190 	.word	0x20001190
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	; 0x28
 8006d00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d0a:	463a      	mov	r2, r7
 8006d0c:	1d39      	adds	r1, r7, #4
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe fce2 	bl	80056dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	9202      	str	r2, [sp, #8]
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	2300      	movs	r3, #0
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	2300      	movs	r3, #0
 8006d28:	460a      	mov	r2, r1
 8006d2a:	4921      	ldr	r1, [pc, #132]	; (8006db0 <vTaskStartScheduler+0xb4>)
 8006d2c:	4821      	ldr	r0, [pc, #132]	; (8006db4 <vTaskStartScheduler+0xb8>)
 8006d2e:	f7ff fe19 	bl	8006964 <xTaskCreateStatic>
 8006d32:	4603      	mov	r3, r0
 8006d34:	4a20      	ldr	r2, [pc, #128]	; (8006db8 <vTaskStartScheduler+0xbc>)
 8006d36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d38:	4b1f      	ldr	r3, [pc, #124]	; (8006db8 <vTaskStartScheduler+0xbc>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d40:	2301      	movs	r3, #1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e001      	b.n	8006d4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d102      	bne.n	8006d56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d50:	f000 fe0e 	bl	8007970 <xTimerCreateTimerTask>
 8006d54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d116      	bne.n	8006d8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	613b      	str	r3, [r7, #16]
}
 8006d6e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d70:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <vTaskStartScheduler+0xc0>)
 8006d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d78:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <vTaskStartScheduler+0xc4>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <vTaskStartScheduler+0xc8>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d84:	f001 f994 	bl	80080b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d88:	e00e      	b.n	8006da8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d90:	d10a      	bne.n	8006da8 <vTaskStartScheduler+0xac>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	60fb      	str	r3, [r7, #12]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <vTaskStartScheduler+0xaa>
}
 8006da8:	bf00      	nop
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	080088c0 	.word	0x080088c0
 8006db4:	080073e9 	.word	0x080073e9
 8006db8:	2000118c 	.word	0x2000118c
 8006dbc:	20001188 	.word	0x20001188
 8006dc0:	20001174 	.word	0x20001174
 8006dc4:	2000116c 	.word	0x2000116c

08006dc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006dcc:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <vTaskSuspendAll+0x18>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	4a03      	ldr	r2, [pc, #12]	; (8006de0 <vTaskSuspendAll+0x18>)
 8006dd4:	6013      	str	r3, [r2, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20001190 	.word	0x20001190

08006de4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006df2:	4b42      	ldr	r3, [pc, #264]	; (8006efc <xTaskResumeAll+0x118>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	603b      	str	r3, [r7, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e10:	f001 f9f0 	bl	80081f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e14:	4b39      	ldr	r3, [pc, #228]	; (8006efc <xTaskResumeAll+0x118>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	4a38      	ldr	r2, [pc, #224]	; (8006efc <xTaskResumeAll+0x118>)
 8006e1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e1e:	4b37      	ldr	r3, [pc, #220]	; (8006efc <xTaskResumeAll+0x118>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d162      	bne.n	8006eec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e26:	4b36      	ldr	r3, [pc, #216]	; (8006f00 <xTaskResumeAll+0x11c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d05e      	beq.n	8006eec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e2e:	e02f      	b.n	8006e90 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e30:	4b34      	ldr	r3, [pc, #208]	; (8006f04 <xTaskResumeAll+0x120>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3318      	adds	r3, #24
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe fd0b 	bl	8005858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fd06 	bl	8005858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <xTaskResumeAll+0x124>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d903      	bls.n	8006e60 <xTaskResumeAll+0x7c>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	4a2a      	ldr	r2, [pc, #168]	; (8006f08 <xTaskResumeAll+0x124>)
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4a27      	ldr	r2, [pc, #156]	; (8006f0c <xTaskResumeAll+0x128>)
 8006e6e:	441a      	add	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f7fe fc91 	bl	800579e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <xTaskResumeAll+0x12c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d302      	bcc.n	8006e90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e8a:	4b22      	ldr	r3, [pc, #136]	; (8006f14 <xTaskResumeAll+0x130>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e90:	4b1c      	ldr	r3, [pc, #112]	; (8006f04 <xTaskResumeAll+0x120>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1cb      	bne.n	8006e30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e9e:	f000 fb59 	bl	8007554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ea2:	4b1d      	ldr	r3, [pc, #116]	; (8006f18 <xTaskResumeAll+0x134>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006eae:	f000 f847 	bl	8006f40 <xTaskIncrementTick>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006eb8:	4b16      	ldr	r3, [pc, #88]	; (8006f14 <xTaskResumeAll+0x130>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f1      	bne.n	8006eae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <xTaskResumeAll+0x134>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ed0:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <xTaskResumeAll+0x130>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006edc:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <xTaskResumeAll+0x138>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006eec:	f001 f9b2 	bl	8008254 <vPortExitCritical>

	return xAlreadyYielded;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20001190 	.word	0x20001190
 8006f00:	20001168 	.word	0x20001168
 8006f04:	20001128 	.word	0x20001128
 8006f08:	20001170 	.word	0x20001170
 8006f0c:	20000c98 	.word	0x20000c98
 8006f10:	20000c94 	.word	0x20000c94
 8006f14:	2000117c 	.word	0x2000117c
 8006f18:	20001178 	.word	0x20001178
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <xTaskGetTickCount+0x1c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f2c:	687b      	ldr	r3, [r7, #4]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2000116c 	.word	0x2000116c

08006f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4a:	4b51      	ldr	r3, [pc, #324]	; (8007090 <xTaskIncrementTick+0x150>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f040 808e 	bne.w	8007070 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f54:	4b4f      	ldr	r3, [pc, #316]	; (8007094 <xTaskIncrementTick+0x154>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f5c:	4a4d      	ldr	r2, [pc, #308]	; (8007094 <xTaskIncrementTick+0x154>)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d120      	bne.n	8006faa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f68:	4b4b      	ldr	r3, [pc, #300]	; (8007098 <xTaskIncrementTick+0x158>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	603b      	str	r3, [r7, #0]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <xTaskIncrementTick+0x46>
 8006f88:	4b43      	ldr	r3, [pc, #268]	; (8007098 <xTaskIncrementTick+0x158>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	4b43      	ldr	r3, [pc, #268]	; (800709c <xTaskIncrementTick+0x15c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a41      	ldr	r2, [pc, #260]	; (8007098 <xTaskIncrementTick+0x158>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	4a41      	ldr	r2, [pc, #260]	; (800709c <xTaskIncrementTick+0x15c>)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	4b40      	ldr	r3, [pc, #256]	; (80070a0 <xTaskIncrementTick+0x160>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	4a3f      	ldr	r2, [pc, #252]	; (80070a0 <xTaskIncrementTick+0x160>)
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	f000 fad5 	bl	8007554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006faa:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <xTaskIncrementTick+0x164>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d34e      	bcc.n	8007052 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb4:	4b38      	ldr	r3, [pc, #224]	; (8007098 <xTaskIncrementTick+0x158>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xTaskIncrementTick+0x82>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xTaskIncrementTick+0x84>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc8:	4b36      	ldr	r3, [pc, #216]	; (80070a4 <xTaskIncrementTick+0x164>)
 8006fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fce:	601a      	str	r2, [r3, #0]
					break;
 8006fd0:	e03f      	b.n	8007052 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006fd2:	4b31      	ldr	r3, [pc, #196]	; (8007098 <xTaskIncrementTick+0x158>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d203      	bcs.n	8006ff2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fea:	4a2e      	ldr	r2, [pc, #184]	; (80070a4 <xTaskIncrementTick+0x164>)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6013      	str	r3, [r2, #0]
						break;
 8006ff0:	e02f      	b.n	8007052 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fc2e 	bl	8005858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	2b00      	cmp	r3, #0
 8007002:	d004      	beq.n	800700e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3318      	adds	r3, #24
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fc25 	bl	8005858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007012:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <xTaskIncrementTick+0x168>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d903      	bls.n	8007022 <xTaskIncrementTick+0xe2>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <xTaskIncrementTick+0x168>)
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4a1f      	ldr	r2, [pc, #124]	; (80070ac <xTaskIncrementTick+0x16c>)
 8007030:	441a      	add	r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3304      	adds	r3, #4
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f7fe fbb0 	bl	800579e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <xTaskIncrementTick+0x170>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	429a      	cmp	r2, r3
 800704a:	d3b3      	bcc.n	8006fb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007050:	e7b0      	b.n	8006fb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007052:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <xTaskIncrementTick+0x170>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007058:	4914      	ldr	r1, [pc, #80]	; (80070ac <xTaskIncrementTick+0x16c>)
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d907      	bls.n	800707a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800706a:	2301      	movs	r3, #1
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	e004      	b.n	800707a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007070:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <xTaskIncrementTick+0x174>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	4a0f      	ldr	r2, [pc, #60]	; (80070b4 <xTaskIncrementTick+0x174>)
 8007078:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800707a:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <xTaskIncrementTick+0x178>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007082:	2301      	movs	r3, #1
 8007084:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007086:	697b      	ldr	r3, [r7, #20]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001190 	.word	0x20001190
 8007094:	2000116c 	.word	0x2000116c
 8007098:	20001120 	.word	0x20001120
 800709c:	20001124 	.word	0x20001124
 80070a0:	20001180 	.word	0x20001180
 80070a4:	20001188 	.word	0x20001188
 80070a8:	20001170 	.word	0x20001170
 80070ac:	20000c98 	.word	0x20000c98
 80070b0:	20000c94 	.word	0x20000c94
 80070b4:	20001178 	.word	0x20001178
 80070b8:	2000117c 	.word	0x2000117c

080070bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070c2:	4b28      	ldr	r3, [pc, #160]	; (8007164 <vTaskSwitchContext+0xa8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070ca:	4b27      	ldr	r3, [pc, #156]	; (8007168 <vTaskSwitchContext+0xac>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070d0:	e041      	b.n	8007156 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80070d2:	4b25      	ldr	r3, [pc, #148]	; (8007168 <vTaskSwitchContext+0xac>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80070d8:	4b24      	ldr	r3, [pc, #144]	; (800716c <vTaskSwitchContext+0xb0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	e010      	b.n	8007102 <vTaskSwitchContext+0x46>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <vTaskSwitchContext+0x40>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	607b      	str	r3, [r7, #4]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <vTaskSwitchContext+0x3e>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3b01      	subs	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	491b      	ldr	r1, [pc, #108]	; (8007170 <vTaskSwitchContext+0xb4>)
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0e4      	beq.n	80070e0 <vTaskSwitchContext+0x24>
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4a13      	ldr	r2, [pc, #76]	; (8007170 <vTaskSwitchContext+0xb4>)
 8007122:	4413      	add	r3, r2
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	605a      	str	r2, [r3, #4]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	3308      	adds	r3, #8
 8007138:	429a      	cmp	r2, r3
 800713a:	d104      	bne.n	8007146 <vTaskSwitchContext+0x8a>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	605a      	str	r2, [r3, #4]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a09      	ldr	r2, [pc, #36]	; (8007174 <vTaskSwitchContext+0xb8>)
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4a06      	ldr	r2, [pc, #24]	; (800716c <vTaskSwitchContext+0xb0>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6013      	str	r3, [r2, #0]
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20001190 	.word	0x20001190
 8007168:	2000117c 	.word	0x2000117c
 800716c:	20001170 	.word	0x20001170
 8007170:	20000c98 	.word	0x20000c98
 8007174:	20000c94 	.word	0x20000c94

08007178 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	60fb      	str	r3, [r7, #12]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800719e:	4b07      	ldr	r3, [pc, #28]	; (80071bc <vTaskPlaceOnEventList+0x44>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3318      	adds	r3, #24
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fe fb1d 	bl	80057e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071ac:	2101      	movs	r1, #1
 80071ae:	6838      	ldr	r0, [r7, #0]
 80071b0:	f000 fb8a 	bl	80078c8 <prvAddCurrentTaskToDelayedList>
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000c94 	.word	0x20000c94

080071c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	617b      	str	r3, [r7, #20]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <vTaskPlaceOnEventListRestricted+0x54>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3318      	adds	r3, #24
 80071ee:	4619      	mov	r1, r3
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7fe fad4 	bl	800579e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007200:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	68b8      	ldr	r0, [r7, #8]
 8007206:	f000 fb5f 	bl	80078c8 <prvAddCurrentTaskToDelayedList>
	}
 800720a:	bf00      	nop
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000c94 	.word	0x20000c94

08007218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	60fb      	str	r3, [r7, #12]
}
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	3318      	adds	r3, #24
 8007248:	4618      	mov	r0, r3
 800724a:	f7fe fb05 	bl	8005858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800724e:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <xTaskRemoveFromEventList+0xb0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d11d      	bne.n	8007292 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3304      	adds	r3, #4
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fafc 	bl	8005858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007264:	4b19      	ldr	r3, [pc, #100]	; (80072cc <xTaskRemoveFromEventList+0xb4>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d903      	bls.n	8007274 <xTaskRemoveFromEventList+0x5c>
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	4a16      	ldr	r2, [pc, #88]	; (80072cc <xTaskRemoveFromEventList+0xb4>)
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <xTaskRemoveFromEventList+0xb8>)
 8007282:	441a      	add	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	3304      	adds	r3, #4
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f7fe fa87 	bl	800579e <vListInsertEnd>
 8007290:	e005      	b.n	800729e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	3318      	adds	r3, #24
 8007296:	4619      	mov	r1, r3
 8007298:	480e      	ldr	r0, [pc, #56]	; (80072d4 <xTaskRemoveFromEventList+0xbc>)
 800729a:	f7fe fa80 	bl	800579e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <xTaskRemoveFromEventList+0xc0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d905      	bls.n	80072b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <xTaskRemoveFromEventList+0xc4>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	e001      	b.n	80072bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80072bc:	697b      	ldr	r3, [r7, #20]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20001190 	.word	0x20001190
 80072cc:	20001170 	.word	0x20001170
 80072d0:	20000c98 	.word	0x20000c98
 80072d4:	20001128 	.word	0x20001128
 80072d8:	20000c94 	.word	0x20000c94
 80072dc:	2000117c 	.word	0x2000117c

080072e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072e8:	4b06      	ldr	r3, [pc, #24]	; (8007304 <vTaskInternalSetTimeOutState+0x24>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <vTaskInternalSetTimeOutState+0x28>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	605a      	str	r2, [r3, #4]
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	20001180 	.word	0x20001180
 8007308:	2000116c 	.word	0x2000116c

0800730c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	613b      	str	r3, [r7, #16]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60fb      	str	r3, [r7, #12]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800734e:	f000 ff51 	bl	80081f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007352:	4b1d      	ldr	r3, [pc, #116]	; (80073c8 <xTaskCheckForTimeOut+0xbc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800736a:	d102      	bne.n	8007372 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800736c:	2300      	movs	r3, #0
 800736e:	61fb      	str	r3, [r7, #28]
 8007370:	e023      	b.n	80073ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b15      	ldr	r3, [pc, #84]	; (80073cc <xTaskCheckForTimeOut+0xc0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d007      	beq.n	800738e <xTaskCheckForTimeOut+0x82>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	429a      	cmp	r2, r3
 8007386:	d302      	bcc.n	800738e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007388:	2301      	movs	r3, #1
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e015      	b.n	80073ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	429a      	cmp	r2, r3
 8007396:	d20b      	bcs.n	80073b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff ff9b 	bl	80072e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	61fb      	str	r3, [r7, #28]
 80073ae:	e004      	b.n	80073ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073ba:	f000 ff4b 	bl	8008254 <vPortExitCritical>

	return xReturn;
 80073be:	69fb      	ldr	r3, [r7, #28]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	2000116c 	.word	0x2000116c
 80073cc:	20001180 	.word	0x20001180

080073d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073d4:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <vTaskMissedYield+0x14>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
}
 80073da:	bf00      	nop
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	2000117c 	.word	0x2000117c

080073e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073f0:	f000 f852 	bl	8007498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <prvIdleTask+0x28>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d9f9      	bls.n	80073f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <prvIdleTask+0x2c>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800740c:	e7f0      	b.n	80073f0 <prvIdleTask+0x8>
 800740e:	bf00      	nop
 8007410:	20000c98 	.word	0x20000c98
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800741e:	2300      	movs	r3, #0
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	e00c      	b.n	800743e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4a12      	ldr	r2, [pc, #72]	; (8007478 <prvInitialiseTaskLists+0x60>)
 8007430:	4413      	add	r3, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe f986 	bl	8005744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3301      	adds	r3, #1
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b37      	cmp	r3, #55	; 0x37
 8007442:	d9ef      	bls.n	8007424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007444:	480d      	ldr	r0, [pc, #52]	; (800747c <prvInitialiseTaskLists+0x64>)
 8007446:	f7fe f97d 	bl	8005744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800744a:	480d      	ldr	r0, [pc, #52]	; (8007480 <prvInitialiseTaskLists+0x68>)
 800744c:	f7fe f97a 	bl	8005744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007450:	480c      	ldr	r0, [pc, #48]	; (8007484 <prvInitialiseTaskLists+0x6c>)
 8007452:	f7fe f977 	bl	8005744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007456:	480c      	ldr	r0, [pc, #48]	; (8007488 <prvInitialiseTaskLists+0x70>)
 8007458:	f7fe f974 	bl	8005744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800745c:	480b      	ldr	r0, [pc, #44]	; (800748c <prvInitialiseTaskLists+0x74>)
 800745e:	f7fe f971 	bl	8005744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <prvInitialiseTaskLists+0x78>)
 8007464:	4a05      	ldr	r2, [pc, #20]	; (800747c <prvInitialiseTaskLists+0x64>)
 8007466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <prvInitialiseTaskLists+0x7c>)
 800746a:	4a05      	ldr	r2, [pc, #20]	; (8007480 <prvInitialiseTaskLists+0x68>)
 800746c:	601a      	str	r2, [r3, #0]
}
 800746e:	bf00      	nop
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000c98 	.word	0x20000c98
 800747c:	200010f8 	.word	0x200010f8
 8007480:	2000110c 	.word	0x2000110c
 8007484:	20001128 	.word	0x20001128
 8007488:	2000113c 	.word	0x2000113c
 800748c:	20001154 	.word	0x20001154
 8007490:	20001120 	.word	0x20001120
 8007494:	20001124 	.word	0x20001124

08007498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800749e:	e019      	b.n	80074d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074a0:	f000 fea8 	bl	80081f4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80074a4:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <prvCheckTasksWaitingTermination+0x50>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe f9d1 	bl	8005858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074b6:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <prvCheckTasksWaitingTermination+0x54>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <prvCheckTasksWaitingTermination+0x54>)
 80074be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <prvCheckTasksWaitingTermination+0x58>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <prvCheckTasksWaitingTermination+0x58>)
 80074c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074ca:	f000 fec3 	bl	8008254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f810 	bl	80074f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074d4:	4b06      	ldr	r3, [pc, #24]	; (80074f0 <prvCheckTasksWaitingTermination+0x58>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e1      	bne.n	80074a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	2000113c 	.word	0x2000113c
 80074ec:	20001168 	.word	0x20001168
 80074f0:	20001150 	.word	0x20001150

080074f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007502:	2b00      	cmp	r3, #0
 8007504:	d108      	bne.n	8007518 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	4618      	mov	r0, r3
 800750c:	f001 f858 	bl	80085c0 <vPortFree>
				vPortFree( pxTCB );
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f001 f855 	bl	80085c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007516:	e018      	b.n	800754a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800751e:	2b01      	cmp	r3, #1
 8007520:	d103      	bne.n	800752a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 f84c 	bl	80085c0 <vPortFree>
	}
 8007528:	e00f      	b.n	800754a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007530:	2b02      	cmp	r3, #2
 8007532:	d00a      	beq.n	800754a <prvDeleteTCB+0x56>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	60fb      	str	r3, [r7, #12]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <prvDeleteTCB+0x54>
	}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800755a:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <prvResetNextTaskUnblockTime+0x44>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <prvResetNextTaskUnblockTime+0x14>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <prvResetNextTaskUnblockTime+0x16>
 8007568:	2300      	movs	r3, #0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800756e:	4b0b      	ldr	r3, [pc, #44]	; (800759c <prvResetNextTaskUnblockTime+0x48>)
 8007570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007574:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007576:	e008      	b.n	800758a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007578:	4b07      	ldr	r3, [pc, #28]	; (8007598 <prvResetNextTaskUnblockTime+0x44>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	4a05      	ldr	r2, [pc, #20]	; (800759c <prvResetNextTaskUnblockTime+0x48>)
 8007588:	6013      	str	r3, [r2, #0]
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	20001120 	.word	0x20001120
 800759c:	20001188 	.word	0x20001188

080075a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <xTaskGetSchedulerState+0x34>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ae:	2301      	movs	r3, #1
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	e008      	b.n	80075c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <xTaskGetSchedulerState+0x38>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075bc:	2302      	movs	r3, #2
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	e001      	b.n	80075c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075c6:	687b      	ldr	r3, [r7, #4]
	}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	20001174 	.word	0x20001174
 80075d8:	20001190 	.word	0x20001190

080075dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d056      	beq.n	80076a0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	4b2d      	ldr	r3, [pc, #180]	; (80076ac <xTaskPriorityInherit+0xd0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d246      	bcs.n	800768e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	db06      	blt.n	8007616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007608:	4b28      	ldr	r3, [pc, #160]	; (80076ac <xTaskPriorityInherit+0xd0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6959      	ldr	r1, [r3, #20]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4a22      	ldr	r2, [pc, #136]	; (80076b0 <xTaskPriorityInherit+0xd4>)
 8007628:	4413      	add	r3, r2
 800762a:	4299      	cmp	r1, r3
 800762c:	d101      	bne.n	8007632 <xTaskPriorityInherit+0x56>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <xTaskPriorityInherit+0x58>
 8007632:	2300      	movs	r3, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d022      	beq.n	800767e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	3304      	adds	r3, #4
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe f90b 	bl	8005858 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007642:	4b1a      	ldr	r3, [pc, #104]	; (80076ac <xTaskPriorityInherit+0xd0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <xTaskPriorityInherit+0xd8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d903      	bls.n	8007660 <xTaskPriorityInherit+0x84>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <xTaskPriorityInherit+0xd8>)
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4a10      	ldr	r2, [pc, #64]	; (80076b0 <xTaskPriorityInherit+0xd4>)
 800766e:	441a      	add	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f7fe f891 	bl	800579e <vListInsertEnd>
 800767c:	e004      	b.n	8007688 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800767e:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <xTaskPriorityInherit+0xd0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007688:	2301      	movs	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e008      	b.n	80076a0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <xTaskPriorityInherit+0xd0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	429a      	cmp	r2, r3
 800769a:	d201      	bcs.n	80076a0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800769c:	2301      	movs	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076a0:	68fb      	ldr	r3, [r7, #12]
	}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000c94 	.word	0x20000c94
 80076b0:	20000c98 	.word	0x20000c98
 80076b4:	20001170 	.word	0x20001170

080076b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d056      	beq.n	800777c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076ce:	4b2e      	ldr	r3, [pc, #184]	; (8007788 <xTaskPriorityDisinherit+0xd0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d00a      	beq.n	80076ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60bb      	str	r3, [r7, #8]
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007710:	1e5a      	subs	r2, r3, #1
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771e:	429a      	cmp	r2, r3
 8007720:	d02c      	beq.n	800777c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007726:	2b00      	cmp	r3, #0
 8007728:	d128      	bne.n	800777c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3304      	adds	r3, #4
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe f892 	bl	8005858 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774c:	4b0f      	ldr	r3, [pc, #60]	; (800778c <xTaskPriorityDisinherit+0xd4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d903      	bls.n	800775c <xTaskPriorityDisinherit+0xa4>
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	4a0c      	ldr	r2, [pc, #48]	; (800778c <xTaskPriorityDisinherit+0xd4>)
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4a09      	ldr	r2, [pc, #36]	; (8007790 <xTaskPriorityDisinherit+0xd8>)
 800776a:	441a      	add	r2, r3
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	3304      	adds	r3, #4
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f7fe f813 	bl	800579e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007778:	2301      	movs	r3, #1
 800777a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800777c:	697b      	ldr	r3, [r7, #20]
	}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000c94 	.word	0x20000c94
 800778c:	20001170 	.word	0x20001170
 8007790:	20000c98 	.word	0x20000c98

08007794 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077a2:	2301      	movs	r3, #1
 80077a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d06f      	beq.n	800788c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	60fb      	str	r3, [r7, #12]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d902      	bls.n	80077da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	e002      	b.n	80077e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d050      	beq.n	800788c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d14b      	bne.n	800788c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80077f4:	4b27      	ldr	r3, [pc, #156]	; (8007894 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d10a      	bne.n	8007814 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	60bb      	str	r3, [r7, #8]
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	db04      	blt.n	8007832 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	6959      	ldr	r1, [r3, #20]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4a15      	ldr	r2, [pc, #84]	; (8007898 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007842:	4413      	add	r3, r2
 8007844:	4299      	cmp	r1, r3
 8007846:	d101      	bne.n	800784c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800784c:	2300      	movs	r3, #0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01c      	beq.n	800788c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	3304      	adds	r3, #4
 8007856:	4618      	mov	r0, r3
 8007858:	f7fd fffe 	bl	8005858 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007860:	4b0e      	ldr	r3, [pc, #56]	; (800789c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d903      	bls.n	8007870 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	4a0b      	ldr	r2, [pc, #44]	; (800789c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4a06      	ldr	r2, [pc, #24]	; (8007898 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800787e:	441a      	add	r2, r3
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	3304      	adds	r3, #4
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f7fd ff89 	bl	800579e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800788c:	bf00      	nop
 800788e:	3720      	adds	r7, #32
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	20000c94 	.word	0x20000c94
 8007898:	20000c98 	.word	0x20000c98
 800789c:	20001170 	.word	0x20001170

080078a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078a4:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078b2:	3201      	adds	r2, #1
 80078b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80078b6:	4b03      	ldr	r3, [pc, #12]	; (80078c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078b8:	681b      	ldr	r3, [r3, #0]
	}
 80078ba:	4618      	mov	r0, r3
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	20000c94 	.word	0x20000c94

080078c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078d2:	4b21      	ldr	r3, [pc, #132]	; (8007958 <prvAddCurrentTaskToDelayedList+0x90>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d8:	4b20      	ldr	r3, [pc, #128]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3304      	adds	r3, #4
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fd ffba 	bl	8005858 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ea:	d10a      	bne.n	8007902 <prvAddCurrentTaskToDelayedList+0x3a>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078f2:	4b1a      	ldr	r3, [pc, #104]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4819      	ldr	r0, [pc, #100]	; (8007960 <prvAddCurrentTaskToDelayedList+0x98>)
 80078fc:	f7fd ff4f 	bl	800579e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007900:	e026      	b.n	8007950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4413      	add	r3, r2
 8007908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800790a:	4b14      	ldr	r3, [pc, #80]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	429a      	cmp	r2, r3
 8007918:	d209      	bcs.n	800792e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fd ff5d 	bl	80057e6 <vListInsert>
}
 800792c:	e010      	b.n	8007950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800792e:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4b0a      	ldr	r3, [pc, #40]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3304      	adds	r3, #4
 8007938:	4619      	mov	r1, r3
 800793a:	4610      	mov	r0, r2
 800793c:	f7fd ff53 	bl	80057e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007940:	4b0a      	ldr	r3, [pc, #40]	; (800796c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	429a      	cmp	r2, r3
 8007948:	d202      	bcs.n	8007950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800794a:	4a08      	ldr	r2, [pc, #32]	; (800796c <prvAddCurrentTaskToDelayedList+0xa4>)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6013      	str	r3, [r2, #0]
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	2000116c 	.word	0x2000116c
 800795c:	20000c94 	.word	0x20000c94
 8007960:	20001154 	.word	0x20001154
 8007964:	20001124 	.word	0x20001124
 8007968:	20001120 	.word	0x20001120
 800796c:	20001188 	.word	0x20001188

08007970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800797a:	f000 facb 	bl	8007f14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800797e:	4b1c      	ldr	r3, [pc, #112]	; (80079f0 <xTimerCreateTimerTask+0x80>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d021      	beq.n	80079ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800798a:	2300      	movs	r3, #0
 800798c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800798e:	1d3a      	adds	r2, r7, #4
 8007990:	f107 0108 	add.w	r1, r7, #8
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4618      	mov	r0, r3
 800799a:	f7fd feb9 	bl	8005710 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	9202      	str	r2, [sp, #8]
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	2302      	movs	r3, #2
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	2300      	movs	r3, #0
 80079ae:	460a      	mov	r2, r1
 80079b0:	4910      	ldr	r1, [pc, #64]	; (80079f4 <xTimerCreateTimerTask+0x84>)
 80079b2:	4811      	ldr	r0, [pc, #68]	; (80079f8 <xTimerCreateTimerTask+0x88>)
 80079b4:	f7fe ffd6 	bl	8006964 <xTaskCreateStatic>
 80079b8:	4603      	mov	r3, r0
 80079ba:	4a10      	ldr	r2, [pc, #64]	; (80079fc <xTimerCreateTimerTask+0x8c>)
 80079bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <xTimerCreateTimerTask+0x8c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079c6:	2301      	movs	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	613b      	str	r3, [r7, #16]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079e6:	697b      	ldr	r3, [r7, #20]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	200011c4 	.word	0x200011c4
 80079f4:	080088c8 	.word	0x080088c8
 80079f8:	08007b1d 	.word	0x08007b1d
 80079fc:	200011c8 	.word	0x200011c8

08007a00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	; 0x28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	623b      	str	r3, [r7, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <xTimerGenericCommand+0x98>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02a      	beq.n	8007a8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	dc18      	bgt.n	8007a7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a48:	f7ff fdaa 	bl	80075a0 <xTaskGetSchedulerState>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d109      	bne.n	8007a66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <xTimerGenericCommand+0x98>)
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	f107 0110 	add.w	r1, r7, #16
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a5e:	f7fe f91d 	bl	8005c9c <xQueueGenericSend>
 8007a62:	6278      	str	r0, [r7, #36]	; 0x24
 8007a64:	e012      	b.n	8007a8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <xTimerGenericCommand+0x98>)
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f107 0110 	add.w	r1, r7, #16
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2200      	movs	r2, #0
 8007a72:	f7fe f913 	bl	8005c9c <xQueueGenericSend>
 8007a76:	6278      	str	r0, [r7, #36]	; 0x24
 8007a78:	e008      	b.n	8007a8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a7a:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <xTimerGenericCommand+0x98>)
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	f107 0110 	add.w	r1, r7, #16
 8007a82:	2300      	movs	r3, #0
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	f7fe fa07 	bl	8005e98 <xQueueGenericSendFromISR>
 8007a8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3728      	adds	r7, #40	; 0x28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	200011c4 	.word	0x200011c4

08007a9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007aa6:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <prvProcessExpiredTimer+0x7c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd fecf 	bl	8005858 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d122      	bne.n	8007b08 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	18d1      	adds	r1, r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	6978      	ldr	r0, [r7, #20]
 8007ad0:	f000 f8c8 	bl	8007c64 <prvInsertTimerInActiveList>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d016      	beq.n	8007b08 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ada:	2300      	movs	r3, #0
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6978      	ldr	r0, [r7, #20]
 8007ae6:	f7ff ff8b 	bl	8007a00 <xTimerGenericCommand>
 8007aea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	60fb      	str	r3, [r7, #12]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	6978      	ldr	r0, [r7, #20]
 8007b0e:	4798      	blx	r3
}
 8007b10:	bf00      	nop
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	200011bc 	.word	0x200011bc

08007b1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f857 	bl	8007bdc <prvGetNextExpireTime>
 8007b2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4619      	mov	r1, r3
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f803 	bl	8007b40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b3a:	f000 f8d5 	bl	8007ce8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b3e:	e7f1      	b.n	8007b24 <prvTimerTask+0x8>

08007b40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b4a:	f7ff f93d 	bl	8006dc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b4e:	f107 0308 	add.w	r3, r7, #8
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f866 	bl	8007c24 <prvSampleTimeNow>
 8007b58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d130      	bne.n	8007bc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <prvProcessTimerOrBlockTask+0x3c>
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d806      	bhi.n	8007b7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b6e:	f7ff f939 	bl	8006de4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b72:	68f9      	ldr	r1, [r7, #12]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff91 	bl	8007a9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b7a:	e024      	b.n	8007bc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d008      	beq.n	8007b94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b82:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <prvProcessTimerOrBlockTask+0x90>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bf0c      	ite	eq
 8007b8c:	2301      	moveq	r3, #1
 8007b8e:	2300      	movne	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <prvProcessTimerOrBlockTask+0x94>)
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f7fe feab 	bl	80068fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ba6:	f7ff f91d 	bl	8006de4 <xTaskResumeAll>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bb0:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <prvProcessTimerOrBlockTask+0x98>)
 8007bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
}
 8007bc0:	e001      	b.n	8007bc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bc2:	f7ff f90f 	bl	8006de4 <xTaskResumeAll>
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	200011c0 	.word	0x200011c0
 8007bd4:	200011c4 	.word	0x200011c4
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007be4:	4b0e      	ldr	r3, [pc, #56]	; (8007c20 <prvGetNextExpireTime+0x44>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bf0c      	ite	eq
 8007bee:	2301      	moveq	r3, #1
 8007bf0:	2300      	movne	r3, #0
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c02:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <prvGetNextExpireTime+0x44>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	e001      	b.n	8007c12 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c12:	68fb      	ldr	r3, [r7, #12]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	200011bc 	.word	0x200011bc

08007c24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c2c:	f7ff f978 	bl	8006f20 <xTaskGetTickCount>
 8007c30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c32:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <prvSampleTimeNow+0x3c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d205      	bcs.n	8007c48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c3c:	f000 f908 	bl	8007e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c4e:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <prvSampleTimeNow+0x3c>)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c54:	68fb      	ldr	r3, [r7, #12]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200011cc 	.word	0x200011cc

08007c64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d812      	bhi.n	8007cb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d302      	bcc.n	8007c9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e01b      	b.n	8007cd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c9e:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <prvInsertTimerInActiveList+0x7c>)
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f7fd fd9c 	bl	80057e6 <vListInsert>
 8007cae:	e012      	b.n	8007cd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d206      	bcs.n	8007cc6 <prvInsertTimerInActiveList+0x62>
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d302      	bcc.n	8007cc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	e007      	b.n	8007cd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <prvInsertTimerInActiveList+0x80>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7fd fd88 	bl	80057e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cd6:	697b      	ldr	r3, [r7, #20]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	200011c0 	.word	0x200011c0
 8007ce4:	200011bc 	.word	0x200011bc

08007ce8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cee:	e09d      	b.n	8007e2c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da18      	bge.n	8007d28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cf6:	1d3b      	adds	r3, r7, #4
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	61fb      	str	r3, [r7, #28]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1e:	6850      	ldr	r0, [r2, #4]
 8007d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d22:	6892      	ldr	r2, [r2, #8]
 8007d24:	4611      	mov	r1, r2
 8007d26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	db7d      	blt.n	8007e2a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fd fd8a 	bl	8005858 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d44:	463b      	mov	r3, r7
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff ff6c 	bl	8007c24 <prvSampleTimeNow>
 8007d4c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b09      	cmp	r3, #9
 8007d52:	d86b      	bhi.n	8007e2c <prvProcessReceivedCommands+0x144>
 8007d54:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <prvProcessReceivedCommands+0x74>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d85 	.word	0x08007d85
 8007d60:	08007d85 	.word	0x08007d85
 8007d64:	08007d85 	.word	0x08007d85
 8007d68:	08007e2d 	.word	0x08007e2d
 8007d6c:	08007de1 	.word	0x08007de1
 8007d70:	08007e19 	.word	0x08007e19
 8007d74:	08007d85 	.word	0x08007d85
 8007d78:	08007d85 	.word	0x08007d85
 8007d7c:	08007e2d 	.word	0x08007e2d
 8007d80:	08007de1 	.word	0x08007de1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	18d1      	adds	r1, r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d92:	f7ff ff67 	bl	8007c64 <prvInsertTimerInActiveList>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d047      	beq.n	8007e2c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d13f      	bne.n	8007e2c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	441a      	add	r2, r3
 8007db4:	2300      	movs	r3, #0
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	2300      	movs	r3, #0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dbe:	f7ff fe1f 	bl	8007a00 <xTimerGenericCommand>
 8007dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d130      	bne.n	8007e2c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	61bb      	str	r3, [r7, #24]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	617b      	str	r3, [r7, #20]
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	699a      	ldr	r2, [r3, #24]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	18d1      	adds	r1, r2, r3
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e12:	f7ff ff27 	bl	8007c64 <prvInsertTimerInActiveList>
					break;
 8007e16:	e009      	b.n	8007e2c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e24:	f000 fbcc 	bl	80085c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e28:	e000      	b.n	8007e2c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <prvProcessReceivedCommands+0x164>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	1d39      	adds	r1, r7, #4
 8007e32:	2200      	movs	r2, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe f955 	bl	80060e4 <xQueueReceive>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f47f af57 	bne.w	8007cf0 <prvProcessReceivedCommands+0x8>
	}
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	3730      	adds	r7, #48	; 0x30
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200011c4 	.word	0x200011c4

08007e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e56:	e045      	b.n	8007ee4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e58:	4b2c      	ldr	r3, [pc, #176]	; (8007f0c <prvSwitchTimerLists+0xbc>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e62:	4b2a      	ldr	r3, [pc, #168]	; (8007f0c <prvSwitchTimerLists+0xbc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fd fcf1 	bl	8005858 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d12e      	bne.n	8007ee4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d90e      	bls.n	8007eb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ea4:	4b19      	ldr	r3, [pc, #100]	; (8007f0c <prvSwitchTimerLists+0xbc>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f7fd fc99 	bl	80057e6 <vListInsert>
 8007eb4:	e016      	b.n	8007ee4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7ff fd9d 	bl	8007a00 <xTimerGenericCommand>
 8007ec6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	603b      	str	r3, [r7, #0]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ee4:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <prvSwitchTimerLists+0xbc>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1b4      	bne.n	8007e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <prvSwitchTimerLists+0xbc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <prvSwitchTimerLists+0xc0>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <prvSwitchTimerLists+0xbc>)
 8007efa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <prvSwitchTimerLists+0xc0>)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	6013      	str	r3, [r2, #0]
}
 8007f02:	bf00      	nop
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	200011bc 	.word	0x200011bc
 8007f10:	200011c0 	.word	0x200011c0

08007f14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f1a:	f000 f96b 	bl	80081f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f1e:	4b15      	ldr	r3, [pc, #84]	; (8007f74 <prvCheckForValidListAndQueue+0x60>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d120      	bne.n	8007f68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f26:	4814      	ldr	r0, [pc, #80]	; (8007f78 <prvCheckForValidListAndQueue+0x64>)
 8007f28:	f7fd fc0c 	bl	8005744 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f2c:	4813      	ldr	r0, [pc, #76]	; (8007f7c <prvCheckForValidListAndQueue+0x68>)
 8007f2e:	f7fd fc09 	bl	8005744 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f32:	4b13      	ldr	r3, [pc, #76]	; (8007f80 <prvCheckForValidListAndQueue+0x6c>)
 8007f34:	4a10      	ldr	r2, [pc, #64]	; (8007f78 <prvCheckForValidListAndQueue+0x64>)
 8007f36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f38:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <prvCheckForValidListAndQueue+0x70>)
 8007f3a:	4a10      	ldr	r2, [pc, #64]	; (8007f7c <prvCheckForValidListAndQueue+0x68>)
 8007f3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <prvCheckForValidListAndQueue+0x74>)
 8007f44:	4a11      	ldr	r2, [pc, #68]	; (8007f8c <prvCheckForValidListAndQueue+0x78>)
 8007f46:	2110      	movs	r1, #16
 8007f48:	200a      	movs	r0, #10
 8007f4a:	f7fd fd17 	bl	800597c <xQueueGenericCreateStatic>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4a08      	ldr	r2, [pc, #32]	; (8007f74 <prvCheckForValidListAndQueue+0x60>)
 8007f52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <prvCheckForValidListAndQueue+0x60>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <prvCheckForValidListAndQueue+0x60>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	490b      	ldr	r1, [pc, #44]	; (8007f90 <prvCheckForValidListAndQueue+0x7c>)
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fc76 	bl	8006854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f68:	f000 f974 	bl	8008254 <vPortExitCritical>
}
 8007f6c:	bf00      	nop
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	200011c4 	.word	0x200011c4
 8007f78:	20001194 	.word	0x20001194
 8007f7c:	200011a8 	.word	0x200011a8
 8007f80:	200011bc 	.word	0x200011bc
 8007f84:	200011c0 	.word	0x200011c0
 8007f88:	20001270 	.word	0x20001270
 8007f8c:	200011d0 	.word	0x200011d0
 8007f90:	080088d0 	.word	0x080088d0

08007f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3b04      	subs	r3, #4
 8007fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3b04      	subs	r3, #4
 8007fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0201 	bic.w	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3b04      	subs	r3, #4
 8007fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fc4:	4a0c      	ldr	r2, [pc, #48]	; (8007ff8 <pxPortInitialiseStack+0x64>)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3b14      	subs	r3, #20
 8007fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3b04      	subs	r3, #4
 8007fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f06f 0202 	mvn.w	r2, #2
 8007fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3b20      	subs	r3, #32
 8007fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fea:	68fb      	ldr	r3, [r7, #12]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	08007ffd 	.word	0x08007ffd

08007ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008006:	4b12      	ldr	r3, [pc, #72]	; (8008050 <prvTaskExitError+0x54>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800800e:	d00a      	beq.n	8008026 <prvTaskExitError+0x2a>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	60fb      	str	r3, [r7, #12]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <prvTaskExitError+0x28>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	60bb      	str	r3, [r7, #8]
}
 8008038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800803a:	bf00      	nop
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0fc      	beq.n	800803c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	2000000c 	.word	0x2000000c
	...

08008060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008060:	4b07      	ldr	r3, [pc, #28]	; (8008080 <pxCurrentTCBConst2>)
 8008062:	6819      	ldr	r1, [r3, #0]
 8008064:	6808      	ldr	r0, [r1, #0]
 8008066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806a:	f380 8809 	msr	PSP, r0
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f04f 0000 	mov.w	r0, #0
 8008076:	f380 8811 	msr	BASEPRI, r0
 800807a:	4770      	bx	lr
 800807c:	f3af 8000 	nop.w

08008080 <pxCurrentTCBConst2>:
 8008080:	20000c94 	.word	0x20000c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop

08008088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008088:	4808      	ldr	r0, [pc, #32]	; (80080ac <prvPortStartFirstTask+0x24>)
 800808a:	6800      	ldr	r0, [r0, #0]
 800808c:	6800      	ldr	r0, [r0, #0]
 800808e:	f380 8808 	msr	MSP, r0
 8008092:	f04f 0000 	mov.w	r0, #0
 8008096:	f380 8814 	msr	CONTROL, r0
 800809a:	b662      	cpsie	i
 800809c:	b661      	cpsie	f
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	df00      	svc	0
 80080a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080aa:	bf00      	nop
 80080ac:	e000ed08 	.word	0xe000ed08

080080b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080b6:	4b46      	ldr	r3, [pc, #280]	; (80081d0 <xPortStartScheduler+0x120>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a46      	ldr	r2, [pc, #280]	; (80081d4 <xPortStartScheduler+0x124>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d10a      	bne.n	80080d6 <xPortStartScheduler+0x26>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	613b      	str	r3, [r7, #16]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080d6:	4b3e      	ldr	r3, [pc, #248]	; (80081d0 <xPortStartScheduler+0x120>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a3f      	ldr	r2, [pc, #252]	; (80081d8 <xPortStartScheduler+0x128>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d10a      	bne.n	80080f6 <xPortStartScheduler+0x46>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080f6:	4b39      	ldr	r3, [pc, #228]	; (80081dc <xPortStartScheduler+0x12c>)
 80080f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	22ff      	movs	r2, #255	; 0xff
 8008106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008118:	b2da      	uxtb	r2, r3
 800811a:	4b31      	ldr	r3, [pc, #196]	; (80081e0 <xPortStartScheduler+0x130>)
 800811c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800811e:	4b31      	ldr	r3, [pc, #196]	; (80081e4 <xPortStartScheduler+0x134>)
 8008120:	2207      	movs	r2, #7
 8008122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008124:	e009      	b.n	800813a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008126:	4b2f      	ldr	r3, [pc, #188]	; (80081e4 <xPortStartScheduler+0x134>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3b01      	subs	r3, #1
 800812c:	4a2d      	ldr	r2, [pc, #180]	; (80081e4 <xPortStartScheduler+0x134>)
 800812e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	b2db      	uxtb	r3, r3
 8008138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008142:	2b80      	cmp	r3, #128	; 0x80
 8008144:	d0ef      	beq.n	8008126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008146:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <xPortStartScheduler+0x134>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f1c3 0307 	rsb	r3, r3, #7
 800814e:	2b04      	cmp	r3, #4
 8008150:	d00a      	beq.n	8008168 <xPortStartScheduler+0xb8>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	60bb      	str	r3, [r7, #8]
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008168:	4b1e      	ldr	r3, [pc, #120]	; (80081e4 <xPortStartScheduler+0x134>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	021b      	lsls	r3, r3, #8
 800816e:	4a1d      	ldr	r2, [pc, #116]	; (80081e4 <xPortStartScheduler+0x134>)
 8008170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008172:	4b1c      	ldr	r3, [pc, #112]	; (80081e4 <xPortStartScheduler+0x134>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800817a:	4a1a      	ldr	r2, [pc, #104]	; (80081e4 <xPortStartScheduler+0x134>)
 800817c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	b2da      	uxtb	r2, r3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008186:	4b18      	ldr	r3, [pc, #96]	; (80081e8 <xPortStartScheduler+0x138>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a17      	ldr	r2, [pc, #92]	; (80081e8 <xPortStartScheduler+0x138>)
 800818c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008192:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <xPortStartScheduler+0x138>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a14      	ldr	r2, [pc, #80]	; (80081e8 <xPortStartScheduler+0x138>)
 8008198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800819c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800819e:	f000 f8dd 	bl	800835c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <xPortStartScheduler+0x13c>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081a8:	f000 f8fc 	bl	80083a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081ac:	4b10      	ldr	r3, [pc, #64]	; (80081f0 <xPortStartScheduler+0x140>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a0f      	ldr	r2, [pc, #60]	; (80081f0 <xPortStartScheduler+0x140>)
 80081b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081b8:	f7ff ff66 	bl	8008088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081bc:	f7fe ff7e 	bl	80070bc <vTaskSwitchContext>
	prvTaskExitError();
 80081c0:	f7ff ff1c 	bl	8007ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	e000ed00 	.word	0xe000ed00
 80081d4:	410fc271 	.word	0x410fc271
 80081d8:	410fc270 	.word	0x410fc270
 80081dc:	e000e400 	.word	0xe000e400
 80081e0:	200012c0 	.word	0x200012c0
 80081e4:	200012c4 	.word	0x200012c4
 80081e8:	e000ed20 	.word	0xe000ed20
 80081ec:	2000000c 	.word	0x2000000c
 80081f0:	e000ef34 	.word	0xe000ef34

080081f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	607b      	str	r3, [r7, #4]
}
 800820c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800820e:	4b0f      	ldr	r3, [pc, #60]	; (800824c <vPortEnterCritical+0x58>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	4a0d      	ldr	r2, [pc, #52]	; (800824c <vPortEnterCritical+0x58>)
 8008216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008218:	4b0c      	ldr	r3, [pc, #48]	; (800824c <vPortEnterCritical+0x58>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d10f      	bne.n	8008240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008220:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <vPortEnterCritical+0x5c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <vPortEnterCritical+0x4c>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	603b      	str	r3, [r7, #0]
}
 800823c:	bf00      	nop
 800823e:	e7fe      	b.n	800823e <vPortEnterCritical+0x4a>
	}
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	2000000c 	.word	0x2000000c
 8008250:	e000ed04 	.word	0xe000ed04

08008254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800825a:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <vPortExitCritical+0x50>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10a      	bne.n	8008278 <vPortExitCritical+0x24>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	607b      	str	r3, [r7, #4]
}
 8008274:	bf00      	nop
 8008276:	e7fe      	b.n	8008276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008278:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <vPortExitCritical+0x50>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3b01      	subs	r3, #1
 800827e:	4a09      	ldr	r2, [pc, #36]	; (80082a4 <vPortExitCritical+0x50>)
 8008280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008282:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <vPortExitCritical+0x50>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d105      	bne.n	8008296 <vPortExitCritical+0x42>
 800828a:	2300      	movs	r3, #0
 800828c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	f383 8811 	msr	BASEPRI, r3
}
 8008294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	2000000c 	.word	0x2000000c
	...

080082b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082b0:	f3ef 8009 	mrs	r0, PSP
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	4b15      	ldr	r3, [pc, #84]	; (8008310 <pxCurrentTCBConst>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	f01e 0f10 	tst.w	lr, #16
 80082c0:	bf08      	it	eq
 80082c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	6010      	str	r0, [r2, #0]
 80082cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082d4:	f380 8811 	msr	BASEPRI, r0
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f7fe feec 	bl	80070bc <vTaskSwitchContext>
 80082e4:	f04f 0000 	mov.w	r0, #0
 80082e8:	f380 8811 	msr	BASEPRI, r0
 80082ec:	bc09      	pop	{r0, r3}
 80082ee:	6819      	ldr	r1, [r3, #0]
 80082f0:	6808      	ldr	r0, [r1, #0]
 80082f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f6:	f01e 0f10 	tst.w	lr, #16
 80082fa:	bf08      	it	eq
 80082fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008300:	f380 8809 	msr	PSP, r0
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	f3af 8000 	nop.w

08008310 <pxCurrentTCBConst>:
 8008310:	20000c94 	.word	0x20000c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	607b      	str	r3, [r7, #4]
}
 8008330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008332:	f7fe fe05 	bl	8006f40 <xTaskIncrementTick>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800833c:	4b06      	ldr	r3, [pc, #24]	; (8008358 <SysTick_Handler+0x40>)
 800833e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	2300      	movs	r3, #0
 8008346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f383 8811 	msr	BASEPRI, r3
}
 800834e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008360:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <vPortSetupTimerInterrupt+0x34>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008366:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <vPortSetupTimerInterrupt+0x38>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800836c:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <vPortSetupTimerInterrupt+0x3c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a0a      	ldr	r2, [pc, #40]	; (800839c <vPortSetupTimerInterrupt+0x40>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	099b      	lsrs	r3, r3, #6
 8008378:	4a09      	ldr	r2, [pc, #36]	; (80083a0 <vPortSetupTimerInterrupt+0x44>)
 800837a:	3b01      	subs	r3, #1
 800837c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800837e:	4b04      	ldr	r3, [pc, #16]	; (8008390 <vPortSetupTimerInterrupt+0x34>)
 8008380:	2207      	movs	r2, #7
 8008382:	601a      	str	r2, [r3, #0]
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	e000e010 	.word	0xe000e010
 8008394:	e000e018 	.word	0xe000e018
 8008398:	20000000 	.word	0x20000000
 800839c:	10624dd3 	.word	0x10624dd3
 80083a0:	e000e014 	.word	0xe000e014

080083a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083b4 <vPortEnableVFP+0x10>
 80083a8:	6801      	ldr	r1, [r0, #0]
 80083aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083ae:	6001      	str	r1, [r0, #0]
 80083b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083b2:	bf00      	nop
 80083b4:	e000ed88 	.word	0xe000ed88

080083b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083be:	f3ef 8305 	mrs	r3, IPSR
 80083c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b0f      	cmp	r3, #15
 80083c8:	d914      	bls.n	80083f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083ca:	4a17      	ldr	r2, [pc, #92]	; (8008428 <vPortValidateInterruptPriority+0x70>)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083d4:	4b15      	ldr	r3, [pc, #84]	; (800842c <vPortValidateInterruptPriority+0x74>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	7afa      	ldrb	r2, [r7, #11]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d20a      	bcs.n	80083f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	607b      	str	r3, [r7, #4]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083f4:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <vPortValidateInterruptPriority+0x78>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083fc:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <vPortValidateInterruptPriority+0x7c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d90a      	bls.n	800841a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	603b      	str	r3, [r7, #0]
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <vPortValidateInterruptPriority+0x60>
	}
 800841a:	bf00      	nop
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	e000e3f0 	.word	0xe000e3f0
 800842c:	200012c0 	.word	0x200012c0
 8008430:	e000ed0c 	.word	0xe000ed0c
 8008434:	200012c4 	.word	0x200012c4

08008438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b08a      	sub	sp, #40	; 0x28
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008444:	f7fe fcc0 	bl	8006dc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008448:	4b58      	ldr	r3, [pc, #352]	; (80085ac <pvPortMalloc+0x174>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008450:	f000 f910 	bl	8008674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008454:	4b56      	ldr	r3, [pc, #344]	; (80085b0 <pvPortMalloc+0x178>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4013      	ands	r3, r2
 800845c:	2b00      	cmp	r3, #0
 800845e:	f040 808e 	bne.w	800857e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01d      	beq.n	80084a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008468:	2208      	movs	r2, #8
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4413      	add	r3, r2
 800846e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	2b00      	cmp	r3, #0
 8008478:	d014      	beq.n	80084a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f023 0307 	bic.w	r3, r3, #7
 8008480:	3308      	adds	r3, #8
 8008482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <pvPortMalloc+0x6c>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	617b      	str	r3, [r7, #20]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d069      	beq.n	800857e <pvPortMalloc+0x146>
 80084aa:	4b42      	ldr	r3, [pc, #264]	; (80085b4 <pvPortMalloc+0x17c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d864      	bhi.n	800857e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084b4:	4b40      	ldr	r3, [pc, #256]	; (80085b8 <pvPortMalloc+0x180>)
 80084b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084b8:	4b3f      	ldr	r3, [pc, #252]	; (80085b8 <pvPortMalloc+0x180>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084be:	e004      	b.n	80084ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d903      	bls.n	80084dc <pvPortMalloc+0xa4>
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f1      	bne.n	80084c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084dc:	4b33      	ldr	r3, [pc, #204]	; (80085ac <pvPortMalloc+0x174>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d04b      	beq.n	800857e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2208      	movs	r2, #8
 80084ec:	4413      	add	r3, r2
 80084ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	2308      	movs	r3, #8
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	429a      	cmp	r2, r3
 8008506:	d91f      	bls.n	8008548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <pvPortMalloc+0xf8>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	613b      	str	r3, [r7, #16]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	1ad2      	subs	r2, r2, r3
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008542:	69b8      	ldr	r0, [r7, #24]
 8008544:	f000 f8f8 	bl	8008738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008548:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <pvPortMalloc+0x17c>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	4a18      	ldr	r2, [pc, #96]	; (80085b4 <pvPortMalloc+0x17c>)
 8008554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008556:	4b17      	ldr	r3, [pc, #92]	; (80085b4 <pvPortMalloc+0x17c>)
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b18      	ldr	r3, [pc, #96]	; (80085bc <pvPortMalloc+0x184>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d203      	bcs.n	800856a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008562:	4b14      	ldr	r3, [pc, #80]	; (80085b4 <pvPortMalloc+0x17c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a15      	ldr	r2, [pc, #84]	; (80085bc <pvPortMalloc+0x184>)
 8008568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <pvPortMalloc+0x178>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	431a      	orrs	r2, r3
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	2200      	movs	r2, #0
 800857c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800857e:	f7fe fc31 	bl	8006de4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <pvPortMalloc+0x16a>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	60fb      	str	r3, [r7, #12]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <pvPortMalloc+0x168>
	return pvReturn;
 80085a2:	69fb      	ldr	r3, [r7, #28]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3728      	adds	r7, #40	; 0x28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20001ed0 	.word	0x20001ed0
 80085b0:	20001edc 	.word	0x20001edc
 80085b4:	20001ed4 	.word	0x20001ed4
 80085b8:	20001ec8 	.word	0x20001ec8
 80085bc:	20001ed8 	.word	0x20001ed8

080085c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d048      	beq.n	8008664 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085d2:	2308      	movs	r3, #8
 80085d4:	425b      	negs	r3, r3
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4413      	add	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	4b21      	ldr	r3, [pc, #132]	; (800866c <vPortFree+0xac>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4013      	ands	r3, r2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10a      	bne.n	8008604 <vPortFree+0x44>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	60fb      	str	r3, [r7, #12]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <vPortFree+0x62>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	60bb      	str	r3, [r7, #8]
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	4b11      	ldr	r3, [pc, #68]	; (800866c <vPortFree+0xac>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4013      	ands	r3, r2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d019      	beq.n	8008664 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d115      	bne.n	8008664 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	4b0b      	ldr	r3, [pc, #44]	; (800866c <vPortFree+0xac>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	43db      	mvns	r3, r3
 8008642:	401a      	ands	r2, r3
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008648:	f7fe fbbe 	bl	8006dc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	4b07      	ldr	r3, [pc, #28]	; (8008670 <vPortFree+0xb0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4413      	add	r3, r2
 8008656:	4a06      	ldr	r2, [pc, #24]	; (8008670 <vPortFree+0xb0>)
 8008658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800865a:	6938      	ldr	r0, [r7, #16]
 800865c:	f000 f86c 	bl	8008738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008660:	f7fe fbc0 	bl	8006de4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008664:	bf00      	nop
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20001edc 	.word	0x20001edc
 8008670:	20001ed4 	.word	0x20001ed4

08008674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800867a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800867e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008680:	4b27      	ldr	r3, [pc, #156]	; (8008720 <prvHeapInit+0xac>)
 8008682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00c      	beq.n	80086a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3307      	adds	r3, #7
 8008692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0307 	bic.w	r3, r3, #7
 800869a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	4a1f      	ldr	r2, [pc, #124]	; (8008720 <prvHeapInit+0xac>)
 80086a4:	4413      	add	r3, r2
 80086a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086ac:	4a1d      	ldr	r2, [pc, #116]	; (8008724 <prvHeapInit+0xb0>)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086b2:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <prvHeapInit+0xb0>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	4413      	add	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086c0:	2208      	movs	r2, #8
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	1a9b      	subs	r3, r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0307 	bic.w	r3, r3, #7
 80086ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4a15      	ldr	r2, [pc, #84]	; (8008728 <prvHeapInit+0xb4>)
 80086d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086d6:	4b14      	ldr	r3, [pc, #80]	; (8008728 <prvHeapInit+0xb4>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086de:	4b12      	ldr	r3, [pc, #72]	; (8008728 <prvHeapInit+0xb4>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086f4:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <prvHeapInit+0xb4>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	4a0a      	ldr	r2, [pc, #40]	; (800872c <prvHeapInit+0xb8>)
 8008702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	4a09      	ldr	r2, [pc, #36]	; (8008730 <prvHeapInit+0xbc>)
 800870a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800870c:	4b09      	ldr	r3, [pc, #36]	; (8008734 <prvHeapInit+0xc0>)
 800870e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008712:	601a      	str	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	200012c8 	.word	0x200012c8
 8008724:	20001ec8 	.word	0x20001ec8
 8008728:	20001ed0 	.word	0x20001ed0
 800872c:	20001ed8 	.word	0x20001ed8
 8008730:	20001ed4 	.word	0x20001ed4
 8008734:	20001edc 	.word	0x20001edc

08008738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008740:	4b28      	ldr	r3, [pc, #160]	; (80087e4 <prvInsertBlockIntoFreeList+0xac>)
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e002      	b.n	800874c <prvInsertBlockIntoFreeList+0x14>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	429a      	cmp	r2, r3
 8008754:	d8f7      	bhi.n	8008746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4413      	add	r3, r2
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	429a      	cmp	r2, r3
 8008766:	d108      	bne.n	800877a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	441a      	add	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	441a      	add	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d118      	bne.n	80087c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d00d      	beq.n	80087b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	441a      	add	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	e008      	b.n	80087c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087b6:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <prvInsertBlockIntoFreeList+0xb0>)
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	e003      	b.n	80087c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d002      	beq.n	80087d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087d6:	bf00      	nop
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20001ec8 	.word	0x20001ec8
 80087e8:	20001ed0 	.word	0x20001ed0

080087ec <__libc_init_array>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	4d0d      	ldr	r5, [pc, #52]	; (8008824 <__libc_init_array+0x38>)
 80087f0:	4c0d      	ldr	r4, [pc, #52]	; (8008828 <__libc_init_array+0x3c>)
 80087f2:	1b64      	subs	r4, r4, r5
 80087f4:	10a4      	asrs	r4, r4, #2
 80087f6:	2600      	movs	r6, #0
 80087f8:	42a6      	cmp	r6, r4
 80087fa:	d109      	bne.n	8008810 <__libc_init_array+0x24>
 80087fc:	4d0b      	ldr	r5, [pc, #44]	; (800882c <__libc_init_array+0x40>)
 80087fe:	4c0c      	ldr	r4, [pc, #48]	; (8008830 <__libc_init_array+0x44>)
 8008800:	f000 f82e 	bl	8008860 <_init>
 8008804:	1b64      	subs	r4, r4, r5
 8008806:	10a4      	asrs	r4, r4, #2
 8008808:	2600      	movs	r6, #0
 800880a:	42a6      	cmp	r6, r4
 800880c:	d105      	bne.n	800881a <__libc_init_array+0x2e>
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	f855 3b04 	ldr.w	r3, [r5], #4
 8008814:	4798      	blx	r3
 8008816:	3601      	adds	r6, #1
 8008818:	e7ee      	b.n	80087f8 <__libc_init_array+0xc>
 800881a:	f855 3b04 	ldr.w	r3, [r5], #4
 800881e:	4798      	blx	r3
 8008820:	3601      	adds	r6, #1
 8008822:	e7f2      	b.n	800880a <__libc_init_array+0x1e>
 8008824:	08008988 	.word	0x08008988
 8008828:	08008988 	.word	0x08008988
 800882c:	08008988 	.word	0x08008988
 8008830:	0800898c 	.word	0x0800898c

08008834 <memcpy>:
 8008834:	440a      	add	r2, r1
 8008836:	4291      	cmp	r1, r2
 8008838:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800883c:	d100      	bne.n	8008840 <memcpy+0xc>
 800883e:	4770      	bx	lr
 8008840:	b510      	push	{r4, lr}
 8008842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800884a:	4291      	cmp	r1, r2
 800884c:	d1f9      	bne.n	8008842 <memcpy+0xe>
 800884e:	bd10      	pop	{r4, pc}

08008850 <memset>:
 8008850:	4402      	add	r2, r0
 8008852:	4603      	mov	r3, r0
 8008854:	4293      	cmp	r3, r2
 8008856:	d100      	bne.n	800885a <memset+0xa>
 8008858:	4770      	bx	lr
 800885a:	f803 1b01 	strb.w	r1, [r3], #1
 800885e:	e7f9      	b.n	8008854 <memset+0x4>

08008860 <_init>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	bf00      	nop
 8008864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008866:	bc08      	pop	{r3}
 8008868:	469e      	mov	lr, r3
 800886a:	4770      	bx	lr

0800886c <_fini>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	bf00      	nop
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr
