
TableController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800aff0  0800aff0  0001aff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b384  0800b384  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800b384  0800b384  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b384  0800b384  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00001f7c  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002004  20002004  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025182  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047dd  00000000  00000000  0004523a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb0  00000000  00000000  00049a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ae8  00000000  00000000  0004b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022387  00000000  00000000  0004d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000236fa  00000000  00000000  0006f537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9493  00000000  00000000  00092c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c0c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008614  00000000  00000000  0015c114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800afd8 	.word	0x0800afd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800afd8 	.word	0x0800afd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_UART_RxCpltCallback>:
extern osSemaphoreId_t diffRxDataHandle;
extern char data_c;
extern char data[150];
extern uint8_t data_c_idx;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
	if (huart->Instance == huart2.Instance) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <HAL_UART_RxCpltCallback+0x68>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d124      	bne.n	80002ce <HAL_UART_RxCpltCallback+0x5e>
	        data[data_c_idx] = data_c;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	461a      	mov	r2, r3
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_UART_RxCpltCallback+0x70>)
 800028c:	7819      	ldrb	r1, [r3, #0]
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_UART_RxCpltCallback+0x74>)
 8000290:	5499      	strb	r1, [r3, r2]
	        if (data_c == '\r') {
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <HAL_UART_RxCpltCallback+0x70>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b0d      	cmp	r3, #13
 8000298:	d10e      	bne.n	80002b8 <HAL_UART_RxCpltCallback+0x48>
	            data[data_c_idx] = '\0';
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	461a      	mov	r2, r3
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HAL_UART_RxCpltCallback+0x74>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	5499      	strb	r1, [r3, r2]
	            data_c_idx = 0;
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
	            osSemaphoreRelease(diffRxDataHandle);
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <HAL_UART_RxCpltCallback+0x78>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f006 fa8b 	bl	80067cc <osSemaphoreRelease>
 80002b6:	e005      	b.n	80002c4 <HAL_UART_RxCpltCallback+0x54>
	        } else
	        	data_c_idx++;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 80002c2:	701a      	strb	r2, [r3, #0]

	        HAL_UART_Receive_IT(&huart2, &data_c, 1);
 80002c4:	2201      	movs	r2, #1
 80002c6:	4906      	ldr	r1, [pc, #24]	; (80002e0 <HAL_UART_RxCpltCallback+0x70>)
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <HAL_UART_RxCpltCallback+0x68>)
 80002ca:	f004 fd8d 	bl	8004de8 <HAL_UART_Receive_IT>
	}
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	200001f4 	.word	0x200001f4
 80002dc:	20000657 	.word	0x20000657
 80002e0:	20000656 	.word	0x20000656
 80002e4:	200005c0 	.word	0x200005c0
 80002e8:	200005b8 	.word	0x200005b8

080002ec <parseMessage>:
		{2, &htim3}
};

uint8_t rgbLedsCount = 2;

int parseMessage(char* message, LedMessage* ledMessage) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
	// Check if the message starts with "LED#"
	if (strncmp(message, "LED#", 4) != 0)
 80002f6:	2204      	movs	r2, #4
 80002f8:	4919      	ldr	r1, [pc, #100]	; (8000360 <parseMessage+0x74>)
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f009 fbb2 	bl	8009a64 <strncmp>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d002      	beq.n	800030c <parseMessage+0x20>
		return -1; // Invalid message
 8000306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800030a:	e025      	b.n	8000358 <parseMessage+0x6c>

	// Extract the LED number
	char* token = strtok(message + 4, ":");
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3304      	adds	r3, #4
 8000310:	4914      	ldr	r1, [pc, #80]	; (8000364 <parseMessage+0x78>)
 8000312:	4618      	mov	r0, r3
 8000314:	f009 fbd0 	bl	8009ab8 <strtok>
 8000318:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d102      	bne.n	8000326 <parseMessage+0x3a>
		return -1; // Invalid message
 8000320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000324:	e018      	b.n	8000358 <parseMessage+0x6c>

	ledMessage->ledNumber = atoi(token);
 8000326:	68f8      	ldr	r0, [r7, #12]
 8000328:	f009 fb30 	bl	800998c <atoi>
 800032c:	4603      	mov	r3, r0
 800032e:	b2da      	uxtb	r2, r3
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	701a      	strb	r2, [r3, #0]

	// Extract the color
	token = strtok(NULL, "#");
 8000334:	490c      	ldr	r1, [pc, #48]	; (8000368 <parseMessage+0x7c>)
 8000336:	2000      	movs	r0, #0
 8000338:	f009 fbbe 	bl	8009ab8 <strtok>
 800033c:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d102      	bne.n	800034a <parseMessage+0x5e>
		return -1; // Invalid message
 8000344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000348:	e006      	b.n	8000358 <parseMessage+0x6c>

	strcpy(ledMessage->color, token);
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	68f9      	ldr	r1, [r7, #12]
 8000350:	4618      	mov	r0, r3
 8000352:	f009 fb7f 	bl	8009a54 <strcpy>

	return 0; // Valid message
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800aff0 	.word	0x0800aff0
 8000364:	0800aff8 	.word	0x0800aff8
 8000368:	0800affc 	.word	0x0800affc

0800036c <doLEDFunc>:

int doLEDFunc(LedMessage ledMessage) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	enum LED_COLOR color;
	if (strstr(ledMessage.color, "GREEN"))
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	3301      	adds	r3, #1
 800037c:	493e      	ldr	r1, [pc, #248]	; (8000478 <doLEDFunc+0x10c>)
 800037e:	4618      	mov	r0, r3
 8000380:	f009 fb84 	bl	8009a8c <strstr>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d002      	beq.n	8000390 <doLEDFunc+0x24>
		color = LED_GREEN;
 800038a:	2301      	movs	r3, #1
 800038c:	77fb      	strb	r3, [r7, #31]
 800038e:	e01a      	b.n	80003c6 <doLEDFunc+0x5a>

	else if (strstr(ledMessage.color, "YELLOW"))
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	3301      	adds	r3, #1
 8000394:	4939      	ldr	r1, [pc, #228]	; (800047c <doLEDFunc+0x110>)
 8000396:	4618      	mov	r0, r3
 8000398:	f009 fb78 	bl	8009a8c <strstr>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <doLEDFunc+0x3c>
		color = LED_YELLOW;
 80003a2:	2302      	movs	r3, #2
 80003a4:	77fb      	strb	r3, [r7, #31]
 80003a6:	e00e      	b.n	80003c6 <doLEDFunc+0x5a>

	else if (strstr(ledMessage.color, "RED"))
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	3301      	adds	r3, #1
 80003ac:	4934      	ldr	r1, [pc, #208]	; (8000480 <doLEDFunc+0x114>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f009 fb6c 	bl	8009a8c <strstr>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d002      	beq.n	80003c0 <doLEDFunc+0x54>
		color = LED_RED;
 80003ba:	2300      	movs	r3, #0
 80003bc:	77fb      	strb	r3, [r7, #31]
 80003be:	e002      	b.n	80003c6 <doLEDFunc+0x5a>

	else
		return -1;
 80003c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003c4:	e053      	b.n	800046e <doLEDFunc+0x102>

	TIM_HandleTypeDef* htim_;

	int found = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < rgbLedsCount; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	74fb      	strb	r3, [r7, #19]
 80003ce:	e011      	b.n	80003f4 <doLEDFunc+0x88>
		if (rgbLeds[i].ledNumber == ledMessage.ledNumber) {
 80003d0:	7cfb      	ldrb	r3, [r7, #19]
 80003d2:	4a2c      	ldr	r2, [pc, #176]	; (8000484 <doLEDFunc+0x118>)
 80003d4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80003d8:	793b      	ldrb	r3, [r7, #4]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d107      	bne.n	80003ee <doLEDFunc+0x82>
			found = 1;
 80003de:	2301      	movs	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
			htim_ = rgbLeds[i].htim_;
 80003e2:	7cfb      	ldrb	r3, [r7, #19]
 80003e4:	4a27      	ldr	r2, [pc, #156]	; (8000484 <doLEDFunc+0x118>)
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	4413      	add	r3, r2
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < rgbLedsCount; i++) {
 80003ee:	7cfb      	ldrb	r3, [r7, #19]
 80003f0:	3301      	adds	r3, #1
 80003f2:	74fb      	strb	r3, [r7, #19]
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <doLEDFunc+0x11c>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	7cfa      	ldrb	r2, [r7, #19]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d3e8      	bcc.n	80003d0 <doLEDFunc+0x64>
		}
	}

	if (found == 0)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <doLEDFunc+0x9e>
		return -1;
 8000404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000408:	e031      	b.n	800046e <doLEDFunc+0x102>
	 * TIM_CHANNEL_1 represents Red
	 * TIM_CHANNEL_2 represents Green
	 * TIM_CHANNEL_2 represents Blue
	 * */

	switch (color) {
 800040a:	7ffb      	ldrb	r3, [r7, #31]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d012      	beq.n	8000436 <doLEDFunc+0xca>
 8000410:	2b02      	cmp	r3, #2
 8000412:	dc2a      	bgt.n	800046a <doLEDFunc+0xfe>
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <doLEDFunc+0xe4>
 8000418:	2b01      	cmp	r3, #1
 800041a:	d126      	bne.n	800046a <doLEDFunc+0xfe>
		case LED_GREEN:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 0);
 800041c:	69bb      	ldr	r3, [r7, #24]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2200      	movs	r2, #0
 8000422:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 25);
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2219      	movs	r2, #25
 800042a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2200      	movs	r2, #0
 8000432:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000434:	e01a      	b.n	800046c <doLEDFunc+0x100>

		case LED_YELLOW:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 12);
 8000436:	69bb      	ldr	r3, [r7, #24]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	220c      	movs	r2, #12
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 12);
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	220c      	movs	r2, #12
 8000444:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2200      	movs	r2, #0
 800044c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800044e:	e00d      	b.n	800046c <doLEDFunc+0x100>

		case LED_RED:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 25);
 8000450:	69bb      	ldr	r3, [r7, #24]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2219      	movs	r2, #25
 8000456:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 0);
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2200      	movs	r2, #0
 800045e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2200      	movs	r2, #0
 8000466:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000468:	e000      	b.n	800046c <doLEDFunc+0x100>
		default:
			break;
 800046a:	bf00      	nop
	}

	return 1;
 800046c:	2301      	movs	r3, #1
}
 800046e:	4618      	mov	r0, r3
 8000470:	3720      	adds	r7, #32
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	0800b000 	.word	0x0800b000
 800047c:	0800b008 	.word	0x0800b008
 8000480:	0800b010 	.word	0x0800b010
 8000484:	20000000 	.word	0x20000000
 8000488:	20000010 	.word	0x20000010

0800048c <addToHandler>:

void addToHandler(char data[]) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	LedMessage ledMessage;
	int parse = parseMessage(data, &ledMessage);
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	4619      	mov	r1, r3
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ff26 	bl	80002ec <parseMessage>
 80004a0:	61f8      	str	r0, [r7, #28]

	if (parse == -1) {
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004a8:	d103      	bne.n	80004b2 <addToHandler+0x26>
		sendACK(ACK_INVALID);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f000 f816 	bl	80004dc <sendACK>
		return;
 80004b0:	e011      	b.n	80004d6 <addToHandler+0x4a>
	}

	int funcStat = doLEDFunc(ledMessage);
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004ba:	f7ff ff57 	bl	800036c <doLEDFunc>
 80004be:	61b8      	str	r0, [r7, #24]

	if (funcStat == -1) {
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004c6:	d103      	bne.n	80004d0 <addToHandler+0x44>
		sendACK(ACK_ERR);
 80004c8:	2002      	movs	r0, #2
 80004ca:	f000 f807 	bl	80004dc <sendACK>
		return;
 80004ce:	e002      	b.n	80004d6 <addToHandler+0x4a>
	}

	sendACK(ACK_OK);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 f803 	bl	80004dc <sendACK>
}
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <sendACK>:


void sendACK(enum ACK_TYPE ack) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	char tmp[20];
	int len;
	HAL_StatusTypeDef status;

	switch (ack) {
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d02b      	beq.n	8000544 <sendACK+0x68>
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	dc3c      	bgt.n	800056a <sendACK+0x8e>
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d014      	beq.n	800051e <sendACK+0x42>
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d138      	bne.n	800056a <sendACK+0x8e>
		case ACK_INVALID:
			len = sprintf(tmp, "INVALID\r");
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	491d      	ldr	r1, [pc, #116]	; (8000574 <sendACK+0x98>)
 80004fe:	4618      	mov	r0, r3
 8000500:	f009 fa88 	bl	8009a14 <siprintf>
 8000504:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 8000506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000508:	b29a      	uxth	r2, r3
 800050a:	f107 010c 	add.w	r1, r7, #12
 800050e:	23fa      	movs	r3, #250	; 0xfa
 8000510:	4819      	ldr	r0, [pc, #100]	; (8000578 <sendACK+0x9c>)
 8000512:	f004 fbdf 	bl	8004cd4 <HAL_UART_Transmit>
 8000516:	4603      	mov	r3, r0
 8000518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			break;
 800051c:	e026      	b.n	800056c <sendACK+0x90>
		case ACK_OK:
			len = sprintf(tmp, "OK\r");
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4916      	ldr	r1, [pc, #88]	; (800057c <sendACK+0xa0>)
 8000524:	4618      	mov	r0, r3
 8000526:	f009 fa75 	bl	8009a14 <siprintf>
 800052a:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 800052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052e:	b29a      	uxth	r2, r3
 8000530:	f107 010c 	add.w	r1, r7, #12
 8000534:	23fa      	movs	r3, #250	; 0xfa
 8000536:	4810      	ldr	r0, [pc, #64]	; (8000578 <sendACK+0x9c>)
 8000538:	f004 fbcc 	bl	8004cd4 <HAL_UART_Transmit>
 800053c:	4603      	mov	r3, r0
 800053e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			break;
 8000542:	e013      	b.n	800056c <sendACK+0x90>
		case ACK_ERR:
			len = sprintf(tmp, "ERROR\r");
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	490d      	ldr	r1, [pc, #52]	; (8000580 <sendACK+0xa4>)
 800054a:	4618      	mov	r0, r3
 800054c:	f009 fa62 	bl	8009a14 <siprintf>
 8000550:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	b29a      	uxth	r2, r3
 8000556:	f107 010c 	add.w	r1, r7, #12
 800055a:	23fa      	movs	r3, #250	; 0xfa
 800055c:	4806      	ldr	r0, [pc, #24]	; (8000578 <sendACK+0x9c>)
 800055e:	f004 fbb9 	bl	8004cd4 <HAL_UART_Transmit>
 8000562:	4603      	mov	r3, r0
 8000564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			break;
 8000568:	e000      	b.n	800056c <sendACK+0x90>
		default:
			break;
 800056a:	bf00      	nop
	}
}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	; 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	0800b014 	.word	0x0800b014
 8000578:	200001f4 	.word	0x200001f4
 800057c:	0800b020 	.word	0x0800b020
 8000580:	0800b024 	.word	0x0800b024

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 ff6c 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f890 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fac0 	bl	8000b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 faa0 	bl	8000ad8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000598:	f000 f8ee 	bl	8000778 <MX_I2C1_Init>
  MX_SPI1_Init();
 800059c:	f000 f92c 	bl	80007f8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80005a0:	f000 fa78 	bl	8000a94 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 fa46 	bl	8000a34 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005a8:	f000 f964 	bl	8000874 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ac:	f000 f9d2 	bl	8000954 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &data_c, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	492f      	ldr	r1, [pc, #188]	; (8000670 <main+0xec>)
 80005b4:	482f      	ldr	r0, [pc, #188]	; (8000674 <main+0xf0>)
 80005b6:	f004 fc17 	bl	8004de8 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005ba:	2100      	movs	r1, #0
 80005bc:	482e      	ldr	r0, [pc, #184]	; (8000678 <main+0xf4>)
 80005be:	f003 fbb5 	bl	8003d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005c2:	2104      	movs	r1, #4
 80005c4:	482c      	ldr	r0, [pc, #176]	; (8000678 <main+0xf4>)
 80005c6:	f003 fbb1 	bl	8003d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005ca:	2108      	movs	r1, #8
 80005cc:	482a      	ldr	r0, [pc, #168]	; (8000678 <main+0xf4>)
 80005ce:	f003 fbad 	bl	8003d2c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005d2:	2100      	movs	r1, #0
 80005d4:	4829      	ldr	r0, [pc, #164]	; (800067c <main+0xf8>)
 80005d6:	f003 fba9 	bl	8003d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005da:	2104      	movs	r1, #4
 80005dc:	4827      	ldr	r0, [pc, #156]	; (800067c <main+0xf8>)
 80005de:	f003 fba5 	bl	8003d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005e2:	2108      	movs	r1, #8
 80005e4:	4825      	ldr	r0, [pc, #148]	; (800067c <main+0xf8>)
 80005e6:	f003 fba1 	bl	8003d2c <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <main+0xf4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <main+0xf4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2200      	movs	r2, #0
 80005f8:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <main+0xf4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <main+0xf8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <main+0xf8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <main+0xf8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2200      	movs	r2, #0
 8000618:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800061a:	f005 fdfb 	bl	8006214 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of diffBufferRead */
  diffBufferReadHandle = osMutexNew(&diffBufferRead_attributes);
 800061e:	4818      	ldr	r0, [pc, #96]	; (8000680 <main+0xfc>)
 8000620:	f005 ff38 	bl	8006494 <osMutexNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <main+0x100>)
 8000628:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of diffRxData */
  diffRxDataHandle = osSemaphoreNew(1, 1, &diffRxData_attributes);
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <main+0x104>)
 800062c:	2101      	movs	r1, #1
 800062e:	2001      	movs	r0, #1
 8000630:	f005 ffca 	bl	80065c8 <osSemaphoreNew>
 8000634:	4603      	mov	r3, r0
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <main+0x108>)
 8000638:	6013      	str	r3, [r2, #0]

  /* creation of dataBufferSemaphore */
  dataBufferSemaphoreHandle = osSemaphoreNew(1, 1, &dataBufferSemaphore_attributes);
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <main+0x10c>)
 800063c:	2101      	movs	r1, #1
 800063e:	2001      	movs	r0, #1
 8000640:	f005 ffc2 	bl	80065c8 <osSemaphoreNew>
 8000644:	4603      	mov	r3, r0
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <main+0x110>)
 8000648:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <main+0x114>)
 800064c:	2100      	movs	r1, #0
 800064e:	4813      	ldr	r0, [pc, #76]	; (800069c <main+0x118>)
 8000650:	f005 fe48 	bl	80062e4 <osThreadNew>
 8000654:	4603      	mov	r3, r0
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <main+0x11c>)
 8000658:	6013      	str	r3, [r2, #0]

  /* creation of uartRxDiff */
  uartRxDiffHandle = osThreadNew(uartRxDiff_f, NULL, &uartRxDiff_attributes);
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <main+0x120>)
 800065c:	2100      	movs	r1, #0
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <main+0x124>)
 8000660:	f005 fe40 	bl	80062e4 <osThreadNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <main+0x128>)
 8000668:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800066a:	f005 fe07 	bl	800627c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0xea>
 8000670:	20000656 	.word	0x20000656
 8000674:	200001f4 	.word	0x200001f4
 8000678:	2000015c 	.word	0x2000015c
 800067c:	200001a8 	.word	0x200001a8
 8000680:	0800b0d4 	.word	0x0800b0d4
 8000684:	200005b4 	.word	0x200005b4
 8000688:	0800b0e4 	.word	0x0800b0e4
 800068c:	200005b8 	.word	0x200005b8
 8000690:	0800b0f4 	.word	0x0800b0f4
 8000694:	200005bc 	.word	0x200005bc
 8000698:	0800b08c 	.word	0x0800b08c
 800069c:	08000c11 	.word	0x08000c11
 80006a0:	200005ac 	.word	0x200005ac
 80006a4:	0800b0b0 	.word	0x0800b0b0
 80006a8:	08000c21 	.word	0x08000c21
 80006ac:	200005b0 	.word	0x200005b0

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09e      	sub	sp, #120	; 0x78
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006ba:	2228      	movs	r2, #40	; 0x28
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 f9a0 	bl	8009a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	223c      	movs	r2, #60	; 0x3c
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f009 f992 	bl	8009a04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006e0:	2303      	movs	r3, #3
 80006e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	2301      	movs	r3, #1
 80006f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000700:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000704:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fcea 	bl	80020e4 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000716:	f000 faab 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000730:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000734:	2101      	movs	r1, #1
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fd12 	bl	8003160 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000742:	f000 fa95 	bl	8000c70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <SystemClock_Config+0xc4>)
 8000748:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	4618      	mov	r0, r3
 800075c:	f002 ff68 	bl	8003630 <HAL_RCCEx_PeriphCLKConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000766:	f000 fa83 	bl	8000c70 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3778      	adds	r7, #120	; 0x78
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	00020022 	.word	0x00020022

08000778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_I2C1_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_I2C1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_I2C1_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_I2C1_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_I2C1_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <MX_I2C1_Init+0x74>)
 80007b4:	f001 fa9e 	bl	8001cf4 <HAL_I2C_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 fa57 	bl	8000c70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <MX_I2C1_Init+0x74>)
 80007c6:	f001 fb24 	bl	8001e12 <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 fa4e 	bl	8000c70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_I2C1_Init+0x74>)
 80007d8:	f001 fb66 	bl	8001ea8 <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 fa45 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000a4 	.word	0x200000a4
 80007f0:	40005400 	.word	0x40005400
 80007f4:	2000090e 	.word	0x2000090e

080007f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_SPI1_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <MX_SPI1_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_SPI1_Init+0x74>)
 8000804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_SPI1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_SPI1_Init+0x74>)
 8000812:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000816:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_SPI1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_SPI1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_SPI1_Init+0x74>)
 8000826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_SPI1_Init+0x74>)
 800082e:	2208      	movs	r2, #8
 8000830:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_SPI1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_SPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_SPI1_Init+0x74>)
 8000846:	2207      	movs	r2, #7
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_SPI1_Init+0x74>)
 8000852:	2208      	movs	r2, #8
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_SPI1_Init+0x74>)
 8000858:	f003 f89a 	bl	8003990 <HAL_SPI_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fa05 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000f8 	.word	0x200000f8
 8000870:	40013000 	.word	0x40013000

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_TIM2_Init+0xdc>)
 800089a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008a2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80008a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008b0:	2263      	movs	r2, #99	; 0x63
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008c0:	4823      	ldr	r0, [pc, #140]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008c2:	f003 f9db 	bl	8003c7c <HAL_TIM_PWM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 f9d0 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_TIM2_Init+0xdc>)
 80008e0:	f004 f90c 	bl	8004afc <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008ea:	f000 f9c1 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_TIM2_Init+0xdc>)
 8000906:	f003 fc31 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000910:	f000 f9ae 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2204      	movs	r2, #4
 8000918:	4619      	mov	r1, r3
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_TIM2_Init+0xdc>)
 800091c:	f003 fc26 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000926:	f000 f9a3 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	2208      	movs	r2, #8
 800092e:	4619      	mov	r1, r3
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM2_Init+0xdc>)
 8000932:	f003 fc1b 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800093c:	f000 f998 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM2_Init+0xdc>)
 8000942:	f000 fa7b 	bl	8000e3c <HAL_TIM_MspPostInit>

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000015c 	.word	0x2000015c

08000954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_TIM3_Init+0xd8>)
 800097a:	4a2d      	ldr	r2, [pc, #180]	; (8000a30 <MX_TIM3_Init+0xdc>)
 800097c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_TIM3_Init+0xd8>)
 8000980:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_TIM3_Init+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800098c:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <MX_TIM3_Init+0xd8>)
 800098e:	2263      	movs	r2, #99	; 0x63
 8000990:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_TIM3_Init+0xd8>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_TIM3_Init+0xd8>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800099e:	4823      	ldr	r0, [pc, #140]	; (8000a2c <MX_TIM3_Init+0xd8>)
 80009a0:	f003 f96c 	bl	8003c7c <HAL_TIM_PWM_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80009aa:	f000 f961 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	481b      	ldr	r0, [pc, #108]	; (8000a2c <MX_TIM3_Init+0xd8>)
 80009be:	f004 f89d 	bl	8004afc <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80009c8:	f000 f952 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009cc:	2360      	movs	r3, #96	; 0x60
 80009ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <MX_TIM3_Init+0xd8>)
 80009e4:	f003 fbc2 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80009ee:	f000 f93f 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	2204      	movs	r2, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_TIM3_Init+0xd8>)
 80009fa:	f003 fbb7 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a04:	f000 f934 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <MX_TIM3_Init+0xd8>)
 8000a10:	f003 fbac 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000a1a:	f000 f929 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <MX_TIM3_Init+0xd8>)
 8000a20:	f000 fa0c 	bl	8000e3c <HAL_TIM_MspPostInit>

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200001a8 	.word	0x200001a8
 8000a30:	40000400 	.word	0x40000400

08000a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <MX_USART2_UART_Init+0x5c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a40:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART2_UART_Init+0x58>)
 8000a78:	f004 f8de 	bl	8004c38 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a82:	f000 f8f5 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200001f4 	.word	0x200001f4
 8000a90:	40004400 	.word	0x40004400

08000a94 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_USB_PCD_Init+0x3c>)
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <MX_USB_PCD_Init+0x40>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USB_PCD_Init+0x3c>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_USB_PCD_Init+0x3c>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USB_PCD_Init+0x3c>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_USB_PCD_Init+0x3c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USB_PCD_Init+0x3c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_USB_PCD_Init+0x3c>)
 8000abe:	f001 fa3f 	bl	8001f40 <HAL_PCD_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000ac8:	f000 f8d2 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200002c0 	.word	0x200002c0
 8000ad4:	40005c00 	.word	0x40005c00

08000ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_DMA_Init+0x38>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <MX_DMA_Init+0x38>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_DMA_Init+0x38>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2105      	movs	r1, #5
 8000afa:	2011      	movs	r0, #17
 8000afc:	f000 fda0 	bl	8001640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b00:	2011      	movs	r0, #17
 8000b02:	f000 fdb9 	bl	8001678 <HAL_NVIC_EnableIRQ>

}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2a:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a36      	ldr	r2, [pc, #216]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a30      	ldr	r2, [pc, #192]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b4c:	6153      	str	r3, [r2, #20]
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a2a      	ldr	r2, [pc, #168]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b64:	6153      	str	r3, [r2, #20]
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a24      	ldr	r2, [pc, #144]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b94:	6153      	str	r3, [r2, #20]
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_GPIO_Init+0xf4>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000ba8:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_GPIO_Init+0xf8>)
 8000baa:	f001 f88b 	bl	8001cc4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000bae:	2337      	movs	r3, #55	; 0x37
 8000bb0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MX_GPIO_Init+0xf8>)
 8000bc4:	f000 ff04 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000bc8:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000bcc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	480a      	ldr	r0, [pc, #40]	; (8000c0c <MX_GPIO_Init+0xf8>)
 8000be2:	f000 fef5 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be6:	2301      	movs	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 fee8 	bl	80019d0 <HAL_GPIO_Init>

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48001000 	.word	0x48001000

08000c10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
//		osMutexAcquire(diffBufferReadHandle, portMAX_DELAY);
//		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//		osMutexRelease(diffBufferReadHandle);
//	}
//	osMutexAcquire(mutex_id, timeout)
    osDelay(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f005 fc0d 	bl	8006438 <osDelay>
 8000c1e:	e7fb      	b.n	8000c18 <StartDefaultTask+0x8>

08000c20 <uartRxDiff_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartRxDiff_f */
void uartRxDiff_f(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0a8      	sub	sp, #160	; 0xa0
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartRxDiff_f */
  /* Infinite loop */
  char d[150];
  for(;;)
  {
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <uartRxDiff_f+0x24>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 fd65 	bl	8006700 <osSemaphoreAcquire>
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);

	addToHandler(data);
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <uartRxDiff_f+0x28>)
 8000c38:	f7ff fc28 	bl	800048c <addToHandler>
//	if (data_c == '\r') {
//		data_c_idx = 0;
//		data[data_c_idx] = '\0';
////		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//	}
    osDelay(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f005 fbfb 	bl	8006438 <osDelay>
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 8000c42:	e7f1      	b.n	8000c28 <uartRxDiff_f+0x8>
 8000c44:	200005b8 	.word	0x200005b8
 8000c48:	200005c0 	.word	0x200005c0

08000c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c5e:	f000 fc17 	bl	8001490 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	210f      	movs	r1, #15
 8000cb6:	f06f 0001 	mvn.w	r0, #1
 8000cba:	f000 fcc1 	bl	8001640 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_I2C_MspInit+0x7c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d127      	bne.n	8000d3e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d06:	23c0      	movs	r3, #192	; 0xc0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d16:	2304      	movs	r3, #4
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <HAL_I2C_MspInit+0x84>)
 8000d22:	f000 fe55 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000400 	.word	0x48000400

08000d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_SPI_MspInit+0x7c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d128      	bne.n	8000dc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_SPI_MspInit+0x80>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_SPI_MspInit+0x80>)
 8000d7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_SPI_MspInit+0x80>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_SPI_MspInit+0x80>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <HAL_SPI_MspInit+0x80>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_SPI_MspInit+0x80>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000da6:	23e0      	movs	r3, #224	; 0xe0
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db6:	2305      	movs	r3, #5
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc4:	f000 fe04 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40013000 	.word	0x40013000
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de8:	d10c      	bne.n	8000e04 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_TIM_PWM_MspInit+0x5c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <HAL_TIM_PWM_MspInit+0x5c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_TIM_PWM_MspInit+0x5c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e02:	e010      	b.n	8000e26 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_TIM_PWM_MspInit+0x60>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10b      	bne.n	8000e26 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40000400 	.word	0x40000400

08000e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5c:	d13b      	bne.n	8000ed6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	6153      	str	r3, [r2, #20]
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b47      	ldr	r3, [pc, #284]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000e8e:	f248 0302 	movw	r3, #32770	; 0x8002
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f000 fd8f 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4832      	ldr	r0, [pc, #200]	; (8000f98 <HAL_TIM_MspPostInit+0x15c>)
 8000ed0:	f000 fd7e 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ed4:	e059      	b.n	8000f8a <HAL_TIM_MspPostInit+0x14e>
  else if(htim->Instance==TIM3)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <HAL_TIM_MspPostInit+0x160>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d154      	bne.n	8000f8a <HAL_TIM_MspPostInit+0x14e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eea:	6153      	str	r3, [r2, #20]
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f02:	6153      	str	r3, [r2, #20]
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f1a:	6153      	str	r3, [r2, #20]
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_TIM_MspPostInit+0x158>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 fd43 	bl	80019d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_TIM_MspPostInit+0x15c>)
 8000f66:	f000 fd33 	bl	80019d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f6a:	2340      	movs	r3, #64	; 0x40
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <HAL_TIM_MspPostInit+0x164>)
 8000f86:	f000 fd23 	bl	80019d0 <HAL_GPIO_Init>
}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	40000400 	.word	0x40000400
 8000fa0:	48000800 	.word	0x48000800

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a2f      	ldr	r2, [pc, #188]	; (8001080 <HAL_UART_MspInit+0xdc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d157      	bne.n	8001076 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <HAL_UART_MspInit+0xe0>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a2e      	ldr	r2, [pc, #184]	; (8001084 <HAL_UART_MspInit+0xe0>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_UART_MspInit+0xe0>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_UART_MspInit+0xe0>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a28      	ldr	r2, [pc, #160]	; (8001084 <HAL_UART_MspInit+0xe0>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_UART_MspInit+0xe0>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001006:	2307      	movs	r3, #7
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001014:	f000 fcdc 	bl	80019d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_UART_MspInit+0xe4>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <HAL_UART_MspInit+0xe8>)
 800101c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_UART_MspInit+0xe4>)
 8001020:	2210      	movs	r2, #16
 8001022:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0xe4>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_UART_MspInit+0xe4>)
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_UART_MspInit+0xe4>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_UART_MspInit+0xe4>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_UART_MspInit+0xe4>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_UART_MspInit+0xe4>)
 8001044:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001048:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800104a:	480f      	ldr	r0, [pc, #60]	; (8001088 <HAL_UART_MspInit+0xe4>)
 800104c:	f000 fb22 	bl	8001694 <HAL_DMA_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001056:	f7ff fe0b 	bl	8000c70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_UART_MspInit+0xe4>)
 800105e:	671a      	str	r2, [r3, #112]	; 0x70
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <HAL_UART_MspInit+0xe4>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2105      	movs	r1, #5
 800106a:	2026      	movs	r0, #38	; 0x26
 800106c:	f000 fae8 	bl	8001640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001070:	2026      	movs	r0, #38	; 0x26
 8001072:	f000 fb01 	bl	8001678 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40004400 	.word	0x40004400
 8001084:	40021000 	.word	0x40021000
 8001088:	2000027c 	.word	0x2000027c
 800108c:	40020080 	.word	0x40020080

08001090 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a18      	ldr	r2, [pc, #96]	; (8001110 <HAL_PCD_MspInit+0x80>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d129      	bne.n	8001106 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_PCD_MspInit+0x84>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_PCD_MspInit+0x84>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_PCD_MspInit+0x84>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80010ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80010dc:	230e      	movs	r3, #14
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f000 fc71 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_PCD_MspInit+0x84>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_PCD_MspInit+0x84>)
 80010f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_PCD_MspInit+0x84>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40005c00 	.word	0x40005c00
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <HAL_InitTick+0xcc>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <HAL_InitTick+0xcc>)
 800112e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_InitTick+0xcc>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001140:	f107 020c 	add.w	r2, r7, #12
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fa3e 	bl	80035cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001150:	f002 fa1a 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8001154:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <HAL_InitTick+0xd0>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0c9b      	lsrs	r3, r3, #18
 8001160:	3b01      	subs	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_InitTick+0xd4>)
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <HAL_InitTick+0xd8>)
 8001168:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_InitTick+0xd4>)
 800116c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001170:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_InitTick+0xd4>)
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_InitTick+0xd4>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_InitTick+0xd4>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_InitTick+0xd4>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <HAL_InitTick+0xd4>)
 800118c:	f002 fcab 	bl	8003ae6 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800119a:	2b00      	cmp	r3, #0
 800119c:	d11b      	bne.n	80011d6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <HAL_InitTick+0xd4>)
 80011a0:	f002 fd02 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d111      	bne.n	80011d6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011b2:	2019      	movs	r0, #25
 80011b4:	f000 fa60 	bl	8001678 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d808      	bhi.n	80011d0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80011be:	2200      	movs	r2, #0
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	2019      	movs	r0, #25
 80011c4:	f000 fa3c 	bl	8001640 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_InitTick+0xdc>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e002      	b.n	80011d6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3730      	adds	r7, #48	; 0x30
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	431bde83 	.word	0x431bde83
 80011ec:	20000658 	.word	0x20000658
 80011f0:	40012c00 	.word	0x40012c00
 80011f4:	20000018 	.word	0x20000018

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <DMA1_Channel7_IRQHandler+0x10>)
 800122a:	f000 faf1 	bl	8001810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000027c 	.word	0x2000027c

08001238 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800123e:	f002 fe75 	bl	8003f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000658 	.word	0x20000658

0800124c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <USART2_IRQHandler+0x10>)
 8001252:	f003 fe0d 	bl	8004e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001f4 	.word	0x200001f4

08001260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_kill>:

int _kill(int pid, int sig)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800127a:	f008 fb8b 	bl	8009994 <__errno>
 800127e:	4603      	mov	r3, r0
 8001280:	2216      	movs	r2, #22
 8001282:	601a      	str	r2, [r3, #0]
  return -1;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_exit>:

void _exit (int status)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffe7 	bl	8001270 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012a2:	e7fe      	b.n	80012a2 <_exit+0x12>

080012a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e00a      	b.n	80012cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012b6:	f3af 8000 	nop.w
 80012ba:	4601      	mov	r1, r0
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	60ba      	str	r2, [r7, #8]
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbf0      	blt.n	80012b6 <_read+0x12>
  }

  return len;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e009      	b.n	8001304 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	60ba      	str	r2, [r7, #8]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf1      	blt.n	80012f0 <_write+0x12>
  }
  return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_close>:

int _close(int file)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133e:	605a      	str	r2, [r3, #4]
  return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_isatty>:

int _isatty(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <_sbrk+0x5c>)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <_sbrk+0x60>)
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <_sbrk+0x64>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <_sbrk+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d207      	bcs.n	80013c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b0:	f008 faf0 	bl	8009994 <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	220c      	movs	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013be:	e009      	b.n	80013d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <_sbrk+0x64>)
 80013d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000a000 	.word	0x2000a000
 80013e0:	00000400 	.word	0x00000400
 80013e4:	200006a4 	.word	0x200006a4
 80013e8:	20002008 	.word	0x20002008

080013ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001414:	f7ff ffea 	bl	80013ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <LoopForever+0x6>)
  ldr r1, =_edata
 800141a:	490d      	ldr	r1, [pc, #52]	; (8001450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <LoopForever+0xe>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001430:	4c0a      	ldr	r4, [pc, #40]	; (800145c <LoopForever+0x16>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143e:	f008 faaf 	bl	80099a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001442:	f7ff f89f 	bl	8000584 <main>

08001446 <LoopForever>:

LoopForever:
    b LoopForever
 8001446:	e7fe      	b.n	8001446 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001448:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001454:	0800b38c 	.word	0x0800b38c
  ldr r2, =_sbss
 8001458:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800145c:	20002004 	.word	0x20002004

08001460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_2_IRQHandler>
	...

08001464 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_Init+0x28>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_Init+0x28>)
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001474:	2003      	movs	r0, #3
 8001476:	f000 f8d8 	bl	800162a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147a:	200f      	movs	r0, #15
 800147c:	f7ff fe4c 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001480:	f7ff fbfc 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40022000 	.word	0x40022000

08001490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	2000001c 	.word	0x2000001c
 80014b4:	200006a8 	.word	0x200006a8

080014b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200006a8 	.word	0x200006a8

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	; (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff4c 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001652:	f7ff ff61 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001656:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	6978      	ldr	r0, [r7, #20]
 800165e:	f7ff ffb1 	bl	80015c4 <NVIC_EncodePriority>
 8001662:	4602      	mov	r2, r0
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff80 	bl	8001570 <__NVIC_SetPriority>
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff54 	bl	8001534 <__NVIC_EnableIRQ>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e037      	b.n	800171a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f92b 	bl	8001958 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}  
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001730:	2b02      	cmp	r3, #2
 8001732:	d008      	beq.n	8001746 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2204      	movs	r2, #4
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e020      	b.n	8001788 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 020e 	bic.w	r2, r2, #14
 8001754:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d005      	beq.n	80017b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2204      	movs	r2, #4
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e027      	b.n	8001806 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 020e 	bic.w	r2, r2, #14
 80017c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
    } 
  }
  return status;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	2204      	movs	r2, #4
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d024      	beq.n	8001882 <HAL_DMA_IRQHandler+0x72>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01f      	beq.n	8001882 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0204 	bic.w	r2, r2, #4
 800185e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001868:	2104      	movs	r1, #4
 800186a:	fa01 f202 	lsl.w	r2, r1, r2
 800186e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d06a      	beq.n	800194e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001880:	e065      	b.n	800194e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2202      	movs	r2, #2
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d02c      	beq.n	80018ec <HAL_DMA_IRQHandler+0xdc>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d027      	beq.n	80018ec <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10b      	bne.n	80018c2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 020a 	bic.w	r2, r2, #10
 80018b8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	2102      	movs	r1, #2
 80018cc:	fa01 f202 	lsl.w	r2, r1, r2
 80018d0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d035      	beq.n	800194e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80018ea:	e030      	b.n	800194e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	2208      	movs	r2, #8
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d028      	beq.n	800194e <HAL_DMA_IRQHandler+0x13e>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d023      	beq.n	800194e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 020e 	bic.w	r2, r2, #14
 8001914:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	2101      	movs	r1, #1
 8001920:	fa01 f202 	lsl.w	r2, r1, r2
 8001924:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
    }
  }
}  
 800194c:	e7ff      	b.n	800194e <HAL_DMA_IRQHandler+0x13e>
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <DMA_CalcBaseAndBitshift+0x60>)
 8001968:	429a      	cmp	r2, r3
 800196a:	d80f      	bhi.n	800198c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <DMA_CalcBaseAndBitshift+0x64>)
 8001974:	4413      	add	r3, r2
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	009a      	lsls	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <DMA_CalcBaseAndBitshift+0x6c>)
 8001988:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800198a:	e00e      	b.n	80019aa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <DMA_CalcBaseAndBitshift+0x70>)
 8001994:	4413      	add	r3, r2
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	009a      	lsls	r2, r3, #2
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <DMA_CalcBaseAndBitshift+0x74>)
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40020407 	.word	0x40020407
 80019bc:	bffdfff8 	.word	0xbffdfff8
 80019c0:	cccccccd 	.word	0xcccccccd
 80019c4:	40020000 	.word	0x40020000
 80019c8:	bffdfbf8 	.word	0xbffdfbf8
 80019cc:	40020400 	.word	0x40020400

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e154      	b.n	8001c8a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8146 	beq.w	8001c84 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d005      	beq.n	8001a10 <HAL_GPIO_Init+0x40>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d130      	bne.n	8001a72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a46:	2201      	movs	r2, #1
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	f003 0201 	and.w	r2, r3, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d017      	beq.n	8001aae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d123      	bne.n	8001b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	6939      	ldr	r1, [r7, #16]
 8001afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0203 	and.w	r2, r3, #3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80a0 	beq.w	8001c84 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b44:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <HAL_GPIO_Init+0x2d8>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_GPIO_Init+0x2d8>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b55      	ldr	r3, [pc, #340]	; (8001ca8 <HAL_GPIO_Init+0x2d8>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5c:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b86:	d019      	beq.n	8001bbc <HAL_GPIO_Init+0x1ec>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a49      	ldr	r2, [pc, #292]	; (8001cb0 <HAL_GPIO_Init+0x2e0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_GPIO_Init+0x1e8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a48      	ldr	r2, [pc, #288]	; (8001cb4 <HAL_GPIO_Init+0x2e4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00d      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a47      	ldr	r2, [pc, #284]	; (8001cb8 <HAL_GPIO_Init+0x2e8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d007      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_GPIO_Init+0x1dc>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	e008      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bac:	2305      	movs	r3, #5
 8001bae:	e006      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e004      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bce:	4937      	ldr	r1, [pc, #220]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c00:	4a2f      	ldr	r2, [pc, #188]	; (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c2a:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c54:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_GPIO_Init+0x2f0>)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f aea3 	bne.w	80019e0 <HAL_GPIO_Init+0x10>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	48000800 	.word	0x48000800
 8001cb8:	48000c00 	.word	0x48000c00
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e081      	b.n	8001e0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe ffd6 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2224      	movs	r2, #36	; 0x24
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	e006      	b.n	8001d7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d104      	bne.n	8001d8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69d9      	ldr	r1, [r3, #28]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d138      	bne.n	8001e9a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e032      	b.n	8001e9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2224      	movs	r2, #36	; 0x24
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e64:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6819      	ldr	r1, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d139      	bne.n	8001f32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e033      	b.n	8001f34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001efa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f32:	2302      	movs	r3, #2
  }
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f42:	b08b      	sub	sp, #44	; 0x2c
 8001f44:	af06      	add	r7, sp, #24
 8001f46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0c4      	b.n	80020dc <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff f892 	bl	8001090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 f90f 	bl	800619c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e040      	b.n	8002006 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	3301      	adds	r3, #1
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3338      	adds	r3, #56	; 0x38
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	333c      	adds	r3, #60	; 0x3c
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3340      	adds	r3, #64	; 0x40
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	3301      	adds	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3b9      	bcc.n	8001f84 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e044      	b.n	80020a0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3301      	adds	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3b5      	bcc.n	8002016 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	687e      	ldr	r6, [r7, #4]
 80020b2:	466d      	mov	r5, sp
 80020b4:	f106 0410 	add.w	r4, r6, #16
 80020b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	602b      	str	r3, [r5, #0]
 80020c0:	1d33      	adds	r3, r6, #4
 80020c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c4:	6838      	ldr	r0, [r7, #0]
 80020c6:	f004 f884 	bl	80061d2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f001 b823 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 817d 	beq.w	800241a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002120:	4bbc      	ldr	r3, [pc, #752]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b04      	cmp	r3, #4
 800212a:	d00c      	beq.n	8002146 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800212c:	4bb9      	ldr	r3, [pc, #740]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d15c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x10e>
 8002138:	4bb6      	ldr	r3, [pc, #728]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d155      	bne.n	80021f2 <HAL_RCC_OscConfig+0x10e>
 8002146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800215a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <HAL_RCC_OscConfig+0x94>
 8002172:	4ba8      	ldr	r3, [pc, #672]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e015      	b.n	80021a4 <HAL_RCC_OscConfig+0xc0>
 8002178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800218c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002190:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002194:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80021a0:	4b9c      	ldr	r3, [pc, #624]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80021ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80021b0:	fa92 f2a2 	rbit	r2, r2
 80021b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80021b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f002 021f 	and.w	r2, r2, #31
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f202 	lsl.w	r2, r1, r2
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 811f 	beq.w	8002418 <HAL_RCC_OscConfig+0x334>
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8116 	bne.w	8002418 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f000 bfaf 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x12e>
 8002204:	4b83      	ldr	r3, [pc, #524]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a82      	ldr	r2, [pc, #520]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e036      	b.n	8002280 <HAL_RCC_OscConfig+0x19c>
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x158>
 8002222:	4b7c      	ldr	r3, [pc, #496]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7b      	ldr	r2, [pc, #492]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b79      	ldr	r3, [pc, #484]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a78      	ldr	r2, [pc, #480]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e021      	b.n	8002280 <HAL_RCC_OscConfig+0x19c>
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x184>
 800224e:	4b71      	ldr	r3, [pc, #452]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a70      	ldr	r2, [pc, #448]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6d      	ldr	r2, [pc, #436]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0x19c>
 8002268:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a69      	ldr	r2, [pc, #420]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a66      	ldr	r2, [pc, #408]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	f023 020f 	bic.w	r2, r3, #15
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	495f      	ldr	r1, [pc, #380]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002296:	4313      	orrs	r3, r2
 8002298:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d059      	beq.n	800235e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff f905 	bl	80014b8 <HAL_GetTick>
 80022ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff f900 	bl	80014b8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d902      	bls.n	80022ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	f000 bf43 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>
 80022ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80022de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d102      	bne.n	80022fc <HAL_RCC_OscConfig+0x218>
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e015      	b.n	8002328 <HAL_RCC_OscConfig+0x244>
 80022fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002300:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002314:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002318:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800232c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002330:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002334:	fa92 f2a2 	rbit	r2, r2
 8002338:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800233c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f042 0220 	orr.w	r2, r2, #32
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2101      	movs	r1, #1
 8002352:	fa01 f202 	lsl.w	r2, r1, r2
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0ab      	beq.n	80022b4 <HAL_RCC_OscConfig+0x1d0>
 800235c:	e05d      	b.n	800241a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff f8ab 	bl	80014b8 <HAL_GetTick>
 8002362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff f8a6 	bl	80014b8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d902      	bls.n	800237e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	f000 bee9 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>
 800237e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002382:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002392:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2cc>
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	e015      	b.n	80023dc <HAL_RCC_OscConfig+0x2f8>
 80023b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_RCC_OscConfig+0x330>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80023e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023e8:	fa92 f2a2 	rbit	r2, r2
 80023ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80023f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023f4:	fab2 f282 	clz	r2, r2
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f042 0220 	orr.w	r2, r2, #32
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f002 021f 	and.w	r2, r2, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ab      	bne.n	8002368 <HAL_RCC_OscConfig+0x284>
 8002410:	e003      	b.n	800241a <HAL_RCC_OscConfig+0x336>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 817d 	beq.w	800272a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002430:	4ba6      	ldr	r3, [pc, #664]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800243c:	4ba3      	ldr	r3, [pc, #652]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d172      	bne.n	800252e <HAL_RCC_OscConfig+0x44a>
 8002448:	4ba0      	ldr	r3, [pc, #640]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d16c      	bne.n	800252e <HAL_RCC_OscConfig+0x44a>
 8002454:	2302      	movs	r3, #2
 8002456:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002466:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_RCC_OscConfig+0x3a0>
 800247e:	4b93      	ldr	r3, [pc, #588]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e013      	b.n	80024ac <HAL_RCC_OscConfig+0x3c8>
 8002484:	2302      	movs	r3, #2
 8002486:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002496:	2302      	movs	r3, #2
 8002498:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800249c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80024a8:	4b88      	ldr	r3, [pc, #544]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2202      	movs	r2, #2
 80024ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80024b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80024b6:	fa92 f2a2 	rbit	r2, r2
 80024ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80024be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f042 0220 	orr.w	r2, r2, #32
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f002 021f 	and.w	r2, r2, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCC_OscConfig+0x410>
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f000 be2e 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b75      	ldr	r3, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	21f8      	movs	r1, #248	; 0xf8
 800250a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002512:	fa91 f1a1 	rbit	r1, r1
 8002516:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800251a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800251e:	fab1 f181 	clz	r1, r1
 8002522:	b2c9      	uxtb	r1, r1
 8002524:	408b      	lsls	r3, r1
 8002526:	4969      	ldr	r1, [pc, #420]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252c:	e0fd      	b.n	800272a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8088 	beq.w	8002650 <HAL_RCC_OscConfig+0x56c>
 8002540:	2301      	movs	r3, #1
 8002542:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002552:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	461a      	mov	r2, r3
 8002568:	2301      	movs	r3, #1
 800256a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe ffa4 	bl	80014b8 <HAL_GetTick>
 8002570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002576:	f7fe ff9f 	bl	80014b8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d902      	bls.n	800258c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	f000 bde2 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>
 800258c:	2302      	movs	r3, #2
 800258e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800259e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_RCC_OscConfig+0x4d8>
 80025b6:	4b45      	ldr	r3, [pc, #276]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	e013      	b.n	80025e4 <HAL_RCC_OscConfig+0x500>
 80025bc:	2302      	movs	r3, #2
 80025be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80025e0:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2202      	movs	r2, #2
 80025e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80025ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025ee:	fa92 f2a2 	rbit	r2, r2
 80025f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025fa:	fab2 f282 	clz	r2, r2
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f042 0220 	orr.w	r2, r2, #32
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f002 021f 	and.w	r2, r2, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0af      	beq.n	8002576 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	21f8      	movs	r1, #248	; 0xf8
 800262c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002634:	fa91 f1a1 	rbit	r1, r1
 8002638:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800263c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002640:	fab1 f181 	clz	r1, r1
 8002644:	b2c9      	uxtb	r1, r1
 8002646:	408b      	lsls	r3, r1
 8002648:	4920      	ldr	r1, [pc, #128]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
 800264e:	e06c      	b.n	800272a <HAL_RCC_OscConfig+0x646>
 8002650:	2301      	movs	r3, #1
 8002652:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002662:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002670:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	461a      	mov	r2, r3
 8002678:	2300      	movs	r3, #0
 800267a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe ff1c 	bl	80014b8 <HAL_GetTick>
 8002680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe ff17 	bl	80014b8 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	f000 bd5a 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>
 800269c:	2302      	movs	r3, #2
 800269e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80026ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d104      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5ec>
 80026c6:	4b01      	ldr	r3, [pc, #4]	; (80026cc <HAL_RCC_OscConfig+0x5e8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e015      	b.n	80026f8 <HAL_RCC_OscConfig+0x614>
 80026cc:	40021000 	.word	0x40021000
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026e2:	2302      	movs	r3, #2
 80026e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026f4:	4bc8      	ldr	r3, [pc, #800]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2202      	movs	r2, #2
 80026fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002702:	fa92 f2a2 	rbit	r2, r2
 8002706:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800270a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800270e:	fab2 f282 	clz	r2, r2
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	f042 0220 	orr.w	r2, r2, #32
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f002 021f 	and.w	r2, r2, #31
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f202 	lsl.w	r2, r1, r2
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1ad      	bne.n	8002686 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8110 	beq.w	8002960 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d079      	beq.n	8002844 <HAL_RCC_OscConfig+0x760>
 8002750:	2301      	movs	r3, #1
 8002752:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	4bab      	ldr	r3, [pc, #684]	; (8002a1c <HAL_RCC_OscConfig+0x938>)
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	461a      	mov	r2, r3
 8002776:	2301      	movs	r3, #1
 8002778:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe fe9d 	bl	80014b8 <HAL_GetTick>
 800277e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002784:	f7fe fe98 	bl	80014b8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d902      	bls.n	800279a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	f000 bcdb 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027b4:	2202      	movs	r2, #2
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fa93 f2a3 	rbit	r2, r3
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027d8:	2202      	movs	r2, #2
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f4:	4b88      	ldr	r3, [pc, #544]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 80027f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002800:	2102      	movs	r1, #2
 8002802:	6019      	str	r1, [r3, #0]
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f1a3 	rbit	r1, r3
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800281a:	6019      	str	r1, [r3, #0]
  return result;
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0a0      	beq.n	8002784 <HAL_RCC_OscConfig+0x6a0>
 8002842:	e08d      	b.n	8002960 <HAL_RCC_OscConfig+0x87c>
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002866:	601a      	str	r2, [r3, #0]
  return result;
 8002868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002870:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_OscConfig+0x938>)
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	461a      	mov	r2, r3
 8002882:	2300      	movs	r3, #0
 8002884:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe fe17 	bl	80014b8 <HAL_GetTick>
 800288a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002890:	f7fe fe12 	bl	80014b8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d902      	bls.n	80028a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	f000 bc55 	b.w	8003150 <HAL_RCC_OscConfig+0x106c>
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80028ae:	2202      	movs	r2, #2
 80028b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028d2:	2202      	movs	r2, #2
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fa93 f2a3 	rbit	r2, r3
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028f6:	2202      	movs	r2, #2
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f2a3 	rbit	r2, r3
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002910:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 8002914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800291e:	2102      	movs	r1, #2
 8002920:	6019      	str	r1, [r3, #0]
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f1a3 	rbit	r1, r3
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002938:	6019      	str	r1, [r3, #0]
  return result;
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d197      	bne.n	8002890 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 81a1 	beq.w	8002cb8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297c:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002992:	61d3      	str	r3, [r2, #28]
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80029ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <HAL_RCC_OscConfig+0x93c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d11a      	bne.n	80029f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_RCC_OscConfig+0x93c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <HAL_RCC_OscConfig+0x93c>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fd73 	bl	80014b8 <HAL_GetTick>
 80029d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	e009      	b.n	80029ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d8:	f7fe fd6e 	bl	80014b8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	; 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e3b1      	b.n	8003150 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <HAL_RCC_OscConfig+0x93c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0ef      	beq.n	80029d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10d      	bne.n	8002a24 <HAL_RCC_OscConfig+0x940>
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a02      	ldr	r2, [pc, #8]	; (8002a18 <HAL_RCC_OscConfig+0x934>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6213      	str	r3, [r2, #32]
 8002a14:	e03c      	b.n	8002a90 <HAL_RCC_OscConfig+0x9ac>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	10908120 	.word	0x10908120
 8002a20:	40007000 	.word	0x40007000
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCC_OscConfig+0x96a>
 8002a34:	4bc1      	ldr	r3, [pc, #772]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4ac0      	ldr	r2, [pc, #768]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	4bbe      	ldr	r3, [pc, #760]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4abd      	ldr	r2, [pc, #756]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	e020      	b.n	8002a90 <HAL_RCC_OscConfig+0x9ac>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x994>
 8002a5e:	4bb7      	ldr	r3, [pc, #732]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4ab6      	ldr	r2, [pc, #728]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	4bb4      	ldr	r3, [pc, #720]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4ab3      	ldr	r2, [pc, #716]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6213      	str	r3, [r2, #32]
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x9ac>
 8002a78:	4bb0      	ldr	r3, [pc, #704]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4aaf      	ldr	r2, [pc, #700]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6213      	str	r3, [r2, #32]
 8002a84:	4bad      	ldr	r3, [pc, #692]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4aac      	ldr	r2, [pc, #688]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8081 	beq.w	8002ba4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fd09 	bl	80014b8 <HAL_GetTick>
 8002aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe fd04 	bl	80014b8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e345      	b.n	8003150 <HAL_RCC_OscConfig+0x106c>
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002acc:	2202      	movs	r2, #2
 8002ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	fa93 f2a3 	rbit	r2, r3
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002af0:	2202      	movs	r2, #2
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b0a:	601a      	str	r2, [r3, #0]
  return result;
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_OscConfig+0xa4c>
 8002b2a:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	e013      	b.n	8002b58 <HAL_RCC_OscConfig+0xa74>
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b38:	2202      	movs	r2, #2
 8002b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fa93 f2a3 	rbit	r2, r3
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b60:	2102      	movs	r1, #2
 8002b62:	6011      	str	r1, [r2, #0]
 8002b64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	fa92 f1a2 	rbit	r1, r2
 8002b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b76:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b7a:	6011      	str	r1, [r2, #0]
  return result;
 8002b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b80:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	fab2 f282 	clz	r2, r2
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f002 021f 	and.w	r2, r2, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d084      	beq.n	8002aac <HAL_RCC_OscConfig+0x9c8>
 8002ba2:	e07f      	b.n	8002ca4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fc88 	bl	80014b8 <HAL_GetTick>
 8002ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bac:	e00b      	b.n	8002bc6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fe fc83 	bl	80014b8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e2c4      	b.n	8003150 <HAL_RCC_OscConfig+0x106c>
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bce:	2202      	movs	r2, #2
 8002bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	fa93 f2a3 	rbit	r2, r3
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fa93 f2a3 	rbit	r2, r3
 8002c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c08:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c0c:	601a      	str	r2, [r3, #0]
  return result;
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d102      	bne.n	8002c32 <HAL_RCC_OscConfig+0xb4e>
 8002c2c:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	e013      	b.n	8002c5a <HAL_RCC_OscConfig+0xb76>
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	fa93 f2a3 	rbit	r2, r3
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c62:	2102      	movs	r1, #2
 8002c64:	6011      	str	r1, [r2, #0]
 8002c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	fa92 f1a2 	rbit	r1, r2
 8002c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c78:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c7c:	6011      	str	r1, [r2, #0]
  return result;
 8002c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c82:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f002 021f 	and.w	r2, r2, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d184      	bne.n	8002bae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ca4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8242 	beq.w	800314e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_RCC_OscConfig+0xc58>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	f000 8213 	beq.w	80030fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	f040 8162 	bne.w	8002fae <HAL_RCC_OscConfig+0xeca>
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d0e:	601a      	str	r2, [r3, #0]
  return result;
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe fbc2 	bl	80014b8 <HAL_GetTick>
 8002d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d38:	e00c      	b.n	8002d54 <HAL_RCC_OscConfig+0xc70>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe fbba 	bl	80014b8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1fd      	b.n	8003150 <HAL_RCC_OscConfig+0x106c>
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f2a3 	rbit	r2, r3
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d78:	601a      	str	r2, [r3, #0]
  return result;
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d102      	bne.n	8002d9e <HAL_RCC_OscConfig+0xcba>
 8002d98:	4bb0      	ldr	r3, [pc, #704]	; (800305c <HAL_RCC_OscConfig+0xf78>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	e027      	b.n	8002dee <HAL_RCC_OscConfig+0xd0a>
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	fa93 f2a3 	rbit	r2, r3
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	4b9c      	ldr	r3, [pc, #624]	; (800305c <HAL_RCC_OscConfig+0xf78>)
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002df6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dfa:	6011      	str	r1, [r2, #0]
 8002dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e00:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	fa92 f1a2 	rbit	r1, r2
 8002e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e0e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e12:	6011      	str	r1, [r2, #0]
  return result;
 8002e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f042 0220 	orr.w	r2, r2, #32
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f002 021f 	and.w	r2, r2, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d182      	bne.n	8002d40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0xf78>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	497f      	ldr	r1, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0xf78>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e86:	601a      	str	r2, [r3, #0]
  return result;
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fb06 	bl	80014b8 <HAL_GetTick>
 8002eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb0:	e009      	b.n	8002ec6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fe fb01 	bl	80014b8 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e144      	b.n	8003150 <HAL_RCC_OscConfig+0x106c>
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002eea:	601a      	str	r2, [r3, #0]
  return result;
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_OscConfig+0xe2c>
 8002f0a:	4b54      	ldr	r3, [pc, #336]	; (800305c <HAL_RCC_OscConfig+0xf78>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e027      	b.n	8002f60 <HAL_RCC_OscConfig+0xe7c>
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	4b3f      	ldr	r3, [pc, #252]	; (800305c <HAL_RCC_OscConfig+0xf78>)
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f64:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f72:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	fa92 f1a2 	rbit	r1, r2
 8002f7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f84:	6011      	str	r1, [r2, #0]
  return result;
 8002f86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f042 0220 	orr.w	r2, r2, #32
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f002 021f 	and.w	r2, r2, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d082      	beq.n	8002eb2 <HAL_RCC_OscConfig+0xdce>
 8002fac:	e0cf      	b.n	800314e <HAL_RCC_OscConfig+0x106a>
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fd2:	601a      	str	r2, [r3, #0]
  return result;
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fe8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fa60 	bl	80014b8 <HAL_GetTick>
 8002ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffc:	e009      	b.n	8003012 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fa5b 	bl	80014b8 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e09e      	b.n	8003150 <HAL_RCC_OscConfig+0x106c>
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800301a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800301e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	fa93 f2a3 	rbit	r2, r3
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003036:	601a      	str	r2, [r3, #0]
  return result;
 8003038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003040:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d104      	bne.n	8003060 <HAL_RCC_OscConfig+0xf7c>
 8003056:	4b01      	ldr	r3, [pc, #4]	; (800305c <HAL_RCC_OscConfig+0xf78>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	e029      	b.n	80030b0 <HAL_RCC_OscConfig+0xfcc>
 800305c:	40021000 	.word	0x40021000
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800308e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x1078>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030bc:	6011      	str	r1, [r2, #0]
 80030be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	fa92 f1a2 	rbit	r1, r2
 80030cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030d4:	6011      	str	r1, [r2, #0]
  return result;
 80030d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	fab2 f282 	clz	r2, r2
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f042 0220 	orr.w	r2, r2, #32
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f002 021f 	and.w	r2, r2, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f202 	lsl.w	r2, r1, r2
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d180      	bne.n	8002ffe <HAL_RCC_OscConfig+0xf1a>
 80030fc:	e027      	b.n	800314e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e01e      	b.n	8003150 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_RCC_OscConfig+0x1078>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800311a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800311e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	429a      	cmp	r2, r3
 8003130:	d10b      	bne.n	800314a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003132:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003136:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003146:	429a      	cmp	r2, r3
 8003148:	d001      	beq.n	800314e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000

08003160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b09e      	sub	sp, #120	; 0x78
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e162      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b90      	ldr	r3, [pc, #576]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	498b      	ldr	r1, [pc, #556]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b89      	ldr	r3, [pc, #548]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e14a      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b82      	ldr	r3, [pc, #520]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	497f      	ldr	r1, [pc, #508]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80dc 	beq.w	800338c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d13c      	bne.n	8003256 <HAL_RCC_ClockConfig+0xf6>
 80031dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_ClockConfig+0xa6>
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	e00f      	b.n	8003226 <HAL_RCC_ClockConfig+0xc6>
 8003206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	667b      	str	r3, [r7, #100]	; 0x64
 8003214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003218:	663b      	str	r3, [r7, #96]	; 0x60
 800321a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800322a:	65ba      	str	r2, [r7, #88]	; 0x58
 800322c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800322e:	fa92 f2a2 	rbit	r2, r2
 8003232:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f042 0220 	orr.w	r2, r2, #32
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f002 021f 	and.w	r2, r2, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d17b      	bne.n	800334a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0f3      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d13c      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x178>
 800325e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003262:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800326c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <HAL_RCC_ClockConfig+0x128>
 8003282:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	e00f      	b.n	80032a8 <HAL_RCC_ClockConfig+0x148>
 8003288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
 8003296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
 800329c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a4:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80032ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b0:	fa92 f2a2 	rbit	r2, r2
 80032b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d13a      	bne.n	800334a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b2      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
 80032d8:	2302      	movs	r3, #2
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_ClockConfig+0x1a0>
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e00d      	b.n	800331c <HAL_RCC_ClockConfig+0x1bc>
 8003300:	2302      	movs	r3, #2
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	2302      	movs	r3, #2
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2202      	movs	r2, #2
 800331e:	61ba      	str	r2, [r7, #24]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	fa92 f2a2 	rbit	r2, r2
 8003326:	617a      	str	r2, [r7, #20]
  return result;
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	fab2 f282 	clz	r2, r2
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f002 021f 	and.w	r2, r2, #31
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f202 	lsl.w	r2, r1, r2
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e079      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f023 0203 	bic.w	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	491a      	ldr	r1, [pc, #104]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800335c:	f7fe f8ac 	bl	80014b8 <HAL_GetTick>
 8003360:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	e00a      	b.n	800337a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003364:	f7fe f8a8 	bl	80014b8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e061      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 020c 	and.w	r2, r3, #12
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	429a      	cmp	r2, r3
 800338a:	d1eb      	bne.n	8003364 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d214      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 0207 	bic.w	r2, r3, #7
 80033a2:	4906      	ldr	r1, [pc, #24]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b04      	ldr	r3, [pc, #16]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e040      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
 80033bc:	40022000 	.word	0x40022000
 80033c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	491a      	ldr	r1, [pc, #104]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4912      	ldr	r1, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003402:	f000 f829 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003406:	4601      	mov	r1, r0
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	22f0      	movs	r2, #240	; 0xf0
 8003412:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	fa92 f2a2 	rbit	r2, r2
 800341a:	60fa      	str	r2, [r7, #12]
  return result;
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	fab2 f282 	clz	r2, r2
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	40d3      	lsrs	r3, r2
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x2ec>)
 8003428:	5cd3      	ldrb	r3, [r2, r3]
 800342a:	fa21 f303 	lsr.w	r3, r1, r3
 800342e:	4a08      	ldr	r2, [pc, #32]	; (8003450 <HAL_RCC_ClockConfig+0x2f0>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_RCC_ClockConfig+0x2f4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fe6e 	bl	8001118 <HAL_InitTick>
  
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3778      	adds	r7, #120	; 0x78
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	0800b104 	.word	0x0800b104
 8003450:	20000014 	.word	0x20000014
 8003454:	20000018 	.word	0x20000018

08003458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b08b      	sub	sp, #44	; 0x2c
 800345c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b04      	cmp	r3, #4
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x30>
 8003482:	2b08      	cmp	r3, #8
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x36>
 8003486:	e03c      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_GetSysClockFreq+0xc4>)
 800348a:	623b      	str	r3, [r7, #32]
      break;
 800348c:	e03c      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003494:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003498:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	fa92 f2a2 	rbit	r2, r2
 80034a0:	607a      	str	r2, [r7, #4]
  return result;
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	40d3      	lsrs	r3, r2
 80034ac:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	220f      	movs	r2, #15
 80034bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	fa92 f2a2 	rbit	r2, r2
 80034c4:	60fa      	str	r2, [r7, #12]
  return result;
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	40d3      	lsrs	r3, r2
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034e0:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_RCC_GetSysClockFreq+0xc4>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e004      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	623b      	str	r3, [r7, #32]
      break;
 8003500:	e002      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003504:	623b      	str	r3, [r7, #32]
      break;
 8003506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003508:	6a3b      	ldr	r3, [r7, #32]
}
 800350a:	4618      	mov	r0, r3
 800350c:	372c      	adds	r7, #44	; 0x2c
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	007a1200 	.word	0x007a1200
 8003520:	0800b11c 	.word	0x0800b11c
 8003524:	0800b12c 	.word	0x0800b12c
 8003528:	003d0900 	.word	0x003d0900

0800352c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_RCC_GetHCLKFreq+0x14>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000014 	.word	0x20000014

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800354a:	f7ff ffef 	bl	800352c <HAL_RCC_GetHCLKFreq>
 800354e:	4601      	mov	r1, r0
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003558:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800355c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	fa92 f2a2 	rbit	r2, r2
 8003564:	603a      	str	r2, [r7, #0]
  return result;
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	40d3      	lsrs	r3, r2
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003572:	5cd3      	ldrb	r3, [r2, r3]
 8003574:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	0800b114 	.word	0x0800b114

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800358e:	f7ff ffcd 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8003592:	4601      	mov	r1, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800359c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80035a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	fa92 f2a2 	rbit	r2, r2
 80035a8:	603a      	str	r2, [r7, #0]
  return result;
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	fab2 f282 	clz	r2, r2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	40d3      	lsrs	r3, r2
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	0800b114 	.word	0x0800b114

080035cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	220f      	movs	r2, #15
 80035da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	08db      	lsrs	r3, r3, #3
 8003606:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <HAL_RCC_GetClockConfig+0x60>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0207 	and.w	r2, r3, #7
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	601a      	str	r2, [r3, #0]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b092      	sub	sp, #72	; 0x48
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003640:	2300      	movs	r3, #0
 8003642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80d4 	beq.w	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003654:	4b4e      	ldr	r3, [pc, #312]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10e      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b4b      	ldr	r3, [pc, #300]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4a4a      	ldr	r2, [pc, #296]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	61d3      	str	r3, [r2, #28]
 800366c:	4b48      	ldr	r3, [pc, #288]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b45      	ldr	r3, [pc, #276]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d118      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368a:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a41      	ldr	r2, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7fd ff0f 	bl	80014b8 <HAL_GetTick>
 800369a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fd ff0b 	bl	80014b8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	; 0x64
 80036aa:	d901      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e169      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b38      	ldr	r3, [pc, #224]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036bc:	4b34      	ldr	r3, [pc, #208]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8084 	beq.w	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036d8:	429a      	cmp	r2, r3
 80036da:	d07c      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036dc:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	461a      	mov	r2, r3
 8003706:	2301      	movs	r3, #1
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800370e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	461a      	mov	r2, r3
 800372a:	2300      	movs	r3, #0
 800372c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800372e:	4a18      	ldr	r2, [pc, #96]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003732:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04b      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fd febb 	bl	80014b8 <HAL_GetTick>
 8003742:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	e00a      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd feb7 	bl	80014b8 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e113      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800375c:	2302      	movs	r3, #2
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	2302      	movs	r3, #2
 800376a:	623b      	str	r3, [r7, #32]
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	61fb      	str	r3, [r7, #28]
  return result;
 8003774:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d108      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800378a:	4b01      	ldr	r3, [pc, #4]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	e00d      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
 8003798:	10908100 	.word	0x10908100
 800379c:	2302      	movs	r3, #2
 800379e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	4b78      	ldr	r3, [pc, #480]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2202      	movs	r2, #2
 80037ae:	613a      	str	r2, [r7, #16]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	fa92 f2a2 	rbit	r2, r2
 80037b6:	60fa      	str	r2, [r7, #12]
  return result;
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	fab2 f282 	clz	r2, r2
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	f002 021f 	and.w	r2, r2, #31
 80037ca:	2101      	movs	r1, #1
 80037cc:	fa01 f202 	lsl.w	r2, r1, r2
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0b7      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	496a      	ldr	r1, [pc, #424]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003808:	4b60      	ldr	r3, [pc, #384]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f023 0203 	bic.w	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	495d      	ldr	r1, [pc, #372]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003826:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	4956      	ldr	r1, [pc, #344]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003834:	4313      	orrs	r3, r2
 8003836:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003844:	4b51      	ldr	r3, [pc, #324]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	494e      	ldr	r1, [pc, #312]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f023 0210 	bic.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4947      	ldr	r1, [pc, #284]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003880:	4b42      	ldr	r3, [pc, #264]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	493f      	ldr	r1, [pc, #252]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f023 0220 	bic.w	r2, r3, #32
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4938      	ldr	r1, [pc, #224]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038bc:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	4930      	ldr	r1, [pc, #192]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038da:	4b2c      	ldr	r3, [pc, #176]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	4929      	ldr	r1, [pc, #164]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	4921      	ldr	r1, [pc, #132]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	491a      	ldr	r1, [pc, #104]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	4912      	ldr	r1, [pc, #72]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	490b      	ldr	r1, [pc, #44]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003960:	4313      	orrs	r3, r2
 8003962:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800397e:	4313      	orrs	r3, r2
 8003980:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3748      	adds	r7, #72	; 0x48
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000

08003990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e09d      	b.n	8003ade <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d108      	bne.n	80039bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b2:	d009      	beq.n	80039c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	61da      	str	r2, [r3, #28]
 80039ba:	e005      	b.n	80039c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd f9b6 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a08:	d902      	bls.n	8003a10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	e002      	b.n	8003a16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a1e:	d007      	beq.n	8003a30 <HAL_SPI_Init+0xa0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a28:	d002      	beq.n	8003a30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	ea42 0103 	orr.w	r1, r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	0c1b      	lsrs	r3, r3, #16
 8003a8c:	f003 0204 	and.w	r2, r3, #4
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003aac:	ea42 0103 	orr.w	r1, r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e049      	b.n	8003b8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f841 	bl	8003b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	4619      	mov	r1, r3
 8003b24:	4610      	mov	r0, r2
 8003b26:	f000 fc5d 	bl	80043e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e04a      	b.n	8003c56 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d018      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d013      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00e      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d009      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x6c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d115      	bne.n	8003c40 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d015      	beq.n	8003c52 <HAL_TIM_Base_Start_IT+0xaa>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2c:	d011      	beq.n	8003c52 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	e008      	b.n	8003c52 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e000      	b.n	8003c54 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40013400 	.word	0x40013400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	00010007 	.word	0x00010007

08003c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e049      	b.n	8003d22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fd f898 	bl	8000dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 fb92 	bl	80043e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <HAL_TIM_PWM_Start+0x24>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e03c      	b.n	8003dca <HAL_TIM_PWM_Start+0x9e>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d109      	bne.n	8003d6a <HAL_TIM_PWM_Start+0x3e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	e02f      	b.n	8003dca <HAL_TIM_PWM_Start+0x9e>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d109      	bne.n	8003d84 <HAL_TIM_PWM_Start+0x58>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e022      	b.n	8003dca <HAL_TIM_PWM_Start+0x9e>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d109      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x72>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e015      	b.n	8003dca <HAL_TIM_PWM_Start+0x9e>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d109      	bne.n	8003db8 <HAL_TIM_PWM_Start+0x8c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e008      	b.n	8003dca <HAL_TIM_PWM_Start+0x9e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e097      	b.n	8003f02 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Start+0xb6>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	e023      	b.n	8003e2a <HAL_TIM_PWM_Start+0xfe>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_PWM_Start+0xc6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df0:	e01b      	b.n	8003e2a <HAL_TIM_PWM_Start+0xfe>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_PWM_Start+0xd6>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e00:	e013      	b.n	8003e2a <HAL_TIM_PWM_Start+0xfe>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	d104      	bne.n	8003e12 <HAL_TIM_PWM_Start+0xe6>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e10:	e00b      	b.n	8003e2a <HAL_TIM_PWM_Start+0xfe>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d104      	bne.n	8003e22 <HAL_TIM_PWM_Start+0xf6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e20:	e003      	b.n	8003e2a <HAL_TIM_PWM_Start+0xfe>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	6839      	ldr	r1, [r7, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fe3c 	bl	8004ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a33      	ldr	r2, [pc, #204]	; (8003f0c <HAL_TIM_PWM_Start+0x1e0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <HAL_TIM_PWM_Start+0x13e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <HAL_TIM_PWM_Start+0x1e4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00e      	beq.n	8003e6a <HAL_TIM_PWM_Start+0x13e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <HAL_TIM_PWM_Start+0x1e8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d009      	beq.n	8003e6a <HAL_TIM_PWM_Start+0x13e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <HAL_TIM_PWM_Start+0x1ec>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <HAL_TIM_PWM_Start+0x13e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <HAL_TIM_PWM_Start+0x1f0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x142>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <HAL_TIM_PWM_Start+0x144>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <HAL_TIM_PWM_Start+0x1e0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d018      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0x194>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d013      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0x194>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <HAL_TIM_PWM_Start+0x1f4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0x194>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <HAL_TIM_PWM_Start+0x1f8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0x194>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <HAL_TIM_PWM_Start+0x1e4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0x194>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a16      	ldr	r2, [pc, #88]	; (8003f14 <HAL_TIM_PWM_Start+0x1e8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d115      	bne.n	8003eec <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_TIM_PWM_Start+0x1fc>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d015      	beq.n	8003efe <HAL_TIM_PWM_Start+0x1d2>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d011      	beq.n	8003efe <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	e008      	b.n	8003efe <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e000      	b.n	8003f00 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	00010007 	.word	0x00010007

08003f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d122      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d11b      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0202 	mvn.w	r2, #2
 8003f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fa1a 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa0c 	bl	8004394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fa1d 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d122      	bne.n	8003fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d11b      	bne.n	8003fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0204 	mvn.w	r2, #4
 8003fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9f0 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8003fc8:	e005      	b.n	8003fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f9e2 	bl	8004394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f9f3 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0208 	mvn.w	r2, #8
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2204      	movs	r2, #4
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f9c6 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9b8 	bl	8004394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9c9 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b10      	cmp	r3, #16
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2208      	movs	r2, #8
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f99c 	bl	80043a8 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f98e 	bl	8004394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f99f 	bl	80043bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10e      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0201 	mvn.w	r2, #1
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc fdce 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fd9a 	bl	8004c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ea:	d10e      	bne.n	800410a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b80      	cmp	r3, #128	; 0x80
 80040f8:	d107      	bne.n	800410a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fd8d 	bl	8004c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d10e      	bne.n	8004136 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d107      	bne.n	8004136 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f94d 	bl	80043d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b20      	cmp	r3, #32
 8004142:	d10e      	bne.n	8004162 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b20      	cmp	r3, #32
 8004150:	d107      	bne.n	8004162 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0220 	mvn.w	r2, #32
 800415a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fd4d 	bl	8004bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e0ff      	b.n	800438a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b14      	cmp	r3, #20
 8004196:	f200 80f0 	bhi.w	800437a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041f5 	.word	0x080041f5
 80041a4:	0800437b 	.word	0x0800437b
 80041a8:	0800437b 	.word	0x0800437b
 80041ac:	0800437b 	.word	0x0800437b
 80041b0:	08004235 	.word	0x08004235
 80041b4:	0800437b 	.word	0x0800437b
 80041b8:	0800437b 	.word	0x0800437b
 80041bc:	0800437b 	.word	0x0800437b
 80041c0:	08004277 	.word	0x08004277
 80041c4:	0800437b 	.word	0x0800437b
 80041c8:	0800437b 	.word	0x0800437b
 80041cc:	0800437b 	.word	0x0800437b
 80041d0:	080042b7 	.word	0x080042b7
 80041d4:	0800437b 	.word	0x0800437b
 80041d8:	0800437b 	.word	0x0800437b
 80041dc:	0800437b 	.word	0x0800437b
 80041e0:	080042f9 	.word	0x080042f9
 80041e4:	0800437b 	.word	0x0800437b
 80041e8:	0800437b 	.word	0x0800437b
 80041ec:	0800437b 	.word	0x0800437b
 80041f0:	08004339 	.word	0x08004339
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f982 	bl	8004504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0204 	bic.w	r2, r2, #4
 800421e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6999      	ldr	r1, [r3, #24]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	619a      	str	r2, [r3, #24]
      break;
 8004232:	e0a5      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f9f2 	bl	8004624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6999      	ldr	r1, [r3, #24]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	021a      	lsls	r2, r3, #8
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	619a      	str	r2, [r3, #24]
      break;
 8004274:	e084      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fa5b 	bl	8004738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0208 	orr.w	r2, r2, #8
 8004290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0204 	bic.w	r2, r2, #4
 80042a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69d9      	ldr	r1, [r3, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	61da      	str	r2, [r3, #28]
      break;
 80042b4:	e064      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fac3 	bl	8004848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69d9      	ldr	r1, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	61da      	str	r2, [r3, #28]
      break;
 80042f6:	e043      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fb0c 	bl	800491c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0208 	orr.w	r2, r2, #8
 8004312:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004336:	e023      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fb50 	bl	80049e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	021a      	lsls	r2, r3, #8
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004378:	e002      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
      break;
 800437e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004388:	7dfb      	ldrb	r3, [r7, #23]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop

08004394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a3c      	ldr	r2, [pc, #240]	; (80044e8 <TIM_Base_SetConfig+0x104>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00f      	beq.n	800441c <TIM_Base_SetConfig+0x38>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004402:	d00b      	beq.n	800441c <TIM_Base_SetConfig+0x38>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a39      	ldr	r2, [pc, #228]	; (80044ec <TIM_Base_SetConfig+0x108>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0x38>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <TIM_Base_SetConfig+0x10c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0x38>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <TIM_Base_SetConfig+0x110>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d108      	bne.n	800442e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2d      	ldr	r2, [pc, #180]	; (80044e8 <TIM_Base_SetConfig+0x104>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01b      	beq.n	800446e <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443c:	d017      	beq.n	800446e <TIM_Base_SetConfig+0x8a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <TIM_Base_SetConfig+0x108>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <TIM_Base_SetConfig+0x8a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <TIM_Base_SetConfig+0x10c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00f      	beq.n	800446e <TIM_Base_SetConfig+0x8a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a28      	ldr	r2, [pc, #160]	; (80044f4 <TIM_Base_SetConfig+0x110>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_Base_SetConfig+0x8a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <TIM_Base_SetConfig+0x114>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d007      	beq.n	800446e <TIM_Base_SetConfig+0x8a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a26      	ldr	r2, [pc, #152]	; (80044fc <TIM_Base_SetConfig+0x118>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_Base_SetConfig+0x8a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a25      	ldr	r2, [pc, #148]	; (8004500 <TIM_Base_SetConfig+0x11c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <TIM_Base_SetConfig+0x104>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00f      	beq.n	80044cc <TIM_Base_SetConfig+0xe8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a11      	ldr	r2, [pc, #68]	; (80044f4 <TIM_Base_SetConfig+0x110>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00b      	beq.n	80044cc <TIM_Base_SetConfig+0xe8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <TIM_Base_SetConfig+0x114>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <TIM_Base_SetConfig+0xe8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a0f      	ldr	r2, [pc, #60]	; (80044fc <TIM_Base_SetConfig+0x118>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_Base_SetConfig+0xe8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <TIM_Base_SetConfig+0x11c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	615a      	str	r2, [r3, #20]
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40013400 	.word	0x40013400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40014400 	.word	0x40014400
 8004500:	40014800 	.word	0x40014800

08004504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0201 	bic.w	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 0302 	bic.w	r3, r3, #2
 8004550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <TIM_OC1_SetConfig+0x10c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00f      	beq.n	8004584 <TIM_OC1_SetConfig+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <TIM_OC1_SetConfig+0x110>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_OC1_SetConfig+0x80>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <TIM_OC1_SetConfig+0x114>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_OC1_SetConfig+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a29      	ldr	r2, [pc, #164]	; (800461c <TIM_OC1_SetConfig+0x118>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC1_SetConfig+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a28      	ldr	r2, [pc, #160]	; (8004620 <TIM_OC1_SetConfig+0x11c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10c      	bne.n	800459e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0308 	bic.w	r3, r3, #8
 800458a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <TIM_OC1_SetConfig+0x10c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_OC1_SetConfig+0xc2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <TIM_OC1_SetConfig+0x110>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_OC1_SetConfig+0xc2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <TIM_OC1_SetConfig+0x114>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_OC1_SetConfig+0xc2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a18      	ldr	r2, [pc, #96]	; (800461c <TIM_OC1_SetConfig+0x118>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_OC1_SetConfig+0xc2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a17      	ldr	r2, [pc, #92]	; (8004620 <TIM_OC1_SetConfig+0x11c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d111      	bne.n	80045ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	621a      	str	r2, [r3, #32]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40013400 	.word	0x40013400
 8004618:	40014000 	.word	0x40014000
 800461c:	40014400 	.word	0x40014400
 8004620:	40014800 	.word	0x40014800

08004624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0210 	bic.w	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0320 	bic.w	r3, r3, #32
 8004672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a28      	ldr	r2, [pc, #160]	; (8004724 <TIM_OC2_SetConfig+0x100>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC2_SetConfig+0x6c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a27      	ldr	r2, [pc, #156]	; (8004728 <TIM_OC2_SetConfig+0x104>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10d      	bne.n	80046ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <TIM_OC2_SetConfig+0x100>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00f      	beq.n	80046d4 <TIM_OC2_SetConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <TIM_OC2_SetConfig+0x104>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00b      	beq.n	80046d4 <TIM_OC2_SetConfig+0xb0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1b      	ldr	r2, [pc, #108]	; (800472c <TIM_OC2_SetConfig+0x108>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_OC2_SetConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <TIM_OC2_SetConfig+0x10c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_OC2_SetConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a19      	ldr	r2, [pc, #100]	; (8004734 <TIM_OC2_SetConfig+0x110>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d113      	bne.n	80046fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046da:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40013400 	.word	0x40013400
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800

08004738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a27      	ldr	r2, [pc, #156]	; (8004834 <TIM_OC3_SetConfig+0xfc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_OC3_SetConfig+0x6a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a26      	ldr	r2, [pc, #152]	; (8004838 <TIM_OC3_SetConfig+0x100>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10d      	bne.n	80047be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <TIM_OC3_SetConfig+0xfc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00f      	beq.n	80047e6 <TIM_OC3_SetConfig+0xae>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <TIM_OC3_SetConfig+0x100>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <TIM_OC3_SetConfig+0xae>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1a      	ldr	r2, [pc, #104]	; (800483c <TIM_OC3_SetConfig+0x104>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <TIM_OC3_SetConfig+0xae>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a19      	ldr	r2, [pc, #100]	; (8004840 <TIM_OC3_SetConfig+0x108>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_OC3_SetConfig+0xae>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a18      	ldr	r2, [pc, #96]	; (8004844 <TIM_OC3_SetConfig+0x10c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d113      	bne.n	800480e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	621a      	str	r2, [r3, #32]
}
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40012c00 	.word	0x40012c00
 8004838:	40013400 	.word	0x40013400
 800483c:	40014000 	.word	0x40014000
 8004840:	40014400 	.word	0x40014400
 8004844:	40014800 	.word	0x40014800

08004848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	031b      	lsls	r3, r3, #12
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <TIM_OC4_SetConfig+0xc0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00f      	beq.n	80048cc <TIM_OC4_SetConfig+0x84>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a17      	ldr	r2, [pc, #92]	; (800490c <TIM_OC4_SetConfig+0xc4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_OC4_SetConfig+0x84>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <TIM_OC4_SetConfig+0xc8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_OC4_SetConfig+0x84>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a15      	ldr	r2, [pc, #84]	; (8004914 <TIM_OC4_SetConfig+0xcc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_OC4_SetConfig+0x84>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a14      	ldr	r2, [pc, #80]	; (8004918 <TIM_OC4_SetConfig+0xd0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d109      	bne.n	80048e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	019b      	lsls	r3, r3, #6
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40013400 	.word	0x40013400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800

0800491c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <TIM_OC5_SetConfig+0xb4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00f      	beq.n	8004996 <TIM_OC5_SetConfig+0x7a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <TIM_OC5_SetConfig+0xb8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00b      	beq.n	8004996 <TIM_OC5_SetConfig+0x7a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <TIM_OC5_SetConfig+0xbc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <TIM_OC5_SetConfig+0x7a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a14      	ldr	r2, [pc, #80]	; (80049dc <TIM_OC5_SetConfig+0xc0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_OC5_SetConfig+0x7a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <TIM_OC5_SetConfig+0xc4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d109      	bne.n	80049aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	621a      	str	r2, [r3, #32]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800

080049e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	051b      	lsls	r3, r3, #20
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <TIM_OC6_SetConfig+0xb8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00f      	beq.n	8004a60 <TIM_OC6_SetConfig+0x7c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <TIM_OC6_SetConfig+0xbc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <TIM_OC6_SetConfig+0x7c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <TIM_OC6_SetConfig+0xc0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <TIM_OC6_SetConfig+0x7c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <TIM_OC6_SetConfig+0xc4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC6_SetConfig+0x7c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a14      	ldr	r2, [pc, #80]	; (8004aac <TIM_OC6_SetConfig+0xc8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d109      	bne.n	8004a74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	029b      	lsls	r3, r3, #10
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800

08004ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1a      	ldr	r2, [r3, #32]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e063      	b.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a2b      	ldr	r2, [pc, #172]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2a      	ldr	r2, [pc, #168]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d108      	bne.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d018      	beq.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d013      	beq.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00e      	beq.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10c      	bne.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40013400 	.word	0x40013400
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40014000 	.word	0x40014000

08004bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e040      	b.n	8004ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc f9a2 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2224      	movs	r2, #36	; 0x24
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fc00 	bl	800547c <UART_SetConfig>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e022      	b.n	8004ccc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fdc8 	bl	8005824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fe4f 	bl	8005968 <UART_CheckIdleState>
 8004cca:	4603      	mov	r3, r0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d178      	bne.n	8004dde <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_UART_Transmit+0x24>
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e071      	b.n	8004de0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2221      	movs	r2, #33	; 0x21
 8004d08:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0a:	f7fc fbd5 	bl	80014b8 <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d108      	bne.n	8004d3c <HAL_UART_Transmit+0x68>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e003      	b.n	8004d44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d44:	e030      	b.n	8004da8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	; 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 feb1 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e03c      	b.n	8004de0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10b      	bne.n	8004d84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	3302      	adds	r3, #2
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e008      	b.n	8004d96 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1c8      	bne.n	8004d46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2140      	movs	r1, #64	; 0x40
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fe7a 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e005      	b.n	8004de0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d132      	bne.n	8004e66 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Receive_IT+0x24>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e02b      	b.n	8004e68 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d018      	beq.n	8004e56 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	613b      	str	r3, [r7, #16]
   return(result);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	623b      	str	r3, [r7, #32]
 8004e44:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	69f9      	ldr	r1, [r7, #28]
 8004e48:	6a3a      	ldr	r2, [r7, #32]
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e6      	bne.n	8004e24 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fe93 	bl	8005b88 <UART_Start_Receive_IT>
 8004e62:	4603      	mov	r3, r0
 8004e64:	e000      	b.n	8004e68 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3728      	adds	r7, #40	; 0x28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b0ba      	sub	sp, #232	; 0xe8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00f      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 82ab 	beq.w	8005424 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
      }
      return;
 8004ed6:	e2a5      	b.n	8005424 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8117 	beq.w	8005110 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004eee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ef2:	4b85      	ldr	r3, [pc, #532]	; (8005108 <HAL_UART_IRQHandler+0x298>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 810a 	beq.w	8005110 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d011      	beq.n	8004f2c <HAL_UART_IRQHandler+0xbc>
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f22:	f043 0201 	orr.w	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d011      	beq.n	8004f5c <HAL_UART_IRQHandler+0xec>
 8004f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d011      	beq.n	8004f8c <HAL_UART_IRQHandler+0x11c>
 8004f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00b      	beq.n	8004f8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2204      	movs	r2, #4
 8004f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f82:	f043 0202 	orr.w	r2, r3, #2
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d017      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbe:	f043 0208 	orr.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d012      	beq.n	8004ffa <HAL_UART_IRQHandler+0x18a>
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8211 	beq.w	8005428 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d005      	beq.n	8005052 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04f      	beq.n	80050f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fe4c 	bl	8005cf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d141      	bne.n	80050ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800507c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800509e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1d9      	bne.n	8005066 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d013      	beq.n	80050e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	4a13      	ldr	r2, [pc, #76]	; (800510c <HAL_UART_IRQHandler+0x29c>)
 80050c0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fc fb64 	bl	8001794 <HAL_DMA_Abort_IT>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050dc:	4610      	mov	r0, r2
 80050de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00f      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9b4 	bl	8005450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e00b      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9b0 	bl	8005450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e007      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9ac 	bl	8005450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005100:	e192      	b.n	8005428 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005102:	bf00      	nop
    return;
 8005104:	e190      	b.n	8005428 <HAL_UART_IRQHandler+0x5b8>
 8005106:	bf00      	nop
 8005108:	04000120 	.word	0x04000120
 800510c:	08005db9 	.word	0x08005db9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 814b 	bne.w	80053b0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8144 	beq.w	80053b0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 813d 	beq.w	80053b0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	f040 80b5 	bne.w	80052b8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800515a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8164 	beq.w	800542c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800516a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800516e:	429a      	cmp	r2, r3
 8005170:	f080 815c 	bcs.w	800542c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800517a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b20      	cmp	r3, #32
 8005186:	f000 8086 	beq.w	8005296 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800519e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1da      	bne.n	800518a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005200:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800520a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e1      	bne.n	80051d4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005234:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005236:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800523a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e3      	bne.n	8005210 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005266:	f023 0310 	bic.w	r3, r3, #16
 800526a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005278:	65bb      	str	r3, [r7, #88]	; 0x58
 800527a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800527e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e4      	bne.n	8005256 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005290:	4618      	mov	r0, r3
 8005292:	f7fc fa46 	bl	8001722 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8d7 	bl	8005464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052b6:	e0b9      	b.n	800542c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80ab 	beq.w	8005430 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80052da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80a6 	beq.w	8005430 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005306:	647b      	str	r3, [r7, #68]	; 0x44
 8005308:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800530c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e4      	bne.n	80052e4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	623b      	str	r3, [r7, #32]
   return(result);
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800533e:	633a      	str	r2, [r7, #48]	; 0x30
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e3      	bne.n	800531a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	60fb      	str	r3, [r7, #12]
   return(result);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	617b      	str	r3, [r7, #20]
   return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e4      	bne.n	8005366 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f85b 	bl	8005464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053ae:	e03f      	b.n	8005430 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00e      	beq.n	80053da <HAL_UART_IRQHandler+0x56a>
 80053bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fed8 	bl	8006188 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d8:	e02d      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00e      	beq.n	8005404 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01c      	beq.n	8005434 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
    }
    return;
 8005402:	e017      	b.n	8005434 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d012      	beq.n	8005436 <HAL_UART_IRQHandler+0x5c6>
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00c      	beq.n	8005436 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fce1 	bl	8005de4 <UART_EndTransmit_IT>
    return;
 8005422:	e008      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005424:	bf00      	nop
 8005426:	e006      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005428:	bf00      	nop
 800542a:	e004      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
      return;
 800542c:	bf00      	nop
 800542e:	e002      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005434:	bf00      	nop
  }

}
 8005436:	37e8      	adds	r7, #232	; 0xe8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80054aa:	f023 030c 	bic.w	r3, r3, #12
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	6979      	ldr	r1, [r7, #20]
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4aa7      	ldr	r2, [pc, #668]	; (8005794 <UART_SetConfig+0x318>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d120      	bne.n	800553e <UART_SetConfig+0xc2>
 80054fc:	4ba6      	ldr	r3, [pc, #664]	; (8005798 <UART_SetConfig+0x31c>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b03      	cmp	r3, #3
 8005506:	d817      	bhi.n	8005538 <UART_SetConfig+0xbc>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0x94>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005521 	.word	0x08005521
 8005514:	0800552d 	.word	0x0800552d
 8005518:	08005533 	.word	0x08005533
 800551c:	08005527 	.word	0x08005527
 8005520:	2301      	movs	r3, #1
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e0b5      	b.n	8005692 <UART_SetConfig+0x216>
 8005526:	2302      	movs	r3, #2
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e0b2      	b.n	8005692 <UART_SetConfig+0x216>
 800552c:	2304      	movs	r3, #4
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e0af      	b.n	8005692 <UART_SetConfig+0x216>
 8005532:	2308      	movs	r3, #8
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e0ac      	b.n	8005692 <UART_SetConfig+0x216>
 8005538:	2310      	movs	r3, #16
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e0a9      	b.n	8005692 <UART_SetConfig+0x216>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a96      	ldr	r2, [pc, #600]	; (800579c <UART_SetConfig+0x320>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d124      	bne.n	8005592 <UART_SetConfig+0x116>
 8005548:	4b93      	ldr	r3, [pc, #588]	; (8005798 <UART_SetConfig+0x31c>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005550:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005554:	d011      	beq.n	800557a <UART_SetConfig+0xfe>
 8005556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800555a:	d817      	bhi.n	800558c <UART_SetConfig+0x110>
 800555c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005560:	d011      	beq.n	8005586 <UART_SetConfig+0x10a>
 8005562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005566:	d811      	bhi.n	800558c <UART_SetConfig+0x110>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <UART_SetConfig+0xf8>
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005570:	d006      	beq.n	8005580 <UART_SetConfig+0x104>
 8005572:	e00b      	b.n	800558c <UART_SetConfig+0x110>
 8005574:	2300      	movs	r3, #0
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e08b      	b.n	8005692 <UART_SetConfig+0x216>
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]
 800557e:	e088      	b.n	8005692 <UART_SetConfig+0x216>
 8005580:	2304      	movs	r3, #4
 8005582:	77fb      	strb	r3, [r7, #31]
 8005584:	e085      	b.n	8005692 <UART_SetConfig+0x216>
 8005586:	2308      	movs	r3, #8
 8005588:	77fb      	strb	r3, [r7, #31]
 800558a:	e082      	b.n	8005692 <UART_SetConfig+0x216>
 800558c:	2310      	movs	r3, #16
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e07f      	b.n	8005692 <UART_SetConfig+0x216>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a82      	ldr	r2, [pc, #520]	; (80057a0 <UART_SetConfig+0x324>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d124      	bne.n	80055e6 <UART_SetConfig+0x16a>
 800559c:	4b7e      	ldr	r3, [pc, #504]	; (8005798 <UART_SetConfig+0x31c>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80055a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055a8:	d011      	beq.n	80055ce <UART_SetConfig+0x152>
 80055aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055ae:	d817      	bhi.n	80055e0 <UART_SetConfig+0x164>
 80055b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055b4:	d011      	beq.n	80055da <UART_SetConfig+0x15e>
 80055b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055ba:	d811      	bhi.n	80055e0 <UART_SetConfig+0x164>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <UART_SetConfig+0x14c>
 80055c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055c4:	d006      	beq.n	80055d4 <UART_SetConfig+0x158>
 80055c6:	e00b      	b.n	80055e0 <UART_SetConfig+0x164>
 80055c8:	2300      	movs	r3, #0
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e061      	b.n	8005692 <UART_SetConfig+0x216>
 80055ce:	2302      	movs	r3, #2
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e05e      	b.n	8005692 <UART_SetConfig+0x216>
 80055d4:	2304      	movs	r3, #4
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e05b      	b.n	8005692 <UART_SetConfig+0x216>
 80055da:	2308      	movs	r3, #8
 80055dc:	77fb      	strb	r3, [r7, #31]
 80055de:	e058      	b.n	8005692 <UART_SetConfig+0x216>
 80055e0:	2310      	movs	r3, #16
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e055      	b.n	8005692 <UART_SetConfig+0x216>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6e      	ldr	r2, [pc, #440]	; (80057a4 <UART_SetConfig+0x328>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d124      	bne.n	800563a <UART_SetConfig+0x1be>
 80055f0:	4b69      	ldr	r3, [pc, #420]	; (8005798 <UART_SetConfig+0x31c>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80055f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055fc:	d011      	beq.n	8005622 <UART_SetConfig+0x1a6>
 80055fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005602:	d817      	bhi.n	8005634 <UART_SetConfig+0x1b8>
 8005604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005608:	d011      	beq.n	800562e <UART_SetConfig+0x1b2>
 800560a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800560e:	d811      	bhi.n	8005634 <UART_SetConfig+0x1b8>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <UART_SetConfig+0x1a0>
 8005614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005618:	d006      	beq.n	8005628 <UART_SetConfig+0x1ac>
 800561a:	e00b      	b.n	8005634 <UART_SetConfig+0x1b8>
 800561c:	2300      	movs	r3, #0
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e037      	b.n	8005692 <UART_SetConfig+0x216>
 8005622:	2302      	movs	r3, #2
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e034      	b.n	8005692 <UART_SetConfig+0x216>
 8005628:	2304      	movs	r3, #4
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e031      	b.n	8005692 <UART_SetConfig+0x216>
 800562e:	2308      	movs	r3, #8
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e02e      	b.n	8005692 <UART_SetConfig+0x216>
 8005634:	2310      	movs	r3, #16
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e02b      	b.n	8005692 <UART_SetConfig+0x216>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a5a      	ldr	r2, [pc, #360]	; (80057a8 <UART_SetConfig+0x32c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d124      	bne.n	800568e <UART_SetConfig+0x212>
 8005644:	4b54      	ldr	r3, [pc, #336]	; (8005798 <UART_SetConfig+0x31c>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800564c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005650:	d011      	beq.n	8005676 <UART_SetConfig+0x1fa>
 8005652:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005656:	d817      	bhi.n	8005688 <UART_SetConfig+0x20c>
 8005658:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800565c:	d011      	beq.n	8005682 <UART_SetConfig+0x206>
 800565e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005662:	d811      	bhi.n	8005688 <UART_SetConfig+0x20c>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <UART_SetConfig+0x1f4>
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566c:	d006      	beq.n	800567c <UART_SetConfig+0x200>
 800566e:	e00b      	b.n	8005688 <UART_SetConfig+0x20c>
 8005670:	2300      	movs	r3, #0
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e00d      	b.n	8005692 <UART_SetConfig+0x216>
 8005676:	2302      	movs	r3, #2
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e00a      	b.n	8005692 <UART_SetConfig+0x216>
 800567c:	2304      	movs	r3, #4
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e007      	b.n	8005692 <UART_SetConfig+0x216>
 8005682:	2308      	movs	r3, #8
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e004      	b.n	8005692 <UART_SetConfig+0x216>
 8005688:	2310      	movs	r3, #16
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e001      	b.n	8005692 <UART_SetConfig+0x216>
 800568e:	2310      	movs	r3, #16
 8005690:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d15b      	bne.n	8005754 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800569c:	7ffb      	ldrb	r3, [r7, #31]
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d827      	bhi.n	80056f2 <UART_SetConfig+0x276>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <UART_SetConfig+0x22c>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	080056f3 	.word	0x080056f3
 80056b8:	080056e3 	.word	0x080056e3
 80056bc:	080056f3 	.word	0x080056f3
 80056c0:	080056f3 	.word	0x080056f3
 80056c4:	080056f3 	.word	0x080056f3
 80056c8:	080056eb 	.word	0x080056eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056cc:	f7fd ff3a 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 80056d0:	61b8      	str	r0, [r7, #24]
        break;
 80056d2:	e013      	b.n	80056fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7fd ff58 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 80056d8:	61b8      	str	r0, [r7, #24]
        break;
 80056da:	e00f      	b.n	80056fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056dc:	4b33      	ldr	r3, [pc, #204]	; (80057ac <UART_SetConfig+0x330>)
 80056de:	61bb      	str	r3, [r7, #24]
        break;
 80056e0:	e00c      	b.n	80056fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e2:	f7fd feb9 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 80056e6:	61b8      	str	r0, [r7, #24]
        break;
 80056e8:	e008      	b.n	80056fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ee:	61bb      	str	r3, [r7, #24]
        break;
 80056f0:	e004      	b.n	80056fc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	77bb      	strb	r3, [r7, #30]
        break;
 80056fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8082 	beq.w	8005808 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	005a      	lsls	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	441a      	add	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b0f      	cmp	r3, #15
 800571e:	d916      	bls.n	800574e <UART_SetConfig+0x2d2>
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005726:	d212      	bcs.n	800574e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f023 030f 	bic.w	r3, r3, #15
 8005730:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	b29b      	uxth	r3, r3
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	b29a      	uxth	r2, r3
 800573e:	89fb      	ldrh	r3, [r7, #14]
 8005740:	4313      	orrs	r3, r2
 8005742:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	89fa      	ldrh	r2, [r7, #14]
 800574a:	60da      	str	r2, [r3, #12]
 800574c:	e05c      	b.n	8005808 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	77bb      	strb	r3, [r7, #30]
 8005752:	e059      	b.n	8005808 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005754:	7ffb      	ldrb	r3, [r7, #31]
 8005756:	2b08      	cmp	r3, #8
 8005758:	d835      	bhi.n	80057c6 <UART_SetConfig+0x34a>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <UART_SetConfig+0x2e4>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005785 	.word	0x08005785
 8005764:	0800578d 	.word	0x0800578d
 8005768:	080057b1 	.word	0x080057b1
 800576c:	080057c7 	.word	0x080057c7
 8005770:	080057b7 	.word	0x080057b7
 8005774:	080057c7 	.word	0x080057c7
 8005778:	080057c7 	.word	0x080057c7
 800577c:	080057c7 	.word	0x080057c7
 8005780:	080057bf 	.word	0x080057bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005784:	f7fd fede 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8005788:	61b8      	str	r0, [r7, #24]
        break;
 800578a:	e021      	b.n	80057d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800578c:	f7fd fefc 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8005790:	61b8      	str	r0, [r7, #24]
        break;
 8005792:	e01d      	b.n	80057d0 <UART_SetConfig+0x354>
 8005794:	40013800 	.word	0x40013800
 8005798:	40021000 	.word	0x40021000
 800579c:	40004400 	.word	0x40004400
 80057a0:	40004800 	.word	0x40004800
 80057a4:	40004c00 	.word	0x40004c00
 80057a8:	40005000 	.word	0x40005000
 80057ac:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <UART_SetConfig+0x3a4>)
 80057b2:	61bb      	str	r3, [r7, #24]
        break;
 80057b4:	e00c      	b.n	80057d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b6:	f7fd fe4f 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 80057ba:	61b8      	str	r0, [r7, #24]
        break;
 80057bc:	e008      	b.n	80057d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c2:	61bb      	str	r3, [r7, #24]
        break;
 80057c4:	e004      	b.n	80057d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	77bb      	strb	r3, [r7, #30]
        break;
 80057ce:	bf00      	nop
    }

    if (pclk != 0U)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d018      	beq.n	8005808 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	085a      	lsrs	r2, r3, #1
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	441a      	add	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b0f      	cmp	r3, #15
 80057ee:	d909      	bls.n	8005804 <UART_SetConfig+0x388>
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f6:	d205      	bcs.n	8005804 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	e001      	b.n	8005808 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005814:	7fbb      	ldrb	r3, [r7, #30]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	007a1200 	.word	0x007a1200

08005824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01a      	beq.n	800593a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005922:	d10a      	bne.n	800593a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b098      	sub	sp, #96	; 0x60
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005978:	f7fb fd9e 	bl	80014b8 <HAL_GetTick>
 800597c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b08      	cmp	r3, #8
 800598a:	d12e      	bne.n	80059ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005994:	2200      	movs	r2, #0
 8005996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f88c 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d021      	beq.n	80059ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	653b      	str	r3, [r7, #80]	; 0x50
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c4:	647b      	str	r3, [r7, #68]	; 0x44
 80059c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e062      	b.n	8005ab0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d149      	bne.n	8005a8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a00:	2200      	movs	r2, #0
 8005a02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f856 	bl	8005ab8 <UART_WaitOnFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d03c      	beq.n	8005a8c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a30:	633b      	str	r3, [r7, #48]	; 0x30
 8005a32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e6      	bne.n	8005a12 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3308      	adds	r3, #8
 8005a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3308      	adds	r3, #8
 8005a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a64:	61fa      	str	r2, [r7, #28]
 8005a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	69b9      	ldr	r1, [r7, #24]
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	617b      	str	r3, [r7, #20]
   return(result);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e5      	bne.n	8005a44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e011      	b.n	8005ab0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3758      	adds	r7, #88	; 0x58
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac8:	e049      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad0:	d045      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fb fcf1 	bl	80014b8 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e048      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d031      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d110      	bne.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f8ed 	bl	8005cf0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e029      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b38:	d111      	bne.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f8d3 	bl	8005cf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e00f      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d0a6      	beq.n	8005aca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b097      	sub	sp, #92	; 0x5c
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	d10e      	bne.n	8005bda <UART_Start_Receive_IT+0x52>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <UART_Start_Receive_IT+0x48>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bce:	e01a      	b.n	8005c06 <UART_Start_Receive_IT+0x7e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	22ff      	movs	r2, #255	; 0xff
 8005bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bd8:	e015      	b.n	8005c06 <UART_Start_Receive_IT+0x7e>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <UART_Start_Receive_IT+0x76>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <UART_Start_Receive_IT+0x6c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	22ff      	movs	r2, #255	; 0xff
 8005bee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bf2:	e008      	b.n	8005c06 <UART_Start_Receive_IT+0x7e>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	227f      	movs	r2, #127	; 0x7f
 8005bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bfc:	e003      	b.n	8005c06 <UART_Start_Receive_IT+0x7e>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2222      	movs	r2, #34	; 0x22
 8005c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3308      	adds	r3, #8
 8005c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c36:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e5      	bne.n	8005c16 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d107      	bne.n	8005c64 <UART_Start_Receive_IT+0xdc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <UART_Start_Receive_IT+0x160>)
 8005c60:	669a      	str	r2, [r3, #104]	; 0x68
 8005c62:	e002      	b.n	8005c6a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <UART_Start_Receive_IT+0x164>)
 8005c68:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d019      	beq.n	8005ca6 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
 8005c92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e6      	bne.n	8005c72 <UART_Start_Receive_IT+0xea>
 8005ca4:	e018      	b.n	8005cd8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f043 0320 	orr.w	r3, r3, #32
 8005cba:	653b      	str	r3, [r7, #80]	; 0x50
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	69f9      	ldr	r1, [r7, #28]
 8005cca:	6a3a      	ldr	r2, [r7, #32]
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e6      	bne.n	8005ca6 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	375c      	adds	r7, #92	; 0x5c
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	08005fe1 	.word	0x08005fe1
 8005cec:	08005e39 	.word	0x08005e39

08005cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b095      	sub	sp, #84	; 0x54
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d16:	643b      	str	r3, [r7, #64]	; 0x40
 8005d18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e6      	bne.n	8005cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3308      	adds	r3, #8
 8005d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e5      	bne.n	8005d2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d118      	bne.n	8005d98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0310 	bic.w	r3, r3, #16
 8005d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6979      	ldr	r1, [r7, #20]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	613b      	str	r3, [r7, #16]
   return(result);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005dac:	bf00      	nop
 8005dae:	3754      	adds	r7, #84	; 0x54
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff fb3a 	bl	8005450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6979      	ldr	r1, [r7, #20]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	613b      	str	r3, [r7, #16]
   return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e6      	bne.n	8005dec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fb06 	bl	800543c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e30:	bf00      	nop
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b09c      	sub	sp, #112	; 0x70
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e50:	2b22      	cmp	r3, #34	; 0x22
 8005e52:	f040 80b9 	bne.w	8005fc8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e64:	b2d9      	uxtb	r1, r3
 8005e66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	400a      	ands	r2, r1
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 809c 	bne.w	8005fd8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ec0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e6      	bne.n	8005ea0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ef2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ef4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e5      	bne.n	8005ed2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d018      	beq.n	8005f5a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	623b      	str	r3, [r7, #32]
   return(result);
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f46:	633b      	str	r3, [r7, #48]	; 0x30
 8005f48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e6      	bne.n	8005f28 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d12e      	bne.n	8005fc0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f023 0310 	bic.w	r3, r3, #16
 8005f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	69b9      	ldr	r1, [r7, #24]
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	617b      	str	r3, [r7, #20]
   return(result);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e6      	bne.n	8005f68 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d103      	bne.n	8005fb0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2210      	movs	r2, #16
 8005fae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fa53 	bl	8005464 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fbe:	e00b      	b.n	8005fd8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fa f955 	bl	8000270 <HAL_UART_RxCpltCallback>
}
 8005fc6:	e007      	b.n	8005fd8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0208 	orr.w	r2, r2, #8
 8005fd6:	619a      	str	r2, [r3, #24]
}
 8005fd8:	bf00      	nop
 8005fda:	3770      	adds	r7, #112	; 0x70
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b09c      	sub	sp, #112	; 0x70
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff8:	2b22      	cmp	r3, #34	; 0x22
 8005ffa:	f040 80b9 	bne.w	8006170 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006004:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800600e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006012:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006016:	4013      	ands	r3, r2
 8006018:	b29a      	uxth	r2, r3
 800601a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800601c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	1c9a      	adds	r2, r3, #2
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 809c 	bne.w	8006180 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800605c:	667b      	str	r3, [r7, #100]	; 0x64
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006066:	657b      	str	r3, [r7, #84]	; 0x54
 8006068:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800606c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e6      	bne.n	8006048 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	663b      	str	r3, [r7, #96]	; 0x60
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800609a:	643a      	str	r2, [r7, #64]	; 0x40
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d018      	beq.n	8006102 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060f0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e6      	bne.n	80060d0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006106:	2b01      	cmp	r3, #1
 8006108:	d12e      	bne.n	8006168 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	60bb      	str	r3, [r7, #8]
   return(result);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f023 0310 	bic.w	r3, r3, #16
 8006124:	65bb      	str	r3, [r7, #88]	; 0x58
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	613b      	str	r3, [r7, #16]
   return(result);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e6      	bne.n	8006110 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b10      	cmp	r3, #16
 800614e:	d103      	bne.n	8006158 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2210      	movs	r2, #16
 8006156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff f97f 	bl	8005464 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006166:	e00b      	b.n	8006180 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fa f881 	bl	8000270 <HAL_UART_RxCpltCallback>
}
 800616e:	e007      	b.n	8006180 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0208 	orr.w	r2, r2, #8
 800617e:	619a      	str	r2, [r3, #24]
}
 8006180:	bf00      	nop
 8006182:	3770      	adds	r7, #112	; 0x70
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80061a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4013      	ands	r3, r2
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061d2:	b084      	sub	sp, #16
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	f107 0014 	add.w	r0, r7, #20
 80061e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	b004      	add	sp, #16
 8006212:	4770      	bx	lr

08006214 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800621a:	f3ef 8305 	mrs	r3, IPSR
 800621e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006220:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10f      	bne.n	8006246 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006226:	f3ef 8310 	mrs	r3, PRIMASK
 800622a:	607b      	str	r3, [r7, #4]
  return(result);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <osKernelInitialize+0x32>
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <osKernelInitialize+0x64>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d109      	bne.n	800624e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800623a:	f3ef 8311 	mrs	r3, BASEPRI
 800623e:	603b      	str	r3, [r7, #0]
  return(result);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006246:	f06f 0305 	mvn.w	r3, #5
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	e00c      	b.n	8006268 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <osKernelInitialize+0x64>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d105      	bne.n	8006262 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <osKernelInitialize+0x64>)
 8006258:	2201      	movs	r2, #1
 800625a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e002      	b.n	8006268 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006266:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006268:	68fb      	ldr	r3, [r7, #12]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	200006ac 	.word	0x200006ac

0800627c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006282:	f3ef 8305 	mrs	r3, IPSR
 8006286:	60bb      	str	r3, [r7, #8]
  return(result);
 8006288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10f      	bne.n	80062ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628e:	f3ef 8310 	mrs	r3, PRIMASK
 8006292:	607b      	str	r3, [r7, #4]
  return(result);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <osKernelStart+0x32>
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <osKernelStart+0x64>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d109      	bne.n	80062b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062a2:	f3ef 8311 	mrs	r3, BASEPRI
 80062a6:	603b      	str	r3, [r7, #0]
  return(result);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80062ae:	f06f 0305 	mvn.w	r3, #5
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e00e      	b.n	80062d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <osKernelStart+0x64>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d107      	bne.n	80062ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80062be:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <osKernelStart+0x64>)
 80062c0:	2202      	movs	r2, #2
 80062c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80062c4:	f001 fdea 	bl	8007e9c <vTaskStartScheduler>
      stat = osOK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e002      	b.n	80062d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80062ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	200006ac 	.word	0x200006ac

080062e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b092      	sub	sp, #72	; 0x48
 80062e8:	af04      	add	r7, sp, #16
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f4:	f3ef 8305 	mrs	r3, IPSR
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 8094 	bne.w	800642a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006302:	f3ef 8310 	mrs	r3, PRIMASK
 8006306:	623b      	str	r3, [r7, #32]
  return(result);
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 808d 	bne.w	800642a <osThreadNew+0x146>
 8006310:	4b48      	ldr	r3, [pc, #288]	; (8006434 <osThreadNew+0x150>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d106      	bne.n	8006326 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006318:	f3ef 8311 	mrs	r3, BASEPRI
 800631c:	61fb      	str	r3, [r7, #28]
  return(result);
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 8082 	bne.w	800642a <osThreadNew+0x146>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d07e      	beq.n	800642a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006330:	2318      	movs	r3, #24
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006334:	2300      	movs	r3, #0
 8006336:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006338:	f107 031b 	add.w	r3, r7, #27
 800633c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800633e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d045      	beq.n	80063d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <osThreadNew+0x74>
        name = attr->name;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <osThreadNew+0x9a>
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	2b38      	cmp	r3, #56	; 0x38
 8006370:	d805      	bhi.n	800637e <osThreadNew+0x9a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <osThreadNew+0x9e>
        return (NULL);
 800637e:	2300      	movs	r3, #0
 8006380:	e054      	b.n	800642c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <osThreadNew+0xd4>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b5b      	cmp	r3, #91	; 0x5b
 80063a0:	d90a      	bls.n	80063b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d006      	beq.n	80063b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <osThreadNew+0xd4>
        mem = 1;
 80063b2:	2301      	movs	r3, #1
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b6:	e010      	b.n	80063da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10c      	bne.n	80063da <osThreadNew+0xf6>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d108      	bne.n	80063da <osThreadNew+0xf6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d104      	bne.n	80063da <osThreadNew+0xf6>
          mem = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d4:	e001      	b.n	80063da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d110      	bne.n	8006402 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063e8:	9202      	str	r2, [sp, #8]
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f001 fb84 	bl	8007b04 <xTaskCreateStatic>
 80063fc:	4603      	mov	r3, r0
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e013      	b.n	800642a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	d110      	bne.n	800642a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	b29a      	uxth	r2, r3
 800640c:	f107 0314 	add.w	r3, r7, #20
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f001 fbce 	bl	8007bbc <xTaskCreate>
 8006420:	4603      	mov	r3, r0
 8006422:	2b01      	cmp	r3, #1
 8006424:	d001      	beq.n	800642a <osThreadNew+0x146>
          hTask = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800642a:	697b      	ldr	r3, [r7, #20]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3738      	adds	r7, #56	; 0x38
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	200006ac 	.word	0x200006ac

08006438 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006440:	f3ef 8305 	mrs	r3, IPSR
 8006444:	613b      	str	r3, [r7, #16]
  return(result);
 8006446:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10f      	bne.n	800646c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644c:	f3ef 8310 	mrs	r3, PRIMASK
 8006450:	60fb      	str	r3, [r7, #12]
  return(result);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d109      	bne.n	800646c <osDelay+0x34>
 8006458:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <osDelay+0x58>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d109      	bne.n	8006474 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006460:	f3ef 8311 	mrs	r3, BASEPRI
 8006464:	60bb      	str	r3, [r7, #8]
  return(result);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <osDelay+0x3c>
    stat = osErrorISR;
 800646c:	f06f 0305 	mvn.w	r3, #5
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e007      	b.n	8006484 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <osDelay+0x4c>
      vTaskDelay(ticks);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 fcd8 	bl	8007e34 <vTaskDelay>
    }
  }

  return (stat);
 8006484:	697b      	ldr	r3, [r7, #20]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200006ac 	.word	0x200006ac

08006494 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a0:	f3ef 8305 	mrs	r3, IPSR
 80064a4:	613b      	str	r3, [r7, #16]
  return(result);
 80064a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f040 8085 	bne.w	80065b8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ae:	f3ef 8310 	mrs	r3, PRIMASK
 80064b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d17e      	bne.n	80065b8 <osMutexNew+0x124>
 80064ba:	4b42      	ldr	r3, [pc, #264]	; (80065c4 <osMutexNew+0x130>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d105      	bne.n	80064ce <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064c2:	f3ef 8311 	mrs	r3, BASEPRI
 80064c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d174      	bne.n	80065b8 <osMutexNew+0x124>
    if (attr != NULL) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <osMutexNew+0x48>
      type = attr->attr_bits;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	e001      	b.n	80064e0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <osMutexNew+0x5c>
      rmtx = 1U;
 80064ea:	2301      	movs	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	e001      	b.n	80064f4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d15c      	bne.n	80065b8 <osMutexNew+0x124>
      mem = -1;
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006502:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d015      	beq.n	8006536 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d006      	beq.n	8006520 <osMutexNew+0x8c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	2b4f      	cmp	r3, #79	; 0x4f
 8006518:	d902      	bls.n	8006520 <osMutexNew+0x8c>
          mem = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	e00c      	b.n	800653a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d108      	bne.n	800653a <osMutexNew+0xa6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <osMutexNew+0xa6>
            mem = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e001      	b.n	800653a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d112      	bne.n	8006566 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	4619      	mov	r1, r3
 800654c:	2004      	movs	r0, #4
 800654e:	f000 fbef 	bl	8006d30 <xQueueCreateMutexStatic>
 8006552:	6278      	str	r0, [r7, #36]	; 0x24
 8006554:	e016      	b.n	8006584 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	4619      	mov	r1, r3
 800655c:	2001      	movs	r0, #1
 800655e:	f000 fbe7 	bl	8006d30 <xQueueCreateMutexStatic>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24
 8006564:	e00e      	b.n	8006584 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10b      	bne.n	8006584 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006572:	2004      	movs	r0, #4
 8006574:	f000 fbc4 	bl	8006d00 <xQueueCreateMutex>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24
 800657a:	e003      	b.n	8006584 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800657c:	2001      	movs	r0, #1
 800657e:	f000 fbbf 	bl	8006d00 <xQueueCreateMutex>
 8006582:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <osMutexNew+0x110>
        if (attr != NULL) {
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <osMutexNew+0x104>
          name = attr->name;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e001      	b.n	800659c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800659c:	6979      	ldr	r1, [r7, #20]
 800659e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065a0:	f001 fa28 	bl	80079f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d006      	beq.n	80065b8 <osMutexNew+0x124>
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	f043 0301 	orr.w	r3, r3, #1
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3728      	adds	r7, #40	; 0x28
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200006ac 	.word	0x200006ac

080065c8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	; 0x30
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d8:	f3ef 8305 	mrs	r3, IPSR
 80065dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80065de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8086 	bne.w	80066f2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ea:	617b      	str	r3, [r7, #20]
  return(result);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d17f      	bne.n	80066f2 <osSemaphoreNew+0x12a>
 80065f2:	4b42      	ldr	r3, [pc, #264]	; (80066fc <osSemaphoreNew+0x134>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d105      	bne.n	8006606 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065fa:	f3ef 8311 	mrs	r3, BASEPRI
 80065fe:	613b      	str	r3, [r7, #16]
  return(result);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d175      	bne.n	80066f2 <osSemaphoreNew+0x12a>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d072      	beq.n	80066f2 <osSemaphoreNew+0x12a>
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	429a      	cmp	r2, r3
 8006612:	d86e      	bhi.n	80066f2 <osSemaphoreNew+0x12a>
    mem = -1;
 8006614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006618:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d015      	beq.n	800664c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d006      	beq.n	8006636 <osSemaphoreNew+0x6e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b4f      	cmp	r3, #79	; 0x4f
 800662e:	d902      	bls.n	8006636 <osSemaphoreNew+0x6e>
        mem = 1;
 8006630:	2301      	movs	r3, #1
 8006632:	623b      	str	r3, [r7, #32]
 8006634:	e00c      	b.n	8006650 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d108      	bne.n	8006650 <osSemaphoreNew+0x88>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <osSemaphoreNew+0x88>
          mem = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	e001      	b.n	8006650 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006656:	d04c      	beq.n	80066f2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d128      	bne.n	80066b0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d10a      	bne.n	800667a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2203      	movs	r2, #3
 800666a:	9200      	str	r2, [sp, #0]
 800666c:	2200      	movs	r2, #0
 800666e:	2100      	movs	r1, #0
 8006670:	2001      	movs	r0, #1
 8006672:	f000 fa53 	bl	8006b1c <xQueueGenericCreateStatic>
 8006676:	6278      	str	r0, [r7, #36]	; 0x24
 8006678:	e005      	b.n	8006686 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800667a:	2203      	movs	r2, #3
 800667c:	2100      	movs	r1, #0
 800667e:	2001      	movs	r0, #1
 8006680:	f000 fac3 	bl	8006c0a <xQueueGenericCreate>
 8006684:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d022      	beq.n	80066d2 <osSemaphoreNew+0x10a>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01f      	beq.n	80066d2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006692:	2300      	movs	r3, #0
 8006694:	2200      	movs	r2, #0
 8006696:	2100      	movs	r1, #0
 8006698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800669a:	f000 fbcf 	bl	8006e3c <xQueueGenericSend>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d016      	beq.n	80066d2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80066a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a6:	f001 f859 	bl	800775c <vQueueDelete>
            hSemaphore = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
 80066ae:	e010      	b.n	80066d2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d108      	bne.n	80066c8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	461a      	mov	r2, r3
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fb51 	bl	8006d66 <xQueueCreateCountingSemaphoreStatic>
 80066c4:	6278      	str	r0, [r7, #36]	; 0x24
 80066c6:	e004      	b.n	80066d2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fb82 	bl	8006dd4 <xQueueCreateCountingSemaphore>
 80066d0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00c      	beq.n	80066f2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	e001      	b.n	80066ea <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80066ea:	69f9      	ldr	r1, [r7, #28]
 80066ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ee:	f001 f981 	bl	80079f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3728      	adds	r7, #40	; 0x28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	200006ac 	.word	0x200006ac

08006700 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800670e:	2300      	movs	r3, #0
 8006710:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d103      	bne.n	8006720 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006718:	f06f 0303 	mvn.w	r3, #3
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	e04b      	b.n	80067b8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006720:	f3ef 8305 	mrs	r3, IPSR
 8006724:	617b      	str	r3, [r7, #20]
  return(result);
 8006726:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10f      	bne.n	800674c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800672c:	f3ef 8310 	mrs	r3, PRIMASK
 8006730:	613b      	str	r3, [r7, #16]
  return(result);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <osSemaphoreAcquire+0x4c>
 8006738:	4b22      	ldr	r3, [pc, #136]	; (80067c4 <osSemaphoreAcquire+0xc4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d128      	bne.n	8006792 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006740:	f3ef 8311 	mrs	r3, BASEPRI
 8006744:	60fb      	str	r3, [r7, #12]
  return(result);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d022      	beq.n	8006792 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006752:	f06f 0303 	mvn.w	r3, #3
 8006756:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006758:	e02d      	b.n	80067b6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	461a      	mov	r2, r3
 8006764:	2100      	movs	r1, #0
 8006766:	69b8      	ldr	r0, [r7, #24]
 8006768:	f000 ff78 	bl	800765c <xQueueReceiveFromISR>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d003      	beq.n	800677a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006772:	f06f 0302 	mvn.w	r3, #2
 8006776:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006778:	e01d      	b.n	80067b6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01a      	beq.n	80067b6 <osSemaphoreAcquire+0xb6>
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <osSemaphoreAcquire+0xc8>)
 8006782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006790:	e011      	b.n	80067b6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	69b8      	ldr	r0, [r7, #24]
 8006796:	f000 fe55 	bl	8007444 <xQueueSemaphoreTake>
 800679a:	4603      	mov	r3, r0
 800679c:	2b01      	cmp	r3, #1
 800679e:	d00b      	beq.n	80067b8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80067a6:	f06f 0301 	mvn.w	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e004      	b.n	80067b8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80067ae:	f06f 0302 	mvn.w	r3, #2
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e000      	b.n	80067b8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80067b6:	bf00      	nop
      }
    }
  }

  return (stat);
 80067b8:	69fb      	ldr	r3, [r7, #28]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200006ac 	.word	0x200006ac
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80067d8:	2300      	movs	r3, #0
 80067da:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80067e2:	f06f 0303 	mvn.w	r3, #3
 80067e6:	61fb      	str	r3, [r7, #28]
 80067e8:	e03e      	b.n	8006868 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ea:	f3ef 8305 	mrs	r3, IPSR
 80067ee:	617b      	str	r3, [r7, #20]
  return(result);
 80067f0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f6:	f3ef 8310 	mrs	r3, PRIMASK
 80067fa:	613b      	str	r3, [r7, #16]
  return(result);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <osSemaphoreRelease+0x4a>
 8006802:	4b1c      	ldr	r3, [pc, #112]	; (8006874 <osSemaphoreRelease+0xa8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d120      	bne.n	800684c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800680a:	f3ef 8311 	mrs	r3, BASEPRI
 800680e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01a      	beq.n	800684c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800681a:	f107 0308 	add.w	r3, r7, #8
 800681e:	4619      	mov	r1, r3
 8006820:	69b8      	ldr	r0, [r7, #24]
 8006822:	f000 fca1 	bl	8007168 <xQueueGiveFromISR>
 8006826:	4603      	mov	r3, r0
 8006828:	2b01      	cmp	r3, #1
 800682a:	d003      	beq.n	8006834 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800682c:	f06f 0302 	mvn.w	r3, #2
 8006830:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006832:	e018      	b.n	8006866 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d015      	beq.n	8006866 <osSemaphoreRelease+0x9a>
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <osSemaphoreRelease+0xac>)
 800683c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800684a:	e00c      	b.n	8006866 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800684c:	2300      	movs	r3, #0
 800684e:	2200      	movs	r2, #0
 8006850:	2100      	movs	r1, #0
 8006852:	69b8      	ldr	r0, [r7, #24]
 8006854:	f000 faf2 	bl	8006e3c <xQueueGenericSend>
 8006858:	4603      	mov	r3, r0
 800685a:	2b01      	cmp	r3, #1
 800685c:	d004      	beq.n	8006868 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800685e:	f06f 0302 	mvn.w	r3, #2
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	e000      	b.n	8006868 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006866:	bf00      	nop
    }
  }

  return (stat);
 8006868:	69fb      	ldr	r3, [r7, #28]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3720      	adds	r7, #32
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	200006ac 	.word	0x200006ac
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800688c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4a06      	ldr	r2, [pc, #24]	; (80068ac <vApplicationGetIdleTaskMemory+0x30>)
 8006892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2280      	movs	r2, #128	; 0x80
 8006898:	601a      	str	r2, [r3, #0]
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	200006b0 	.word	0x200006b0
 80068ac:	2000070c 	.word	0x2000070c

080068b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a07      	ldr	r2, [pc, #28]	; (80068dc <vApplicationGetTimerTaskMemory+0x2c>)
 80068c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <vApplicationGetTimerTaskMemory+0x30>)
 80068c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068ce:	601a      	str	r2, [r3, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	2000090c 	.word	0x2000090c
 80068e0:	20000968 	.word	0x20000968

080068e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f103 0208 	add.w	r2, r3, #8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f103 0208 	add.w	r2, r3, #8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f103 0208 	add.w	r2, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	601a      	str	r2, [r3, #0]
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800699c:	d103      	bne.n	80069a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e00c      	b.n	80069c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3308      	adds	r3, #8
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e002      	b.n	80069b4 <vListInsert+0x2e>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d2f6      	bcs.n	80069ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	601a      	str	r2, [r3, #0]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6892      	ldr	r2, [r2, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6852      	ldr	r2, [r2, #4]
 8006a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d103      	bne.n	8006a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	1e5a      	subs	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a76:	f002 fc8d 	bl	8009394 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a86:	fb01 f303 	mul.w	r3, r1, r3
 8006a8a:	441a      	add	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	68f9      	ldr	r1, [r7, #12]
 8006aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	441a      	add	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	22ff      	movs	r2, #255	; 0xff
 8006ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d114      	bne.n	8006af6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01a      	beq.n	8006b0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3310      	adds	r3, #16
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 fc6d 	bl	80083b8 <xTaskRemoveFromEventList>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d012      	beq.n	8006b0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <xQueueGenericReset+0xcc>)
 8006ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	e009      	b.n	8006b0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3310      	adds	r3, #16
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fef2 	bl	80068e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3324      	adds	r3, #36	; 0x24
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff feed 	bl	80068e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b0a:	f002 fc73 	bl	80093f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b0e:	2301      	movs	r3, #1
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08e      	sub	sp, #56	; 0x38
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <xQueueGenericCreateStatic+0x52>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <xQueueGenericCreateStatic+0x56>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <xQueueGenericCreateStatic+0x58>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	623b      	str	r3, [r7, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <xQueueGenericCreateStatic+0x7e>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <xQueueGenericCreateStatic+0x82>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <xQueueGenericCreateStatic+0x84>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	61fb      	str	r3, [r7, #28]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bba:	2350      	movs	r3, #80	; 0x50
 8006bbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b50      	cmp	r3, #80	; 0x50
 8006bc2:	d00a      	beq.n	8006bda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	61bb      	str	r3, [r7, #24]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00d      	beq.n	8006c00 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f843 	bl	8006c86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3730      	adds	r7, #48	; 0x30
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b08a      	sub	sp, #40	; 0x28
 8006c0e:	af02      	add	r7, sp, #8
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	4613      	mov	r3, r2
 8006c16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	613b      	str	r3, [r7, #16]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e004      	b.n	8006c4a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	3350      	adds	r3, #80	; 0x50
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f002 fcc2 	bl	80095d8 <pvPortMalloc>
 8006c54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00f      	beq.n	8006c7c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	3350      	adds	r3, #80	; 0x50
 8006c60:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c6a:	79fa      	ldrb	r2, [r7, #7]
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f805 	bl	8006c86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
	}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e002      	b.n	8006ca8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	69b8      	ldr	r0, [r7, #24]
 8006cb8:	f7ff fec8 	bl	8006a4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006cec:	2300      	movs	r3, #0
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f8a2 	bl	8006e3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6939      	ldr	r1, [r7, #16]
 8006d18:	6978      	ldr	r0, [r7, #20]
 8006d1a:	f7ff ff76 	bl	8006c0a <xQueueGenericCreate>
 8006d1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff ffd3 	bl	8006ccc <prvInitialiseMutex>

		return pxNewQueue;
 8006d26:	68fb      	ldr	r3, [r7, #12]
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	4603      	mov	r3, r0
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	2300      	movs	r3, #0
 8006d42:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	6939      	ldr	r1, [r7, #16]
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f7ff fee4 	bl	8006b1c <xQueueGenericCreateStatic>
 8006d54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff ffb8 	bl	8006ccc <prvInitialiseMutex>

		return pxNewQueue;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b08a      	sub	sp, #40	; 0x28
 8006d6a:	af02      	add	r7, sp, #8
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	61bb      	str	r3, [r7, #24]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d90a      	bls.n	8006dac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	617b      	str	r3, [r7, #20]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006dac:	2302      	movs	r3, #2
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	2100      	movs	r1, #0
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff feb0 	bl	8006b1c <xQueueGenericCreateStatic>
 8006dbc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006dca:	69fb      	ldr	r3, [r7, #28]
	}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	613b      	str	r3, [r7, #16]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d90a      	bls.n	8006e18 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60fb      	str	r3, [r7, #12]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e18:	2202      	movs	r2, #2
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fef4 	bl	8006c0a <xQueueGenericCreate>
 8006e22:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e30:	697b      	ldr	r3, [r7, #20]
	}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08e      	sub	sp, #56	; 0x38
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10a      	bne.n	8006e6e <xQueueGenericSend+0x32>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d103      	bne.n	8006e7c <xQueueGenericSend+0x40>
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <xQueueGenericSend+0x44>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <xQueueGenericSend+0x46>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <xQueueGenericSend+0x60>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d103      	bne.n	8006eaa <xQueueGenericSend+0x6e>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <xQueueGenericSend+0x72>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueGenericSend+0x74>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xQueueGenericSend+0x8e>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	623b      	str	r3, [r7, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eca:	f001 fc39 	bl	8008740 <xTaskGetSchedulerState>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <xQueueGenericSend+0x9e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <xQueueGenericSend+0xa2>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <xQueueGenericSend+0xa4>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <xQueueGenericSend+0xbe>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	61fb      	str	r3, [r7, #28]
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006efa:	f002 fa4b 	bl	8009394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d302      	bcc.n	8006f10 <xQueueGenericSend+0xd4>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d129      	bne.n	8006f64 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f16:	f000 fc5c 	bl	80077d2 <prvCopyDataToQueue>
 8006f1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d010      	beq.n	8006f46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	3324      	adds	r3, #36	; 0x24
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fa45 	bl	80083b8 <xTaskRemoveFromEventList>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d013      	beq.n	8006f5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f34:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <xQueueGenericSend+0x1f8>)
 8006f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	e00a      	b.n	8006f5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f4c:	4b39      	ldr	r3, [pc, #228]	; (8007034 <xQueueGenericSend+0x1f8>)
 8006f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f5c:	f002 fa4a 	bl	80093f4 <vPortExitCritical>
				return pdPASS;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e063      	b.n	800702c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f6a:	f002 fa43 	bl	80093f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e05c      	b.n	800702c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f78:	f107 0314 	add.w	r3, r7, #20
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f001 fa7f 	bl	8008480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f86:	f002 fa35 	bl	80093f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f8a:	f000 ffed 	bl	8007f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f8e:	f002 fa01 	bl	8009394 <vPortEnterCritical>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f9e:	d103      	bne.n	8006fa8 <xQueueGenericSend+0x16c>
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fae:	b25b      	sxtb	r3, r3
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fb4:	d103      	bne.n	8006fbe <xQueueGenericSend+0x182>
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fbe:	f002 fa19 	bl	80093f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fc2:	1d3a      	adds	r2, r7, #4
 8006fc4:	f107 0314 	add.w	r3, r7, #20
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fa6e 	bl	80084ac <xTaskCheckForTimeOut>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d124      	bne.n	8007020 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd8:	f000 fcf3 	bl	80079c2 <prvIsQueueFull>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d018      	beq.n	8007014 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	3310      	adds	r3, #16
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 f994 	bl	8008318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ff2:	f000 fc7e 	bl	80078f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ff6:	f000 ffc5 	bl	8007f84 <xTaskResumeAll>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f af7c 	bne.w	8006efa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007002:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <xQueueGenericSend+0x1f8>)
 8007004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	e772      	b.n	8006efa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007016:	f000 fc6c 	bl	80078f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800701a:	f000 ffb3 	bl	8007f84 <xTaskResumeAll>
 800701e:	e76c      	b.n	8006efa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007022:	f000 fc66 	bl	80078f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007026:	f000 ffad 	bl	8007f84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800702a:	2300      	movs	r3, #0
		}
	}
}
 800702c:	4618      	mov	r0, r3
 800702e:	3738      	adds	r7, #56	; 0x38
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	e000ed04 	.word	0xe000ed04

08007038 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08e      	sub	sp, #56	; 0x38
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <xQueueGenericSendFromISR+0x3c>
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <xQueueGenericSendFromISR+0x40>
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <xQueueGenericSendFromISR+0x42>
 8007078:	2300      	movs	r3, #0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	623b      	str	r3, [r7, #32]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d103      	bne.n	80070a2 <xQueueGenericSendFromISR+0x6a>
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <xQueueGenericSendFromISR+0x6e>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <xQueueGenericSendFromISR+0x70>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	61fb      	str	r3, [r7, #28]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070c2:	f002 fa49 	bl	8009558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070c6:	f3ef 8211 	mrs	r2, BASEPRI
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	61ba      	str	r2, [r7, #24]
 80070dc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070de:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d302      	bcc.n	80070f4 <xQueueGenericSendFromISR+0xbc>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d12c      	bne.n	800714e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007104:	f000 fb65 	bl	80077d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007108:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007110:	d112      	bne.n	8007138 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	2b00      	cmp	r3, #0
 8007118:	d016      	beq.n	8007148 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f94a 	bl	80083b8 <xTaskRemoveFromEventList>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00e      	beq.n	8007148 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	e007      	b.n	8007148 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800713c:	3301      	adds	r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	b25a      	sxtb	r2, r3
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007148:	2301      	movs	r3, #1
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800714c:	e001      	b.n	8007152 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800714e:	2300      	movs	r3, #0
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800715c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007160:	4618      	mov	r0, r3
 8007162:	3738      	adds	r7, #56	; 0x38
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08e      	sub	sp, #56	; 0x38
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	623b      	str	r3, [r7, #32]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	61fb      	str	r3, [r7, #28]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <xQueueGiveFromISR+0x58>
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <xQueueGiveFromISR+0x5c>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <xQueueGiveFromISR+0x5e>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	61bb      	str	r3, [r7, #24]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071e0:	f002 f9ba 	bl	8009558 <vPortValidateInterruptPriority>
	__asm volatile
 80071e4:	f3ef 8211 	mrs	r2, BASEPRI
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	617a      	str	r2, [r7, #20]
 80071fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80071fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800720c:	429a      	cmp	r2, r3
 800720e:	d22b      	bcs.n	8007268 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007222:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800722a:	d112      	bne.n	8007252 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d016      	beq.n	8007262 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	3324      	adds	r3, #36	; 0x24
 8007238:	4618      	mov	r0, r3
 800723a:	f001 f8bd 	bl	80083b8 <xTaskRemoveFromEventList>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e007      	b.n	8007262 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007256:	3301      	adds	r3, #1
 8007258:	b2db      	uxtb	r3, r3
 800725a:	b25a      	sxtb	r2, r3
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007262:	2301      	movs	r3, #1
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	e001      	b.n	800726c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007268:	2300      	movs	r3, #0
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f383 8811 	msr	BASEPRI, r3
}
 8007276:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800727a:	4618      	mov	r0, r3
 800727c:	3738      	adds	r7, #56	; 0x38
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08c      	sub	sp, #48	; 0x30
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007290:	2300      	movs	r3, #0
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <xQueueReceive+0x30>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	623b      	str	r3, [r7, #32]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d103      	bne.n	80072c2 <xQueueReceive+0x3e>
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <xQueueReceive+0x42>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <xQueueReceive+0x44>
 80072c6:	2300      	movs	r3, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <xQueueReceive+0x5e>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	61fb      	str	r3, [r7, #28]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072e2:	f001 fa2d 	bl	8008740 <xTaskGetSchedulerState>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <xQueueReceive+0x6e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <xQueueReceive+0x72>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <xQueueReceive+0x74>
 80072f6:	2300      	movs	r3, #0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xQueueReceive+0x8e>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	61bb      	str	r3, [r7, #24]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007312:	f002 f83f 	bl	8009394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01f      	beq.n	8007362 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007326:	f000 fabe 	bl	80078a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	1e5a      	subs	r2, r3, #1
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00f      	beq.n	800735a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	3310      	adds	r3, #16
 800733e:	4618      	mov	r0, r3
 8007340:	f001 f83a 	bl	80083b8 <xTaskRemoveFromEventList>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800734a:	4b3d      	ldr	r3, [pc, #244]	; (8007440 <xQueueReceive+0x1bc>)
 800734c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800735a:	f002 f84b 	bl	80093f4 <vPortExitCritical>
				return pdPASS;
 800735e:	2301      	movs	r3, #1
 8007360:	e069      	b.n	8007436 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007368:	f002 f844 	bl	80093f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800736c:	2300      	movs	r3, #0
 800736e:	e062      	b.n	8007436 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007376:	f107 0310 	add.w	r3, r7, #16
 800737a:	4618      	mov	r0, r3
 800737c:	f001 f880 	bl	8008480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007384:	f002 f836 	bl	80093f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007388:	f000 fdee 	bl	8007f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800738c:	f002 f802 	bl	8009394 <vPortEnterCritical>
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007396:	b25b      	sxtb	r3, r3
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800739c:	d103      	bne.n	80073a6 <xQueueReceive+0x122>
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ac:	b25b      	sxtb	r3, r3
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b2:	d103      	bne.n	80073bc <xQueueReceive+0x138>
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073bc:	f002 f81a 	bl	80093f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073c0:	1d3a      	adds	r2, r7, #4
 80073c2:	f107 0310 	add.w	r3, r7, #16
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 f86f 	bl	80084ac <xTaskCheckForTimeOut>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d123      	bne.n	800741c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d6:	f000 fade 	bl	8007996 <prvIsQueueEmpty>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d017      	beq.n	8007410 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	3324      	adds	r3, #36	; 0x24
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 ff95 	bl	8008318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073f0:	f000 fa7f 	bl	80078f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073f4:	f000 fdc6 	bl	8007f84 <xTaskResumeAll>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d189      	bne.n	8007312 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80073fe:	4b10      	ldr	r3, [pc, #64]	; (8007440 <xQueueReceive+0x1bc>)
 8007400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	e780      	b.n	8007312 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007412:	f000 fa6e 	bl	80078f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007416:	f000 fdb5 	bl	8007f84 <xTaskResumeAll>
 800741a:	e77a      	b.n	8007312 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800741c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800741e:	f000 fa68 	bl	80078f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007422:	f000 fdaf 	bl	8007f84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007428:	f000 fab5 	bl	8007996 <prvIsQueueEmpty>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	f43f af6f 	beq.w	8007312 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007434:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007436:	4618      	mov	r0, r3
 8007438:	3730      	adds	r7, #48	; 0x30
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	e000ed04 	.word	0xe000ed04

08007444 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08e      	sub	sp, #56	; 0x38
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800744e:	2300      	movs	r3, #0
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007456:	2300      	movs	r3, #0
 8007458:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	623b      	str	r3, [r7, #32]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61fb      	str	r3, [r7, #28]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007494:	f001 f954 	bl	8008740 <xTaskGetSchedulerState>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d102      	bne.n	80074a4 <xQueueSemaphoreTake+0x60>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <xQueueSemaphoreTake+0x64>
 80074a4:	2301      	movs	r3, #1
 80074a6:	e000      	b.n	80074aa <xQueueSemaphoreTake+0x66>
 80074a8:	2300      	movs	r3, #0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	61bb      	str	r3, [r7, #24]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80074c4:	f001 ff66 	bl	8009394 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d024      	beq.n	800751e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	1e5a      	subs	r2, r3, #1
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80074e4:	f001 faac 	bl	8008a40 <pvTaskIncrementMutexHeldCount>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00f      	beq.n	8007516 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	3310      	adds	r3, #16
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 ff5c 	bl	80083b8 <xTaskRemoveFromEventList>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007506:	4b54      	ldr	r3, [pc, #336]	; (8007658 <xQueueSemaphoreTake+0x214>)
 8007508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007516:	f001 ff6d 	bl	80093f4 <vPortExitCritical>
				return pdPASS;
 800751a:	2301      	movs	r3, #1
 800751c:	e097      	b.n	800764e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d111      	bne.n	8007548 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	617b      	str	r3, [r7, #20]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007540:	f001 ff58 	bl	80093f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007544:	2300      	movs	r3, #0
 8007546:	e082      	b.n	800764e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800754e:	f107 030c 	add.w	r3, r7, #12
 8007552:	4618      	mov	r0, r3
 8007554:	f000 ff94 	bl	8008480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007558:	2301      	movs	r3, #1
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800755c:	f001 ff4a 	bl	80093f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007560:	f000 fd02 	bl	8007f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007564:	f001 ff16 	bl	8009394 <vPortEnterCritical>
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800756e:	b25b      	sxtb	r3, r3
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007574:	d103      	bne.n	800757e <xQueueSemaphoreTake+0x13a>
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007584:	b25b      	sxtb	r3, r3
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800758a:	d103      	bne.n	8007594 <xQueueSemaphoreTake+0x150>
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007594:	f001 ff2e 	bl	80093f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007598:	463a      	mov	r2, r7
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4611      	mov	r1, r2
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 ff83 	bl	80084ac <xTaskCheckForTimeOut>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d132      	bne.n	8007612 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075ae:	f000 f9f2 	bl	8007996 <prvIsQueueEmpty>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d026      	beq.n	8007606 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d109      	bne.n	80075d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80075c0:	f001 fee8 	bl	8009394 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 f8d7 	bl	800877c <xTaskPriorityInherit>
 80075ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80075d0:	f001 ff10 	bl	80093f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	3324      	adds	r3, #36	; 0x24
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fe9b 	bl	8008318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075e4:	f000 f985 	bl	80078f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075e8:	f000 fccc 	bl	8007f84 <xTaskResumeAll>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f47f af68 	bne.w	80074c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80075f4:	4b18      	ldr	r3, [pc, #96]	; (8007658 <xQueueSemaphoreTake+0x214>)
 80075f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	e75e      	b.n	80074c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007608:	f000 f973 	bl	80078f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800760c:	f000 fcba 	bl	8007f84 <xTaskResumeAll>
 8007610:	e758      	b.n	80074c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007614:	f000 f96d 	bl	80078f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007618:	f000 fcb4 	bl	8007f84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800761c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800761e:	f000 f9ba 	bl	8007996 <prvIsQueueEmpty>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	f43f af4d 	beq.w	80074c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00d      	beq.n	800764c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007630:	f001 feb0 	bl	8009394 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007636:	f000 f8b4 	bl	80077a2 <prvGetDisinheritPriorityAfterTimeout>
 800763a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007642:	4618      	mov	r0, r3
 8007644:	f001 f976 	bl	8008934 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007648:	f001 fed4 	bl	80093f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800764c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800764e:	4618      	mov	r0, r3
 8007650:	3738      	adds	r7, #56	; 0x38
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08e      	sub	sp, #56	; 0x38
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	623b      	str	r3, [r7, #32]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d103      	bne.n	8007696 <xQueueReceiveFromISR+0x3a>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <xQueueReceiveFromISR+0x3e>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <xQueueReceiveFromISR+0x40>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	61fb      	str	r3, [r7, #28]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076b6:	f001 ff4f 	bl	8009558 <vPortValidateInterruptPriority>
	__asm volatile
 80076ba:	f3ef 8211 	mrs	r2, BASEPRI
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	61ba      	str	r2, [r7, #24]
 80076d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d02f      	beq.n	8007742 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076f0:	f000 f8d9 	bl	80078a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	1e5a      	subs	r2, r3, #1
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007704:	d112      	bne.n	800772c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d016      	beq.n	800773c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	3310      	adds	r3, #16
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fe50 	bl	80083b8 <xTaskRemoveFromEventList>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00e      	beq.n	800773c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e007      	b.n	800773c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800772c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007730:	3301      	adds	r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	b25a      	sxtb	r2, r3
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800773c:	2301      	movs	r3, #1
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
 8007740:	e001      	b.n	8007746 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007742:	2300      	movs	r3, #0
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	613b      	str	r3, [r7, #16]
	__asm volatile
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f383 8811 	msr	BASEPRI, r3
}
 8007750:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007754:	4618      	mov	r0, r3
 8007756:	3738      	adds	r7, #56	; 0x38
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <vQueueDelete+0x28>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60bb      	str	r3, [r7, #8]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f95f 	bl	8007a48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f001 ffe3 	bl	8009760 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d006      	beq.n	80077c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	e001      	b.n	80077c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077c4:	68fb      	ldr	r3, [r7, #12]
	}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10d      	bne.n	800780c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d14d      	bne.n	8007894 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 f82b 	bl	8008858 <xTaskPriorityDisinherit>
 8007802:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	e043      	b.n	8007894 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d119      	bne.n	8007846 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6898      	ldr	r0, [r3, #8]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	461a      	mov	r2, r3
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	f002 f8e3 	bl	80099e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	d32b      	bcc.n	8007894 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	609a      	str	r2, [r3, #8]
 8007844:	e026      	b.n	8007894 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68d8      	ldr	r0, [r3, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	461a      	mov	r2, r3
 8007850:	68b9      	ldr	r1, [r7, #8]
 8007852:	f002 f8c9 	bl	80099e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	425b      	negs	r3, r3
 8007860:	441a      	add	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d207      	bcs.n	8007882 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	425b      	negs	r3, r3
 800787c:	441a      	add	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d105      	bne.n	8007894 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	3b01      	subs	r3, #1
 8007892:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800789c:	697b      	ldr	r3, [r7, #20]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d018      	beq.n	80078ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	441a      	add	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d303      	bcc.n	80078da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68d9      	ldr	r1, [r3, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	461a      	mov	r2, r3
 80078e4:	6838      	ldr	r0, [r7, #0]
 80078e6:	f002 f87f 	bl	80099e8 <memcpy>
	}
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078fa:	f001 fd4b 	bl	8009394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007904:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007906:	e011      	b.n	800792c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d012      	beq.n	8007936 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3324      	adds	r3, #36	; 0x24
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fd4f 	bl	80083b8 <xTaskRemoveFromEventList>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007920:	f000 fe26 	bl	8008570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	3b01      	subs	r3, #1
 8007928:	b2db      	uxtb	r3, r3
 800792a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800792c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007930:	2b00      	cmp	r3, #0
 8007932:	dce9      	bgt.n	8007908 <prvUnlockQueue+0x16>
 8007934:	e000      	b.n	8007938 <prvUnlockQueue+0x46>
					break;
 8007936:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	22ff      	movs	r2, #255	; 0xff
 800793c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007940:	f001 fd58 	bl	80093f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007944:	f001 fd26 	bl	8009394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800794e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007950:	e011      	b.n	8007976 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d012      	beq.n	8007980 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3310      	adds	r3, #16
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fd2a 	bl	80083b8 <xTaskRemoveFromEventList>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800796a:	f000 fe01 	bl	8008570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	3b01      	subs	r3, #1
 8007972:	b2db      	uxtb	r3, r3
 8007974:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dce9      	bgt.n	8007952 <prvUnlockQueue+0x60>
 800797e:	e000      	b.n	8007982 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007980:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800798a:	f001 fd33 	bl	80093f4 <vPortExitCritical>
}
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800799e:	f001 fcf9 	bl	8009394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d102      	bne.n	80079b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079aa:	2301      	movs	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	e001      	b.n	80079b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079b4:	f001 fd1e 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 80079b8:	68fb      	ldr	r3, [r7, #12]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079ca:	f001 fce3 	bl	8009394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d102      	bne.n	80079e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	e001      	b.n	80079e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079e4:	f001 fd06 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 80079e8:	68fb      	ldr	r3, [r7, #12]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e014      	b.n	8007a2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a04:	4a0f      	ldr	r2, [pc, #60]	; (8007a44 <vQueueAddToRegistry+0x50>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10b      	bne.n	8007a28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a10:	490c      	ldr	r1, [pc, #48]	; (8007a44 <vQueueAddToRegistry+0x50>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <vQueueAddToRegistry+0x50>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4413      	add	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a26:	e006      	b.n	8007a36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b07      	cmp	r3, #7
 8007a32:	d9e7      	bls.n	8007a04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20000d68 	.word	0x20000d68

08007a48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e016      	b.n	8007a84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a56:	4a10      	ldr	r2, [pc, #64]	; (8007a98 <vQueueUnregisterQueue+0x50>)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d10b      	bne.n	8007a7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007a66:	4a0c      	ldr	r2, [pc, #48]	; (8007a98 <vQueueUnregisterQueue+0x50>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007a70:	4a09      	ldr	r2, [pc, #36]	; (8007a98 <vQueueUnregisterQueue+0x50>)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	4413      	add	r3, r2
 8007a78:	2200      	movs	r2, #0
 8007a7a:	605a      	str	r2, [r3, #4]
				break;
 8007a7c:	e006      	b.n	8007a8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b07      	cmp	r3, #7
 8007a88:	d9e5      	bls.n	8007a56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	20000d68 	.word	0x20000d68

08007a9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007aac:	f001 fc72 	bl	8009394 <vPortEnterCritical>
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ab6:	b25b      	sxtb	r3, r3
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007abc:	d103      	bne.n	8007ac6 <vQueueWaitForMessageRestricted+0x2a>
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad2:	d103      	bne.n	8007adc <vQueueWaitForMessageRestricted+0x40>
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007adc:	f001 fc8a 	bl	80093f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	3324      	adds	r3, #36	; 0x24
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fc35 	bl	8008360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007af6:	6978      	ldr	r0, [r7, #20]
 8007af8:	f7ff fefb 	bl	80078f2 <prvUnlockQueue>
	}
 8007afc:	bf00      	nop
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08e      	sub	sp, #56	; 0x38
 8007b08:	af04      	add	r7, sp, #16
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	623b      	str	r3, [r7, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	e7fe      	b.n	8007b2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10a      	bne.n	8007b4a <xTaskCreateStatic+0x46>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	61fb      	str	r3, [r7, #28]
}
 8007b46:	bf00      	nop
 8007b48:	e7fe      	b.n	8007b48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b4a:	235c      	movs	r3, #92	; 0x5c
 8007b4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b5c      	cmp	r3, #92	; 0x5c
 8007b52:	d00a      	beq.n	8007b6a <xTaskCreateStatic+0x66>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	61bb      	str	r3, [r7, #24]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01e      	beq.n	8007bae <xTaskCreateStatic+0xaa>
 8007b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01b      	beq.n	8007bae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b88:	2300      	movs	r3, #0
 8007b8a:	9303      	str	r3, [sp, #12]
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	f107 0314 	add.w	r3, r7, #20
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f850 	bl	8007c46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ba8:	f000 f8d4 	bl	8007d54 <prvAddNewTaskToReadyList>
 8007bac:	e001      	b.n	8007bb2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bb2:	697b      	ldr	r3, [r7, #20]
	}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3728      	adds	r7, #40	; 0x28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08c      	sub	sp, #48	; 0x30
 8007bc0:	af04      	add	r7, sp, #16
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	603b      	str	r3, [r7, #0]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fd01 	bl	80095d8 <pvPortMalloc>
 8007bd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00e      	beq.n	8007bfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007bde:	205c      	movs	r0, #92	; 0x5c
 8007be0:	f001 fcfa 	bl	80095d8 <pvPortMalloc>
 8007be4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8007bf2:	e005      	b.n	8007c00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bf4:	6978      	ldr	r0, [r7, #20]
 8007bf6:	f001 fdb3 	bl	8009760 <vPortFree>
 8007bfa:	e001      	b.n	8007c00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d017      	beq.n	8007c36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	9302      	str	r3, [sp, #8]
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f80e 	bl	8007c46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c2a:	69f8      	ldr	r0, [r7, #28]
 8007c2c:	f000 f892 	bl	8007d54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c30:	2301      	movs	r3, #1
 8007c32:	61bb      	str	r3, [r7, #24]
 8007c34:	e002      	b.n	8007c3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
	}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b088      	sub	sp, #32
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	21a5      	movs	r1, #165	; 0xa5
 8007c60:	f001 fed0 	bl	8009a04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <prvInitialiseNewTask+0x58>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	617b      	str	r3, [r7, #20]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61fb      	str	r3, [r7, #28]
 8007ca2:	e012      	b.n	8007cca <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	4413      	add	r3, r2
 8007caa:	7819      	ldrb	r1, [r3, #0]
 8007cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	3334      	adds	r3, #52	; 0x34
 8007cb4:	460a      	mov	r2, r1
 8007cb6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	2b0f      	cmp	r3, #15
 8007cce:	d9e9      	bls.n	8007ca4 <prvInitialiseNewTask+0x5e>
 8007cd0:	e000      	b.n	8007cd4 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007cd2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	2b37      	cmp	r3, #55	; 0x37
 8007ce0:	d901      	bls.n	8007ce6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ce2:	2337      	movs	r3, #55	; 0x37
 8007ce4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cf0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fe fe11 	bl	8006924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	3318      	adds	r3, #24
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fe0c 	bl	8006924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	2200      	movs	r2, #0
 8007d26:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	69b8      	ldr	r0, [r7, #24]
 8007d36:	f001 f9fd 	bl	8009134 <pxPortInitialiseStack>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d4c:	bf00      	nop
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d5c:	f001 fb1a 	bl	8009394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d60:	4b2d      	ldr	r3, [pc, #180]	; (8007e18 <prvAddNewTaskToReadyList+0xc4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	4a2c      	ldr	r2, [pc, #176]	; (8007e18 <prvAddNewTaskToReadyList+0xc4>)
 8007d68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d6a:	4b2c      	ldr	r3, [pc, #176]	; (8007e1c <prvAddNewTaskToReadyList+0xc8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d72:	4a2a      	ldr	r2, [pc, #168]	; (8007e1c <prvAddNewTaskToReadyList+0xc8>)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d78:	4b27      	ldr	r3, [pc, #156]	; (8007e18 <prvAddNewTaskToReadyList+0xc4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d110      	bne.n	8007da2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d80:	f000 fc1a 	bl	80085b8 <prvInitialiseTaskLists>
 8007d84:	e00d      	b.n	8007da2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d86:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <prvAddNewTaskToReadyList+0xcc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d8e:	4b23      	ldr	r3, [pc, #140]	; (8007e1c <prvAddNewTaskToReadyList+0xc8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d802      	bhi.n	8007da2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d9c:	4a1f      	ldr	r2, [pc, #124]	; (8007e1c <prvAddNewTaskToReadyList+0xc8>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007da2:	4b20      	ldr	r3, [pc, #128]	; (8007e24 <prvAddNewTaskToReadyList+0xd0>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3301      	adds	r3, #1
 8007da8:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <prvAddNewTaskToReadyList+0xd0>)
 8007daa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007dac:	4b1d      	ldr	r3, [pc, #116]	; (8007e24 <prvAddNewTaskToReadyList+0xd0>)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db8:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <prvAddNewTaskToReadyList+0xd4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d903      	bls.n	8007dc8 <prvAddNewTaskToReadyList+0x74>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	4a18      	ldr	r2, [pc, #96]	; (8007e28 <prvAddNewTaskToReadyList+0xd4>)
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4a15      	ldr	r2, [pc, #84]	; (8007e2c <prvAddNewTaskToReadyList+0xd8>)
 8007dd6:	441a      	add	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fe fdad 	bl	800693e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007de4:	f001 fb06 	bl	80093f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007de8:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <prvAddNewTaskToReadyList+0xcc>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00e      	beq.n	8007e0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <prvAddNewTaskToReadyList+0xc8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d207      	bcs.n	8007e0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <prvAddNewTaskToReadyList+0xdc>)
 8007e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	2000127c 	.word	0x2000127c
 8007e1c:	20000da8 	.word	0x20000da8
 8007e20:	20001288 	.word	0x20001288
 8007e24:	20001298 	.word	0x20001298
 8007e28:	20001284 	.word	0x20001284
 8007e2c:	20000dac 	.word	0x20000dac
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d017      	beq.n	8007e76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <vTaskDelay+0x60>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <vTaskDelay+0x30>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	60bb      	str	r3, [r7, #8]
}
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e64:	f000 f880 	bl	8007f68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e68:	2100      	movs	r1, #0
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fdfc 	bl	8008a68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e70:	f000 f888 	bl	8007f84 <xTaskResumeAll>
 8007e74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d107      	bne.n	8007e8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <vTaskDelay+0x64>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	200012a4 	.word	0x200012a4
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007eaa:	463a      	mov	r2, r7
 8007eac:	1d39      	adds	r1, r7, #4
 8007eae:	f107 0308 	add.w	r3, r7, #8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fce2 	bl	800687c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	9202      	str	r2, [sp, #8]
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	460a      	mov	r2, r1
 8007eca:	4921      	ldr	r1, [pc, #132]	; (8007f50 <vTaskStartScheduler+0xb4>)
 8007ecc:	4821      	ldr	r0, [pc, #132]	; (8007f54 <vTaskStartScheduler+0xb8>)
 8007ece:	f7ff fe19 	bl	8007b04 <xTaskCreateStatic>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4a20      	ldr	r2, [pc, #128]	; (8007f58 <vTaskStartScheduler+0xbc>)
 8007ed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ed8:	4b1f      	ldr	r3, [pc, #124]	; (8007f58 <vTaskStartScheduler+0xbc>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	e001      	b.n	8007eea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d102      	bne.n	8007ef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ef0:	f000 fe0e 	bl	8008b10 <xTimerCreateTimerTask>
 8007ef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d116      	bne.n	8007f2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	613b      	str	r3, [r7, #16]
}
 8007f0e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <vTaskStartScheduler+0xc0>)
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <vTaskStartScheduler+0xc4>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <vTaskStartScheduler+0xc8>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f24:	f001 f994 	bl	8009250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f28:	e00e      	b.n	8007f48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f30:	d10a      	bne.n	8007f48 <vTaskStartScheduler+0xac>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	60fb      	str	r3, [r7, #12]
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <vTaskStartScheduler+0xaa>
}
 8007f48:	bf00      	nop
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	0800b074 	.word	0x0800b074
 8007f54:	08008589 	.word	0x08008589
 8007f58:	200012a0 	.word	0x200012a0
 8007f5c:	2000129c 	.word	0x2000129c
 8007f60:	20001288 	.word	0x20001288
 8007f64:	20001280 	.word	0x20001280

08007f68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <vTaskSuspendAll+0x18>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	4a03      	ldr	r2, [pc, #12]	; (8007f80 <vTaskSuspendAll+0x18>)
 8007f74:	6013      	str	r3, [r2, #0]
}
 8007f76:	bf00      	nop
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	200012a4 	.word	0x200012a4

08007f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f92:	4b42      	ldr	r3, [pc, #264]	; (800809c <xTaskResumeAll+0x118>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	603b      	str	r3, [r7, #0]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fb0:	f001 f9f0 	bl	8009394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fb4:	4b39      	ldr	r3, [pc, #228]	; (800809c <xTaskResumeAll+0x118>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	4a38      	ldr	r2, [pc, #224]	; (800809c <xTaskResumeAll+0x118>)
 8007fbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fbe:	4b37      	ldr	r3, [pc, #220]	; (800809c <xTaskResumeAll+0x118>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d162      	bne.n	800808c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fc6:	4b36      	ldr	r3, [pc, #216]	; (80080a0 <xTaskResumeAll+0x11c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d05e      	beq.n	800808c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fce:	e02f      	b.n	8008030 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007fd0:	4b34      	ldr	r3, [pc, #208]	; (80080a4 <xTaskResumeAll+0x120>)
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3318      	adds	r3, #24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fd0b 	bl	80069f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fd06 	bl	80069f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff0:	4b2d      	ldr	r3, [pc, #180]	; (80080a8 <xTaskResumeAll+0x124>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d903      	bls.n	8008000 <xTaskResumeAll+0x7c>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a2a      	ldr	r2, [pc, #168]	; (80080a8 <xTaskResumeAll+0x124>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a27      	ldr	r2, [pc, #156]	; (80080ac <xTaskResumeAll+0x128>)
 800800e:	441a      	add	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe fc91 	bl	800693e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <xTaskResumeAll+0x12c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800802a:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <xTaskResumeAll+0x130>)
 800802c:	2201      	movs	r2, #1
 800802e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008030:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <xTaskResumeAll+0x120>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1cb      	bne.n	8007fd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800803e:	f000 fb59 	bl	80086f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008042:	4b1d      	ldr	r3, [pc, #116]	; (80080b8 <xTaskResumeAll+0x134>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d010      	beq.n	8008070 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800804e:	f000 f847 	bl	80080e0 <xTaskIncrementTick>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008058:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <xTaskResumeAll+0x130>)
 800805a:	2201      	movs	r2, #1
 800805c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3b01      	subs	r3, #1
 8008062:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f1      	bne.n	800804e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <xTaskResumeAll+0x134>)
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008070:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <xTaskResumeAll+0x130>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <xTaskResumeAll+0x138>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800808c:	f001 f9b2 	bl	80093f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008090:	68bb      	ldr	r3, [r7, #8]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200012a4 	.word	0x200012a4
 80080a0:	2000127c 	.word	0x2000127c
 80080a4:	2000123c 	.word	0x2000123c
 80080a8:	20001284 	.word	0x20001284
 80080ac:	20000dac 	.word	0x20000dac
 80080b0:	20000da8 	.word	0x20000da8
 80080b4:	20001290 	.word	0x20001290
 80080b8:	2000128c 	.word	0x2000128c
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <xTaskGetTickCount+0x1c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080cc:	687b      	ldr	r3, [r7, #4]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20001280 	.word	0x20001280

080080e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ea:	4b51      	ldr	r3, [pc, #324]	; (8008230 <xTaskIncrementTick+0x150>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 808e 	bne.w	8008210 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080f4:	4b4f      	ldr	r3, [pc, #316]	; (8008234 <xTaskIncrementTick+0x154>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080fc:	4a4d      	ldr	r2, [pc, #308]	; (8008234 <xTaskIncrementTick+0x154>)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d120      	bne.n	800814a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008108:	4b4b      	ldr	r3, [pc, #300]	; (8008238 <xTaskIncrementTick+0x158>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <xTaskIncrementTick+0x48>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	603b      	str	r3, [r7, #0]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xTaskIncrementTick+0x46>
 8008128:	4b43      	ldr	r3, [pc, #268]	; (8008238 <xTaskIncrementTick+0x158>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	4b43      	ldr	r3, [pc, #268]	; (800823c <xTaskIncrementTick+0x15c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a41      	ldr	r2, [pc, #260]	; (8008238 <xTaskIncrementTick+0x158>)
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	4a41      	ldr	r2, [pc, #260]	; (800823c <xTaskIncrementTick+0x15c>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	4b40      	ldr	r3, [pc, #256]	; (8008240 <xTaskIncrementTick+0x160>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	4a3f      	ldr	r2, [pc, #252]	; (8008240 <xTaskIncrementTick+0x160>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	f000 fad5 	bl	80086f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800814a:	4b3e      	ldr	r3, [pc, #248]	; (8008244 <xTaskIncrementTick+0x164>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	429a      	cmp	r2, r3
 8008152:	d34e      	bcc.n	80081f2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008154:	4b38      	ldr	r3, [pc, #224]	; (8008238 <xTaskIncrementTick+0x158>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <xTaskIncrementTick+0x82>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <xTaskIncrementTick+0x84>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008168:	4b36      	ldr	r3, [pc, #216]	; (8008244 <xTaskIncrementTick+0x164>)
 800816a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800816e:	601a      	str	r2, [r3, #0]
					break;
 8008170:	e03f      	b.n	80081f2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008172:	4b31      	ldr	r3, [pc, #196]	; (8008238 <xTaskIncrementTick+0x158>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d203      	bcs.n	8008192 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800818a:	4a2e      	ldr	r2, [pc, #184]	; (8008244 <xTaskIncrementTick+0x164>)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6013      	str	r3, [r2, #0]
						break;
 8008190:	e02f      	b.n	80081f2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	3304      	adds	r3, #4
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fc2e 	bl	80069f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	3318      	adds	r3, #24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fc25 	bl	80069f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b2:	4b25      	ldr	r3, [pc, #148]	; (8008248 <xTaskIncrementTick+0x168>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d903      	bls.n	80081c2 <xTaskIncrementTick+0xe2>
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	4a22      	ldr	r2, [pc, #136]	; (8008248 <xTaskIncrementTick+0x168>)
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4a1f      	ldr	r2, [pc, #124]	; (800824c <xTaskIncrementTick+0x16c>)
 80081d0:	441a      	add	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4619      	mov	r1, r3
 80081d8:	4610      	mov	r0, r2
 80081da:	f7fe fbb0 	bl	800693e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e2:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <xTaskIncrementTick+0x170>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d3b3      	bcc.n	8008154 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f0:	e7b0      	b.n	8008154 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081f2:	4b17      	ldr	r3, [pc, #92]	; (8008250 <xTaskIncrementTick+0x170>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f8:	4914      	ldr	r1, [pc, #80]	; (800824c <xTaskIncrementTick+0x16c>)
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d907      	bls.n	800821a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800820a:	2301      	movs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e004      	b.n	800821a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008210:	4b10      	ldr	r3, [pc, #64]	; (8008254 <xTaskIncrementTick+0x174>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	4a0f      	ldr	r2, [pc, #60]	; (8008254 <xTaskIncrementTick+0x174>)
 8008218:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800821a:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <xTaskIncrementTick+0x178>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008226:	697b      	ldr	r3, [r7, #20]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	200012a4 	.word	0x200012a4
 8008234:	20001280 	.word	0x20001280
 8008238:	20001234 	.word	0x20001234
 800823c:	20001238 	.word	0x20001238
 8008240:	20001294 	.word	0x20001294
 8008244:	2000129c 	.word	0x2000129c
 8008248:	20001284 	.word	0x20001284
 800824c:	20000dac 	.word	0x20000dac
 8008250:	20000da8 	.word	0x20000da8
 8008254:	2000128c 	.word	0x2000128c
 8008258:	20001290 	.word	0x20001290

0800825c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008262:	4b28      	ldr	r3, [pc, #160]	; (8008304 <vTaskSwitchContext+0xa8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800826a:	4b27      	ldr	r3, [pc, #156]	; (8008308 <vTaskSwitchContext+0xac>)
 800826c:	2201      	movs	r2, #1
 800826e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008270:	e041      	b.n	80082f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008272:	4b25      	ldr	r3, [pc, #148]	; (8008308 <vTaskSwitchContext+0xac>)
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008278:	4b24      	ldr	r3, [pc, #144]	; (800830c <vTaskSwitchContext+0xb0>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60fb      	str	r3, [r7, #12]
 800827e:	e010      	b.n	80082a2 <vTaskSwitchContext+0x46>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <vTaskSwitchContext+0x40>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	607b      	str	r3, [r7, #4]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <vTaskSwitchContext+0x3e>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3b01      	subs	r3, #1
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	491b      	ldr	r1, [pc, #108]	; (8008310 <vTaskSwitchContext+0xb4>)
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	440b      	add	r3, r1
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0e4      	beq.n	8008280 <vTaskSwitchContext+0x24>
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4a13      	ldr	r2, [pc, #76]	; (8008310 <vTaskSwitchContext+0xb4>)
 80082c2:	4413      	add	r3, r2
 80082c4:	60bb      	str	r3, [r7, #8]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	605a      	str	r2, [r3, #4]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	3308      	adds	r3, #8
 80082d8:	429a      	cmp	r2, r3
 80082da:	d104      	bne.n	80082e6 <vTaskSwitchContext+0x8a>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	4a09      	ldr	r2, [pc, #36]	; (8008314 <vTaskSwitchContext+0xb8>)
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	4a06      	ldr	r2, [pc, #24]	; (800830c <vTaskSwitchContext+0xb0>)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6013      	str	r3, [r2, #0]
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	200012a4 	.word	0x200012a4
 8008308:	20001290 	.word	0x20001290
 800830c:	20001284 	.word	0x20001284
 8008310:	20000dac 	.word	0x20000dac
 8008314:	20000da8 	.word	0x20000da8

08008318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800833e:	4b07      	ldr	r3, [pc, #28]	; (800835c <vTaskPlaceOnEventList+0x44>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3318      	adds	r3, #24
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fe fb1d 	bl	8006986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800834c:	2101      	movs	r1, #1
 800834e:	6838      	ldr	r0, [r7, #0]
 8008350:	f000 fb8a 	bl	8008a68 <prvAddCurrentTaskToDelayedList>
}
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20000da8 	.word	0x20000da8

08008360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	617b      	str	r3, [r7, #20]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008388:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3318      	adds	r3, #24
 800838e:	4619      	mov	r1, r3
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7fe fad4 	bl	800693e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800839c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	68b8      	ldr	r0, [r7, #8]
 80083a6:	f000 fb5f 	bl	8008a68 <prvAddCurrentTaskToDelayedList>
	}
 80083aa:	bf00      	nop
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000da8 	.word	0x20000da8

080083b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	3318      	adds	r3, #24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fb05 	bl	80069f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ee:	4b1e      	ldr	r3, [pc, #120]	; (8008468 <xTaskRemoveFromEventList+0xb0>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d11d      	bne.n	8008432 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fafc 	bl	80069f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008404:	4b19      	ldr	r3, [pc, #100]	; (800846c <xTaskRemoveFromEventList+0xb4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d903      	bls.n	8008414 <xTaskRemoveFromEventList+0x5c>
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008410:	4a16      	ldr	r2, [pc, #88]	; (800846c <xTaskRemoveFromEventList+0xb4>)
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4a13      	ldr	r2, [pc, #76]	; (8008470 <xTaskRemoveFromEventList+0xb8>)
 8008422:	441a      	add	r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	4610      	mov	r0, r2
 800842c:	f7fe fa87 	bl	800693e <vListInsertEnd>
 8008430:	e005      	b.n	800843e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	3318      	adds	r3, #24
 8008436:	4619      	mov	r1, r3
 8008438:	480e      	ldr	r0, [pc, #56]	; (8008474 <xTaskRemoveFromEventList+0xbc>)
 800843a:	f7fe fa80 	bl	800693e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008442:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <xTaskRemoveFromEventList+0xc0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	429a      	cmp	r2, r3
 800844a:	d905      	bls.n	8008458 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800844c:	2301      	movs	r3, #1
 800844e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008450:	4b0a      	ldr	r3, [pc, #40]	; (800847c <xTaskRemoveFromEventList+0xc4>)
 8008452:	2201      	movs	r2, #1
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	e001      	b.n	800845c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800845c:	697b      	ldr	r3, [r7, #20]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	200012a4 	.word	0x200012a4
 800846c:	20001284 	.word	0x20001284
 8008470:	20000dac 	.word	0x20000dac
 8008474:	2000123c 	.word	0x2000123c
 8008478:	20000da8 	.word	0x20000da8
 800847c:	20001290 	.word	0x20001290

08008480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008488:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <vTaskInternalSetTimeOutState+0x24>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <vTaskInternalSetTimeOutState+0x28>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	605a      	str	r2, [r3, #4]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	20001294 	.word	0x20001294
 80084a8:	20001280 	.word	0x20001280

080084ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	613b      	str	r3, [r7, #16]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	60fb      	str	r3, [r7, #12]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80084ee:	f000 ff51 	bl	8009394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084f2:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <xTaskCheckForTimeOut+0xbc>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800850a:	d102      	bne.n	8008512 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800850c:	2300      	movs	r3, #0
 800850e:	61fb      	str	r3, [r7, #28]
 8008510:	e023      	b.n	800855a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4b15      	ldr	r3, [pc, #84]	; (800856c <xTaskCheckForTimeOut+0xc0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d007      	beq.n	800852e <xTaskCheckForTimeOut+0x82>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	429a      	cmp	r2, r3
 8008526:	d302      	bcc.n	800852e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008528:	2301      	movs	r3, #1
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e015      	b.n	800855a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	d20b      	bcs.n	8008550 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff ff9b 	bl	8008480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800854a:	2300      	movs	r3, #0
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	e004      	b.n	800855a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008556:	2301      	movs	r3, #1
 8008558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800855a:	f000 ff4b 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 800855e:	69fb      	ldr	r3, [r7, #28]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20001280 	.word	0x20001280
 800856c:	20001294 	.word	0x20001294

08008570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008574:	4b03      	ldr	r3, [pc, #12]	; (8008584 <vTaskMissedYield+0x14>)
 8008576:	2201      	movs	r2, #1
 8008578:	601a      	str	r2, [r3, #0]
}
 800857a:	bf00      	nop
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	20001290 	.word	0x20001290

08008588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008590:	f000 f852 	bl	8008638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008594:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <prvIdleTask+0x28>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d9f9      	bls.n	8008590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800859c:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <prvIdleTask+0x2c>)
 800859e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085ac:	e7f0      	b.n	8008590 <prvIdleTask+0x8>
 80085ae:	bf00      	nop
 80085b0:	20000dac 	.word	0x20000dac
 80085b4:	e000ed04 	.word	0xe000ed04

080085b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085be:	2300      	movs	r3, #0
 80085c0:	607b      	str	r3, [r7, #4]
 80085c2:	e00c      	b.n	80085de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4a12      	ldr	r2, [pc, #72]	; (8008618 <prvInitialiseTaskLists+0x60>)
 80085d0:	4413      	add	r3, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe f986 	bl	80068e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3301      	adds	r3, #1
 80085dc:	607b      	str	r3, [r7, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b37      	cmp	r3, #55	; 0x37
 80085e2:	d9ef      	bls.n	80085c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085e4:	480d      	ldr	r0, [pc, #52]	; (800861c <prvInitialiseTaskLists+0x64>)
 80085e6:	f7fe f97d 	bl	80068e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085ea:	480d      	ldr	r0, [pc, #52]	; (8008620 <prvInitialiseTaskLists+0x68>)
 80085ec:	f7fe f97a 	bl	80068e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085f0:	480c      	ldr	r0, [pc, #48]	; (8008624 <prvInitialiseTaskLists+0x6c>)
 80085f2:	f7fe f977 	bl	80068e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085f6:	480c      	ldr	r0, [pc, #48]	; (8008628 <prvInitialiseTaskLists+0x70>)
 80085f8:	f7fe f974 	bl	80068e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085fc:	480b      	ldr	r0, [pc, #44]	; (800862c <prvInitialiseTaskLists+0x74>)
 80085fe:	f7fe f971 	bl	80068e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008602:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <prvInitialiseTaskLists+0x78>)
 8008604:	4a05      	ldr	r2, [pc, #20]	; (800861c <prvInitialiseTaskLists+0x64>)
 8008606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <prvInitialiseTaskLists+0x7c>)
 800860a:	4a05      	ldr	r2, [pc, #20]	; (8008620 <prvInitialiseTaskLists+0x68>)
 800860c:	601a      	str	r2, [r3, #0]
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000dac 	.word	0x20000dac
 800861c:	2000120c 	.word	0x2000120c
 8008620:	20001220 	.word	0x20001220
 8008624:	2000123c 	.word	0x2000123c
 8008628:	20001250 	.word	0x20001250
 800862c:	20001268 	.word	0x20001268
 8008630:	20001234 	.word	0x20001234
 8008634:	20001238 	.word	0x20001238

08008638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800863e:	e019      	b.n	8008674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008640:	f000 fea8 	bl	8009394 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008644:	4b10      	ldr	r3, [pc, #64]	; (8008688 <prvCheckTasksWaitingTermination+0x50>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3304      	adds	r3, #4
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe f9d1 	bl	80069f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008656:	4b0d      	ldr	r3, [pc, #52]	; (800868c <prvCheckTasksWaitingTermination+0x54>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3b01      	subs	r3, #1
 800865c:	4a0b      	ldr	r2, [pc, #44]	; (800868c <prvCheckTasksWaitingTermination+0x54>)
 800865e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008660:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <prvCheckTasksWaitingTermination+0x58>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3b01      	subs	r3, #1
 8008666:	4a0a      	ldr	r2, [pc, #40]	; (8008690 <prvCheckTasksWaitingTermination+0x58>)
 8008668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800866a:	f000 fec3 	bl	80093f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f810 	bl	8008694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008674:	4b06      	ldr	r3, [pc, #24]	; (8008690 <prvCheckTasksWaitingTermination+0x58>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e1      	bne.n	8008640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20001250 	.word	0x20001250
 800868c:	2000127c 	.word	0x2000127c
 8008690:	20001264 	.word	0x20001264

08008694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d108      	bne.n	80086b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f858 	bl	8009760 <vPortFree>
				vPortFree( pxTCB );
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 f855 	bl	8009760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086b6:	e018      	b.n	80086ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d103      	bne.n	80086ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 f84c 	bl	8009760 <vPortFree>
	}
 80086c8:	e00f      	b.n	80086ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d00a      	beq.n	80086ea <prvDeleteTCB+0x56>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	60fb      	str	r3, [r7, #12]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <prvDeleteTCB+0x54>
	}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086fa:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <prvResetNextTaskUnblockTime+0x44>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <prvResetNextTaskUnblockTime+0x14>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <prvResetNextTaskUnblockTime+0x16>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800870e:	4b0b      	ldr	r3, [pc, #44]	; (800873c <prvResetNextTaskUnblockTime+0x48>)
 8008710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008714:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008716:	e008      	b.n	800872a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008718:	4b07      	ldr	r3, [pc, #28]	; (8008738 <prvResetNextTaskUnblockTime+0x44>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	4a05      	ldr	r2, [pc, #20]	; (800873c <prvResetNextTaskUnblockTime+0x48>)
 8008728:	6013      	str	r3, [r2, #0]
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20001234 	.word	0x20001234
 800873c:	2000129c 	.word	0x2000129c

08008740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <xTaskGetSchedulerState+0x34>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800874e:	2301      	movs	r3, #1
 8008750:	607b      	str	r3, [r7, #4]
 8008752:	e008      	b.n	8008766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008754:	4b08      	ldr	r3, [pc, #32]	; (8008778 <xTaskGetSchedulerState+0x38>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800875c:	2302      	movs	r3, #2
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	e001      	b.n	8008766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008762:	2300      	movs	r3, #0
 8008764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008766:	687b      	ldr	r3, [r7, #4]
	}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	20001288 	.word	0x20001288
 8008778:	200012a4 	.word	0x200012a4

0800877c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008788:	2300      	movs	r3, #0
 800878a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d056      	beq.n	8008840 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008796:	4b2d      	ldr	r3, [pc, #180]	; (800884c <xTaskPriorityInherit+0xd0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	429a      	cmp	r2, r3
 800879e:	d246      	bcs.n	800882e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	db06      	blt.n	80087b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a8:	4b28      	ldr	r3, [pc, #160]	; (800884c <xTaskPriorityInherit+0xd0>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6959      	ldr	r1, [r3, #20]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4a22      	ldr	r2, [pc, #136]	; (8008850 <xTaskPriorityInherit+0xd4>)
 80087c8:	4413      	add	r3, r2
 80087ca:	4299      	cmp	r1, r3
 80087cc:	d101      	bne.n	80087d2 <xTaskPriorityInherit+0x56>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <xTaskPriorityInherit+0x58>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d022      	beq.n	800881e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	3304      	adds	r3, #4
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fe f90b 	bl	80069f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087e2:	4b1a      	ldr	r3, [pc, #104]	; (800884c <xTaskPriorityInherit+0xd0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f0:	4b18      	ldr	r3, [pc, #96]	; (8008854 <xTaskPriorityInherit+0xd8>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d903      	bls.n	8008800 <xTaskPriorityInherit+0x84>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	4a15      	ldr	r2, [pc, #84]	; (8008854 <xTaskPriorityInherit+0xd8>)
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4a10      	ldr	r2, [pc, #64]	; (8008850 <xTaskPriorityInherit+0xd4>)
 800880e:	441a      	add	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	3304      	adds	r3, #4
 8008814:	4619      	mov	r1, r3
 8008816:	4610      	mov	r0, r2
 8008818:	f7fe f891 	bl	800693e <vListInsertEnd>
 800881c:	e004      	b.n	8008828 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800881e:	4b0b      	ldr	r3, [pc, #44]	; (800884c <xTaskPriorityInherit+0xd0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	e008      	b.n	8008840 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008832:	4b06      	ldr	r3, [pc, #24]	; (800884c <xTaskPriorityInherit+0xd0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	429a      	cmp	r2, r3
 800883a:	d201      	bcs.n	8008840 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800883c:	2301      	movs	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008840:	68fb      	ldr	r3, [r7, #12]
	}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000da8 	.word	0x20000da8
 8008850:	20000dac 	.word	0x20000dac
 8008854:	20001284 	.word	0x20001284

08008858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008864:	2300      	movs	r3, #0
 8008866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d056      	beq.n	800891c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800886e:	4b2e      	ldr	r3, [pc, #184]	; (8008928 <xTaskPriorityDisinherit+0xd0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	429a      	cmp	r2, r3
 8008876:	d00a      	beq.n	800888e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	60fb      	str	r3, [r7, #12]
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10a      	bne.n	80088ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	60bb      	str	r3, [r7, #8]
}
 80088a8:	bf00      	nop
 80088aa:	e7fe      	b.n	80088aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b0:	1e5a      	subs	r2, r3, #1
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088be:	429a      	cmp	r2, r3
 80088c0:	d02c      	beq.n	800891c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d128      	bne.n	800891c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe f892 	bl	80069f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	4b0f      	ldr	r3, [pc, #60]	; (800892c <xTaskPriorityDisinherit+0xd4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d903      	bls.n	80088fc <xTaskPriorityDisinherit+0xa4>
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	4a0c      	ldr	r2, [pc, #48]	; (800892c <xTaskPriorityDisinherit+0xd4>)
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4a09      	ldr	r2, [pc, #36]	; (8008930 <xTaskPriorityDisinherit+0xd8>)
 800890a:	441a      	add	r2, r3
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	3304      	adds	r3, #4
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f7fe f813 	bl	800693e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008918:	2301      	movs	r3, #1
 800891a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800891c:	697b      	ldr	r3, [r7, #20]
	}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000da8 	.word	0x20000da8
 800892c:	20001284 	.word	0x20001284
 8008930:	20000dac 	.word	0x20000dac

08008934 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008942:	2301      	movs	r3, #1
 8008944:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d06f      	beq.n	8008a2c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60fb      	str	r3, [r7, #12]
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d902      	bls.n	800897a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	61fb      	str	r3, [r7, #28]
 8008978:	e002      	b.n	8008980 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	429a      	cmp	r2, r3
 8008988:	d050      	beq.n	8008a2c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	429a      	cmp	r2, r3
 8008992:	d14b      	bne.n	8008a2c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008994:	4b27      	ldr	r3, [pc, #156]	; (8008a34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	429a      	cmp	r2, r3
 800899c:	d10a      	bne.n	80089b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	60bb      	str	r3, [r7, #8]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	db04      	blt.n	80089d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	6959      	ldr	r1, [r3, #20]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80089e2:	4413      	add	r3, r2
 80089e4:	4299      	cmp	r1, r3
 80089e6:	d101      	bne.n	80089ec <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <vTaskPriorityDisinheritAfterTimeout+0xba>
 80089ec:	2300      	movs	r3, #0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01c      	beq.n	8008a2c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fd fffe 	bl	80069f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a00:	4b0e      	ldr	r3, [pc, #56]	; (8008a3c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d903      	bls.n	8008a10 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	4a0b      	ldr	r2, [pc, #44]	; (8008a3c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a14:	4613      	mov	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4a06      	ldr	r2, [pc, #24]	; (8008a38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a1e:	441a      	add	r2, r3
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f7fd ff89 	bl	800693e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a2c:	bf00      	nop
 8008a2e:	3720      	adds	r7, #32
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20000da8 	.word	0x20000da8
 8008a38:	20000dac 	.word	0x20000dac
 8008a3c:	20001284 	.word	0x20001284

08008a40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a52:	3201      	adds	r2, #1
 8008a54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008a56:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a58:	681b      	ldr	r3, [r3, #0]
	}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	20000da8 	.word	0x20000da8

08008a68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a72:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a78:	4b20      	ldr	r3, [pc, #128]	; (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fd ffba 	bl	80069f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a8a:	d10a      	bne.n	8008aa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a92:	4b1a      	ldr	r3, [pc, #104]	; (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4819      	ldr	r0, [pc, #100]	; (8008b00 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a9c:	f7fd ff4f 	bl	800693e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008aa0:	e026      	b.n	8008af0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008aaa:	4b14      	ldr	r3, [pc, #80]	; (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d209      	bcs.n	8008ace <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aba:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b0f      	ldr	r3, [pc, #60]	; (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7fd ff5d 	bl	8006986 <vListInsert>
}
 8008acc:	e010      	b.n	8008af0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ace:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4610      	mov	r0, r2
 8008adc:	f7fd ff53 	bl	8006986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d202      	bcs.n	8008af0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008aea:	4a08      	ldr	r2, [pc, #32]	; (8008b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	6013      	str	r3, [r2, #0]
}
 8008af0:	bf00      	nop
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20001280 	.word	0x20001280
 8008afc:	20000da8 	.word	0x20000da8
 8008b00:	20001268 	.word	0x20001268
 8008b04:	20001238 	.word	0x20001238
 8008b08:	20001234 	.word	0x20001234
 8008b0c:	2000129c 	.word	0x2000129c

08008b10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	; 0x28
 8008b14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b1a:	f000 facb 	bl	80090b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b1e:	4b1c      	ldr	r3, [pc, #112]	; (8008b90 <xTimerCreateTimerTask+0x80>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d021      	beq.n	8008b6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b2e:	1d3a      	adds	r2, r7, #4
 8008b30:	f107 0108 	add.w	r1, r7, #8
 8008b34:	f107 030c 	add.w	r3, r7, #12
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fd feb9 	bl	80068b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	9202      	str	r2, [sp, #8]
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	2302      	movs	r3, #2
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	460a      	mov	r2, r1
 8008b50:	4910      	ldr	r1, [pc, #64]	; (8008b94 <xTimerCreateTimerTask+0x84>)
 8008b52:	4811      	ldr	r0, [pc, #68]	; (8008b98 <xTimerCreateTimerTask+0x88>)
 8008b54:	f7fe ffd6 	bl	8007b04 <xTaskCreateStatic>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	4a10      	ldr	r2, [pc, #64]	; (8008b9c <xTimerCreateTimerTask+0x8c>)
 8008b5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b5e:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <xTimerCreateTimerTask+0x8c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b66:	2301      	movs	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	613b      	str	r3, [r7, #16]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b86:	697b      	ldr	r3, [r7, #20]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	200012d8 	.word	0x200012d8
 8008b94:	0800b07c 	.word	0x0800b07c
 8008b98:	08008cbd 	.word	0x08008cbd
 8008b9c:	200012dc 	.word	0x200012dc

08008ba0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08a      	sub	sp, #40	; 0x28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <xTimerGenericCommand+0x2e>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	623b      	str	r3, [r7, #32]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bce:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <xTimerGenericCommand+0x98>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d02a      	beq.n	8008c2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b05      	cmp	r3, #5
 8008be6:	dc18      	bgt.n	8008c1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008be8:	f7ff fdaa 	bl	8008740 <xTaskGetSchedulerState>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d109      	bne.n	8008c06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bf2:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <xTimerGenericCommand+0x98>)
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	f107 0110 	add.w	r1, r7, #16
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	f7fe f91d 	bl	8006e3c <xQueueGenericSend>
 8008c02:	6278      	str	r0, [r7, #36]	; 0x24
 8008c04:	e012      	b.n	8008c2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c06:	4b0c      	ldr	r3, [pc, #48]	; (8008c38 <xTimerGenericCommand+0x98>)
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	f107 0110 	add.w	r1, r7, #16
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2200      	movs	r2, #0
 8008c12:	f7fe f913 	bl	8006e3c <xQueueGenericSend>
 8008c16:	6278      	str	r0, [r7, #36]	; 0x24
 8008c18:	e008      	b.n	8008c2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c1a:	4b07      	ldr	r3, [pc, #28]	; (8008c38 <xTimerGenericCommand+0x98>)
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	f107 0110 	add.w	r1, r7, #16
 8008c22:	2300      	movs	r3, #0
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	f7fe fa07 	bl	8007038 <xQueueGenericSendFromISR>
 8008c2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3728      	adds	r7, #40	; 0x28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200012d8 	.word	0x200012d8

08008c3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c46:	4b1c      	ldr	r3, [pc, #112]	; (8008cb8 <prvProcessExpiredTimer+0x7c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	3304      	adds	r3, #4
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fd fecf 	bl	80069f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d122      	bne.n	8008ca8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	699a      	ldr	r2, [r3, #24]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	18d1      	adds	r1, r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	6978      	ldr	r0, [r7, #20]
 8008c70:	f000 f8c8 	bl	8008e04 <prvInsertTimerInActiveList>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d016      	beq.n	8008ca8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	2100      	movs	r1, #0
 8008c84:	6978      	ldr	r0, [r7, #20]
 8008c86:	f7ff ff8b 	bl	8008ba0 <xTimerGenericCommand>
 8008c8a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10a      	bne.n	8008ca8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60fb      	str	r3, [r7, #12]
}
 8008ca4:	bf00      	nop
 8008ca6:	e7fe      	b.n	8008ca6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	6978      	ldr	r0, [r7, #20]
 8008cae:	4798      	blx	r3
}
 8008cb0:	bf00      	nop
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	200012d0 	.word	0x200012d0

08008cbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cc4:	f107 0308 	add.w	r3, r7, #8
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f857 	bl	8008d7c <prvGetNextExpireTime>
 8008cce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f803 	bl	8008ce0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cda:	f000 f8d5 	bl	8008e88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cde:	e7f1      	b.n	8008cc4 <prvTimerTask+0x8>

08008ce0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008cea:	f7ff f93d 	bl	8007f68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f866 	bl	8008dc4 <prvSampleTimeNow>
 8008cf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d130      	bne.n	8008d62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <prvProcessTimerOrBlockTask+0x3c>
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d806      	bhi.n	8008d1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d0e:	f7ff f939 	bl	8007f84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff ff91 	bl	8008c3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d1a:	e024      	b.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d22:	4b13      	ldr	r3, [pc, #76]	; (8008d70 <prvProcessTimerOrBlockTask+0x90>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	bf0c      	ite	eq
 8008d2c:	2301      	moveq	r3, #1
 8008d2e:	2300      	movne	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d34:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <prvProcessTimerOrBlockTask+0x94>)
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	4619      	mov	r1, r3
 8008d42:	f7fe feab 	bl	8007a9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d46:	f7ff f91d 	bl	8007f84 <xTaskResumeAll>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d50:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <prvProcessTimerOrBlockTask+0x98>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
}
 8008d60:	e001      	b.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d62:	f7ff f90f 	bl	8007f84 <xTaskResumeAll>
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200012d4 	.word	0x200012d4
 8008d74:	200012d8 	.word	0x200012d8
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d84:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <prvGetNextExpireTime+0x44>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	bf0c      	ite	eq
 8008d8e:	2301      	moveq	r3, #1
 8008d90:	2300      	movne	r3, #0
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d105      	bne.n	8008dae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008da2:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <prvGetNextExpireTime+0x44>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	e001      	b.n	8008db2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008db2:	68fb      	ldr	r3, [r7, #12]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	200012d0 	.word	0x200012d0

08008dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008dcc:	f7ff f978 	bl	80080c0 <xTaskGetTickCount>
 8008dd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <prvSampleTimeNow+0x3c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d205      	bcs.n	8008de8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ddc:	f000 f908 	bl	8008ff0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	e002      	b.n	8008dee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008dee:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <prvSampleTimeNow+0x3c>)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008df4:	68fb      	ldr	r3, [r7, #12]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	200012e0 	.word	0x200012e0

08008e04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d812      	bhi.n	8008e50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d302      	bcc.n	8008e3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e01b      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e3e:	4b10      	ldr	r3, [pc, #64]	; (8008e80 <prvInsertTimerInActiveList+0x7c>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3304      	adds	r3, #4
 8008e46:	4619      	mov	r1, r3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	f7fd fd9c 	bl	8006986 <vListInsert>
 8008e4e:	e012      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d206      	bcs.n	8008e66 <prvInsertTimerInActiveList+0x62>
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d302      	bcc.n	8008e66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e60:	2301      	movs	r3, #1
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	e007      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e66:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <prvInsertTimerInActiveList+0x80>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f7fd fd88 	bl	8006986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e76:	697b      	ldr	r3, [r7, #20]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	200012d4 	.word	0x200012d4
 8008e84:	200012d0 	.word	0x200012d0

08008e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08e      	sub	sp, #56	; 0x38
 8008e8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e8e:	e09d      	b.n	8008fcc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da18      	bge.n	8008ec8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e96:	1d3b      	adds	r3, r7, #4
 8008e98:	3304      	adds	r3, #4
 8008e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	61fb      	str	r3, [r7, #28]
}
 8008eb4:	bf00      	nop
 8008eb6:	e7fe      	b.n	8008eb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ebe:	6850      	ldr	r0, [r2, #4]
 8008ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec2:	6892      	ldr	r2, [r2, #8]
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	db7d      	blt.n	8008fca <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d004      	beq.n	8008ee4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	3304      	adds	r3, #4
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fd fd8a 	bl	80069f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ee4:	463b      	mov	r3, r7
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff ff6c 	bl	8008dc4 <prvSampleTimeNow>
 8008eec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b09      	cmp	r3, #9
 8008ef2:	d86b      	bhi.n	8008fcc <prvProcessReceivedCommands+0x144>
 8008ef4:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <prvProcessReceivedCommands+0x74>)
 8008ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efa:	bf00      	nop
 8008efc:	08008f25 	.word	0x08008f25
 8008f00:	08008f25 	.word	0x08008f25
 8008f04:	08008f25 	.word	0x08008f25
 8008f08:	08008fcd 	.word	0x08008fcd
 8008f0c:	08008f81 	.word	0x08008f81
 8008f10:	08008fb9 	.word	0x08008fb9
 8008f14:	08008f25 	.word	0x08008f25
 8008f18:	08008f25 	.word	0x08008f25
 8008f1c:	08008fcd 	.word	0x08008fcd
 8008f20:	08008f81 	.word	0x08008f81
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	18d1      	adds	r1, r2, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f32:	f7ff ff67 	bl	8008e04 <prvInsertTimerInActiveList>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d047      	beq.n	8008fcc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f42:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d13f      	bne.n	8008fcc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	441a      	add	r2, r3
 8008f54:	2300      	movs	r3, #0
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f5e:	f7ff fe1f 	bl	8008ba0 <xTimerGenericCommand>
 8008f62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d130      	bne.n	8008fcc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	61bb      	str	r3, [r7, #24]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10a      	bne.n	8008fa4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	617b      	str	r3, [r7, #20]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	699a      	ldr	r2, [r3, #24]
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	18d1      	adds	r1, r2, r3
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb2:	f7ff ff27 	bl	8008e04 <prvInsertTimerInActiveList>
					break;
 8008fb6:	e009      	b.n	8008fcc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d104      	bne.n	8008fcc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fc4:	f000 fbcc 	bl	8009760 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008fc8:	e000      	b.n	8008fcc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008fca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fcc:	4b07      	ldr	r3, [pc, #28]	; (8008fec <prvProcessReceivedCommands+0x164>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	1d39      	adds	r1, r7, #4
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe f955 	bl	8007284 <xQueueReceive>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f47f af57 	bne.w	8008e90 <prvProcessReceivedCommands+0x8>
	}
}
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
 8008fe6:	3730      	adds	r7, #48	; 0x30
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	200012d8 	.word	0x200012d8

08008ff0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ff6:	e045      	b.n	8009084 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ff8:	4b2c      	ldr	r3, [pc, #176]	; (80090ac <prvSwitchTimerLists+0xbc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009002:	4b2a      	ldr	r3, [pc, #168]	; (80090ac <prvSwitchTimerLists+0xbc>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3304      	adds	r3, #4
 8009010:	4618      	mov	r0, r3
 8009012:	f7fd fcf1 	bl	80069f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d12e      	bne.n	8009084 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	4413      	add	r3, r2
 800902e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	429a      	cmp	r2, r3
 8009036:	d90e      	bls.n	8009056 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009044:	4b19      	ldr	r3, [pc, #100]	; (80090ac <prvSwitchTimerLists+0xbc>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3304      	adds	r3, #4
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f7fd fc99 	bl	8006986 <vListInsert>
 8009054:	e016      	b.n	8009084 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009056:	2300      	movs	r3, #0
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	2300      	movs	r3, #0
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	2100      	movs	r1, #0
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7ff fd9d 	bl	8008ba0 <xTimerGenericCommand>
 8009066:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10a      	bne.n	8009084 <prvSwitchTimerLists+0x94>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	603b      	str	r3, [r7, #0]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <prvSwitchTimerLists+0xbc>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1b4      	bne.n	8008ff8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800908e:	4b07      	ldr	r3, [pc, #28]	; (80090ac <prvSwitchTimerLists+0xbc>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009094:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <prvSwitchTimerLists+0xc0>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a04      	ldr	r2, [pc, #16]	; (80090ac <prvSwitchTimerLists+0xbc>)
 800909a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800909c:	4a04      	ldr	r2, [pc, #16]	; (80090b0 <prvSwitchTimerLists+0xc0>)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	6013      	str	r3, [r2, #0]
}
 80090a2:	bf00      	nop
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	200012d0 	.word	0x200012d0
 80090b0:	200012d4 	.word	0x200012d4

080090b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090ba:	f000 f96b 	bl	8009394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090be:	4b15      	ldr	r3, [pc, #84]	; (8009114 <prvCheckForValidListAndQueue+0x60>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d120      	bne.n	8009108 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80090c6:	4814      	ldr	r0, [pc, #80]	; (8009118 <prvCheckForValidListAndQueue+0x64>)
 80090c8:	f7fd fc0c 	bl	80068e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80090cc:	4813      	ldr	r0, [pc, #76]	; (800911c <prvCheckForValidListAndQueue+0x68>)
 80090ce:	f7fd fc09 	bl	80068e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80090d2:	4b13      	ldr	r3, [pc, #76]	; (8009120 <prvCheckForValidListAndQueue+0x6c>)
 80090d4:	4a10      	ldr	r2, [pc, #64]	; (8009118 <prvCheckForValidListAndQueue+0x64>)
 80090d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80090d8:	4b12      	ldr	r3, [pc, #72]	; (8009124 <prvCheckForValidListAndQueue+0x70>)
 80090da:	4a10      	ldr	r2, [pc, #64]	; (800911c <prvCheckForValidListAndQueue+0x68>)
 80090dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80090de:	2300      	movs	r3, #0
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	4b11      	ldr	r3, [pc, #68]	; (8009128 <prvCheckForValidListAndQueue+0x74>)
 80090e4:	4a11      	ldr	r2, [pc, #68]	; (800912c <prvCheckForValidListAndQueue+0x78>)
 80090e6:	2110      	movs	r1, #16
 80090e8:	200a      	movs	r0, #10
 80090ea:	f7fd fd17 	bl	8006b1c <xQueueGenericCreateStatic>
 80090ee:	4603      	mov	r3, r0
 80090f0:	4a08      	ldr	r2, [pc, #32]	; (8009114 <prvCheckForValidListAndQueue+0x60>)
 80090f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80090f4:	4b07      	ldr	r3, [pc, #28]	; (8009114 <prvCheckForValidListAndQueue+0x60>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <prvCheckForValidListAndQueue+0x60>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	490b      	ldr	r1, [pc, #44]	; (8009130 <prvCheckForValidListAndQueue+0x7c>)
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe fc76 	bl	80079f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009108:	f000 f974 	bl	80093f4 <vPortExitCritical>
}
 800910c:	bf00      	nop
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	200012d8 	.word	0x200012d8
 8009118:	200012a8 	.word	0x200012a8
 800911c:	200012bc 	.word	0x200012bc
 8009120:	200012d0 	.word	0x200012d0
 8009124:	200012d4 	.word	0x200012d4
 8009128:	20001384 	.word	0x20001384
 800912c:	200012e4 	.word	0x200012e4
 8009130:	0800b084 	.word	0x0800b084

08009134 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3b04      	subs	r3, #4
 8009144:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800914c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3b04      	subs	r3, #4
 8009152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f023 0201 	bic.w	r2, r3, #1
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3b04      	subs	r3, #4
 8009162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009164:	4a0c      	ldr	r2, [pc, #48]	; (8009198 <pxPortInitialiseStack+0x64>)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3b14      	subs	r3, #20
 800916e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3b04      	subs	r3, #4
 800917a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f06f 0202 	mvn.w	r2, #2
 8009182:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3b20      	subs	r3, #32
 8009188:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800918a:	68fb      	ldr	r3, [r7, #12]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	0800919d 	.word	0x0800919d

0800919c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091a6:	4b12      	ldr	r3, [pc, #72]	; (80091f0 <prvTaskExitError+0x54>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ae:	d00a      	beq.n	80091c6 <prvTaskExitError+0x2a>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	60fb      	str	r3, [r7, #12]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <prvTaskExitError+0x28>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	60bb      	str	r3, [r7, #8]
}
 80091d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091da:	bf00      	nop
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0fc      	beq.n	80091dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091e2:	bf00      	nop
 80091e4:	bf00      	nop
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	20000020 	.word	0x20000020
	...

08009200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <pxCurrentTCBConst2>)
 8009202:	6819      	ldr	r1, [r3, #0]
 8009204:	6808      	ldr	r0, [r1, #0]
 8009206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920a:	f380 8809 	msr	PSP, r0
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f04f 0000 	mov.w	r0, #0
 8009216:	f380 8811 	msr	BASEPRI, r0
 800921a:	4770      	bx	lr
 800921c:	f3af 8000 	nop.w

08009220 <pxCurrentTCBConst2>:
 8009220:	20000da8 	.word	0x20000da8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop

08009228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009228:	4808      	ldr	r0, [pc, #32]	; (800924c <prvPortStartFirstTask+0x24>)
 800922a:	6800      	ldr	r0, [r0, #0]
 800922c:	6800      	ldr	r0, [r0, #0]
 800922e:	f380 8808 	msr	MSP, r0
 8009232:	f04f 0000 	mov.w	r0, #0
 8009236:	f380 8814 	msr	CONTROL, r0
 800923a:	b662      	cpsie	i
 800923c:	b661      	cpsie	f
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	df00      	svc	0
 8009248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800924a:	bf00      	nop
 800924c:	e000ed08 	.word	0xe000ed08

08009250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009256:	4b46      	ldr	r3, [pc, #280]	; (8009370 <xPortStartScheduler+0x120>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a46      	ldr	r2, [pc, #280]	; (8009374 <xPortStartScheduler+0x124>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d10a      	bne.n	8009276 <xPortStartScheduler+0x26>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	613b      	str	r3, [r7, #16]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009276:	4b3e      	ldr	r3, [pc, #248]	; (8009370 <xPortStartScheduler+0x120>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a3f      	ldr	r2, [pc, #252]	; (8009378 <xPortStartScheduler+0x128>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d10a      	bne.n	8009296 <xPortStartScheduler+0x46>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	60fb      	str	r3, [r7, #12]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009296:	4b39      	ldr	r3, [pc, #228]	; (800937c <xPortStartScheduler+0x12c>)
 8009298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	22ff      	movs	r2, #255	; 0xff
 80092a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	4b31      	ldr	r3, [pc, #196]	; (8009380 <xPortStartScheduler+0x130>)
 80092bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092be:	4b31      	ldr	r3, [pc, #196]	; (8009384 <xPortStartScheduler+0x134>)
 80092c0:	2207      	movs	r2, #7
 80092c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092c4:	e009      	b.n	80092da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80092c6:	4b2f      	ldr	r3, [pc, #188]	; (8009384 <xPortStartScheduler+0x134>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	4a2d      	ldr	r2, [pc, #180]	; (8009384 <xPortStartScheduler+0x134>)
 80092ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d0ef      	beq.n	80092c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092e6:	4b27      	ldr	r3, [pc, #156]	; (8009384 <xPortStartScheduler+0x134>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f1c3 0307 	rsb	r3, r3, #7
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d00a      	beq.n	8009308 <xPortStartScheduler+0xb8>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	60bb      	str	r3, [r7, #8]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009308:	4b1e      	ldr	r3, [pc, #120]	; (8009384 <xPortStartScheduler+0x134>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <xPortStartScheduler+0x134>)
 8009310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <xPortStartScheduler+0x134>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800931a:	4a1a      	ldr	r2, [pc, #104]	; (8009384 <xPortStartScheduler+0x134>)
 800931c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	b2da      	uxtb	r2, r3
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009326:	4b18      	ldr	r3, [pc, #96]	; (8009388 <xPortStartScheduler+0x138>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a17      	ldr	r2, [pc, #92]	; (8009388 <xPortStartScheduler+0x138>)
 800932c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <xPortStartScheduler+0x138>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a14      	ldr	r2, [pc, #80]	; (8009388 <xPortStartScheduler+0x138>)
 8009338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800933c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800933e:	f000 f8dd 	bl	80094fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009342:	4b12      	ldr	r3, [pc, #72]	; (800938c <xPortStartScheduler+0x13c>)
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009348:	f000 f8fc 	bl	8009544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800934c:	4b10      	ldr	r3, [pc, #64]	; (8009390 <xPortStartScheduler+0x140>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a0f      	ldr	r2, [pc, #60]	; (8009390 <xPortStartScheduler+0x140>)
 8009352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009358:	f7ff ff66 	bl	8009228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800935c:	f7fe ff7e 	bl	800825c <vTaskSwitchContext>
	prvTaskExitError();
 8009360:	f7ff ff1c 	bl	800919c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	e000ed00 	.word	0xe000ed00
 8009374:	410fc271 	.word	0x410fc271
 8009378:	410fc270 	.word	0x410fc270
 800937c:	e000e400 	.word	0xe000e400
 8009380:	200013d4 	.word	0x200013d4
 8009384:	200013d8 	.word	0x200013d8
 8009388:	e000ed20 	.word	0xe000ed20
 800938c:	20000020 	.word	0x20000020
 8009390:	e000ef34 	.word	0xe000ef34

08009394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	607b      	str	r3, [r7, #4]
}
 80093ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093ae:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <vPortEnterCritical+0x58>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3301      	adds	r3, #1
 80093b4:	4a0d      	ldr	r2, [pc, #52]	; (80093ec <vPortEnterCritical+0x58>)
 80093b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093b8:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <vPortEnterCritical+0x58>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d10f      	bne.n	80093e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <vPortEnterCritical+0x5c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	603b      	str	r3, [r7, #0]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <vPortEnterCritical+0x4a>
	}
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	20000020 	.word	0x20000020
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093fa:	4b12      	ldr	r3, [pc, #72]	; (8009444 <vPortExitCritical+0x50>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <vPortExitCritical+0x24>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	607b      	str	r3, [r7, #4]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009418:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <vPortExitCritical+0x50>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3b01      	subs	r3, #1
 800941e:	4a09      	ldr	r2, [pc, #36]	; (8009444 <vPortExitCritical+0x50>)
 8009420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009422:	4b08      	ldr	r3, [pc, #32]	; (8009444 <vPortExitCritical+0x50>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <vPortExitCritical+0x42>
 800942a:	2300      	movs	r3, #0
 800942c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f383 8811 	msr	BASEPRI, r3
}
 8009434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20000020 	.word	0x20000020
	...

08009450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009450:	f3ef 8009 	mrs	r0, PSP
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	4b15      	ldr	r3, [pc, #84]	; (80094b0 <pxCurrentTCBConst>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	f01e 0f10 	tst.w	lr, #16
 8009460:	bf08      	it	eq
 8009462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946a:	6010      	str	r0, [r2, #0]
 800946c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009474:	f380 8811 	msr	BASEPRI, r0
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f7fe feec 	bl	800825c <vTaskSwitchContext>
 8009484:	f04f 0000 	mov.w	r0, #0
 8009488:	f380 8811 	msr	BASEPRI, r0
 800948c:	bc09      	pop	{r0, r3}
 800948e:	6819      	ldr	r1, [r3, #0]
 8009490:	6808      	ldr	r0, [r1, #0]
 8009492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009496:	f01e 0f10 	tst.w	lr, #16
 800949a:	bf08      	it	eq
 800949c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094a0:	f380 8809 	msr	PSP, r0
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w

080094b0 <pxCurrentTCBConst>:
 80094b0:	20000da8 	.word	0x20000da8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop

080094b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
}
 80094d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094d2:	f7fe fe05 	bl	80080e0 <xTaskIncrementTick>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d003      	beq.n	80094e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094dc:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <SysTick_Handler+0x40>)
 80094de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	2300      	movs	r3, #0
 80094e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f383 8811 	msr	BASEPRI, r3
}
 80094ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	e000ed04 	.word	0xe000ed04

080094fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <vPortSetupTimerInterrupt+0x34>)
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009506:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <vPortSetupTimerInterrupt+0x38>)
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <vPortSetupTimerInterrupt+0x3c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0a      	ldr	r2, [pc, #40]	; (800953c <vPortSetupTimerInterrupt+0x40>)
 8009512:	fba2 2303 	umull	r2, r3, r2, r3
 8009516:	099b      	lsrs	r3, r3, #6
 8009518:	4a09      	ldr	r2, [pc, #36]	; (8009540 <vPortSetupTimerInterrupt+0x44>)
 800951a:	3b01      	subs	r3, #1
 800951c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800951e:	4b04      	ldr	r3, [pc, #16]	; (8009530 <vPortSetupTimerInterrupt+0x34>)
 8009520:	2207      	movs	r2, #7
 8009522:	601a      	str	r2, [r3, #0]
}
 8009524:	bf00      	nop
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	e000e010 	.word	0xe000e010
 8009534:	e000e018 	.word	0xe000e018
 8009538:	20000014 	.word	0x20000014
 800953c:	10624dd3 	.word	0x10624dd3
 8009540:	e000e014 	.word	0xe000e014

08009544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009554 <vPortEnableVFP+0x10>
 8009548:	6801      	ldr	r1, [r0, #0]
 800954a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800954e:	6001      	str	r1, [r0, #0]
 8009550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009552:	bf00      	nop
 8009554:	e000ed88 	.word	0xe000ed88

08009558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800955e:	f3ef 8305 	mrs	r3, IPSR
 8009562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d914      	bls.n	8009594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800956a:	4a17      	ldr	r2, [pc, #92]	; (80095c8 <vPortValidateInterruptPriority+0x70>)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009574:	4b15      	ldr	r3, [pc, #84]	; (80095cc <vPortValidateInterruptPriority+0x74>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	7afa      	ldrb	r2, [r7, #11]
 800957a:	429a      	cmp	r2, r3
 800957c:	d20a      	bcs.n	8009594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	607b      	str	r3, [r7, #4]
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <vPortValidateInterruptPriority+0x78>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800959c:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <vPortValidateInterruptPriority+0x7c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d90a      	bls.n	80095ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	603b      	str	r3, [r7, #0]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <vPortValidateInterruptPriority+0x60>
	}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	e000e3f0 	.word	0xe000e3f0
 80095cc:	200013d4 	.word	0x200013d4
 80095d0:	e000ed0c 	.word	0xe000ed0c
 80095d4:	200013d8 	.word	0x200013d8

080095d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08a      	sub	sp, #40	; 0x28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095e0:	2300      	movs	r3, #0
 80095e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095e4:	f7fe fcc0 	bl	8007f68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095e8:	4b58      	ldr	r3, [pc, #352]	; (800974c <pvPortMalloc+0x174>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095f0:	f000 f910 	bl	8009814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095f4:	4b56      	ldr	r3, [pc, #344]	; (8009750 <pvPortMalloc+0x178>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4013      	ands	r3, r2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f040 808e 	bne.w	800971e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01d      	beq.n	8009644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009608:	2208      	movs	r2, #8
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4413      	add	r3, r2
 800960e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	2b00      	cmp	r3, #0
 8009618:	d014      	beq.n	8009644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f023 0307 	bic.w	r3, r3, #7
 8009620:	3308      	adds	r3, #8
 8009622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00a      	beq.n	8009644 <pvPortMalloc+0x6c>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	617b      	str	r3, [r7, #20]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d069      	beq.n	800971e <pvPortMalloc+0x146>
 800964a:	4b42      	ldr	r3, [pc, #264]	; (8009754 <pvPortMalloc+0x17c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	429a      	cmp	r2, r3
 8009652:	d864      	bhi.n	800971e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009654:	4b40      	ldr	r3, [pc, #256]	; (8009758 <pvPortMalloc+0x180>)
 8009656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009658:	4b3f      	ldr	r3, [pc, #252]	; (8009758 <pvPortMalloc+0x180>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800965e:	e004      	b.n	800966a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <pvPortMalloc+0xa4>
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1f1      	bne.n	8009660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800967c:	4b33      	ldr	r3, [pc, #204]	; (800974c <pvPortMalloc+0x174>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	429a      	cmp	r2, r3
 8009684:	d04b      	beq.n	800971e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2208      	movs	r2, #8
 800968c:	4413      	add	r3, r2
 800968e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	2308      	movs	r3, #8
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d91f      	bls.n	80096e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <pvPortMalloc+0xf8>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	613b      	str	r3, [r7, #16]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	1ad2      	subs	r2, r2, r3
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096e2:	69b8      	ldr	r0, [r7, #24]
 80096e4:	f000 f8f8 	bl	80098d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096e8:	4b1a      	ldr	r3, [pc, #104]	; (8009754 <pvPortMalloc+0x17c>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	4a18      	ldr	r2, [pc, #96]	; (8009754 <pvPortMalloc+0x17c>)
 80096f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096f6:	4b17      	ldr	r3, [pc, #92]	; (8009754 <pvPortMalloc+0x17c>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4b18      	ldr	r3, [pc, #96]	; (800975c <pvPortMalloc+0x184>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d203      	bcs.n	800970a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009702:	4b14      	ldr	r3, [pc, #80]	; (8009754 <pvPortMalloc+0x17c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a15      	ldr	r2, [pc, #84]	; (800975c <pvPortMalloc+0x184>)
 8009708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	4b10      	ldr	r3, [pc, #64]	; (8009750 <pvPortMalloc+0x178>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	431a      	orrs	r2, r3
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800971e:	f7fe fc31 	bl	8007f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <pvPortMalloc+0x16a>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	60fb      	str	r3, [r7, #12]
}
 800973e:	bf00      	nop
 8009740:	e7fe      	b.n	8009740 <pvPortMalloc+0x168>
	return pvReturn;
 8009742:	69fb      	ldr	r3, [r7, #28]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3728      	adds	r7, #40	; 0x28
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20001fe4 	.word	0x20001fe4
 8009750:	20001ff0 	.word	0x20001ff0
 8009754:	20001fe8 	.word	0x20001fe8
 8009758:	20001fdc 	.word	0x20001fdc
 800975c:	20001fec 	.word	0x20001fec

08009760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d048      	beq.n	8009804 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009772:	2308      	movs	r3, #8
 8009774:	425b      	negs	r3, r3
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	4413      	add	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	4b21      	ldr	r3, [pc, #132]	; (800980c <vPortFree+0xac>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4013      	ands	r3, r2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <vPortFree+0x44>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60fb      	str	r3, [r7, #12]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <vPortFree+0x62>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60bb      	str	r3, [r7, #8]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	4b11      	ldr	r3, [pc, #68]	; (800980c <vPortFree+0xac>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d019      	beq.n	8009804 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d115      	bne.n	8009804 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	4b0b      	ldr	r3, [pc, #44]	; (800980c <vPortFree+0xac>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	43db      	mvns	r3, r3
 80097e2:	401a      	ands	r2, r3
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097e8:	f7fe fbbe 	bl	8007f68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	4b07      	ldr	r3, [pc, #28]	; (8009810 <vPortFree+0xb0>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4413      	add	r3, r2
 80097f6:	4a06      	ldr	r2, [pc, #24]	; (8009810 <vPortFree+0xb0>)
 80097f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097fa:	6938      	ldr	r0, [r7, #16]
 80097fc:	f000 f86c 	bl	80098d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009800:	f7fe fbc0 	bl	8007f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009804:	bf00      	nop
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20001ff0 	.word	0x20001ff0
 8009810:	20001fe8 	.word	0x20001fe8

08009814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800981a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800981e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009820:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <prvHeapInit+0xac>)
 8009822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00c      	beq.n	8009848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3307      	adds	r3, #7
 8009832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0307 	bic.w	r3, r3, #7
 800983a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	4a1f      	ldr	r2, [pc, #124]	; (80098c0 <prvHeapInit+0xac>)
 8009844:	4413      	add	r3, r2
 8009846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800984c:	4a1d      	ldr	r2, [pc, #116]	; (80098c4 <prvHeapInit+0xb0>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009852:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <prvHeapInit+0xb0>)
 8009854:	2200      	movs	r2, #0
 8009856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	4413      	add	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009860:	2208      	movs	r2, #8
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	1a9b      	subs	r3, r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 0307 	bic.w	r3, r3, #7
 800986e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4a15      	ldr	r2, [pc, #84]	; (80098c8 <prvHeapInit+0xb4>)
 8009874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009876:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <prvHeapInit+0xb4>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800987e:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <prvHeapInit+0xb4>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	1ad2      	subs	r2, r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009894:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <prvHeapInit+0xb4>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	4a0a      	ldr	r2, [pc, #40]	; (80098cc <prvHeapInit+0xb8>)
 80098a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <prvHeapInit+0xbc>)
 80098aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098ac:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <prvHeapInit+0xc0>)
 80098ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098b2:	601a      	str	r2, [r3, #0]
}
 80098b4:	bf00      	nop
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	200013dc 	.word	0x200013dc
 80098c4:	20001fdc 	.word	0x20001fdc
 80098c8:	20001fe4 	.word	0x20001fe4
 80098cc:	20001fec 	.word	0x20001fec
 80098d0:	20001fe8 	.word	0x20001fe8
 80098d4:	20001ff0 	.word	0x20001ff0

080098d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098e0:	4b28      	ldr	r3, [pc, #160]	; (8009984 <prvInsertBlockIntoFreeList+0xac>)
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	e002      	b.n	80098ec <prvInsertBlockIntoFreeList+0x14>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	60fb      	str	r3, [r7, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d8f7      	bhi.n	80098e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	4413      	add	r3, r2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	429a      	cmp	r2, r3
 8009906:	d108      	bne.n	800991a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	441a      	add	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	441a      	add	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	429a      	cmp	r2, r3
 800992c:	d118      	bne.n	8009960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b15      	ldr	r3, [pc, #84]	; (8009988 <prvInsertBlockIntoFreeList+0xb0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d00d      	beq.n	8009956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	441a      	add	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	e008      	b.n	8009968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009956:	4b0c      	ldr	r3, [pc, #48]	; (8009988 <prvInsertBlockIntoFreeList+0xb0>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	e003      	b.n	8009968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	429a      	cmp	r2, r3
 800996e:	d002      	beq.n	8009976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009976:	bf00      	nop
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20001fdc 	.word	0x20001fdc
 8009988:	20001fe4 	.word	0x20001fe4

0800998c <atoi>:
 800998c:	220a      	movs	r2, #10
 800998e:	2100      	movs	r1, #0
 8009990:	f000 b970 	b.w	8009c74 <strtol>

08009994 <__errno>:
 8009994:	4b01      	ldr	r3, [pc, #4]	; (800999c <__errno+0x8>)
 8009996:	6818      	ldr	r0, [r3, #0]
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	20000024 	.word	0x20000024

080099a0 <__libc_init_array>:
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	4d0d      	ldr	r5, [pc, #52]	; (80099d8 <__libc_init_array+0x38>)
 80099a4:	4c0d      	ldr	r4, [pc, #52]	; (80099dc <__libc_init_array+0x3c>)
 80099a6:	1b64      	subs	r4, r4, r5
 80099a8:	10a4      	asrs	r4, r4, #2
 80099aa:	2600      	movs	r6, #0
 80099ac:	42a6      	cmp	r6, r4
 80099ae:	d109      	bne.n	80099c4 <__libc_init_array+0x24>
 80099b0:	4d0b      	ldr	r5, [pc, #44]	; (80099e0 <__libc_init_array+0x40>)
 80099b2:	4c0c      	ldr	r4, [pc, #48]	; (80099e4 <__libc_init_array+0x44>)
 80099b4:	f001 fb10 	bl	800afd8 <_init>
 80099b8:	1b64      	subs	r4, r4, r5
 80099ba:	10a4      	asrs	r4, r4, #2
 80099bc:	2600      	movs	r6, #0
 80099be:	42a6      	cmp	r6, r4
 80099c0:	d105      	bne.n	80099ce <__libc_init_array+0x2e>
 80099c2:	bd70      	pop	{r4, r5, r6, pc}
 80099c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c8:	4798      	blx	r3
 80099ca:	3601      	adds	r6, #1
 80099cc:	e7ee      	b.n	80099ac <__libc_init_array+0xc>
 80099ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80099d2:	4798      	blx	r3
 80099d4:	3601      	adds	r6, #1
 80099d6:	e7f2      	b.n	80099be <__libc_init_array+0x1e>
 80099d8:	0800b384 	.word	0x0800b384
 80099dc:	0800b384 	.word	0x0800b384
 80099e0:	0800b384 	.word	0x0800b384
 80099e4:	0800b388 	.word	0x0800b388

080099e8 <memcpy>:
 80099e8:	440a      	add	r2, r1
 80099ea:	4291      	cmp	r1, r2
 80099ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80099f0:	d100      	bne.n	80099f4 <memcpy+0xc>
 80099f2:	4770      	bx	lr
 80099f4:	b510      	push	{r4, lr}
 80099f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099fe:	4291      	cmp	r1, r2
 8009a00:	d1f9      	bne.n	80099f6 <memcpy+0xe>
 8009a02:	bd10      	pop	{r4, pc}

08009a04 <memset>:
 8009a04:	4402      	add	r2, r0
 8009a06:	4603      	mov	r3, r0
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <memset+0xa>
 8009a0c:	4770      	bx	lr
 8009a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a12:	e7f9      	b.n	8009a08 <memset+0x4>

08009a14 <siprintf>:
 8009a14:	b40e      	push	{r1, r2, r3}
 8009a16:	b500      	push	{lr}
 8009a18:	b09c      	sub	sp, #112	; 0x70
 8009a1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a1c:	9002      	str	r0, [sp, #8]
 8009a1e:	9006      	str	r0, [sp, #24]
 8009a20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a24:	4809      	ldr	r0, [pc, #36]	; (8009a4c <siprintf+0x38>)
 8009a26:	9107      	str	r1, [sp, #28]
 8009a28:	9104      	str	r1, [sp, #16]
 8009a2a:	4909      	ldr	r1, [pc, #36]	; (8009a50 <siprintf+0x3c>)
 8009a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a30:	9105      	str	r1, [sp, #20]
 8009a32:	6800      	ldr	r0, [r0, #0]
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	a902      	add	r1, sp, #8
 8009a38:	f000 fa9a 	bl	8009f70 <_svfiprintf_r>
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	b01c      	add	sp, #112	; 0x70
 8009a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a48:	b003      	add	sp, #12
 8009a4a:	4770      	bx	lr
 8009a4c:	20000024 	.word	0x20000024
 8009a50:	ffff0208 	.word	0xffff0208

08009a54 <strcpy>:
 8009a54:	4603      	mov	r3, r0
 8009a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a5a:	f803 2b01 	strb.w	r2, [r3], #1
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	d1f9      	bne.n	8009a56 <strcpy+0x2>
 8009a62:	4770      	bx	lr

08009a64 <strncmp>:
 8009a64:	b510      	push	{r4, lr}
 8009a66:	b17a      	cbz	r2, 8009a88 <strncmp+0x24>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	3901      	subs	r1, #1
 8009a6c:	1884      	adds	r4, r0, r2
 8009a6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a72:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009a76:	4290      	cmp	r0, r2
 8009a78:	d101      	bne.n	8009a7e <strncmp+0x1a>
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	d101      	bne.n	8009a82 <strncmp+0x1e>
 8009a7e:	1a80      	subs	r0, r0, r2
 8009a80:	bd10      	pop	{r4, pc}
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d1f3      	bne.n	8009a6e <strncmp+0xa>
 8009a86:	e7fa      	b.n	8009a7e <strncmp+0x1a>
 8009a88:	4610      	mov	r0, r2
 8009a8a:	e7f9      	b.n	8009a80 <strncmp+0x1c>

08009a8c <strstr>:
 8009a8c:	780a      	ldrb	r2, [r1, #0]
 8009a8e:	b570      	push	{r4, r5, r6, lr}
 8009a90:	b96a      	cbnz	r2, 8009aae <strstr+0x22>
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d109      	bne.n	8009aac <strstr+0x20>
 8009a98:	460c      	mov	r4, r1
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0f6      	beq.n	8009a92 <strstr+0x6>
 8009aa4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009aa8:	429e      	cmp	r6, r3
 8009aaa:	d0f7      	beq.n	8009a9c <strstr+0x10>
 8009aac:	3001      	adds	r0, #1
 8009aae:	7803      	ldrb	r3, [r0, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1ef      	bne.n	8009a94 <strstr+0x8>
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	e7ec      	b.n	8009a92 <strstr+0x6>

08009ab8 <strtok>:
 8009ab8:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <strtok+0x5c>)
 8009aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009abc:	681e      	ldr	r6, [r3, #0]
 8009abe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	b9fc      	cbnz	r4, 8009b04 <strtok+0x4c>
 8009ac4:	2050      	movs	r0, #80	; 0x50
 8009ac6:	9101      	str	r1, [sp, #4]
 8009ac8:	f000 f90e 	bl	8009ce8 <malloc>
 8009acc:	9901      	ldr	r1, [sp, #4]
 8009ace:	65b0      	str	r0, [r6, #88]	; 0x58
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	b920      	cbnz	r0, 8009ade <strtok+0x26>
 8009ad4:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <strtok+0x60>)
 8009ad6:	4811      	ldr	r0, [pc, #68]	; (8009b1c <strtok+0x64>)
 8009ad8:	2157      	movs	r1, #87	; 0x57
 8009ada:	f000 f8d5 	bl	8009c88 <__assert_func>
 8009ade:	e9c0 4400 	strd	r4, r4, [r0]
 8009ae2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009ae6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009aea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009aee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009af2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009af6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009afa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009afe:	6184      	str	r4, [r0, #24]
 8009b00:	7704      	strb	r4, [r0, #28]
 8009b02:	6244      	str	r4, [r0, #36]	; 0x24
 8009b04:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009b06:	2301      	movs	r3, #1
 8009b08:	4628      	mov	r0, r5
 8009b0a:	b002      	add	sp, #8
 8009b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b10:	f000 b806 	b.w	8009b20 <__strtok_r>
 8009b14:	20000024 	.word	0x20000024
 8009b18:	0800b140 	.word	0x0800b140
 8009b1c:	0800b157 	.word	0x0800b157

08009b20 <__strtok_r>:
 8009b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b22:	b908      	cbnz	r0, 8009b28 <__strtok_r+0x8>
 8009b24:	6810      	ldr	r0, [r2, #0]
 8009b26:	b188      	cbz	r0, 8009b4c <__strtok_r+0x2c>
 8009b28:	4604      	mov	r4, r0
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009b30:	460f      	mov	r7, r1
 8009b32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009b36:	b91e      	cbnz	r6, 8009b40 <__strtok_r+0x20>
 8009b38:	b965      	cbnz	r5, 8009b54 <__strtok_r+0x34>
 8009b3a:	6015      	str	r5, [r2, #0]
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	e005      	b.n	8009b4c <__strtok_r+0x2c>
 8009b40:	42b5      	cmp	r5, r6
 8009b42:	d1f6      	bne.n	8009b32 <__strtok_r+0x12>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1f0      	bne.n	8009b2a <__strtok_r+0xa>
 8009b48:	6014      	str	r4, [r2, #0]
 8009b4a:	7003      	strb	r3, [r0, #0]
 8009b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4e:	461c      	mov	r4, r3
 8009b50:	e00c      	b.n	8009b6c <__strtok_r+0x4c>
 8009b52:	b915      	cbnz	r5, 8009b5a <__strtok_r+0x3a>
 8009b54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b58:	460e      	mov	r6, r1
 8009b5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009b5e:	42ab      	cmp	r3, r5
 8009b60:	d1f7      	bne.n	8009b52 <__strtok_r+0x32>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0f3      	beq.n	8009b4e <__strtok_r+0x2e>
 8009b66:	2300      	movs	r3, #0
 8009b68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009b6c:	6014      	str	r4, [r2, #0]
 8009b6e:	e7ed      	b.n	8009b4c <__strtok_r+0x2c>

08009b70 <_strtol_l.constprop.0>:
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b76:	d001      	beq.n	8009b7c <_strtol_l.constprop.0+0xc>
 8009b78:	2b24      	cmp	r3, #36	; 0x24
 8009b7a:	d906      	bls.n	8009b8a <_strtol_l.constprop.0+0x1a>
 8009b7c:	f7ff ff0a 	bl	8009994 <__errno>
 8009b80:	2316      	movs	r3, #22
 8009b82:	6003      	str	r3, [r0, #0]
 8009b84:	2000      	movs	r0, #0
 8009b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c70 <_strtol_l.constprop.0+0x100>
 8009b8e:	460d      	mov	r5, r1
 8009b90:	462e      	mov	r6, r5
 8009b92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b96:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b9a:	f017 0708 	ands.w	r7, r7, #8
 8009b9e:	d1f7      	bne.n	8009b90 <_strtol_l.constprop.0+0x20>
 8009ba0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ba2:	d132      	bne.n	8009c0a <_strtol_l.constprop.0+0x9a>
 8009ba4:	782c      	ldrb	r4, [r5, #0]
 8009ba6:	2701      	movs	r7, #1
 8009ba8:	1cb5      	adds	r5, r6, #2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d05b      	beq.n	8009c66 <_strtol_l.constprop.0+0xf6>
 8009bae:	2b10      	cmp	r3, #16
 8009bb0:	d109      	bne.n	8009bc6 <_strtol_l.constprop.0+0x56>
 8009bb2:	2c30      	cmp	r4, #48	; 0x30
 8009bb4:	d107      	bne.n	8009bc6 <_strtol_l.constprop.0+0x56>
 8009bb6:	782c      	ldrb	r4, [r5, #0]
 8009bb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009bbc:	2c58      	cmp	r4, #88	; 0x58
 8009bbe:	d14d      	bne.n	8009c5c <_strtol_l.constprop.0+0xec>
 8009bc0:	786c      	ldrb	r4, [r5, #1]
 8009bc2:	2310      	movs	r3, #16
 8009bc4:	3502      	adds	r5, #2
 8009bc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009bca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009bce:	f04f 0c00 	mov.w	ip, #0
 8009bd2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009bd6:	4666      	mov	r6, ip
 8009bd8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009bdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009be0:	f1be 0f09 	cmp.w	lr, #9
 8009be4:	d816      	bhi.n	8009c14 <_strtol_l.constprop.0+0xa4>
 8009be6:	4674      	mov	r4, lr
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	dd24      	ble.n	8009c36 <_strtol_l.constprop.0+0xc6>
 8009bec:	f1bc 0f00 	cmp.w	ip, #0
 8009bf0:	db1e      	blt.n	8009c30 <_strtol_l.constprop.0+0xc0>
 8009bf2:	45b1      	cmp	r9, r6
 8009bf4:	d31c      	bcc.n	8009c30 <_strtol_l.constprop.0+0xc0>
 8009bf6:	d101      	bne.n	8009bfc <_strtol_l.constprop.0+0x8c>
 8009bf8:	45a2      	cmp	sl, r4
 8009bfa:	db19      	blt.n	8009c30 <_strtol_l.constprop.0+0xc0>
 8009bfc:	fb06 4603 	mla	r6, r6, r3, r4
 8009c00:	f04f 0c01 	mov.w	ip, #1
 8009c04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c08:	e7e8      	b.n	8009bdc <_strtol_l.constprop.0+0x6c>
 8009c0a:	2c2b      	cmp	r4, #43	; 0x2b
 8009c0c:	bf04      	itt	eq
 8009c0e:	782c      	ldrbeq	r4, [r5, #0]
 8009c10:	1cb5      	addeq	r5, r6, #2
 8009c12:	e7ca      	b.n	8009baa <_strtol_l.constprop.0+0x3a>
 8009c14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009c18:	f1be 0f19 	cmp.w	lr, #25
 8009c1c:	d801      	bhi.n	8009c22 <_strtol_l.constprop.0+0xb2>
 8009c1e:	3c37      	subs	r4, #55	; 0x37
 8009c20:	e7e2      	b.n	8009be8 <_strtol_l.constprop.0+0x78>
 8009c22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009c26:	f1be 0f19 	cmp.w	lr, #25
 8009c2a:	d804      	bhi.n	8009c36 <_strtol_l.constprop.0+0xc6>
 8009c2c:	3c57      	subs	r4, #87	; 0x57
 8009c2e:	e7db      	b.n	8009be8 <_strtol_l.constprop.0+0x78>
 8009c30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009c34:	e7e6      	b.n	8009c04 <_strtol_l.constprop.0+0x94>
 8009c36:	f1bc 0f00 	cmp.w	ip, #0
 8009c3a:	da05      	bge.n	8009c48 <_strtol_l.constprop.0+0xd8>
 8009c3c:	2322      	movs	r3, #34	; 0x22
 8009c3e:	6003      	str	r3, [r0, #0]
 8009c40:	4646      	mov	r6, r8
 8009c42:	b942      	cbnz	r2, 8009c56 <_strtol_l.constprop.0+0xe6>
 8009c44:	4630      	mov	r0, r6
 8009c46:	e79e      	b.n	8009b86 <_strtol_l.constprop.0+0x16>
 8009c48:	b107      	cbz	r7, 8009c4c <_strtol_l.constprop.0+0xdc>
 8009c4a:	4276      	negs	r6, r6
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	d0f9      	beq.n	8009c44 <_strtol_l.constprop.0+0xd4>
 8009c50:	f1bc 0f00 	cmp.w	ip, #0
 8009c54:	d000      	beq.n	8009c58 <_strtol_l.constprop.0+0xe8>
 8009c56:	1e69      	subs	r1, r5, #1
 8009c58:	6011      	str	r1, [r2, #0]
 8009c5a:	e7f3      	b.n	8009c44 <_strtol_l.constprop.0+0xd4>
 8009c5c:	2430      	movs	r4, #48	; 0x30
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1b1      	bne.n	8009bc6 <_strtol_l.constprop.0+0x56>
 8009c62:	2308      	movs	r3, #8
 8009c64:	e7af      	b.n	8009bc6 <_strtol_l.constprop.0+0x56>
 8009c66:	2c30      	cmp	r4, #48	; 0x30
 8009c68:	d0a5      	beq.n	8009bb6 <_strtol_l.constprop.0+0x46>
 8009c6a:	230a      	movs	r3, #10
 8009c6c:	e7ab      	b.n	8009bc6 <_strtol_l.constprop.0+0x56>
 8009c6e:	bf00      	nop
 8009c70:	0800b1f1 	.word	0x0800b1f1

08009c74 <strtol>:
 8009c74:	4613      	mov	r3, r2
 8009c76:	460a      	mov	r2, r1
 8009c78:	4601      	mov	r1, r0
 8009c7a:	4802      	ldr	r0, [pc, #8]	; (8009c84 <strtol+0x10>)
 8009c7c:	6800      	ldr	r0, [r0, #0]
 8009c7e:	f7ff bf77 	b.w	8009b70 <_strtol_l.constprop.0>
 8009c82:	bf00      	nop
 8009c84:	20000024 	.word	0x20000024

08009c88 <__assert_func>:
 8009c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c8a:	4614      	mov	r4, r2
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <__assert_func+0x2c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4605      	mov	r5, r0
 8009c94:	68d8      	ldr	r0, [r3, #12]
 8009c96:	b14c      	cbz	r4, 8009cac <__assert_func+0x24>
 8009c98:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <__assert_func+0x30>)
 8009c9a:	9100      	str	r1, [sp, #0]
 8009c9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ca0:	4906      	ldr	r1, [pc, #24]	; (8009cbc <__assert_func+0x34>)
 8009ca2:	462b      	mov	r3, r5
 8009ca4:	f000 f80e 	bl	8009cc4 <fiprintf>
 8009ca8:	f000 fe20 	bl	800a8ec <abort>
 8009cac:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <__assert_func+0x38>)
 8009cae:	461c      	mov	r4, r3
 8009cb0:	e7f3      	b.n	8009c9a <__assert_func+0x12>
 8009cb2:	bf00      	nop
 8009cb4:	20000024 	.word	0x20000024
 8009cb8:	0800b1b4 	.word	0x0800b1b4
 8009cbc:	0800b1c1 	.word	0x0800b1c1
 8009cc0:	0800b1ef 	.word	0x0800b1ef

08009cc4 <fiprintf>:
 8009cc4:	b40e      	push	{r1, r2, r3}
 8009cc6:	b503      	push	{r0, r1, lr}
 8009cc8:	4601      	mov	r1, r0
 8009cca:	ab03      	add	r3, sp, #12
 8009ccc:	4805      	ldr	r0, [pc, #20]	; (8009ce4 <fiprintf+0x20>)
 8009cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd2:	6800      	ldr	r0, [r0, #0]
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	f000 fa75 	bl	800a1c4 <_vfiprintf_r>
 8009cda:	b002      	add	sp, #8
 8009cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce0:	b003      	add	sp, #12
 8009ce2:	4770      	bx	lr
 8009ce4:	20000024 	.word	0x20000024

08009ce8 <malloc>:
 8009ce8:	4b02      	ldr	r3, [pc, #8]	; (8009cf4 <malloc+0xc>)
 8009cea:	4601      	mov	r1, r0
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	f000 b86f 	b.w	8009dd0 <_malloc_r>
 8009cf2:	bf00      	nop
 8009cf4:	20000024 	.word	0x20000024

08009cf8 <_free_r>:
 8009cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cfa:	2900      	cmp	r1, #0
 8009cfc:	d044      	beq.n	8009d88 <_free_r+0x90>
 8009cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d02:	9001      	str	r0, [sp, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f1a1 0404 	sub.w	r4, r1, #4
 8009d0a:	bfb8      	it	lt
 8009d0c:	18e4      	addlt	r4, r4, r3
 8009d0e:	f001 f82f 	bl	800ad70 <__malloc_lock>
 8009d12:	4a1e      	ldr	r2, [pc, #120]	; (8009d8c <_free_r+0x94>)
 8009d14:	9801      	ldr	r0, [sp, #4]
 8009d16:	6813      	ldr	r3, [r2, #0]
 8009d18:	b933      	cbnz	r3, 8009d28 <_free_r+0x30>
 8009d1a:	6063      	str	r3, [r4, #4]
 8009d1c:	6014      	str	r4, [r2, #0]
 8009d1e:	b003      	add	sp, #12
 8009d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d24:	f001 b82a 	b.w	800ad7c <__malloc_unlock>
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	d908      	bls.n	8009d3e <_free_r+0x46>
 8009d2c:	6825      	ldr	r5, [r4, #0]
 8009d2e:	1961      	adds	r1, r4, r5
 8009d30:	428b      	cmp	r3, r1
 8009d32:	bf01      	itttt	eq
 8009d34:	6819      	ldreq	r1, [r3, #0]
 8009d36:	685b      	ldreq	r3, [r3, #4]
 8009d38:	1949      	addeq	r1, r1, r5
 8009d3a:	6021      	streq	r1, [r4, #0]
 8009d3c:	e7ed      	b.n	8009d1a <_free_r+0x22>
 8009d3e:	461a      	mov	r2, r3
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	b10b      	cbz	r3, 8009d48 <_free_r+0x50>
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	d9fa      	bls.n	8009d3e <_free_r+0x46>
 8009d48:	6811      	ldr	r1, [r2, #0]
 8009d4a:	1855      	adds	r5, r2, r1
 8009d4c:	42a5      	cmp	r5, r4
 8009d4e:	d10b      	bne.n	8009d68 <_free_r+0x70>
 8009d50:	6824      	ldr	r4, [r4, #0]
 8009d52:	4421      	add	r1, r4
 8009d54:	1854      	adds	r4, r2, r1
 8009d56:	42a3      	cmp	r3, r4
 8009d58:	6011      	str	r1, [r2, #0]
 8009d5a:	d1e0      	bne.n	8009d1e <_free_r+0x26>
 8009d5c:	681c      	ldr	r4, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	6053      	str	r3, [r2, #4]
 8009d62:	4421      	add	r1, r4
 8009d64:	6011      	str	r1, [r2, #0]
 8009d66:	e7da      	b.n	8009d1e <_free_r+0x26>
 8009d68:	d902      	bls.n	8009d70 <_free_r+0x78>
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	6003      	str	r3, [r0, #0]
 8009d6e:	e7d6      	b.n	8009d1e <_free_r+0x26>
 8009d70:	6825      	ldr	r5, [r4, #0]
 8009d72:	1961      	adds	r1, r4, r5
 8009d74:	428b      	cmp	r3, r1
 8009d76:	bf04      	itt	eq
 8009d78:	6819      	ldreq	r1, [r3, #0]
 8009d7a:	685b      	ldreq	r3, [r3, #4]
 8009d7c:	6063      	str	r3, [r4, #4]
 8009d7e:	bf04      	itt	eq
 8009d80:	1949      	addeq	r1, r1, r5
 8009d82:	6021      	streq	r1, [r4, #0]
 8009d84:	6054      	str	r4, [r2, #4]
 8009d86:	e7ca      	b.n	8009d1e <_free_r+0x26>
 8009d88:	b003      	add	sp, #12
 8009d8a:	bd30      	pop	{r4, r5, pc}
 8009d8c:	20001ff4 	.word	0x20001ff4

08009d90 <sbrk_aligned>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	4e0e      	ldr	r6, [pc, #56]	; (8009dcc <sbrk_aligned+0x3c>)
 8009d94:	460c      	mov	r4, r1
 8009d96:	6831      	ldr	r1, [r6, #0]
 8009d98:	4605      	mov	r5, r0
 8009d9a:	b911      	cbnz	r1, 8009da2 <sbrk_aligned+0x12>
 8009d9c:	f000 fcd6 	bl	800a74c <_sbrk_r>
 8009da0:	6030      	str	r0, [r6, #0]
 8009da2:	4621      	mov	r1, r4
 8009da4:	4628      	mov	r0, r5
 8009da6:	f000 fcd1 	bl	800a74c <_sbrk_r>
 8009daa:	1c43      	adds	r3, r0, #1
 8009dac:	d00a      	beq.n	8009dc4 <sbrk_aligned+0x34>
 8009dae:	1cc4      	adds	r4, r0, #3
 8009db0:	f024 0403 	bic.w	r4, r4, #3
 8009db4:	42a0      	cmp	r0, r4
 8009db6:	d007      	beq.n	8009dc8 <sbrk_aligned+0x38>
 8009db8:	1a21      	subs	r1, r4, r0
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f000 fcc6 	bl	800a74c <_sbrk_r>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d101      	bne.n	8009dc8 <sbrk_aligned+0x38>
 8009dc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009dc8:	4620      	mov	r0, r4
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
 8009dcc:	20001ff8 	.word	0x20001ff8

08009dd0 <_malloc_r>:
 8009dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd4:	1ccd      	adds	r5, r1, #3
 8009dd6:	f025 0503 	bic.w	r5, r5, #3
 8009dda:	3508      	adds	r5, #8
 8009ddc:	2d0c      	cmp	r5, #12
 8009dde:	bf38      	it	cc
 8009de0:	250c      	movcc	r5, #12
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	4607      	mov	r7, r0
 8009de6:	db01      	blt.n	8009dec <_malloc_r+0x1c>
 8009de8:	42a9      	cmp	r1, r5
 8009dea:	d905      	bls.n	8009df8 <_malloc_r+0x28>
 8009dec:	230c      	movs	r3, #12
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	2600      	movs	r6, #0
 8009df2:	4630      	mov	r0, r6
 8009df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df8:	4e2e      	ldr	r6, [pc, #184]	; (8009eb4 <_malloc_r+0xe4>)
 8009dfa:	f000 ffb9 	bl	800ad70 <__malloc_lock>
 8009dfe:	6833      	ldr	r3, [r6, #0]
 8009e00:	461c      	mov	r4, r3
 8009e02:	bb34      	cbnz	r4, 8009e52 <_malloc_r+0x82>
 8009e04:	4629      	mov	r1, r5
 8009e06:	4638      	mov	r0, r7
 8009e08:	f7ff ffc2 	bl	8009d90 <sbrk_aligned>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	4604      	mov	r4, r0
 8009e10:	d14d      	bne.n	8009eae <_malloc_r+0xde>
 8009e12:	6834      	ldr	r4, [r6, #0]
 8009e14:	4626      	mov	r6, r4
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	d140      	bne.n	8009e9c <_malloc_r+0xcc>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	4631      	mov	r1, r6
 8009e1e:	4638      	mov	r0, r7
 8009e20:	eb04 0803 	add.w	r8, r4, r3
 8009e24:	f000 fc92 	bl	800a74c <_sbrk_r>
 8009e28:	4580      	cmp	r8, r0
 8009e2a:	d13a      	bne.n	8009ea2 <_malloc_r+0xd2>
 8009e2c:	6821      	ldr	r1, [r4, #0]
 8009e2e:	3503      	adds	r5, #3
 8009e30:	1a6d      	subs	r5, r5, r1
 8009e32:	f025 0503 	bic.w	r5, r5, #3
 8009e36:	3508      	adds	r5, #8
 8009e38:	2d0c      	cmp	r5, #12
 8009e3a:	bf38      	it	cc
 8009e3c:	250c      	movcc	r5, #12
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7ff ffa5 	bl	8009d90 <sbrk_aligned>
 8009e46:	3001      	adds	r0, #1
 8009e48:	d02b      	beq.n	8009ea2 <_malloc_r+0xd2>
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	442b      	add	r3, r5
 8009e4e:	6023      	str	r3, [r4, #0]
 8009e50:	e00e      	b.n	8009e70 <_malloc_r+0xa0>
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	1b52      	subs	r2, r2, r5
 8009e56:	d41e      	bmi.n	8009e96 <_malloc_r+0xc6>
 8009e58:	2a0b      	cmp	r2, #11
 8009e5a:	d916      	bls.n	8009e8a <_malloc_r+0xba>
 8009e5c:	1961      	adds	r1, r4, r5
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	6025      	str	r5, [r4, #0]
 8009e62:	bf18      	it	ne
 8009e64:	6059      	strne	r1, [r3, #4]
 8009e66:	6863      	ldr	r3, [r4, #4]
 8009e68:	bf08      	it	eq
 8009e6a:	6031      	streq	r1, [r6, #0]
 8009e6c:	5162      	str	r2, [r4, r5]
 8009e6e:	604b      	str	r3, [r1, #4]
 8009e70:	4638      	mov	r0, r7
 8009e72:	f104 060b 	add.w	r6, r4, #11
 8009e76:	f000 ff81 	bl	800ad7c <__malloc_unlock>
 8009e7a:	f026 0607 	bic.w	r6, r6, #7
 8009e7e:	1d23      	adds	r3, r4, #4
 8009e80:	1af2      	subs	r2, r6, r3
 8009e82:	d0b6      	beq.n	8009df2 <_malloc_r+0x22>
 8009e84:	1b9b      	subs	r3, r3, r6
 8009e86:	50a3      	str	r3, [r4, r2]
 8009e88:	e7b3      	b.n	8009df2 <_malloc_r+0x22>
 8009e8a:	6862      	ldr	r2, [r4, #4]
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	bf0c      	ite	eq
 8009e90:	6032      	streq	r2, [r6, #0]
 8009e92:	605a      	strne	r2, [r3, #4]
 8009e94:	e7ec      	b.n	8009e70 <_malloc_r+0xa0>
 8009e96:	4623      	mov	r3, r4
 8009e98:	6864      	ldr	r4, [r4, #4]
 8009e9a:	e7b2      	b.n	8009e02 <_malloc_r+0x32>
 8009e9c:	4634      	mov	r4, r6
 8009e9e:	6876      	ldr	r6, [r6, #4]
 8009ea0:	e7b9      	b.n	8009e16 <_malloc_r+0x46>
 8009ea2:	230c      	movs	r3, #12
 8009ea4:	603b      	str	r3, [r7, #0]
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	f000 ff68 	bl	800ad7c <__malloc_unlock>
 8009eac:	e7a1      	b.n	8009df2 <_malloc_r+0x22>
 8009eae:	6025      	str	r5, [r4, #0]
 8009eb0:	e7de      	b.n	8009e70 <_malloc_r+0xa0>
 8009eb2:	bf00      	nop
 8009eb4:	20001ff4 	.word	0x20001ff4

08009eb8 <__ssputs_r>:
 8009eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ebc:	688e      	ldr	r6, [r1, #8]
 8009ebe:	429e      	cmp	r6, r3
 8009ec0:	4682      	mov	sl, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	4690      	mov	r8, r2
 8009ec6:	461f      	mov	r7, r3
 8009ec8:	d838      	bhi.n	8009f3c <__ssputs_r+0x84>
 8009eca:	898a      	ldrh	r2, [r1, #12]
 8009ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ed0:	d032      	beq.n	8009f38 <__ssputs_r+0x80>
 8009ed2:	6825      	ldr	r5, [r4, #0]
 8009ed4:	6909      	ldr	r1, [r1, #16]
 8009ed6:	eba5 0901 	sub.w	r9, r5, r1
 8009eda:	6965      	ldr	r5, [r4, #20]
 8009edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	444b      	add	r3, r9
 8009ee8:	106d      	asrs	r5, r5, #1
 8009eea:	429d      	cmp	r5, r3
 8009eec:	bf38      	it	cc
 8009eee:	461d      	movcc	r5, r3
 8009ef0:	0553      	lsls	r3, r2, #21
 8009ef2:	d531      	bpl.n	8009f58 <__ssputs_r+0xa0>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	f7ff ff6b 	bl	8009dd0 <_malloc_r>
 8009efa:	4606      	mov	r6, r0
 8009efc:	b950      	cbnz	r0, 8009f14 <__ssputs_r+0x5c>
 8009efe:	230c      	movs	r3, #12
 8009f00:	f8ca 3000 	str.w	r3, [sl]
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f14:	6921      	ldr	r1, [r4, #16]
 8009f16:	464a      	mov	r2, r9
 8009f18:	f7ff fd66 	bl	80099e8 <memcpy>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	6126      	str	r6, [r4, #16]
 8009f2a:	6165      	str	r5, [r4, #20]
 8009f2c:	444e      	add	r6, r9
 8009f2e:	eba5 0509 	sub.w	r5, r5, r9
 8009f32:	6026      	str	r6, [r4, #0]
 8009f34:	60a5      	str	r5, [r4, #8]
 8009f36:	463e      	mov	r6, r7
 8009f38:	42be      	cmp	r6, r7
 8009f3a:	d900      	bls.n	8009f3e <__ssputs_r+0x86>
 8009f3c:	463e      	mov	r6, r7
 8009f3e:	6820      	ldr	r0, [r4, #0]
 8009f40:	4632      	mov	r2, r6
 8009f42:	4641      	mov	r1, r8
 8009f44:	f000 fefa 	bl	800ad3c <memmove>
 8009f48:	68a3      	ldr	r3, [r4, #8]
 8009f4a:	1b9b      	subs	r3, r3, r6
 8009f4c:	60a3      	str	r3, [r4, #8]
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	4433      	add	r3, r6
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	2000      	movs	r0, #0
 8009f56:	e7db      	b.n	8009f10 <__ssputs_r+0x58>
 8009f58:	462a      	mov	r2, r5
 8009f5a:	f000 ff15 	bl	800ad88 <_realloc_r>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d1e1      	bne.n	8009f28 <__ssputs_r+0x70>
 8009f64:	6921      	ldr	r1, [r4, #16]
 8009f66:	4650      	mov	r0, sl
 8009f68:	f7ff fec6 	bl	8009cf8 <_free_r>
 8009f6c:	e7c7      	b.n	8009efe <__ssputs_r+0x46>
	...

08009f70 <_svfiprintf_r>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	4698      	mov	r8, r3
 8009f76:	898b      	ldrh	r3, [r1, #12]
 8009f78:	061b      	lsls	r3, r3, #24
 8009f7a:	b09d      	sub	sp, #116	; 0x74
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	460d      	mov	r5, r1
 8009f80:	4614      	mov	r4, r2
 8009f82:	d50e      	bpl.n	8009fa2 <_svfiprintf_r+0x32>
 8009f84:	690b      	ldr	r3, [r1, #16]
 8009f86:	b963      	cbnz	r3, 8009fa2 <_svfiprintf_r+0x32>
 8009f88:	2140      	movs	r1, #64	; 0x40
 8009f8a:	f7ff ff21 	bl	8009dd0 <_malloc_r>
 8009f8e:	6028      	str	r0, [r5, #0]
 8009f90:	6128      	str	r0, [r5, #16]
 8009f92:	b920      	cbnz	r0, 8009f9e <_svfiprintf_r+0x2e>
 8009f94:	230c      	movs	r3, #12
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f9c:	e0d1      	b.n	800a142 <_svfiprintf_r+0x1d2>
 8009f9e:	2340      	movs	r3, #64	; 0x40
 8009fa0:	616b      	str	r3, [r5, #20]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa6:	2320      	movs	r3, #32
 8009fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fb0:	2330      	movs	r3, #48	; 0x30
 8009fb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a15c <_svfiprintf_r+0x1ec>
 8009fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fba:	f04f 0901 	mov.w	r9, #1
 8009fbe:	4623      	mov	r3, r4
 8009fc0:	469a      	mov	sl, r3
 8009fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc6:	b10a      	cbz	r2, 8009fcc <_svfiprintf_r+0x5c>
 8009fc8:	2a25      	cmp	r2, #37	; 0x25
 8009fca:	d1f9      	bne.n	8009fc0 <_svfiprintf_r+0x50>
 8009fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8009fd0:	d00b      	beq.n	8009fea <_svfiprintf_r+0x7a>
 8009fd2:	465b      	mov	r3, fp
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7ff ff6d 	bl	8009eb8 <__ssputs_r>
 8009fde:	3001      	adds	r0, #1
 8009fe0:	f000 80aa 	beq.w	800a138 <_svfiprintf_r+0x1c8>
 8009fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe6:	445a      	add	r2, fp
 8009fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8009fea:	f89a 3000 	ldrb.w	r3, [sl]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 80a2 	beq.w	800a138 <_svfiprintf_r+0x1c8>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ffe:	f10a 0a01 	add.w	sl, sl, #1
 800a002:	9304      	str	r3, [sp, #16]
 800a004:	9307      	str	r3, [sp, #28]
 800a006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a00a:	931a      	str	r3, [sp, #104]	; 0x68
 800a00c:	4654      	mov	r4, sl
 800a00e:	2205      	movs	r2, #5
 800a010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a014:	4851      	ldr	r0, [pc, #324]	; (800a15c <_svfiprintf_r+0x1ec>)
 800a016:	f7f6 f8db 	bl	80001d0 <memchr>
 800a01a:	9a04      	ldr	r2, [sp, #16]
 800a01c:	b9d8      	cbnz	r0, 800a056 <_svfiprintf_r+0xe6>
 800a01e:	06d0      	lsls	r0, r2, #27
 800a020:	bf44      	itt	mi
 800a022:	2320      	movmi	r3, #32
 800a024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a028:	0711      	lsls	r1, r2, #28
 800a02a:	bf44      	itt	mi
 800a02c:	232b      	movmi	r3, #43	; 0x2b
 800a02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a032:	f89a 3000 	ldrb.w	r3, [sl]
 800a036:	2b2a      	cmp	r3, #42	; 0x2a
 800a038:	d015      	beq.n	800a066 <_svfiprintf_r+0xf6>
 800a03a:	9a07      	ldr	r2, [sp, #28]
 800a03c:	4654      	mov	r4, sl
 800a03e:	2000      	movs	r0, #0
 800a040:	f04f 0c0a 	mov.w	ip, #10
 800a044:	4621      	mov	r1, r4
 800a046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a04a:	3b30      	subs	r3, #48	; 0x30
 800a04c:	2b09      	cmp	r3, #9
 800a04e:	d94e      	bls.n	800a0ee <_svfiprintf_r+0x17e>
 800a050:	b1b0      	cbz	r0, 800a080 <_svfiprintf_r+0x110>
 800a052:	9207      	str	r2, [sp, #28]
 800a054:	e014      	b.n	800a080 <_svfiprintf_r+0x110>
 800a056:	eba0 0308 	sub.w	r3, r0, r8
 800a05a:	fa09 f303 	lsl.w	r3, r9, r3
 800a05e:	4313      	orrs	r3, r2
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	46a2      	mov	sl, r4
 800a064:	e7d2      	b.n	800a00c <_svfiprintf_r+0x9c>
 800a066:	9b03      	ldr	r3, [sp, #12]
 800a068:	1d19      	adds	r1, r3, #4
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	9103      	str	r1, [sp, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bfbb      	ittet	lt
 800a072:	425b      	neglt	r3, r3
 800a074:	f042 0202 	orrlt.w	r2, r2, #2
 800a078:	9307      	strge	r3, [sp, #28]
 800a07a:	9307      	strlt	r3, [sp, #28]
 800a07c:	bfb8      	it	lt
 800a07e:	9204      	strlt	r2, [sp, #16]
 800a080:	7823      	ldrb	r3, [r4, #0]
 800a082:	2b2e      	cmp	r3, #46	; 0x2e
 800a084:	d10c      	bne.n	800a0a0 <_svfiprintf_r+0x130>
 800a086:	7863      	ldrb	r3, [r4, #1]
 800a088:	2b2a      	cmp	r3, #42	; 0x2a
 800a08a:	d135      	bne.n	800a0f8 <_svfiprintf_r+0x188>
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	1d1a      	adds	r2, r3, #4
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	9203      	str	r2, [sp, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	bfb8      	it	lt
 800a098:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a09c:	3402      	adds	r4, #2
 800a09e:	9305      	str	r3, [sp, #20]
 800a0a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a16c <_svfiprintf_r+0x1fc>
 800a0a4:	7821      	ldrb	r1, [r4, #0]
 800a0a6:	2203      	movs	r2, #3
 800a0a8:	4650      	mov	r0, sl
 800a0aa:	f7f6 f891 	bl	80001d0 <memchr>
 800a0ae:	b140      	cbz	r0, 800a0c2 <_svfiprintf_r+0x152>
 800a0b0:	2340      	movs	r3, #64	; 0x40
 800a0b2:	eba0 000a 	sub.w	r0, r0, sl
 800a0b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ba:	9b04      	ldr	r3, [sp, #16]
 800a0bc:	4303      	orrs	r3, r0
 800a0be:	3401      	adds	r4, #1
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c6:	4826      	ldr	r0, [pc, #152]	; (800a160 <_svfiprintf_r+0x1f0>)
 800a0c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0cc:	2206      	movs	r2, #6
 800a0ce:	f7f6 f87f 	bl	80001d0 <memchr>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d038      	beq.n	800a148 <_svfiprintf_r+0x1d8>
 800a0d6:	4b23      	ldr	r3, [pc, #140]	; (800a164 <_svfiprintf_r+0x1f4>)
 800a0d8:	bb1b      	cbnz	r3, 800a122 <_svfiprintf_r+0x1b2>
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	3307      	adds	r3, #7
 800a0de:	f023 0307 	bic.w	r3, r3, #7
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	9303      	str	r3, [sp, #12]
 800a0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e8:	4433      	add	r3, r6
 800a0ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ec:	e767      	b.n	8009fbe <_svfiprintf_r+0x4e>
 800a0ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	e7a5      	b.n	800a044 <_svfiprintf_r+0xd4>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	3401      	adds	r4, #1
 800a0fc:	9305      	str	r3, [sp, #20]
 800a0fe:	4619      	mov	r1, r3
 800a100:	f04f 0c0a 	mov.w	ip, #10
 800a104:	4620      	mov	r0, r4
 800a106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a10a:	3a30      	subs	r2, #48	; 0x30
 800a10c:	2a09      	cmp	r2, #9
 800a10e:	d903      	bls.n	800a118 <_svfiprintf_r+0x1a8>
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0c5      	beq.n	800a0a0 <_svfiprintf_r+0x130>
 800a114:	9105      	str	r1, [sp, #20]
 800a116:	e7c3      	b.n	800a0a0 <_svfiprintf_r+0x130>
 800a118:	fb0c 2101 	mla	r1, ip, r1, r2
 800a11c:	4604      	mov	r4, r0
 800a11e:	2301      	movs	r3, #1
 800a120:	e7f0      	b.n	800a104 <_svfiprintf_r+0x194>
 800a122:	ab03      	add	r3, sp, #12
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	462a      	mov	r2, r5
 800a128:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <_svfiprintf_r+0x1f8>)
 800a12a:	a904      	add	r1, sp, #16
 800a12c:	4638      	mov	r0, r7
 800a12e:	f3af 8000 	nop.w
 800a132:	1c42      	adds	r2, r0, #1
 800a134:	4606      	mov	r6, r0
 800a136:	d1d6      	bne.n	800a0e6 <_svfiprintf_r+0x176>
 800a138:	89ab      	ldrh	r3, [r5, #12]
 800a13a:	065b      	lsls	r3, r3, #25
 800a13c:	f53f af2c 	bmi.w	8009f98 <_svfiprintf_r+0x28>
 800a140:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a142:	b01d      	add	sp, #116	; 0x74
 800a144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a148:	ab03      	add	r3, sp, #12
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	462a      	mov	r2, r5
 800a14e:	4b06      	ldr	r3, [pc, #24]	; (800a168 <_svfiprintf_r+0x1f8>)
 800a150:	a904      	add	r1, sp, #16
 800a152:	4638      	mov	r0, r7
 800a154:	f000 f9d4 	bl	800a500 <_printf_i>
 800a158:	e7eb      	b.n	800a132 <_svfiprintf_r+0x1c2>
 800a15a:	bf00      	nop
 800a15c:	0800b2f1 	.word	0x0800b2f1
 800a160:	0800b2fb 	.word	0x0800b2fb
 800a164:	00000000 	.word	0x00000000
 800a168:	08009eb9 	.word	0x08009eb9
 800a16c:	0800b2f7 	.word	0x0800b2f7

0800a170 <__sfputc_r>:
 800a170:	6893      	ldr	r3, [r2, #8]
 800a172:	3b01      	subs	r3, #1
 800a174:	2b00      	cmp	r3, #0
 800a176:	b410      	push	{r4}
 800a178:	6093      	str	r3, [r2, #8]
 800a17a:	da08      	bge.n	800a18e <__sfputc_r+0x1e>
 800a17c:	6994      	ldr	r4, [r2, #24]
 800a17e:	42a3      	cmp	r3, r4
 800a180:	db01      	blt.n	800a186 <__sfputc_r+0x16>
 800a182:	290a      	cmp	r1, #10
 800a184:	d103      	bne.n	800a18e <__sfputc_r+0x1e>
 800a186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a18a:	f000 baef 	b.w	800a76c <__swbuf_r>
 800a18e:	6813      	ldr	r3, [r2, #0]
 800a190:	1c58      	adds	r0, r3, #1
 800a192:	6010      	str	r0, [r2, #0]
 800a194:	7019      	strb	r1, [r3, #0]
 800a196:	4608      	mov	r0, r1
 800a198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <__sfputs_r>:
 800a19e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	460f      	mov	r7, r1
 800a1a4:	4614      	mov	r4, r2
 800a1a6:	18d5      	adds	r5, r2, r3
 800a1a8:	42ac      	cmp	r4, r5
 800a1aa:	d101      	bne.n	800a1b0 <__sfputs_r+0x12>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	e007      	b.n	800a1c0 <__sfputs_r+0x22>
 800a1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b4:	463a      	mov	r2, r7
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7ff ffda 	bl	800a170 <__sfputc_r>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	d1f3      	bne.n	800a1a8 <__sfputs_r+0xa>
 800a1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1c4 <_vfiprintf_r>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	b09d      	sub	sp, #116	; 0x74
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	4698      	mov	r8, r3
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	b118      	cbz	r0, 800a1dc <_vfiprintf_r+0x18>
 800a1d4:	6983      	ldr	r3, [r0, #24]
 800a1d6:	b90b      	cbnz	r3, 800a1dc <_vfiprintf_r+0x18>
 800a1d8:	f000 fcaa 	bl	800ab30 <__sinit>
 800a1dc:	4b89      	ldr	r3, [pc, #548]	; (800a404 <_vfiprintf_r+0x240>)
 800a1de:	429d      	cmp	r5, r3
 800a1e0:	d11b      	bne.n	800a21a <_vfiprintf_r+0x56>
 800a1e2:	6875      	ldr	r5, [r6, #4]
 800a1e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1e6:	07d9      	lsls	r1, r3, #31
 800a1e8:	d405      	bmi.n	800a1f6 <_vfiprintf_r+0x32>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	059a      	lsls	r2, r3, #22
 800a1ee:	d402      	bmi.n	800a1f6 <_vfiprintf_r+0x32>
 800a1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1f2:	f000 fd3b 	bl	800ac6c <__retarget_lock_acquire_recursive>
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	071b      	lsls	r3, r3, #28
 800a1fa:	d501      	bpl.n	800a200 <_vfiprintf_r+0x3c>
 800a1fc:	692b      	ldr	r3, [r5, #16]
 800a1fe:	b9eb      	cbnz	r3, 800a23c <_vfiprintf_r+0x78>
 800a200:	4629      	mov	r1, r5
 800a202:	4630      	mov	r0, r6
 800a204:	f000 fb04 	bl	800a810 <__swsetup_r>
 800a208:	b1c0      	cbz	r0, 800a23c <_vfiprintf_r+0x78>
 800a20a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a20c:	07dc      	lsls	r4, r3, #31
 800a20e:	d50e      	bpl.n	800a22e <_vfiprintf_r+0x6a>
 800a210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a214:	b01d      	add	sp, #116	; 0x74
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	4b7b      	ldr	r3, [pc, #492]	; (800a408 <_vfiprintf_r+0x244>)
 800a21c:	429d      	cmp	r5, r3
 800a21e:	d101      	bne.n	800a224 <_vfiprintf_r+0x60>
 800a220:	68b5      	ldr	r5, [r6, #8]
 800a222:	e7df      	b.n	800a1e4 <_vfiprintf_r+0x20>
 800a224:	4b79      	ldr	r3, [pc, #484]	; (800a40c <_vfiprintf_r+0x248>)
 800a226:	429d      	cmp	r5, r3
 800a228:	bf08      	it	eq
 800a22a:	68f5      	ldreq	r5, [r6, #12]
 800a22c:	e7da      	b.n	800a1e4 <_vfiprintf_r+0x20>
 800a22e:	89ab      	ldrh	r3, [r5, #12]
 800a230:	0598      	lsls	r0, r3, #22
 800a232:	d4ed      	bmi.n	800a210 <_vfiprintf_r+0x4c>
 800a234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a236:	f000 fd1a 	bl	800ac6e <__retarget_lock_release_recursive>
 800a23a:	e7e9      	b.n	800a210 <_vfiprintf_r+0x4c>
 800a23c:	2300      	movs	r3, #0
 800a23e:	9309      	str	r3, [sp, #36]	; 0x24
 800a240:	2320      	movs	r3, #32
 800a242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a246:	f8cd 800c 	str.w	r8, [sp, #12]
 800a24a:	2330      	movs	r3, #48	; 0x30
 800a24c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a410 <_vfiprintf_r+0x24c>
 800a250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a254:	f04f 0901 	mov.w	r9, #1
 800a258:	4623      	mov	r3, r4
 800a25a:	469a      	mov	sl, r3
 800a25c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a260:	b10a      	cbz	r2, 800a266 <_vfiprintf_r+0xa2>
 800a262:	2a25      	cmp	r2, #37	; 0x25
 800a264:	d1f9      	bne.n	800a25a <_vfiprintf_r+0x96>
 800a266:	ebba 0b04 	subs.w	fp, sl, r4
 800a26a:	d00b      	beq.n	800a284 <_vfiprintf_r+0xc0>
 800a26c:	465b      	mov	r3, fp
 800a26e:	4622      	mov	r2, r4
 800a270:	4629      	mov	r1, r5
 800a272:	4630      	mov	r0, r6
 800a274:	f7ff ff93 	bl	800a19e <__sfputs_r>
 800a278:	3001      	adds	r0, #1
 800a27a:	f000 80aa 	beq.w	800a3d2 <_vfiprintf_r+0x20e>
 800a27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a280:	445a      	add	r2, fp
 800a282:	9209      	str	r2, [sp, #36]	; 0x24
 800a284:	f89a 3000 	ldrb.w	r3, [sl]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 80a2 	beq.w	800a3d2 <_vfiprintf_r+0x20e>
 800a28e:	2300      	movs	r3, #0
 800a290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a298:	f10a 0a01 	add.w	sl, sl, #1
 800a29c:	9304      	str	r3, [sp, #16]
 800a29e:	9307      	str	r3, [sp, #28]
 800a2a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a2a6:	4654      	mov	r4, sl
 800a2a8:	2205      	movs	r2, #5
 800a2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ae:	4858      	ldr	r0, [pc, #352]	; (800a410 <_vfiprintf_r+0x24c>)
 800a2b0:	f7f5 ff8e 	bl	80001d0 <memchr>
 800a2b4:	9a04      	ldr	r2, [sp, #16]
 800a2b6:	b9d8      	cbnz	r0, 800a2f0 <_vfiprintf_r+0x12c>
 800a2b8:	06d1      	lsls	r1, r2, #27
 800a2ba:	bf44      	itt	mi
 800a2bc:	2320      	movmi	r3, #32
 800a2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2c2:	0713      	lsls	r3, r2, #28
 800a2c4:	bf44      	itt	mi
 800a2c6:	232b      	movmi	r3, #43	; 0x2b
 800a2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d2:	d015      	beq.n	800a300 <_vfiprintf_r+0x13c>
 800a2d4:	9a07      	ldr	r2, [sp, #28]
 800a2d6:	4654      	mov	r4, sl
 800a2d8:	2000      	movs	r0, #0
 800a2da:	f04f 0c0a 	mov.w	ip, #10
 800a2de:	4621      	mov	r1, r4
 800a2e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2e4:	3b30      	subs	r3, #48	; 0x30
 800a2e6:	2b09      	cmp	r3, #9
 800a2e8:	d94e      	bls.n	800a388 <_vfiprintf_r+0x1c4>
 800a2ea:	b1b0      	cbz	r0, 800a31a <_vfiprintf_r+0x156>
 800a2ec:	9207      	str	r2, [sp, #28]
 800a2ee:	e014      	b.n	800a31a <_vfiprintf_r+0x156>
 800a2f0:	eba0 0308 	sub.w	r3, r0, r8
 800a2f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	9304      	str	r3, [sp, #16]
 800a2fc:	46a2      	mov	sl, r4
 800a2fe:	e7d2      	b.n	800a2a6 <_vfiprintf_r+0xe2>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	1d19      	adds	r1, r3, #4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	9103      	str	r1, [sp, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	bfbb      	ittet	lt
 800a30c:	425b      	neglt	r3, r3
 800a30e:	f042 0202 	orrlt.w	r2, r2, #2
 800a312:	9307      	strge	r3, [sp, #28]
 800a314:	9307      	strlt	r3, [sp, #28]
 800a316:	bfb8      	it	lt
 800a318:	9204      	strlt	r2, [sp, #16]
 800a31a:	7823      	ldrb	r3, [r4, #0]
 800a31c:	2b2e      	cmp	r3, #46	; 0x2e
 800a31e:	d10c      	bne.n	800a33a <_vfiprintf_r+0x176>
 800a320:	7863      	ldrb	r3, [r4, #1]
 800a322:	2b2a      	cmp	r3, #42	; 0x2a
 800a324:	d135      	bne.n	800a392 <_vfiprintf_r+0x1ce>
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	1d1a      	adds	r2, r3, #4
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	9203      	str	r2, [sp, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bfb8      	it	lt
 800a332:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a336:	3402      	adds	r4, #2
 800a338:	9305      	str	r3, [sp, #20]
 800a33a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a420 <_vfiprintf_r+0x25c>
 800a33e:	7821      	ldrb	r1, [r4, #0]
 800a340:	2203      	movs	r2, #3
 800a342:	4650      	mov	r0, sl
 800a344:	f7f5 ff44 	bl	80001d0 <memchr>
 800a348:	b140      	cbz	r0, 800a35c <_vfiprintf_r+0x198>
 800a34a:	2340      	movs	r3, #64	; 0x40
 800a34c:	eba0 000a 	sub.w	r0, r0, sl
 800a350:	fa03 f000 	lsl.w	r0, r3, r0
 800a354:	9b04      	ldr	r3, [sp, #16]
 800a356:	4303      	orrs	r3, r0
 800a358:	3401      	adds	r4, #1
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a360:	482c      	ldr	r0, [pc, #176]	; (800a414 <_vfiprintf_r+0x250>)
 800a362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a366:	2206      	movs	r2, #6
 800a368:	f7f5 ff32 	bl	80001d0 <memchr>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d03f      	beq.n	800a3f0 <_vfiprintf_r+0x22c>
 800a370:	4b29      	ldr	r3, [pc, #164]	; (800a418 <_vfiprintf_r+0x254>)
 800a372:	bb1b      	cbnz	r3, 800a3bc <_vfiprintf_r+0x1f8>
 800a374:	9b03      	ldr	r3, [sp, #12]
 800a376:	3307      	adds	r3, #7
 800a378:	f023 0307 	bic.w	r3, r3, #7
 800a37c:	3308      	adds	r3, #8
 800a37e:	9303      	str	r3, [sp, #12]
 800a380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a382:	443b      	add	r3, r7
 800a384:	9309      	str	r3, [sp, #36]	; 0x24
 800a386:	e767      	b.n	800a258 <_vfiprintf_r+0x94>
 800a388:	fb0c 3202 	mla	r2, ip, r2, r3
 800a38c:	460c      	mov	r4, r1
 800a38e:	2001      	movs	r0, #1
 800a390:	e7a5      	b.n	800a2de <_vfiprintf_r+0x11a>
 800a392:	2300      	movs	r3, #0
 800a394:	3401      	adds	r4, #1
 800a396:	9305      	str	r3, [sp, #20]
 800a398:	4619      	mov	r1, r3
 800a39a:	f04f 0c0a 	mov.w	ip, #10
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3a4:	3a30      	subs	r2, #48	; 0x30
 800a3a6:	2a09      	cmp	r2, #9
 800a3a8:	d903      	bls.n	800a3b2 <_vfiprintf_r+0x1ee>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0c5      	beq.n	800a33a <_vfiprintf_r+0x176>
 800a3ae:	9105      	str	r1, [sp, #20]
 800a3b0:	e7c3      	b.n	800a33a <_vfiprintf_r+0x176>
 800a3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e7f0      	b.n	800a39e <_vfiprintf_r+0x1da>
 800a3bc:	ab03      	add	r3, sp, #12
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	462a      	mov	r2, r5
 800a3c2:	4b16      	ldr	r3, [pc, #88]	; (800a41c <_vfiprintf_r+0x258>)
 800a3c4:	a904      	add	r1, sp, #16
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f3af 8000 	nop.w
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	1c78      	adds	r0, r7, #1
 800a3d0:	d1d6      	bne.n	800a380 <_vfiprintf_r+0x1bc>
 800a3d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3d4:	07d9      	lsls	r1, r3, #31
 800a3d6:	d405      	bmi.n	800a3e4 <_vfiprintf_r+0x220>
 800a3d8:	89ab      	ldrh	r3, [r5, #12]
 800a3da:	059a      	lsls	r2, r3, #22
 800a3dc:	d402      	bmi.n	800a3e4 <_vfiprintf_r+0x220>
 800a3de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3e0:	f000 fc45 	bl	800ac6e <__retarget_lock_release_recursive>
 800a3e4:	89ab      	ldrh	r3, [r5, #12]
 800a3e6:	065b      	lsls	r3, r3, #25
 800a3e8:	f53f af12 	bmi.w	800a210 <_vfiprintf_r+0x4c>
 800a3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ee:	e711      	b.n	800a214 <_vfiprintf_r+0x50>
 800a3f0:	ab03      	add	r3, sp, #12
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	4b09      	ldr	r3, [pc, #36]	; (800a41c <_vfiprintf_r+0x258>)
 800a3f8:	a904      	add	r1, sp, #16
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f000 f880 	bl	800a500 <_printf_i>
 800a400:	e7e4      	b.n	800a3cc <_vfiprintf_r+0x208>
 800a402:	bf00      	nop
 800a404:	0800b344 	.word	0x0800b344
 800a408:	0800b364 	.word	0x0800b364
 800a40c:	0800b324 	.word	0x0800b324
 800a410:	0800b2f1 	.word	0x0800b2f1
 800a414:	0800b2fb 	.word	0x0800b2fb
 800a418:	00000000 	.word	0x00000000
 800a41c:	0800a19f 	.word	0x0800a19f
 800a420:	0800b2f7 	.word	0x0800b2f7

0800a424 <_printf_common>:
 800a424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a428:	4616      	mov	r6, r2
 800a42a:	4699      	mov	r9, r3
 800a42c:	688a      	ldr	r2, [r1, #8]
 800a42e:	690b      	ldr	r3, [r1, #16]
 800a430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a434:	4293      	cmp	r3, r2
 800a436:	bfb8      	it	lt
 800a438:	4613      	movlt	r3, r2
 800a43a:	6033      	str	r3, [r6, #0]
 800a43c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a440:	4607      	mov	r7, r0
 800a442:	460c      	mov	r4, r1
 800a444:	b10a      	cbz	r2, 800a44a <_printf_common+0x26>
 800a446:	3301      	adds	r3, #1
 800a448:	6033      	str	r3, [r6, #0]
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	0699      	lsls	r1, r3, #26
 800a44e:	bf42      	ittt	mi
 800a450:	6833      	ldrmi	r3, [r6, #0]
 800a452:	3302      	addmi	r3, #2
 800a454:	6033      	strmi	r3, [r6, #0]
 800a456:	6825      	ldr	r5, [r4, #0]
 800a458:	f015 0506 	ands.w	r5, r5, #6
 800a45c:	d106      	bne.n	800a46c <_printf_common+0x48>
 800a45e:	f104 0a19 	add.w	sl, r4, #25
 800a462:	68e3      	ldr	r3, [r4, #12]
 800a464:	6832      	ldr	r2, [r6, #0]
 800a466:	1a9b      	subs	r3, r3, r2
 800a468:	42ab      	cmp	r3, r5
 800a46a:	dc26      	bgt.n	800a4ba <_printf_common+0x96>
 800a46c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a470:	1e13      	subs	r3, r2, #0
 800a472:	6822      	ldr	r2, [r4, #0]
 800a474:	bf18      	it	ne
 800a476:	2301      	movne	r3, #1
 800a478:	0692      	lsls	r2, r2, #26
 800a47a:	d42b      	bmi.n	800a4d4 <_printf_common+0xb0>
 800a47c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a480:	4649      	mov	r1, r9
 800a482:	4638      	mov	r0, r7
 800a484:	47c0      	blx	r8
 800a486:	3001      	adds	r0, #1
 800a488:	d01e      	beq.n	800a4c8 <_printf_common+0xa4>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	68e5      	ldr	r5, [r4, #12]
 800a48e:	6832      	ldr	r2, [r6, #0]
 800a490:	f003 0306 	and.w	r3, r3, #6
 800a494:	2b04      	cmp	r3, #4
 800a496:	bf08      	it	eq
 800a498:	1aad      	subeq	r5, r5, r2
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	6922      	ldr	r2, [r4, #16]
 800a49e:	bf0c      	ite	eq
 800a4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4a4:	2500      	movne	r5, #0
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	bfc4      	itt	gt
 800a4aa:	1a9b      	subgt	r3, r3, r2
 800a4ac:	18ed      	addgt	r5, r5, r3
 800a4ae:	2600      	movs	r6, #0
 800a4b0:	341a      	adds	r4, #26
 800a4b2:	42b5      	cmp	r5, r6
 800a4b4:	d11a      	bne.n	800a4ec <_printf_common+0xc8>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	e008      	b.n	800a4cc <_printf_common+0xa8>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	4652      	mov	r2, sl
 800a4be:	4649      	mov	r1, r9
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	47c0      	blx	r8
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d103      	bne.n	800a4d0 <_printf_common+0xac>
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	e7c6      	b.n	800a462 <_printf_common+0x3e>
 800a4d4:	18e1      	adds	r1, r4, r3
 800a4d6:	1c5a      	adds	r2, r3, #1
 800a4d8:	2030      	movs	r0, #48	; 0x30
 800a4da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4de:	4422      	add	r2, r4
 800a4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4e8:	3302      	adds	r3, #2
 800a4ea:	e7c7      	b.n	800a47c <_printf_common+0x58>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	47c0      	blx	r8
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d0e6      	beq.n	800a4c8 <_printf_common+0xa4>
 800a4fa:	3601      	adds	r6, #1
 800a4fc:	e7d9      	b.n	800a4b2 <_printf_common+0x8e>
	...

0800a500 <_printf_i>:
 800a500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a504:	7e0f      	ldrb	r7, [r1, #24]
 800a506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a508:	2f78      	cmp	r7, #120	; 0x78
 800a50a:	4691      	mov	r9, r2
 800a50c:	4680      	mov	r8, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	469a      	mov	sl, r3
 800a512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a516:	d807      	bhi.n	800a528 <_printf_i+0x28>
 800a518:	2f62      	cmp	r7, #98	; 0x62
 800a51a:	d80a      	bhi.n	800a532 <_printf_i+0x32>
 800a51c:	2f00      	cmp	r7, #0
 800a51e:	f000 80d8 	beq.w	800a6d2 <_printf_i+0x1d2>
 800a522:	2f58      	cmp	r7, #88	; 0x58
 800a524:	f000 80a3 	beq.w	800a66e <_printf_i+0x16e>
 800a528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a530:	e03a      	b.n	800a5a8 <_printf_i+0xa8>
 800a532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a536:	2b15      	cmp	r3, #21
 800a538:	d8f6      	bhi.n	800a528 <_printf_i+0x28>
 800a53a:	a101      	add	r1, pc, #4	; (adr r1, 800a540 <_printf_i+0x40>)
 800a53c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a540:	0800a599 	.word	0x0800a599
 800a544:	0800a5ad 	.word	0x0800a5ad
 800a548:	0800a529 	.word	0x0800a529
 800a54c:	0800a529 	.word	0x0800a529
 800a550:	0800a529 	.word	0x0800a529
 800a554:	0800a529 	.word	0x0800a529
 800a558:	0800a5ad 	.word	0x0800a5ad
 800a55c:	0800a529 	.word	0x0800a529
 800a560:	0800a529 	.word	0x0800a529
 800a564:	0800a529 	.word	0x0800a529
 800a568:	0800a529 	.word	0x0800a529
 800a56c:	0800a6b9 	.word	0x0800a6b9
 800a570:	0800a5dd 	.word	0x0800a5dd
 800a574:	0800a69b 	.word	0x0800a69b
 800a578:	0800a529 	.word	0x0800a529
 800a57c:	0800a529 	.word	0x0800a529
 800a580:	0800a6db 	.word	0x0800a6db
 800a584:	0800a529 	.word	0x0800a529
 800a588:	0800a5dd 	.word	0x0800a5dd
 800a58c:	0800a529 	.word	0x0800a529
 800a590:	0800a529 	.word	0x0800a529
 800a594:	0800a6a3 	.word	0x0800a6a3
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	1d1a      	adds	r2, r3, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	602a      	str	r2, [r5, #0]
 800a5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e0a3      	b.n	800a6f4 <_printf_i+0x1f4>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	6829      	ldr	r1, [r5, #0]
 800a5b0:	0606      	lsls	r6, r0, #24
 800a5b2:	f101 0304 	add.w	r3, r1, #4
 800a5b6:	d50a      	bpl.n	800a5ce <_printf_i+0xce>
 800a5b8:	680e      	ldr	r6, [r1, #0]
 800a5ba:	602b      	str	r3, [r5, #0]
 800a5bc:	2e00      	cmp	r6, #0
 800a5be:	da03      	bge.n	800a5c8 <_printf_i+0xc8>
 800a5c0:	232d      	movs	r3, #45	; 0x2d
 800a5c2:	4276      	negs	r6, r6
 800a5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5c8:	485e      	ldr	r0, [pc, #376]	; (800a744 <_printf_i+0x244>)
 800a5ca:	230a      	movs	r3, #10
 800a5cc:	e019      	b.n	800a602 <_printf_i+0x102>
 800a5ce:	680e      	ldr	r6, [r1, #0]
 800a5d0:	602b      	str	r3, [r5, #0]
 800a5d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a5d6:	bf18      	it	ne
 800a5d8:	b236      	sxthne	r6, r6
 800a5da:	e7ef      	b.n	800a5bc <_printf_i+0xbc>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	1d19      	adds	r1, r3, #4
 800a5e2:	6029      	str	r1, [r5, #0]
 800a5e4:	0601      	lsls	r1, r0, #24
 800a5e6:	d501      	bpl.n	800a5ec <_printf_i+0xec>
 800a5e8:	681e      	ldr	r6, [r3, #0]
 800a5ea:	e002      	b.n	800a5f2 <_printf_i+0xf2>
 800a5ec:	0646      	lsls	r6, r0, #25
 800a5ee:	d5fb      	bpl.n	800a5e8 <_printf_i+0xe8>
 800a5f0:	881e      	ldrh	r6, [r3, #0]
 800a5f2:	4854      	ldr	r0, [pc, #336]	; (800a744 <_printf_i+0x244>)
 800a5f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a5f6:	bf0c      	ite	eq
 800a5f8:	2308      	moveq	r3, #8
 800a5fa:	230a      	movne	r3, #10
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a602:	6865      	ldr	r5, [r4, #4]
 800a604:	60a5      	str	r5, [r4, #8]
 800a606:	2d00      	cmp	r5, #0
 800a608:	bfa2      	ittt	ge
 800a60a:	6821      	ldrge	r1, [r4, #0]
 800a60c:	f021 0104 	bicge.w	r1, r1, #4
 800a610:	6021      	strge	r1, [r4, #0]
 800a612:	b90e      	cbnz	r6, 800a618 <_printf_i+0x118>
 800a614:	2d00      	cmp	r5, #0
 800a616:	d04d      	beq.n	800a6b4 <_printf_i+0x1b4>
 800a618:	4615      	mov	r5, r2
 800a61a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a61e:	fb03 6711 	mls	r7, r3, r1, r6
 800a622:	5dc7      	ldrb	r7, [r0, r7]
 800a624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a628:	4637      	mov	r7, r6
 800a62a:	42bb      	cmp	r3, r7
 800a62c:	460e      	mov	r6, r1
 800a62e:	d9f4      	bls.n	800a61a <_printf_i+0x11a>
 800a630:	2b08      	cmp	r3, #8
 800a632:	d10b      	bne.n	800a64c <_printf_i+0x14c>
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	07de      	lsls	r6, r3, #31
 800a638:	d508      	bpl.n	800a64c <_printf_i+0x14c>
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	6861      	ldr	r1, [r4, #4]
 800a63e:	4299      	cmp	r1, r3
 800a640:	bfde      	ittt	le
 800a642:	2330      	movle	r3, #48	; 0x30
 800a644:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a648:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a64c:	1b52      	subs	r2, r2, r5
 800a64e:	6122      	str	r2, [r4, #16]
 800a650:	f8cd a000 	str.w	sl, [sp]
 800a654:	464b      	mov	r3, r9
 800a656:	aa03      	add	r2, sp, #12
 800a658:	4621      	mov	r1, r4
 800a65a:	4640      	mov	r0, r8
 800a65c:	f7ff fee2 	bl	800a424 <_printf_common>
 800a660:	3001      	adds	r0, #1
 800a662:	d14c      	bne.n	800a6fe <_printf_i+0x1fe>
 800a664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a668:	b004      	add	sp, #16
 800a66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66e:	4835      	ldr	r0, [pc, #212]	; (800a744 <_printf_i+0x244>)
 800a670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a674:	6829      	ldr	r1, [r5, #0]
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	f851 6b04 	ldr.w	r6, [r1], #4
 800a67c:	6029      	str	r1, [r5, #0]
 800a67e:	061d      	lsls	r5, r3, #24
 800a680:	d514      	bpl.n	800a6ac <_printf_i+0x1ac>
 800a682:	07df      	lsls	r7, r3, #31
 800a684:	bf44      	itt	mi
 800a686:	f043 0320 	orrmi.w	r3, r3, #32
 800a68a:	6023      	strmi	r3, [r4, #0]
 800a68c:	b91e      	cbnz	r6, 800a696 <_printf_i+0x196>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	f023 0320 	bic.w	r3, r3, #32
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	2310      	movs	r3, #16
 800a698:	e7b0      	b.n	800a5fc <_printf_i+0xfc>
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	f043 0320 	orr.w	r3, r3, #32
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	2378      	movs	r3, #120	; 0x78
 800a6a4:	4828      	ldr	r0, [pc, #160]	; (800a748 <_printf_i+0x248>)
 800a6a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6aa:	e7e3      	b.n	800a674 <_printf_i+0x174>
 800a6ac:	0659      	lsls	r1, r3, #25
 800a6ae:	bf48      	it	mi
 800a6b0:	b2b6      	uxthmi	r6, r6
 800a6b2:	e7e6      	b.n	800a682 <_printf_i+0x182>
 800a6b4:	4615      	mov	r5, r2
 800a6b6:	e7bb      	b.n	800a630 <_printf_i+0x130>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	6826      	ldr	r6, [r4, #0]
 800a6bc:	6961      	ldr	r1, [r4, #20]
 800a6be:	1d18      	adds	r0, r3, #4
 800a6c0:	6028      	str	r0, [r5, #0]
 800a6c2:	0635      	lsls	r5, r6, #24
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	d501      	bpl.n	800a6cc <_printf_i+0x1cc>
 800a6c8:	6019      	str	r1, [r3, #0]
 800a6ca:	e002      	b.n	800a6d2 <_printf_i+0x1d2>
 800a6cc:	0670      	lsls	r0, r6, #25
 800a6ce:	d5fb      	bpl.n	800a6c8 <_printf_i+0x1c8>
 800a6d0:	8019      	strh	r1, [r3, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6123      	str	r3, [r4, #16]
 800a6d6:	4615      	mov	r5, r2
 800a6d8:	e7ba      	b.n	800a650 <_printf_i+0x150>
 800a6da:	682b      	ldr	r3, [r5, #0]
 800a6dc:	1d1a      	adds	r2, r3, #4
 800a6de:	602a      	str	r2, [r5, #0]
 800a6e0:	681d      	ldr	r5, [r3, #0]
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f7f5 fd72 	bl	80001d0 <memchr>
 800a6ec:	b108      	cbz	r0, 800a6f2 <_printf_i+0x1f2>
 800a6ee:	1b40      	subs	r0, r0, r5
 800a6f0:	6060      	str	r0, [r4, #4]
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6fc:	e7a8      	b.n	800a650 <_printf_i+0x150>
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	462a      	mov	r2, r5
 800a702:	4649      	mov	r1, r9
 800a704:	4640      	mov	r0, r8
 800a706:	47d0      	blx	sl
 800a708:	3001      	adds	r0, #1
 800a70a:	d0ab      	beq.n	800a664 <_printf_i+0x164>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	079b      	lsls	r3, r3, #30
 800a710:	d413      	bmi.n	800a73a <_printf_i+0x23a>
 800a712:	68e0      	ldr	r0, [r4, #12]
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	4298      	cmp	r0, r3
 800a718:	bfb8      	it	lt
 800a71a:	4618      	movlt	r0, r3
 800a71c:	e7a4      	b.n	800a668 <_printf_i+0x168>
 800a71e:	2301      	movs	r3, #1
 800a720:	4632      	mov	r2, r6
 800a722:	4649      	mov	r1, r9
 800a724:	4640      	mov	r0, r8
 800a726:	47d0      	blx	sl
 800a728:	3001      	adds	r0, #1
 800a72a:	d09b      	beq.n	800a664 <_printf_i+0x164>
 800a72c:	3501      	adds	r5, #1
 800a72e:	68e3      	ldr	r3, [r4, #12]
 800a730:	9903      	ldr	r1, [sp, #12]
 800a732:	1a5b      	subs	r3, r3, r1
 800a734:	42ab      	cmp	r3, r5
 800a736:	dcf2      	bgt.n	800a71e <_printf_i+0x21e>
 800a738:	e7eb      	b.n	800a712 <_printf_i+0x212>
 800a73a:	2500      	movs	r5, #0
 800a73c:	f104 0619 	add.w	r6, r4, #25
 800a740:	e7f5      	b.n	800a72e <_printf_i+0x22e>
 800a742:	bf00      	nop
 800a744:	0800b302 	.word	0x0800b302
 800a748:	0800b313 	.word	0x0800b313

0800a74c <_sbrk_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_sbrk_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f6 fe12 	bl	8001380 <_sbrk>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_sbrk_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_sbrk_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20002000 	.word	0x20002000

0800a76c <__swbuf_r>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	460e      	mov	r6, r1
 800a770:	4614      	mov	r4, r2
 800a772:	4605      	mov	r5, r0
 800a774:	b118      	cbz	r0, 800a77e <__swbuf_r+0x12>
 800a776:	6983      	ldr	r3, [r0, #24]
 800a778:	b90b      	cbnz	r3, 800a77e <__swbuf_r+0x12>
 800a77a:	f000 f9d9 	bl	800ab30 <__sinit>
 800a77e:	4b21      	ldr	r3, [pc, #132]	; (800a804 <__swbuf_r+0x98>)
 800a780:	429c      	cmp	r4, r3
 800a782:	d12b      	bne.n	800a7dc <__swbuf_r+0x70>
 800a784:	686c      	ldr	r4, [r5, #4]
 800a786:	69a3      	ldr	r3, [r4, #24]
 800a788:	60a3      	str	r3, [r4, #8]
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	071a      	lsls	r2, r3, #28
 800a78e:	d52f      	bpl.n	800a7f0 <__swbuf_r+0x84>
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	b36b      	cbz	r3, 800a7f0 <__swbuf_r+0x84>
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	6820      	ldr	r0, [r4, #0]
 800a798:	1ac0      	subs	r0, r0, r3
 800a79a:	6963      	ldr	r3, [r4, #20]
 800a79c:	b2f6      	uxtb	r6, r6
 800a79e:	4283      	cmp	r3, r0
 800a7a0:	4637      	mov	r7, r6
 800a7a2:	dc04      	bgt.n	800a7ae <__swbuf_r+0x42>
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	f000 f92e 	bl	800aa08 <_fflush_r>
 800a7ac:	bb30      	cbnz	r0, 800a7fc <__swbuf_r+0x90>
 800a7ae:	68a3      	ldr	r3, [r4, #8]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	60a3      	str	r3, [r4, #8]
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	6022      	str	r2, [r4, #0]
 800a7ba:	701e      	strb	r6, [r3, #0]
 800a7bc:	6963      	ldr	r3, [r4, #20]
 800a7be:	3001      	adds	r0, #1
 800a7c0:	4283      	cmp	r3, r0
 800a7c2:	d004      	beq.n	800a7ce <__swbuf_r+0x62>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	07db      	lsls	r3, r3, #31
 800a7c8:	d506      	bpl.n	800a7d8 <__swbuf_r+0x6c>
 800a7ca:	2e0a      	cmp	r6, #10
 800a7cc:	d104      	bne.n	800a7d8 <__swbuf_r+0x6c>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	f000 f919 	bl	800aa08 <_fflush_r>
 800a7d6:	b988      	cbnz	r0, 800a7fc <__swbuf_r+0x90>
 800a7d8:	4638      	mov	r0, r7
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <__swbuf_r+0x9c>)
 800a7de:	429c      	cmp	r4, r3
 800a7e0:	d101      	bne.n	800a7e6 <__swbuf_r+0x7a>
 800a7e2:	68ac      	ldr	r4, [r5, #8]
 800a7e4:	e7cf      	b.n	800a786 <__swbuf_r+0x1a>
 800a7e6:	4b09      	ldr	r3, [pc, #36]	; (800a80c <__swbuf_r+0xa0>)
 800a7e8:	429c      	cmp	r4, r3
 800a7ea:	bf08      	it	eq
 800a7ec:	68ec      	ldreq	r4, [r5, #12]
 800a7ee:	e7ca      	b.n	800a786 <__swbuf_r+0x1a>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 f80c 	bl	800a810 <__swsetup_r>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d0cb      	beq.n	800a794 <__swbuf_r+0x28>
 800a7fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a800:	e7ea      	b.n	800a7d8 <__swbuf_r+0x6c>
 800a802:	bf00      	nop
 800a804:	0800b344 	.word	0x0800b344
 800a808:	0800b364 	.word	0x0800b364
 800a80c:	0800b324 	.word	0x0800b324

0800a810 <__swsetup_r>:
 800a810:	4b32      	ldr	r3, [pc, #200]	; (800a8dc <__swsetup_r+0xcc>)
 800a812:	b570      	push	{r4, r5, r6, lr}
 800a814:	681d      	ldr	r5, [r3, #0]
 800a816:	4606      	mov	r6, r0
 800a818:	460c      	mov	r4, r1
 800a81a:	b125      	cbz	r5, 800a826 <__swsetup_r+0x16>
 800a81c:	69ab      	ldr	r3, [r5, #24]
 800a81e:	b913      	cbnz	r3, 800a826 <__swsetup_r+0x16>
 800a820:	4628      	mov	r0, r5
 800a822:	f000 f985 	bl	800ab30 <__sinit>
 800a826:	4b2e      	ldr	r3, [pc, #184]	; (800a8e0 <__swsetup_r+0xd0>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	d10f      	bne.n	800a84c <__swsetup_r+0x3c>
 800a82c:	686c      	ldr	r4, [r5, #4]
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a834:	0719      	lsls	r1, r3, #28
 800a836:	d42c      	bmi.n	800a892 <__swsetup_r+0x82>
 800a838:	06dd      	lsls	r5, r3, #27
 800a83a:	d411      	bmi.n	800a860 <__swsetup_r+0x50>
 800a83c:	2309      	movs	r3, #9
 800a83e:	6033      	str	r3, [r6, #0]
 800a840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a84a:	e03e      	b.n	800a8ca <__swsetup_r+0xba>
 800a84c:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <__swsetup_r+0xd4>)
 800a84e:	429c      	cmp	r4, r3
 800a850:	d101      	bne.n	800a856 <__swsetup_r+0x46>
 800a852:	68ac      	ldr	r4, [r5, #8]
 800a854:	e7eb      	b.n	800a82e <__swsetup_r+0x1e>
 800a856:	4b24      	ldr	r3, [pc, #144]	; (800a8e8 <__swsetup_r+0xd8>)
 800a858:	429c      	cmp	r4, r3
 800a85a:	bf08      	it	eq
 800a85c:	68ec      	ldreq	r4, [r5, #12]
 800a85e:	e7e6      	b.n	800a82e <__swsetup_r+0x1e>
 800a860:	0758      	lsls	r0, r3, #29
 800a862:	d512      	bpl.n	800a88a <__swsetup_r+0x7a>
 800a864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a866:	b141      	cbz	r1, 800a87a <__swsetup_r+0x6a>
 800a868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a86c:	4299      	cmp	r1, r3
 800a86e:	d002      	beq.n	800a876 <__swsetup_r+0x66>
 800a870:	4630      	mov	r0, r6
 800a872:	f7ff fa41 	bl	8009cf8 <_free_r>
 800a876:	2300      	movs	r3, #0
 800a878:	6363      	str	r3, [r4, #52]	; 0x34
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a880:	81a3      	strh	r3, [r4, #12]
 800a882:	2300      	movs	r3, #0
 800a884:	6063      	str	r3, [r4, #4]
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f043 0308 	orr.w	r3, r3, #8
 800a890:	81a3      	strh	r3, [r4, #12]
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	b94b      	cbnz	r3, 800a8aa <__swsetup_r+0x9a>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a89c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8a0:	d003      	beq.n	800a8aa <__swsetup_r+0x9a>
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	f000 fa09 	bl	800acbc <__smakebuf_r>
 800a8aa:	89a0      	ldrh	r0, [r4, #12]
 800a8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8b0:	f010 0301 	ands.w	r3, r0, #1
 800a8b4:	d00a      	beq.n	800a8cc <__swsetup_r+0xbc>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60a3      	str	r3, [r4, #8]
 800a8ba:	6963      	ldr	r3, [r4, #20]
 800a8bc:	425b      	negs	r3, r3
 800a8be:	61a3      	str	r3, [r4, #24]
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	b943      	cbnz	r3, 800a8d6 <__swsetup_r+0xc6>
 800a8c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8c8:	d1ba      	bne.n	800a840 <__swsetup_r+0x30>
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}
 800a8cc:	0781      	lsls	r1, r0, #30
 800a8ce:	bf58      	it	pl
 800a8d0:	6963      	ldrpl	r3, [r4, #20]
 800a8d2:	60a3      	str	r3, [r4, #8]
 800a8d4:	e7f4      	b.n	800a8c0 <__swsetup_r+0xb0>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e7f7      	b.n	800a8ca <__swsetup_r+0xba>
 800a8da:	bf00      	nop
 800a8dc:	20000024 	.word	0x20000024
 800a8e0:	0800b344 	.word	0x0800b344
 800a8e4:	0800b364 	.word	0x0800b364
 800a8e8:	0800b324 	.word	0x0800b324

0800a8ec <abort>:
 800a8ec:	b508      	push	{r3, lr}
 800a8ee:	2006      	movs	r0, #6
 800a8f0:	f000 faa2 	bl	800ae38 <raise>
 800a8f4:	2001      	movs	r0, #1
 800a8f6:	f7f6 fccb 	bl	8001290 <_exit>
	...

0800a8fc <__sflush_r>:
 800a8fc:	898a      	ldrh	r2, [r1, #12]
 800a8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a902:	4605      	mov	r5, r0
 800a904:	0710      	lsls	r0, r2, #28
 800a906:	460c      	mov	r4, r1
 800a908:	d458      	bmi.n	800a9bc <__sflush_r+0xc0>
 800a90a:	684b      	ldr	r3, [r1, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dc05      	bgt.n	800a91c <__sflush_r+0x20>
 800a910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a912:	2b00      	cmp	r3, #0
 800a914:	dc02      	bgt.n	800a91c <__sflush_r+0x20>
 800a916:	2000      	movs	r0, #0
 800a918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a91c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a91e:	2e00      	cmp	r6, #0
 800a920:	d0f9      	beq.n	800a916 <__sflush_r+0x1a>
 800a922:	2300      	movs	r3, #0
 800a924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a928:	682f      	ldr	r7, [r5, #0]
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	d032      	beq.n	800a994 <__sflush_r+0x98>
 800a92e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	075a      	lsls	r2, r3, #29
 800a934:	d505      	bpl.n	800a942 <__sflush_r+0x46>
 800a936:	6863      	ldr	r3, [r4, #4]
 800a938:	1ac0      	subs	r0, r0, r3
 800a93a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a93c:	b10b      	cbz	r3, 800a942 <__sflush_r+0x46>
 800a93e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a940:	1ac0      	subs	r0, r0, r3
 800a942:	2300      	movs	r3, #0
 800a944:	4602      	mov	r2, r0
 800a946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a948:	6a21      	ldr	r1, [r4, #32]
 800a94a:	4628      	mov	r0, r5
 800a94c:	47b0      	blx	r6
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	89a3      	ldrh	r3, [r4, #12]
 800a952:	d106      	bne.n	800a962 <__sflush_r+0x66>
 800a954:	6829      	ldr	r1, [r5, #0]
 800a956:	291d      	cmp	r1, #29
 800a958:	d82c      	bhi.n	800a9b4 <__sflush_r+0xb8>
 800a95a:	4a2a      	ldr	r2, [pc, #168]	; (800aa04 <__sflush_r+0x108>)
 800a95c:	40ca      	lsrs	r2, r1
 800a95e:	07d6      	lsls	r6, r2, #31
 800a960:	d528      	bpl.n	800a9b4 <__sflush_r+0xb8>
 800a962:	2200      	movs	r2, #0
 800a964:	6062      	str	r2, [r4, #4]
 800a966:	04d9      	lsls	r1, r3, #19
 800a968:	6922      	ldr	r2, [r4, #16]
 800a96a:	6022      	str	r2, [r4, #0]
 800a96c:	d504      	bpl.n	800a978 <__sflush_r+0x7c>
 800a96e:	1c42      	adds	r2, r0, #1
 800a970:	d101      	bne.n	800a976 <__sflush_r+0x7a>
 800a972:	682b      	ldr	r3, [r5, #0]
 800a974:	b903      	cbnz	r3, 800a978 <__sflush_r+0x7c>
 800a976:	6560      	str	r0, [r4, #84]	; 0x54
 800a978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a97a:	602f      	str	r7, [r5, #0]
 800a97c:	2900      	cmp	r1, #0
 800a97e:	d0ca      	beq.n	800a916 <__sflush_r+0x1a>
 800a980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a984:	4299      	cmp	r1, r3
 800a986:	d002      	beq.n	800a98e <__sflush_r+0x92>
 800a988:	4628      	mov	r0, r5
 800a98a:	f7ff f9b5 	bl	8009cf8 <_free_r>
 800a98e:	2000      	movs	r0, #0
 800a990:	6360      	str	r0, [r4, #52]	; 0x34
 800a992:	e7c1      	b.n	800a918 <__sflush_r+0x1c>
 800a994:	6a21      	ldr	r1, [r4, #32]
 800a996:	2301      	movs	r3, #1
 800a998:	4628      	mov	r0, r5
 800a99a:	47b0      	blx	r6
 800a99c:	1c41      	adds	r1, r0, #1
 800a99e:	d1c7      	bne.n	800a930 <__sflush_r+0x34>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0c4      	beq.n	800a930 <__sflush_r+0x34>
 800a9a6:	2b1d      	cmp	r3, #29
 800a9a8:	d001      	beq.n	800a9ae <__sflush_r+0xb2>
 800a9aa:	2b16      	cmp	r3, #22
 800a9ac:	d101      	bne.n	800a9b2 <__sflush_r+0xb6>
 800a9ae:	602f      	str	r7, [r5, #0]
 800a9b0:	e7b1      	b.n	800a916 <__sflush_r+0x1a>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9b8:	81a3      	strh	r3, [r4, #12]
 800a9ba:	e7ad      	b.n	800a918 <__sflush_r+0x1c>
 800a9bc:	690f      	ldr	r7, [r1, #16]
 800a9be:	2f00      	cmp	r7, #0
 800a9c0:	d0a9      	beq.n	800a916 <__sflush_r+0x1a>
 800a9c2:	0793      	lsls	r3, r2, #30
 800a9c4:	680e      	ldr	r6, [r1, #0]
 800a9c6:	bf08      	it	eq
 800a9c8:	694b      	ldreq	r3, [r1, #20]
 800a9ca:	600f      	str	r7, [r1, #0]
 800a9cc:	bf18      	it	ne
 800a9ce:	2300      	movne	r3, #0
 800a9d0:	eba6 0807 	sub.w	r8, r6, r7
 800a9d4:	608b      	str	r3, [r1, #8]
 800a9d6:	f1b8 0f00 	cmp.w	r8, #0
 800a9da:	dd9c      	ble.n	800a916 <__sflush_r+0x1a>
 800a9dc:	6a21      	ldr	r1, [r4, #32]
 800a9de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9e0:	4643      	mov	r3, r8
 800a9e2:	463a      	mov	r2, r7
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b0      	blx	r6
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	dc06      	bgt.n	800a9fa <__sflush_r+0xfe>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9f2:	81a3      	strh	r3, [r4, #12]
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9f8:	e78e      	b.n	800a918 <__sflush_r+0x1c>
 800a9fa:	4407      	add	r7, r0
 800a9fc:	eba8 0800 	sub.w	r8, r8, r0
 800aa00:	e7e9      	b.n	800a9d6 <__sflush_r+0xda>
 800aa02:	bf00      	nop
 800aa04:	20400001 	.word	0x20400001

0800aa08 <_fflush_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	690b      	ldr	r3, [r1, #16]
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	460c      	mov	r4, r1
 800aa10:	b913      	cbnz	r3, 800aa18 <_fflush_r+0x10>
 800aa12:	2500      	movs	r5, #0
 800aa14:	4628      	mov	r0, r5
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	b118      	cbz	r0, 800aa22 <_fflush_r+0x1a>
 800aa1a:	6983      	ldr	r3, [r0, #24]
 800aa1c:	b90b      	cbnz	r3, 800aa22 <_fflush_r+0x1a>
 800aa1e:	f000 f887 	bl	800ab30 <__sinit>
 800aa22:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <_fflush_r+0x6c>)
 800aa24:	429c      	cmp	r4, r3
 800aa26:	d11b      	bne.n	800aa60 <_fflush_r+0x58>
 800aa28:	686c      	ldr	r4, [r5, #4]
 800aa2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d0ef      	beq.n	800aa12 <_fflush_r+0xa>
 800aa32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa34:	07d0      	lsls	r0, r2, #31
 800aa36:	d404      	bmi.n	800aa42 <_fflush_r+0x3a>
 800aa38:	0599      	lsls	r1, r3, #22
 800aa3a:	d402      	bmi.n	800aa42 <_fflush_r+0x3a>
 800aa3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa3e:	f000 f915 	bl	800ac6c <__retarget_lock_acquire_recursive>
 800aa42:	4628      	mov	r0, r5
 800aa44:	4621      	mov	r1, r4
 800aa46:	f7ff ff59 	bl	800a8fc <__sflush_r>
 800aa4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa4c:	07da      	lsls	r2, r3, #31
 800aa4e:	4605      	mov	r5, r0
 800aa50:	d4e0      	bmi.n	800aa14 <_fflush_r+0xc>
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	059b      	lsls	r3, r3, #22
 800aa56:	d4dd      	bmi.n	800aa14 <_fflush_r+0xc>
 800aa58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa5a:	f000 f908 	bl	800ac6e <__retarget_lock_release_recursive>
 800aa5e:	e7d9      	b.n	800aa14 <_fflush_r+0xc>
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <_fflush_r+0x70>)
 800aa62:	429c      	cmp	r4, r3
 800aa64:	d101      	bne.n	800aa6a <_fflush_r+0x62>
 800aa66:	68ac      	ldr	r4, [r5, #8]
 800aa68:	e7df      	b.n	800aa2a <_fflush_r+0x22>
 800aa6a:	4b04      	ldr	r3, [pc, #16]	; (800aa7c <_fflush_r+0x74>)
 800aa6c:	429c      	cmp	r4, r3
 800aa6e:	bf08      	it	eq
 800aa70:	68ec      	ldreq	r4, [r5, #12]
 800aa72:	e7da      	b.n	800aa2a <_fflush_r+0x22>
 800aa74:	0800b344 	.word	0x0800b344
 800aa78:	0800b364 	.word	0x0800b364
 800aa7c:	0800b324 	.word	0x0800b324

0800aa80 <std>:
 800aa80:	2300      	movs	r3, #0
 800aa82:	b510      	push	{r4, lr}
 800aa84:	4604      	mov	r4, r0
 800aa86:	e9c0 3300 	strd	r3, r3, [r0]
 800aa8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa8e:	6083      	str	r3, [r0, #8]
 800aa90:	8181      	strh	r1, [r0, #12]
 800aa92:	6643      	str	r3, [r0, #100]	; 0x64
 800aa94:	81c2      	strh	r2, [r0, #14]
 800aa96:	6183      	str	r3, [r0, #24]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	305c      	adds	r0, #92	; 0x5c
 800aa9e:	f7fe ffb1 	bl	8009a04 <memset>
 800aaa2:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <std+0x38>)
 800aaa4:	6263      	str	r3, [r4, #36]	; 0x24
 800aaa6:	4b05      	ldr	r3, [pc, #20]	; (800aabc <std+0x3c>)
 800aaa8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaaa:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <std+0x40>)
 800aaac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaae:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <std+0x44>)
 800aab0:	6224      	str	r4, [r4, #32]
 800aab2:	6323      	str	r3, [r4, #48]	; 0x30
 800aab4:	bd10      	pop	{r4, pc}
 800aab6:	bf00      	nop
 800aab8:	0800ae71 	.word	0x0800ae71
 800aabc:	0800ae93 	.word	0x0800ae93
 800aac0:	0800aecb 	.word	0x0800aecb
 800aac4:	0800aeef 	.word	0x0800aeef

0800aac8 <_cleanup_r>:
 800aac8:	4901      	ldr	r1, [pc, #4]	; (800aad0 <_cleanup_r+0x8>)
 800aaca:	f000 b8af 	b.w	800ac2c <_fwalk_reent>
 800aace:	bf00      	nop
 800aad0:	0800aa09 	.word	0x0800aa09

0800aad4 <__sfmoreglue>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	2268      	movs	r2, #104	; 0x68
 800aad8:	1e4d      	subs	r5, r1, #1
 800aada:	4355      	muls	r5, r2
 800aadc:	460e      	mov	r6, r1
 800aade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aae2:	f7ff f975 	bl	8009dd0 <_malloc_r>
 800aae6:	4604      	mov	r4, r0
 800aae8:	b140      	cbz	r0, 800aafc <__sfmoreglue+0x28>
 800aaea:	2100      	movs	r1, #0
 800aaec:	e9c0 1600 	strd	r1, r6, [r0]
 800aaf0:	300c      	adds	r0, #12
 800aaf2:	60a0      	str	r0, [r4, #8]
 800aaf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aaf8:	f7fe ff84 	bl	8009a04 <memset>
 800aafc:	4620      	mov	r0, r4
 800aafe:	bd70      	pop	{r4, r5, r6, pc}

0800ab00 <__sfp_lock_acquire>:
 800ab00:	4801      	ldr	r0, [pc, #4]	; (800ab08 <__sfp_lock_acquire+0x8>)
 800ab02:	f000 b8b3 	b.w	800ac6c <__retarget_lock_acquire_recursive>
 800ab06:	bf00      	nop
 800ab08:	20001ffd 	.word	0x20001ffd

0800ab0c <__sfp_lock_release>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	; (800ab14 <__sfp_lock_release+0x8>)
 800ab0e:	f000 b8ae 	b.w	800ac6e <__retarget_lock_release_recursive>
 800ab12:	bf00      	nop
 800ab14:	20001ffd 	.word	0x20001ffd

0800ab18 <__sinit_lock_acquire>:
 800ab18:	4801      	ldr	r0, [pc, #4]	; (800ab20 <__sinit_lock_acquire+0x8>)
 800ab1a:	f000 b8a7 	b.w	800ac6c <__retarget_lock_acquire_recursive>
 800ab1e:	bf00      	nop
 800ab20:	20001ffe 	.word	0x20001ffe

0800ab24 <__sinit_lock_release>:
 800ab24:	4801      	ldr	r0, [pc, #4]	; (800ab2c <__sinit_lock_release+0x8>)
 800ab26:	f000 b8a2 	b.w	800ac6e <__retarget_lock_release_recursive>
 800ab2a:	bf00      	nop
 800ab2c:	20001ffe 	.word	0x20001ffe

0800ab30 <__sinit>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	4604      	mov	r4, r0
 800ab34:	f7ff fff0 	bl	800ab18 <__sinit_lock_acquire>
 800ab38:	69a3      	ldr	r3, [r4, #24]
 800ab3a:	b11b      	cbz	r3, 800ab44 <__sinit+0x14>
 800ab3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab40:	f7ff bff0 	b.w	800ab24 <__sinit_lock_release>
 800ab44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab48:	6523      	str	r3, [r4, #80]	; 0x50
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <__sinit+0x68>)
 800ab4c:	4a13      	ldr	r2, [pc, #76]	; (800ab9c <__sinit+0x6c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab52:	42a3      	cmp	r3, r4
 800ab54:	bf04      	itt	eq
 800ab56:	2301      	moveq	r3, #1
 800ab58:	61a3      	streq	r3, [r4, #24]
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 f820 	bl	800aba0 <__sfp>
 800ab60:	6060      	str	r0, [r4, #4]
 800ab62:	4620      	mov	r0, r4
 800ab64:	f000 f81c 	bl	800aba0 <__sfp>
 800ab68:	60a0      	str	r0, [r4, #8]
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 f818 	bl	800aba0 <__sfp>
 800ab70:	2200      	movs	r2, #0
 800ab72:	60e0      	str	r0, [r4, #12]
 800ab74:	2104      	movs	r1, #4
 800ab76:	6860      	ldr	r0, [r4, #4]
 800ab78:	f7ff ff82 	bl	800aa80 <std>
 800ab7c:	68a0      	ldr	r0, [r4, #8]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	2109      	movs	r1, #9
 800ab82:	f7ff ff7d 	bl	800aa80 <std>
 800ab86:	68e0      	ldr	r0, [r4, #12]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	2112      	movs	r1, #18
 800ab8c:	f7ff ff78 	bl	800aa80 <std>
 800ab90:	2301      	movs	r3, #1
 800ab92:	61a3      	str	r3, [r4, #24]
 800ab94:	e7d2      	b.n	800ab3c <__sinit+0xc>
 800ab96:	bf00      	nop
 800ab98:	0800b13c 	.word	0x0800b13c
 800ab9c:	0800aac9 	.word	0x0800aac9

0800aba0 <__sfp>:
 800aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba2:	4607      	mov	r7, r0
 800aba4:	f7ff ffac 	bl	800ab00 <__sfp_lock_acquire>
 800aba8:	4b1e      	ldr	r3, [pc, #120]	; (800ac24 <__sfp+0x84>)
 800abaa:	681e      	ldr	r6, [r3, #0]
 800abac:	69b3      	ldr	r3, [r6, #24]
 800abae:	b913      	cbnz	r3, 800abb6 <__sfp+0x16>
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7ff ffbd 	bl	800ab30 <__sinit>
 800abb6:	3648      	adds	r6, #72	; 0x48
 800abb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	d503      	bpl.n	800abc8 <__sfp+0x28>
 800abc0:	6833      	ldr	r3, [r6, #0]
 800abc2:	b30b      	cbz	r3, 800ac08 <__sfp+0x68>
 800abc4:	6836      	ldr	r6, [r6, #0]
 800abc6:	e7f7      	b.n	800abb8 <__sfp+0x18>
 800abc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abcc:	b9d5      	cbnz	r5, 800ac04 <__sfp+0x64>
 800abce:	4b16      	ldr	r3, [pc, #88]	; (800ac28 <__sfp+0x88>)
 800abd0:	60e3      	str	r3, [r4, #12]
 800abd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abd6:	6665      	str	r5, [r4, #100]	; 0x64
 800abd8:	f000 f847 	bl	800ac6a <__retarget_lock_init_recursive>
 800abdc:	f7ff ff96 	bl	800ab0c <__sfp_lock_release>
 800abe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abe8:	6025      	str	r5, [r4, #0]
 800abea:	61a5      	str	r5, [r4, #24]
 800abec:	2208      	movs	r2, #8
 800abee:	4629      	mov	r1, r5
 800abf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abf4:	f7fe ff06 	bl	8009a04 <memset>
 800abf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac00:	4620      	mov	r0, r4
 800ac02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac04:	3468      	adds	r4, #104	; 0x68
 800ac06:	e7d9      	b.n	800abbc <__sfp+0x1c>
 800ac08:	2104      	movs	r1, #4
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	f7ff ff62 	bl	800aad4 <__sfmoreglue>
 800ac10:	4604      	mov	r4, r0
 800ac12:	6030      	str	r0, [r6, #0]
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d1d5      	bne.n	800abc4 <__sfp+0x24>
 800ac18:	f7ff ff78 	bl	800ab0c <__sfp_lock_release>
 800ac1c:	230c      	movs	r3, #12
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	e7ee      	b.n	800ac00 <__sfp+0x60>
 800ac22:	bf00      	nop
 800ac24:	0800b13c 	.word	0x0800b13c
 800ac28:	ffff0001 	.word	0xffff0001

0800ac2c <_fwalk_reent>:
 800ac2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac30:	4606      	mov	r6, r0
 800ac32:	4688      	mov	r8, r1
 800ac34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac38:	2700      	movs	r7, #0
 800ac3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac3e:	f1b9 0901 	subs.w	r9, r9, #1
 800ac42:	d505      	bpl.n	800ac50 <_fwalk_reent+0x24>
 800ac44:	6824      	ldr	r4, [r4, #0]
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d1f7      	bne.n	800ac3a <_fwalk_reent+0xe>
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac50:	89ab      	ldrh	r3, [r5, #12]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d907      	bls.n	800ac66 <_fwalk_reent+0x3a>
 800ac56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	d003      	beq.n	800ac66 <_fwalk_reent+0x3a>
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4630      	mov	r0, r6
 800ac62:	47c0      	blx	r8
 800ac64:	4307      	orrs	r7, r0
 800ac66:	3568      	adds	r5, #104	; 0x68
 800ac68:	e7e9      	b.n	800ac3e <_fwalk_reent+0x12>

0800ac6a <__retarget_lock_init_recursive>:
 800ac6a:	4770      	bx	lr

0800ac6c <__retarget_lock_acquire_recursive>:
 800ac6c:	4770      	bx	lr

0800ac6e <__retarget_lock_release_recursive>:
 800ac6e:	4770      	bx	lr

0800ac70 <__swhatbuf_r>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	460e      	mov	r6, r1
 800ac74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	b096      	sub	sp, #88	; 0x58
 800ac7c:	4614      	mov	r4, r2
 800ac7e:	461d      	mov	r5, r3
 800ac80:	da08      	bge.n	800ac94 <__swhatbuf_r+0x24>
 800ac82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	602a      	str	r2, [r5, #0]
 800ac8a:	061a      	lsls	r2, r3, #24
 800ac8c:	d410      	bmi.n	800acb0 <__swhatbuf_r+0x40>
 800ac8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac92:	e00e      	b.n	800acb2 <__swhatbuf_r+0x42>
 800ac94:	466a      	mov	r2, sp
 800ac96:	f000 f951 	bl	800af3c <_fstat_r>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	dbf1      	blt.n	800ac82 <__swhatbuf_r+0x12>
 800ac9e:	9a01      	ldr	r2, [sp, #4]
 800aca0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aca4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aca8:	425a      	negs	r2, r3
 800acaa:	415a      	adcs	r2, r3
 800acac:	602a      	str	r2, [r5, #0]
 800acae:	e7ee      	b.n	800ac8e <__swhatbuf_r+0x1e>
 800acb0:	2340      	movs	r3, #64	; 0x40
 800acb2:	2000      	movs	r0, #0
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	b016      	add	sp, #88	; 0x58
 800acb8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acbc <__smakebuf_r>:
 800acbc:	898b      	ldrh	r3, [r1, #12]
 800acbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acc0:	079d      	lsls	r5, r3, #30
 800acc2:	4606      	mov	r6, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	d507      	bpl.n	800acd8 <__smakebuf_r+0x1c>
 800acc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	6123      	str	r3, [r4, #16]
 800acd0:	2301      	movs	r3, #1
 800acd2:	6163      	str	r3, [r4, #20]
 800acd4:	b002      	add	sp, #8
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	ab01      	add	r3, sp, #4
 800acda:	466a      	mov	r2, sp
 800acdc:	f7ff ffc8 	bl	800ac70 <__swhatbuf_r>
 800ace0:	9900      	ldr	r1, [sp, #0]
 800ace2:	4605      	mov	r5, r0
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7ff f873 	bl	8009dd0 <_malloc_r>
 800acea:	b948      	cbnz	r0, 800ad00 <__smakebuf_r+0x44>
 800acec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf0:	059a      	lsls	r2, r3, #22
 800acf2:	d4ef      	bmi.n	800acd4 <__smakebuf_r+0x18>
 800acf4:	f023 0303 	bic.w	r3, r3, #3
 800acf8:	f043 0302 	orr.w	r3, r3, #2
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	e7e3      	b.n	800acc8 <__smakebuf_r+0xc>
 800ad00:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <__smakebuf_r+0x7c>)
 800ad02:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	6020      	str	r0, [r4, #0]
 800ad08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad0c:	81a3      	strh	r3, [r4, #12]
 800ad0e:	9b00      	ldr	r3, [sp, #0]
 800ad10:	6163      	str	r3, [r4, #20]
 800ad12:	9b01      	ldr	r3, [sp, #4]
 800ad14:	6120      	str	r0, [r4, #16]
 800ad16:	b15b      	cbz	r3, 800ad30 <__smakebuf_r+0x74>
 800ad18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f000 f91f 	bl	800af60 <_isatty_r>
 800ad22:	b128      	cbz	r0, 800ad30 <__smakebuf_r+0x74>
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	f023 0303 	bic.w	r3, r3, #3
 800ad2a:	f043 0301 	orr.w	r3, r3, #1
 800ad2e:	81a3      	strh	r3, [r4, #12]
 800ad30:	89a0      	ldrh	r0, [r4, #12]
 800ad32:	4305      	orrs	r5, r0
 800ad34:	81a5      	strh	r5, [r4, #12]
 800ad36:	e7cd      	b.n	800acd4 <__smakebuf_r+0x18>
 800ad38:	0800aac9 	.word	0x0800aac9

0800ad3c <memmove>:
 800ad3c:	4288      	cmp	r0, r1
 800ad3e:	b510      	push	{r4, lr}
 800ad40:	eb01 0402 	add.w	r4, r1, r2
 800ad44:	d902      	bls.n	800ad4c <memmove+0x10>
 800ad46:	4284      	cmp	r4, r0
 800ad48:	4623      	mov	r3, r4
 800ad4a:	d807      	bhi.n	800ad5c <memmove+0x20>
 800ad4c:	1e43      	subs	r3, r0, #1
 800ad4e:	42a1      	cmp	r1, r4
 800ad50:	d008      	beq.n	800ad64 <memmove+0x28>
 800ad52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad5a:	e7f8      	b.n	800ad4e <memmove+0x12>
 800ad5c:	4402      	add	r2, r0
 800ad5e:	4601      	mov	r1, r0
 800ad60:	428a      	cmp	r2, r1
 800ad62:	d100      	bne.n	800ad66 <memmove+0x2a>
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad6e:	e7f7      	b.n	800ad60 <memmove+0x24>

0800ad70 <__malloc_lock>:
 800ad70:	4801      	ldr	r0, [pc, #4]	; (800ad78 <__malloc_lock+0x8>)
 800ad72:	f7ff bf7b 	b.w	800ac6c <__retarget_lock_acquire_recursive>
 800ad76:	bf00      	nop
 800ad78:	20001ffc 	.word	0x20001ffc

0800ad7c <__malloc_unlock>:
 800ad7c:	4801      	ldr	r0, [pc, #4]	; (800ad84 <__malloc_unlock+0x8>)
 800ad7e:	f7ff bf76 	b.w	800ac6e <__retarget_lock_release_recursive>
 800ad82:	bf00      	nop
 800ad84:	20001ffc 	.word	0x20001ffc

0800ad88 <_realloc_r>:
 800ad88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	4680      	mov	r8, r0
 800ad8e:	4614      	mov	r4, r2
 800ad90:	460e      	mov	r6, r1
 800ad92:	b921      	cbnz	r1, 800ad9e <_realloc_r+0x16>
 800ad94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad98:	4611      	mov	r1, r2
 800ad9a:	f7ff b819 	b.w	8009dd0 <_malloc_r>
 800ad9e:	b92a      	cbnz	r2, 800adac <_realloc_r+0x24>
 800ada0:	f7fe ffaa 	bl	8009cf8 <_free_r>
 800ada4:	4625      	mov	r5, r4
 800ada6:	4628      	mov	r0, r5
 800ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adac:	f000 f8fa 	bl	800afa4 <_malloc_usable_size_r>
 800adb0:	4284      	cmp	r4, r0
 800adb2:	4607      	mov	r7, r0
 800adb4:	d802      	bhi.n	800adbc <_realloc_r+0x34>
 800adb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adba:	d812      	bhi.n	800ade2 <_realloc_r+0x5a>
 800adbc:	4621      	mov	r1, r4
 800adbe:	4640      	mov	r0, r8
 800adc0:	f7ff f806 	bl	8009dd0 <_malloc_r>
 800adc4:	4605      	mov	r5, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d0ed      	beq.n	800ada6 <_realloc_r+0x1e>
 800adca:	42bc      	cmp	r4, r7
 800adcc:	4622      	mov	r2, r4
 800adce:	4631      	mov	r1, r6
 800add0:	bf28      	it	cs
 800add2:	463a      	movcs	r2, r7
 800add4:	f7fe fe08 	bl	80099e8 <memcpy>
 800add8:	4631      	mov	r1, r6
 800adda:	4640      	mov	r0, r8
 800addc:	f7fe ff8c 	bl	8009cf8 <_free_r>
 800ade0:	e7e1      	b.n	800ada6 <_realloc_r+0x1e>
 800ade2:	4635      	mov	r5, r6
 800ade4:	e7df      	b.n	800ada6 <_realloc_r+0x1e>

0800ade6 <_raise_r>:
 800ade6:	291f      	cmp	r1, #31
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4604      	mov	r4, r0
 800adec:	460d      	mov	r5, r1
 800adee:	d904      	bls.n	800adfa <_raise_r+0x14>
 800adf0:	2316      	movs	r3, #22
 800adf2:	6003      	str	r3, [r0, #0]
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adf8:	bd38      	pop	{r3, r4, r5, pc}
 800adfa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adfc:	b112      	cbz	r2, 800ae04 <_raise_r+0x1e>
 800adfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae02:	b94b      	cbnz	r3, 800ae18 <_raise_r+0x32>
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 f831 	bl	800ae6c <_getpid_r>
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	4601      	mov	r1, r0
 800ae0e:	4620      	mov	r0, r4
 800ae10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae14:	f000 b818 	b.w	800ae48 <_kill_r>
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d00a      	beq.n	800ae32 <_raise_r+0x4c>
 800ae1c:	1c59      	adds	r1, r3, #1
 800ae1e:	d103      	bne.n	800ae28 <_raise_r+0x42>
 800ae20:	2316      	movs	r3, #22
 800ae22:	6003      	str	r3, [r0, #0]
 800ae24:	2001      	movs	r0, #1
 800ae26:	e7e7      	b.n	800adf8 <_raise_r+0x12>
 800ae28:	2400      	movs	r4, #0
 800ae2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae2e:	4628      	mov	r0, r5
 800ae30:	4798      	blx	r3
 800ae32:	2000      	movs	r0, #0
 800ae34:	e7e0      	b.n	800adf8 <_raise_r+0x12>
	...

0800ae38 <raise>:
 800ae38:	4b02      	ldr	r3, [pc, #8]	; (800ae44 <raise+0xc>)
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	f7ff bfd2 	b.w	800ade6 <_raise_r>
 800ae42:	bf00      	nop
 800ae44:	20000024 	.word	0x20000024

0800ae48 <_kill_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d07      	ldr	r5, [pc, #28]	; (800ae68 <_kill_r+0x20>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	4611      	mov	r1, r2
 800ae54:	602b      	str	r3, [r5, #0]
 800ae56:	f7f6 fa0b 	bl	8001270 <_kill>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d102      	bne.n	800ae64 <_kill_r+0x1c>
 800ae5e:	682b      	ldr	r3, [r5, #0]
 800ae60:	b103      	cbz	r3, 800ae64 <_kill_r+0x1c>
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	bd38      	pop	{r3, r4, r5, pc}
 800ae66:	bf00      	nop
 800ae68:	20002000 	.word	0x20002000

0800ae6c <_getpid_r>:
 800ae6c:	f7f6 b9f8 	b.w	8001260 <_getpid>

0800ae70 <__sread>:
 800ae70:	b510      	push	{r4, lr}
 800ae72:	460c      	mov	r4, r1
 800ae74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae78:	f000 f89c 	bl	800afb4 <_read_r>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	bfab      	itete	ge
 800ae80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae82:	89a3      	ldrhlt	r3, [r4, #12]
 800ae84:	181b      	addge	r3, r3, r0
 800ae86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae8a:	bfac      	ite	ge
 800ae8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae8e:	81a3      	strhlt	r3, [r4, #12]
 800ae90:	bd10      	pop	{r4, pc}

0800ae92 <__swrite>:
 800ae92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae96:	461f      	mov	r7, r3
 800ae98:	898b      	ldrh	r3, [r1, #12]
 800ae9a:	05db      	lsls	r3, r3, #23
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	4616      	mov	r6, r2
 800aea2:	d505      	bpl.n	800aeb0 <__swrite+0x1e>
 800aea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea8:	2302      	movs	r3, #2
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f000 f868 	bl	800af80 <_lseek_r>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	4632      	mov	r2, r6
 800aebe:	463b      	mov	r3, r7
 800aec0:	4628      	mov	r0, r5
 800aec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aec6:	f000 b817 	b.w	800aef8 <_write_r>

0800aeca <__sseek>:
 800aeca:	b510      	push	{r4, lr}
 800aecc:	460c      	mov	r4, r1
 800aece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed2:	f000 f855 	bl	800af80 <_lseek_r>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	bf15      	itete	ne
 800aedc:	6560      	strne	r0, [r4, #84]	; 0x54
 800aede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aee6:	81a3      	strheq	r3, [r4, #12]
 800aee8:	bf18      	it	ne
 800aeea:	81a3      	strhne	r3, [r4, #12]
 800aeec:	bd10      	pop	{r4, pc}

0800aeee <__sclose>:
 800aeee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef2:	f000 b813 	b.w	800af1c <_close_r>
	...

0800aef8 <_write_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d07      	ldr	r5, [pc, #28]	; (800af18 <_write_r+0x20>)
 800aefc:	4604      	mov	r4, r0
 800aefe:	4608      	mov	r0, r1
 800af00:	4611      	mov	r1, r2
 800af02:	2200      	movs	r2, #0
 800af04:	602a      	str	r2, [r5, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f7f6 f9e9 	bl	80012de <_write>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_write_r+0x1e>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_write_r+0x1e>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	20002000 	.word	0x20002000

0800af1c <_close_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4d06      	ldr	r5, [pc, #24]	; (800af38 <_close_r+0x1c>)
 800af20:	2300      	movs	r3, #0
 800af22:	4604      	mov	r4, r0
 800af24:	4608      	mov	r0, r1
 800af26:	602b      	str	r3, [r5, #0]
 800af28:	f7f6 f9f5 	bl	8001316 <_close>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d102      	bne.n	800af36 <_close_r+0x1a>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	b103      	cbz	r3, 800af36 <_close_r+0x1a>
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	20002000 	.word	0x20002000

0800af3c <_fstat_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d07      	ldr	r5, [pc, #28]	; (800af5c <_fstat_r+0x20>)
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	4611      	mov	r1, r2
 800af48:	602b      	str	r3, [r5, #0]
 800af4a:	f7f6 f9f0 	bl	800132e <_fstat>
 800af4e:	1c43      	adds	r3, r0, #1
 800af50:	d102      	bne.n	800af58 <_fstat_r+0x1c>
 800af52:	682b      	ldr	r3, [r5, #0]
 800af54:	b103      	cbz	r3, 800af58 <_fstat_r+0x1c>
 800af56:	6023      	str	r3, [r4, #0]
 800af58:	bd38      	pop	{r3, r4, r5, pc}
 800af5a:	bf00      	nop
 800af5c:	20002000 	.word	0x20002000

0800af60 <_isatty_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d06      	ldr	r5, [pc, #24]	; (800af7c <_isatty_r+0x1c>)
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	4608      	mov	r0, r1
 800af6a:	602b      	str	r3, [r5, #0]
 800af6c:	f7f6 f9ef 	bl	800134e <_isatty>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <_isatty_r+0x1a>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b103      	cbz	r3, 800af7a <_isatty_r+0x1a>
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	20002000 	.word	0x20002000

0800af80 <_lseek_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4d07      	ldr	r5, [pc, #28]	; (800afa0 <_lseek_r+0x20>)
 800af84:	4604      	mov	r4, r0
 800af86:	4608      	mov	r0, r1
 800af88:	4611      	mov	r1, r2
 800af8a:	2200      	movs	r2, #0
 800af8c:	602a      	str	r2, [r5, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	f7f6 f9e8 	bl	8001364 <_lseek>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_lseek_r+0x1e>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_lseek_r+0x1e>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	20002000 	.word	0x20002000

0800afa4 <_malloc_usable_size_r>:
 800afa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa8:	1f18      	subs	r0, r3, #4
 800afaa:	2b00      	cmp	r3, #0
 800afac:	bfbc      	itt	lt
 800afae:	580b      	ldrlt	r3, [r1, r0]
 800afb0:	18c0      	addlt	r0, r0, r3
 800afb2:	4770      	bx	lr

0800afb4 <_read_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d07      	ldr	r5, [pc, #28]	; (800afd4 <_read_r+0x20>)
 800afb8:	4604      	mov	r4, r0
 800afba:	4608      	mov	r0, r1
 800afbc:	4611      	mov	r1, r2
 800afbe:	2200      	movs	r2, #0
 800afc0:	602a      	str	r2, [r5, #0]
 800afc2:	461a      	mov	r2, r3
 800afc4:	f7f6 f96e 	bl	80012a4 <_read>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_read_r+0x1e>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_read_r+0x1e>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	20002000 	.word	0x20002000

0800afd8 <_init>:
 800afd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afda:	bf00      	nop
 800afdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afde:	bc08      	pop	{r3}
 800afe0:	469e      	mov	lr, r3
 800afe2:	4770      	bx	lr

0800afe4 <_fini>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	bf00      	nop
 800afe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afea:	bc08      	pop	{r3}
 800afec:	469e      	mov	lr, r3
 800afee:	4770      	bx	lr
