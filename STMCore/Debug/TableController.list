
TableController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c210  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c790  0800c790  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800c790  0800c790  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c790  0800c790  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c790  0800c790  0001c790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c794  0800c794  0001c794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00001f8c  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002014  20002014  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000277ec  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c17  00000000  00000000  000478a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e70  00000000  00000000  0004c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c88  00000000  00000000  0004e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022aec  00000000  00000000  0004ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026ea9  00000000  00000000  00072aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20eb  00000000  00000000  0009994d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ba38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d98  00000000  00000000  0016ba88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c388 	.word	0x0800c388

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c388 	.word	0x0800c388

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_UART_RxCpltCallback>:
extern osSemaphoreId_t diffRxDataHandle;
extern char data_c;
extern char data[150];
extern uint8_t data_c_idx;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
	if (huart->Instance == huart2.Instance) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <HAL_UART_RxCpltCallback+0x68>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	429a      	cmp	r2, r3
 8000292:	d124      	bne.n	80002de <HAL_UART_RxCpltCallback+0x5e>
	        data[data_c_idx] = data_c;
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <HAL_UART_RxCpltCallback+0x6c>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <HAL_UART_RxCpltCallback+0x70>)
 800029c:	7819      	ldrb	r1, [r3, #0]
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <HAL_UART_RxCpltCallback+0x74>)
 80002a0:	5499      	strb	r1, [r3, r2]
	        if (data_c == '\r') {
 80002a2:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <HAL_UART_RxCpltCallback+0x70>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b0d      	cmp	r3, #13
 80002a8:	d10e      	bne.n	80002c8 <HAL_UART_RxCpltCallback+0x48>
	            data[data_c_idx] = '\0';
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <HAL_UART_RxCpltCallback+0x6c>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	461a      	mov	r2, r3
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <HAL_UART_RxCpltCallback+0x74>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	5499      	strb	r1, [r3, r2]
	            data_c_idx = 0;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <HAL_UART_RxCpltCallback+0x6c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
	            osSemaphoreRelease(diffRxDataHandle);
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <HAL_UART_RxCpltCallback+0x78>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f007 fc61 	bl	8007b88 <osSemaphoreRelease>
 80002c6:	e005      	b.n	80002d4 <HAL_UART_RxCpltCallback+0x54>
	        } else
	        	data_c_idx++;
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <HAL_UART_RxCpltCallback+0x6c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <HAL_UART_RxCpltCallback+0x6c>)
 80002d2:	701a      	strb	r2, [r3, #0]

	        HAL_UART_Receive_IT(&huart2, &data_c, 1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	4906      	ldr	r1, [pc, #24]	; (80002f0 <HAL_UART_RxCpltCallback+0x70>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <HAL_UART_RxCpltCallback+0x68>)
 80002da:	f005 ff63 	bl	80061a4 <HAL_UART_Receive_IT>
	}
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000244 	.word	0x20000244
 80002ec:	20000667 	.word	0x20000667
 80002f0:	20000666 	.word	0x20000666
 80002f4:	200005d0 	.word	0x200005d0
 80002f8:	200005c8 	.word	0x200005c8

080002fc <getMessageType>:
#include "Handler.h"

extern UART_HandleTypeDef huart2;

MessageType getMessageType(const char* message) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
    if (strncmp(message, "LED#", 4) == 0)
 8000304:	2204      	movs	r2, #4
 8000306:	4915      	ldr	r1, [pc, #84]	; (800035c <getMessageType+0x60>)
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f00a fd83 	bl	800ae14 <strncmp>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d101      	bne.n	8000318 <getMessageType+0x1c>
        return MESSAGE_TYPE_LED;
 8000314:	2300      	movs	r3, #0
 8000316:	e01d      	b.n	8000354 <getMessageType+0x58>
    else if (strncmp(message, "PIR#", 4) == 0)
 8000318:	2204      	movs	r2, #4
 800031a:	4911      	ldr	r1, [pc, #68]	; (8000360 <getMessageType+0x64>)
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f00a fd79 	bl	800ae14 <strncmp>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <getMessageType+0x30>
        return MESSAGE_TYPE_PIR;
 8000328:	2301      	movs	r3, #1
 800032a:	e013      	b.n	8000354 <getMessageType+0x58>
    else if (strncmp(message, "AVOID#", 6) == 0 || strncmp(message, "AVOIDE#", 7) == 0)
 800032c:	2206      	movs	r2, #6
 800032e:	490d      	ldr	r1, [pc, #52]	; (8000364 <getMessageType+0x68>)
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f00a fd6f 	bl	800ae14 <strncmp>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d007      	beq.n	800034c <getMessageType+0x50>
 800033c:	2207      	movs	r2, #7
 800033e:	490a      	ldr	r1, [pc, #40]	; (8000368 <getMessageType+0x6c>)
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f00a fd67 	bl	800ae14 <strncmp>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d101      	bne.n	8000350 <getMessageType+0x54>
        return MESSAGE_TYPE_AVOID;
 800034c:	2302      	movs	r3, #2
 800034e:	e001      	b.n	8000354 <getMessageType+0x58>
    else
        return MESSAGE_TYPE_INVALID;
 8000350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000354:	4618      	mov	r0, r3
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	0800c3a0 	.word	0x0800c3a0
 8000360:	0800c3a8 	.word	0x0800c3a8
 8000364:	0800c3b0 	.word	0x0800c3b0
 8000368:	0800c3b8 	.word	0x0800c3b8

0800036c <parseLedMessage>:

int parseLedMessage(char* message, Message* ledMessage) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	if (strncmp(message, "LED#", 4) != 0)
 8000376:	2204      	movs	r2, #4
 8000378:	491b      	ldr	r1, [pc, #108]	; (80003e8 <parseLedMessage+0x7c>)
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f00a fd4a 	bl	800ae14 <strncmp>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d002      	beq.n	800038c <parseLedMessage+0x20>
		return -1; // Invalid message
 8000386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800038a:	e028      	b.n	80003de <parseLedMessage+0x72>

	ledMessage->type = MESSAGE_TYPE_LED;
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]

	// Extract the LED number
	char* token = strtok(message + 4, ":");
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3304      	adds	r3, #4
 8000396:	4915      	ldr	r1, [pc, #84]	; (80003ec <parseLedMessage+0x80>)
 8000398:	4618      	mov	r0, r3
 800039a:	f00a fd65 	bl	800ae68 <strtok>
 800039e:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d102      	bne.n	80003ac <parseLedMessage+0x40>
		return -1; // Invalid message
 80003a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003aa:	e018      	b.n	80003de <parseLedMessage+0x72>

	ledMessage->mNumber = atoi(token);
 80003ac:	68f8      	ldr	r0, [r7, #12]
 80003ae:	f00a fcc5 	bl	800ad3c <atoi>
 80003b2:	4603      	mov	r3, r0
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	705a      	strb	r2, [r3, #1]

	// Extract the color
	token = strtok(NULL, "#");
 80003ba:	490d      	ldr	r1, [pc, #52]	; (80003f0 <parseLedMessage+0x84>)
 80003bc:	2000      	movs	r0, #0
 80003be:	f00a fd53 	bl	800ae68 <strtok>
 80003c2:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d102      	bne.n	80003d0 <parseLedMessage+0x64>
		return -1; // Invalid message
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003ce:	e006      	b.n	80003de <parseLedMessage+0x72>

	strcpy(ledMessage->message, token);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	3302      	adds	r3, #2
 80003d4:	68f9      	ldr	r1, [r7, #12]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f00a fd14 	bl	800ae04 <strcpy>

	return 0; // Valid message
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	0800c3a0 	.word	0x0800c3a0
 80003ec:	0800c3c0 	.word	0x0800c3c0
 80003f0:	0800c3c4 	.word	0x0800c3c4

080003f4 <parsePirMessage>:

int parsePirMessage(char* message, Message* pirMessage) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
	if (strncmp(message, "PIR#", 4) != 0)
 80003fe:	2204      	movs	r2, #4
 8000400:	491b      	ldr	r1, [pc, #108]	; (8000470 <parsePirMessage+0x7c>)
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f00a fd06 	bl	800ae14 <strncmp>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <parsePirMessage+0x20>
		return -1; // Invalid message
 800040e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000412:	e028      	b.n	8000466 <parsePirMessage+0x72>

	pirMessage->type = MESSAGE_TYPE_PIR;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]

	// Extract the PIR number
	char* token = strtok(message + 4, ":");
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	3304      	adds	r3, #4
 800041e:	4915      	ldr	r1, [pc, #84]	; (8000474 <parsePirMessage+0x80>)
 8000420:	4618      	mov	r0, r3
 8000422:	f00a fd21 	bl	800ae68 <strtok>
 8000426:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d102      	bne.n	8000434 <parsePirMessage+0x40>
		return -1; // Invalid message
 800042e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000432:	e018      	b.n	8000466 <parsePirMessage+0x72>

	pirMessage->mNumber = atoi(token);
 8000434:	68f8      	ldr	r0, [r7, #12]
 8000436:	f00a fc81 	bl	800ad3c <atoi>
 800043a:	4603      	mov	r3, r0
 800043c:	b2da      	uxtb	r2, r3
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	705a      	strb	r2, [r3, #1]

	// Extract the action
	token = strtok(NULL, "#");
 8000442:	490d      	ldr	r1, [pc, #52]	; (8000478 <parsePirMessage+0x84>)
 8000444:	2000      	movs	r0, #0
 8000446:	f00a fd0f 	bl	800ae68 <strtok>
 800044a:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d102      	bne.n	8000458 <parsePirMessage+0x64>
		return -1; // Invalid message
 8000452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000456:	e006      	b.n	8000466 <parsePirMessage+0x72>

	strcpy(pirMessage->message, token);
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	3302      	adds	r3, #2
 800045c:	68f9      	ldr	r1, [r7, #12]
 800045e:	4618      	mov	r0, r3
 8000460:	f00a fcd0 	bl	800ae04 <strcpy>

	return 0; // Valid message
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	0800c3a8 	.word	0x0800c3a8
 8000474:	0800c3c0 	.word	0x0800c3c0
 8000478:	0800c3c4 	.word	0x0800c3c4

0800047c <parseAvoidMessage>:

int parseAvoidMessage(char* message, Message* avoidMessage) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	if ((strncmp(message, "AVOID#", 6) != 0) && (strncmp(message, "AVOIDE#", 7) != 0))
 8000486:	2206      	movs	r2, #6
 8000488:	491f      	ldr	r1, [pc, #124]	; (8000508 <parseAvoidMessage+0x8c>)
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f00a fcc2 	bl	800ae14 <strncmp>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d00a      	beq.n	80004ac <parseAvoidMessage+0x30>
 8000496:	2207      	movs	r2, #7
 8000498:	491c      	ldr	r1, [pc, #112]	; (800050c <parseAvoidMessage+0x90>)
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f00a fcba 	bl	800ae14 <strncmp>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d002      	beq.n	80004ac <parseAvoidMessage+0x30>
		return -1; // Invalid message
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004aa:	e028      	b.n	80004fe <parseAvoidMessage+0x82>

	avoidMessage->type = MESSAGE_TYPE_AVOID;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	2202      	movs	r2, #2
 80004b0:	701a      	strb	r2, [r3, #0]

	// Extract the AVOID number
	char* token = strtok(message + 6, ":");
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3306      	adds	r3, #6
 80004b6:	4916      	ldr	r1, [pc, #88]	; (8000510 <parseAvoidMessage+0x94>)
 80004b8:	4618      	mov	r0, r3
 80004ba:	f00a fcd5 	bl	800ae68 <strtok>
 80004be:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d102      	bne.n	80004cc <parseAvoidMessage+0x50>
		return -1; // Invalid message
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ca:	e018      	b.n	80004fe <parseAvoidMessage+0x82>

	avoidMessage->mNumber = atoi(token);
 80004cc:	68f8      	ldr	r0, [r7, #12]
 80004ce:	f00a fc35 	bl	800ad3c <atoi>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	705a      	strb	r2, [r3, #1]

	// Extract the action
	token = strtok(NULL, "#");
 80004da:	490e      	ldr	r1, [pc, #56]	; (8000514 <parseAvoidMessage+0x98>)
 80004dc:	2000      	movs	r0, #0
 80004de:	f00a fcc3 	bl	800ae68 <strtok>
 80004e2:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d102      	bne.n	80004f0 <parseAvoidMessage+0x74>
		return -1; // Invalid message
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	e006      	b.n	80004fe <parseAvoidMessage+0x82>

	strcpy(avoidMessage->message, token);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	3302      	adds	r3, #2
 80004f4:	68f9      	ldr	r1, [r7, #12]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f00a fc84 	bl	800ae04 <strcpy>

	return 0; // Valid message
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	0800c3b0 	.word	0x0800c3b0
 800050c:	0800c3b8 	.word	0x0800c3b8
 8000510:	0800c3c0 	.word	0x0800c3c0
 8000514:	0800c3c4 	.word	0x0800c3c4

08000518 <parseMessage>:

int parseMessage(char* message, Message* messageStruct) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
    MessageType messageType = getMessageType(message);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff feea 	bl	80002fc <getMessageType>
 8000528:	4603      	mov	r3, r0
 800052a:	73fb      	strb	r3, [r7, #15]
    switch (messageType) {
 800052c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d012      	beq.n	800055a <parseMessage+0x42>
 8000534:	2b02      	cmp	r3, #2
 8000536:	dc16      	bgt.n	8000566 <parseMessage+0x4e>
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <parseMessage+0x2a>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d006      	beq.n	800054e <parseMessage+0x36>
 8000540:	e011      	b.n	8000566 <parseMessage+0x4e>
        case MESSAGE_TYPE_LED:
            return parseLedMessage(message, messageStruct);
 8000542:	6839      	ldr	r1, [r7, #0]
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ff11 	bl	800036c <parseLedMessage>
 800054a:	4603      	mov	r3, r0
 800054c:	e00d      	b.n	800056a <parseMessage+0x52>
        case MESSAGE_TYPE_PIR:
            return parsePirMessage(message, messageStruct);
 800054e:	6839      	ldr	r1, [r7, #0]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ff4f 	bl	80003f4 <parsePirMessage>
 8000556:	4603      	mov	r3, r0
 8000558:	e007      	b.n	800056a <parseMessage+0x52>
        case MESSAGE_TYPE_AVOID:
            return parseAvoidMessage(message, messageStruct);
 800055a:	6839      	ldr	r1, [r7, #0]
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff ff8d 	bl	800047c <parseAvoidMessage>
 8000562:	4603      	mov	r3, r0
 8000564:	e001      	b.n	800056a <parseMessage+0x52>
        default:
            return -1; // Invalid message
 8000566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800056a:	4618      	mov	r0, r3
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <addToHandler>:
//	strcpy(ledMessage->color, token);
//
//	return 0; // Valid message
//}

void addToHandler(char data[]) {
 8000572:	b580      	push	{r7, lr}
 8000574:	b08c      	sub	sp, #48	; 0x30
 8000576:	af02      	add	r7, sp, #8
 8000578:	6078      	str	r0, [r7, #4]
	Message message;
	int parse = parseMessage(data, &message);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff ffc9 	bl	8000518 <parseMessage>
 8000586:	6238      	str	r0, [r7, #32]

	if (parse == -1) {
 8000588:	6a3b      	ldr	r3, [r7, #32]
 800058a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800058e:	d103      	bne.n	8000598 <addToHandler+0x26>
		sendACK(ACK_INVALID);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 f82d 	bl	80005f0 <sendACK>
		return;
 8000596:	e028      	b.n	80005ea <addToHandler+0x78>
	}

	int funcStat;

	switch (message.type) {
 8000598:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d010      	beq.n	80005c2 <addToHandler+0x50>
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	dc10      	bgt.n	80005c6 <addToHandler+0x54>
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <addToHandler+0x3c>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00e      	beq.n	80005ca <addToHandler+0x58>
		case MESSAGE_TYPE_AVOID:
			break;
		case MESSAGE_TYPE_PIR:
			break;
		default:
			break;
 80005ac:	e00b      	b.n	80005c6 <addToHandler+0x54>
			funcStat = doLEDFunc(message);
 80005ae:	7f3b      	ldrb	r3, [r7, #28]
 80005b0:	f88d 3000 	strb.w	r3, [sp]
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	f000 f86d 	bl	8000698 <doLEDFunc>
 80005be:	6278      	str	r0, [r7, #36]	; 0x24
			break;
 80005c0:	e004      	b.n	80005cc <addToHandler+0x5a>
			break;
 80005c2:	bf00      	nop
 80005c4:	e002      	b.n	80005cc <addToHandler+0x5a>
			break;
 80005c6:	bf00      	nop
 80005c8:	e000      	b.n	80005cc <addToHandler+0x5a>
			break;
 80005ca:	bf00      	nop
	}

	if (funcStat == -1) {
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005d2:	d103      	bne.n	80005dc <addToHandler+0x6a>
		sendACK(ACK_ERR);
 80005d4:	2002      	movs	r0, #2
 80005d6:	f000 f80b 	bl	80005f0 <sendACK>
		return;
 80005da:	e006      	b.n	80005ea <addToHandler+0x78>
	}

	if (message.type == MESSAGE_TYPE_LED)
 80005dc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <addToHandler+0x78>
		sendACK(ACK_OK);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 f803 	bl	80005f0 <sendACK>
}
 80005ea:	3728      	adds	r7, #40	; 0x28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <sendACK>:


void sendACK(enum ACK_TYPE ack) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	char tmp[20];
	int len;
	HAL_StatusTypeDef status;

	switch (ack) {
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d02b      	beq.n	8000658 <sendACK+0x68>
 8000600:	2b02      	cmp	r3, #2
 8000602:	dc3c      	bgt.n	800067e <sendACK+0x8e>
 8000604:	2b00      	cmp	r3, #0
 8000606:	d014      	beq.n	8000632 <sendACK+0x42>
 8000608:	2b01      	cmp	r3, #1
 800060a:	d138      	bne.n	800067e <sendACK+0x8e>
		case ACK_INVALID:
			len = sprintf(tmp, "INVALID\r");
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	491d      	ldr	r1, [pc, #116]	; (8000688 <sendACK+0x98>)
 8000612:	4618      	mov	r0, r3
 8000614:	f00a fbd6 	bl	800adc4 <siprintf>
 8000618:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 800061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061c:	b29a      	uxth	r2, r3
 800061e:	f107 010c 	add.w	r1, r7, #12
 8000622:	23fa      	movs	r3, #250	; 0xfa
 8000624:	4819      	ldr	r0, [pc, #100]	; (800068c <sendACK+0x9c>)
 8000626:	f005 fd33 	bl	8006090 <HAL_UART_Transmit>
 800062a:	4603      	mov	r3, r0
 800062c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//			else
//				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
			break;
 8000630:	e026      	b.n	8000680 <sendACK+0x90>
		case ACK_OK:
			len = sprintf(tmp, "OK\r");
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4916      	ldr	r1, [pc, #88]	; (8000690 <sendACK+0xa0>)
 8000638:	4618      	mov	r0, r3
 800063a:	f00a fbc3 	bl	800adc4 <siprintf>
 800063e:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	b29a      	uxth	r2, r3
 8000644:	f107 010c 	add.w	r1, r7, #12
 8000648:	23fa      	movs	r3, #250	; 0xfa
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <sendACK+0x9c>)
 800064c:	f005 fd20 	bl	8006090 <HAL_UART_Transmit>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			break;
 8000656:	e013      	b.n	8000680 <sendACK+0x90>
		case ACK_ERR:
			len = sprintf(tmp, "ERROR\r");
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	490d      	ldr	r1, [pc, #52]	; (8000694 <sendACK+0xa4>)
 800065e:	4618      	mov	r0, r3
 8000660:	f00a fbb0 	bl	800adc4 <siprintf>
 8000664:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	b29a      	uxth	r2, r3
 800066a:	f107 010c 	add.w	r1, r7, #12
 800066e:	23fa      	movs	r3, #250	; 0xfa
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <sendACK+0x9c>)
 8000672:	f005 fd0d 	bl	8006090 <HAL_UART_Transmit>
 8000676:	4603      	mov	r3, r0
 8000678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			break;
 800067c:	e000      	b.n	8000680 <sendACK+0x90>
		default:
			break;
 800067e:	bf00      	nop
	}
}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	0800c3c8 	.word	0x0800c3c8
 800068c:	20000244 	.word	0x20000244
 8000690:	0800c3d4 	.word	0x0800c3d4
 8000694:	0800c3d8 	.word	0x0800c3d8

08000698 <doLEDFunc>:
RGBTimer rgbLeds[] = {
		{1, &htim2},
		{2, &htim3}
};

int doLEDFunc(Message ledMessage) {
 8000698:	b084      	sub	sp, #16
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	f107 0c18 	add.w	ip, r7, #24
 80006a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	enum LED_COLOR color;
	if (strstr(ledMessage.message, "GREEN"))
 80006a8:	f107 031a 	add.w	r3, r7, #26
 80006ac:	493f      	ldr	r1, [pc, #252]	; (80007ac <doLEDFunc+0x114>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f00a fbc4 	bl	800ae3c <strstr>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <doLEDFunc+0x28>
		color = LED_GREEN;
 80006ba:	2301      	movs	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e01a      	b.n	80006f6 <doLEDFunc+0x5e>

	else if (strstr(ledMessage.message, "YELLOW"))
 80006c0:	f107 031a 	add.w	r3, r7, #26
 80006c4:	493a      	ldr	r1, [pc, #232]	; (80007b0 <doLEDFunc+0x118>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00a fbb8 	bl	800ae3c <strstr>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <doLEDFunc+0x40>
		color = LED_YELLOW;
 80006d2:	2302      	movs	r3, #2
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	e00e      	b.n	80006f6 <doLEDFunc+0x5e>

	else if (strstr(ledMessage.message, "RED"))
 80006d8:	f107 031a 	add.w	r3, r7, #26
 80006dc:	4935      	ldr	r1, [pc, #212]	; (80007b4 <doLEDFunc+0x11c>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f00a fbac 	bl	800ae3c <strstr>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <doLEDFunc+0x58>
		color = LED_RED;
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	e002      	b.n	80006f6 <doLEDFunc+0x5e>

	else
		return -1;
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f4:	e053      	b.n	800079e <doLEDFunc+0x106>

	TIM_HandleTypeDef* htim_;

	int found = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]

	for (uint8_t i = 0; i < rgbLedsCount; i++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	70fb      	strb	r3, [r7, #3]
 80006fe:	e011      	b.n	8000724 <doLEDFunc+0x8c>
		if (rgbLeds[i].ledNumber == ledMessage.mNumber) {
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	4a2d      	ldr	r2, [pc, #180]	; (80007b8 <doLEDFunc+0x120>)
 8000704:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000708:	7e7b      	ldrb	r3, [r7, #25]
 800070a:	429a      	cmp	r2, r3
 800070c:	d107      	bne.n	800071e <doLEDFunc+0x86>
			found = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
			htim_ = rgbLeds[i].htim_;
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <doLEDFunc+0x120>)
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4413      	add	r3, r2
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = 0; i < rgbLedsCount; i++) {
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	3301      	adds	r3, #1
 8000722:	70fb      	strb	r3, [r7, #3]
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <doLEDFunc+0x124>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	78fa      	ldrb	r2, [r7, #3]
 800072a:	429a      	cmp	r2, r3
 800072c:	d3e8      	bcc.n	8000700 <doLEDFunc+0x68>
		}
	}

	if (found == 0)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d102      	bne.n	800073a <doLEDFunc+0xa2>
		return -1;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000738:	e031      	b.n	800079e <doLEDFunc+0x106>
	 * TIM_CHANNEL_1 represents Red
	 * TIM_CHANNEL_2 represents Green
	 * TIM_CHANNEL_2 represents Blue
	 * */

	switch (color) {
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d012      	beq.n	8000766 <doLEDFunc+0xce>
 8000740:	2b02      	cmp	r3, #2
 8000742:	dc2a      	bgt.n	800079a <doLEDFunc+0x102>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d01b      	beq.n	8000780 <doLEDFunc+0xe8>
 8000748:	2b01      	cmp	r3, #1
 800074a:	d126      	bne.n	800079a <doLEDFunc+0x102>
		case LED_GREEN:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 0);
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 25);
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2219      	movs	r2, #25
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000764:	e01a      	b.n	800079c <doLEDFunc+0x104>

		case LED_YELLOW:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 12);
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	220c      	movs	r2, #12
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 12);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	220c      	movs	r2, #12
 8000774:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800077e:	e00d      	b.n	800079c <doLEDFunc+0x104>

		case LED_RED:
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_1, 25);
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2219      	movs	r2, #25
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_2, 0);
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2200      	movs	r2, #0
 800078e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(htim_, TIM_CHANNEL_3, 0);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000798:	e000      	b.n	800079c <doLEDFunc+0x104>
		default:
			break;
 800079a:	bf00      	nop
	}

	return 1;
 800079c:	2301      	movs	r3, #1
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007a8:	b004      	add	sp, #16
 80007aa:	4770      	bx	lr
 80007ac:	0800c3e0 	.word	0x0800c3e0
 80007b0:	0800c3e8 	.word	0x0800c3e8
 80007b4:	0800c3f0 	.word	0x0800c3f0
 80007b8:	20000004 	.word	0x20000004
 80007bc:	20000000 	.word	0x20000000

080007c0 <setADC1Configs>:
/* USER CODE BEGIN 0 */
char data[150];
char data_c;
uint8_t data_c_idx = 0;

void setADC1Configs(uint8_t channel) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig;

	switch (channel) {
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d002      	beq.n	80007d6 <setADC1Configs+0x16>
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d009      	beq.n	80007e8 <setADC1Configs+0x28>
 80007d4:	e011      	b.n	80007fa <setADC1Configs+0x3a>
		case 2:
			sConfig.Channel = ADC_CHANNEL_2; // ADC Channel
 80007d6:	2302      	movs	r3, #2
 80007d8:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1; //Rank (1-16) Rank: The rank in the regular group sequencer.
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5; //ADC Sampling Times
 80007de:	2307      	movs	r3, #7
 80007e0:	613b      	str	r3, [r7, #16]
			sConfig.Offset = 0; // Reserved
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
			break;
 80007e6:	e008      	b.n	80007fa <setADC1Configs+0x3a>
		case 3:
			sConfig.Channel = ADC_CHANNEL_3;
 80007e8:	2303      	movs	r3, #3
 80007ea:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
			sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80007f0:	2307      	movs	r3, #7
 80007f2:	613b      	str	r3, [r7, #16]
			sConfig.Offset = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
			break;
 80007f8:	bf00      	nop
	}

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) == HAL_OK) {
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4619      	mov	r1, r3
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <setADC1Configs+0x64>)
 8000802:	f001 fcc1 	bl	8002188 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d107      	bne.n	800081c <setADC1Configs+0x5c>
		HAL_ADC_Start(&hadc1);
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <setADC1Configs+0x64>)
 800080e:	f001 fa95 	bl	8001d3c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000812:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <setADC1Configs+0x64>)
 8000818:	f001 fba6 	bl	8001f68 <HAL_ADC_PollForConversion>
	}

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000a4 	.word	0x200000a4

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f001 f870 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f8a0 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f000 fb42 	bl	8000ebc <MX_GPIO_Init>
  MX_DMA_Init();
 8000838:	f000 fb22 	bl	8000e80 <MX_DMA_Init>
  MX_I2C1_Init();
 800083c:	f000 f970 	bl	8000b20 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000840:	f000 f9ae 	bl	8000ba0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000844:	f000 fafa 	bl	8000e3c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000848:	f000 fac8 	bl	8000ddc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800084c:	f000 f9e6 	bl	8000c1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000850:	f000 fa54 	bl	8000cfc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000854:	f000 f8f4 	bl	8000a40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &data_c, 1);
 8000858:	2201      	movs	r2, #1
 800085a:	4933      	ldr	r1, [pc, #204]	; (8000928 <main+0x100>)
 800085c:	4833      	ldr	r0, [pc, #204]	; (800092c <main+0x104>)
 800085e:	f005 fca1 	bl	80061a4 <HAL_UART_Receive_IT>
//
//  setADC1Configs(3);
//  HAL_ADC_Start(&hadc1);
//  setADC1Configs();

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000862:	2100      	movs	r1, #0
 8000864:	4832      	ldr	r0, [pc, #200]	; (8000930 <main+0x108>)
 8000866:	f004 fc3f 	bl	80050e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800086a:	2104      	movs	r1, #4
 800086c:	4830      	ldr	r0, [pc, #192]	; (8000930 <main+0x108>)
 800086e:	f004 fc3b 	bl	80050e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000872:	2108      	movs	r1, #8
 8000874:	482e      	ldr	r0, [pc, #184]	; (8000930 <main+0x108>)
 8000876:	f004 fc37 	bl	80050e8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800087a:	2100      	movs	r1, #0
 800087c:	482d      	ldr	r0, [pc, #180]	; (8000934 <main+0x10c>)
 800087e:	f004 fc33 	bl	80050e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000882:	2104      	movs	r1, #4
 8000884:	482b      	ldr	r0, [pc, #172]	; (8000934 <main+0x10c>)
 8000886:	f004 fc2f 	bl	80050e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800088a:	2108      	movs	r1, #8
 800088c:	4829      	ldr	r0, [pc, #164]	; (8000934 <main+0x10c>)
 800088e:	f004 fc2b 	bl	80050e8 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <main+0x108>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2200      	movs	r2, #0
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <main+0x108>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2200      	movs	r2, #0
 80008a0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <main+0x108>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2200      	movs	r2, #0
 80008a8:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <main+0x10c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <main+0x10c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2200      	movs	r2, #0
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <main+0x10c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2200      	movs	r2, #0
 80008c0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c2:	f006 fe85 	bl	80075d0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of diffBufferRead */
  diffBufferReadHandle = osMutexNew(&diffBufferRead_attributes);
 80008c6:	481c      	ldr	r0, [pc, #112]	; (8000938 <main+0x110>)
 80008c8:	f006 ffc2 	bl	8007850 <osMutexNew>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a1b      	ldr	r2, [pc, #108]	; (800093c <main+0x114>)
 80008d0:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of diffRxData */
  diffRxDataHandle = osSemaphoreNew(1, 1, &diffRxData_attributes);
 80008d2:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <main+0x118>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	2001      	movs	r0, #1
 80008d8:	f007 f854 	bl	8007984 <osSemaphoreNew>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a19      	ldr	r2, [pc, #100]	; (8000944 <main+0x11c>)
 80008e0:	6013      	str	r3, [r2, #0]

  /* creation of dataBufferSemaphore */
  dataBufferSemaphoreHandle = osSemaphoreNew(1, 1, &dataBufferSemaphore_attributes);
 80008e2:	4a19      	ldr	r2, [pc, #100]	; (8000948 <main+0x120>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	2001      	movs	r0, #1
 80008e8:	f007 f84c 	bl	8007984 <osSemaphoreNew>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <main+0x124>)
 80008f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <main+0x128>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4817      	ldr	r0, [pc, #92]	; (8000954 <main+0x12c>)
 80008f8:	f006 fed2 	bl	80076a0 <osThreadNew>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <main+0x130>)
 8000900:	6013      	str	r3, [r2, #0]

  /* creation of uartRxDiff */
  uartRxDiffHandle = osThreadNew(uartRxDiff_f, NULL, &uartRxDiff_attributes);
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <main+0x134>)
 8000904:	2100      	movs	r1, #0
 8000906:	4816      	ldr	r0, [pc, #88]	; (8000960 <main+0x138>)
 8000908:	f006 feca 	bl	80076a0 <osThreadNew>
 800090c:	4603      	mov	r3, r0
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <main+0x13c>)
 8000910:	6013      	str	r3, [r2, #0]

  /* creation of AvoidPIRHandler */
  AvoidPIRHandlerHandle = osThreadNew(AvoidPIRHandler_f, NULL, &AvoidPIRHandler_attributes);
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <main+0x140>)
 8000914:	2100      	movs	r1, #0
 8000916:	4815      	ldr	r0, [pc, #84]	; (800096c <main+0x144>)
 8000918:	f006 fec2 	bl	80076a0 <osThreadNew>
 800091c:	4603      	mov	r3, r0
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <main+0x148>)
 8000920:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000922:	f006 fe89 	bl	8007638 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000926:	e7fe      	b.n	8000926 <main+0xfe>
 8000928:	20000666 	.word	0x20000666
 800092c:	20000244 	.word	0x20000244
 8000930:	200001ac 	.word	0x200001ac
 8000934:	200001f8 	.word	0x200001f8
 8000938:	0800c4e0 	.word	0x0800c4e0
 800093c:	200005c4 	.word	0x200005c4
 8000940:	0800c4f0 	.word	0x0800c4f0
 8000944:	200005c8 	.word	0x200005c8
 8000948:	0800c500 	.word	0x0800c500
 800094c:	200005cc 	.word	0x200005cc
 8000950:	0800c474 	.word	0x0800c474
 8000954:	08000fd1 	.word	0x08000fd1
 8000958:	200005b8 	.word	0x200005b8
 800095c:	0800c498 	.word	0x0800c498
 8000960:	08000fe1 	.word	0x08000fe1
 8000964:	200005bc 	.word	0x200005bc
 8000968:	0800c4bc 	.word	0x0800c4bc
 800096c:	0800100d 	.word	0x0800100d
 8000970:	200005c0 	.word	0x200005c0

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09e      	sub	sp, #120	; 0x78
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800097e:	2228      	movs	r2, #40	; 0x28
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00a fa16 	bl	800adb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000998:	463b      	mov	r3, r7
 800099a:	223c      	movs	r2, #60	; 0x3c
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f00a fa08 	bl	800adb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009a4:	2303      	movs	r3, #3
 80009a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b2:	2301      	movs	r3, #1
 80009b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2310      	movs	r3, #16
 80009b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fd66 	bl	80034a0 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009da:	f000 fb5d 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fd8e 	bl	800451c <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a06:	f000 fb47 	bl	8001098 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <SystemClock_Config+0xc8>)
 8000a0c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 ffe2 	bl	80049ec <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a2e:	f000 fb33 	bl	8001098 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3778      	adds	r7, #120	; 0x78
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	000200a2 	.word	0x000200a2

08000a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abc:	4817      	ldr	r0, [pc, #92]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000abe:	f000 ff5d 	bl	800197c <HAL_ADC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 fae6 	bl	8001098 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000ad8:	f001 fe42 	bl	8002760 <HAL_ADCEx_MultiModeConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ae2:	f000 fad9 	bl	8001098 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000af2:	2307      	movs	r3, #7
 8000af4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <MX_ADC1_Init+0xdc>)
 8000b04:	f001 fb40 	bl	8002188 <HAL_ADC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000b0e:	f000 fac3 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000a4 	.word	0x200000a4

08000b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_I2C1_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <MX_I2C1_Init+0x7c>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b5c:	f002 faa8 	bl	80030b0 <HAL_I2C_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b66:	f000 fa97 	bl	8001098 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b6e:	f002 fb2e 	bl	80031ce <HAL_I2CEx_ConfigAnalogFilter>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f000 fa8e 	bl	8001098 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b80:	f002 fb70 	bl	8003264 <HAL_I2CEx_ConfigDigitalFilter>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f000 fa85 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000f4 	.word	0x200000f4
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	2000090e 	.word	0x2000090e

08000ba0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <MX_SPI1_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bee:	2207      	movs	r2, #7
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_SPI1_Init+0x74>)
 8000c00:	f004 f8a4 	bl	8004d4c <HAL_SPI_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f000 fa45 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000148 	.word	0x20000148
 8000c18:	40013000 	.word	0x40013000

08000c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	615a      	str	r2, [r3, #20]
 8000c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000c4a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000c58:	2263      	movs	r2, #99	; 0x63
 8000c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c68:	4823      	ldr	r0, [pc, #140]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000c6a:	f004 f9e5 	bl	8005038 <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f000 fa10 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	481c      	ldr	r0, [pc, #112]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000c88:	f005 f916 	bl	8005eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c92:	f000 fa01 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4619      	mov	r1, r3
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000cae:	f004 fc3b 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000cb8:	f000 f9ee 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000cc4:	f004 fc30 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000cce:	f000 f9e3 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000cda:	f004 fc25 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000ce4:	f000 f9d8 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <MX_TIM2_Init+0xdc>)
 8000cea:	f000 faf7 	bl	80012dc <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001ac 	.word	0x200001ac

08000cfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d22:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <MX_TIM3_Init+0xdc>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 8000d26:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d28:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000d2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d36:	2263      	movs	r2, #99	; 0x63
 8000d38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d46:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d48:	f004 f976 	bl	8005038 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d52:	f000 f9a1 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d66:	f005 f8a7 	bl	8005eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d70:	f000 f992 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000d8c:	f004 fbcc 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d96:	f000 f97f 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000da2:	f004 fbc1 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000dac:	f000 f974 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000db0:	463b      	mov	r3, r7
 8000db2:	2208      	movs	r2, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000db8:	f004 fbb6 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000dc2:	f000 f969 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <MX_TIM3_Init+0xd8>)
 8000dc8:	f000 fa88 	bl	80012dc <HAL_TIM_MspPostInit>

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200001f8 	.word	0x200001f8
 8000dd8:	40000400 	.word	0x40000400

08000ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <MX_USART2_UART_Init+0x5c>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000de8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e20:	f005 f8e8 	bl	8005ff4 <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e2a:	f000 f935 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000244 	.word	0x20000244
 8000e38:	40004400 	.word	0x40004400

08000e3c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <MX_USB_PCD_Init+0x3c>)
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <MX_USB_PCD_Init+0x40>)
 8000e44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USB_PCD_Init+0x3c>)
 8000e48:	2208      	movs	r2, #8
 8000e4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <MX_USB_PCD_Init+0x3c>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USB_PCD_Init+0x3c>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <MX_USB_PCD_Init+0x3c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USB_PCD_Init+0x3c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_USB_PCD_Init+0x3c>)
 8000e66:	f002 fa49 	bl	80032fc <HAL_PCD_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e70:	f000 f912 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200002cc 	.word	0x200002cc
 8000e7c:	40005c00 	.word	0x40005c00

08000e80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_DMA_Init+0x38>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <MX_DMA_Init+0x38>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_DMA_Init+0x38>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200b      	movs	r0, #11
 8000ea4:	f001 fed0 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f001 fee9 	bl	8002c80 <HAL_NVIC_EnableIRQ>

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	; 0x30
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000edc:	6153      	str	r3, [r2, #20]
 8000ede:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a36      	ldr	r2, [pc, #216]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	6153      	str	r3, [r2, #20]
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_GPIO_Init+0x10c>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8000f62:	2200      	movs	r2, #0
 8000f64:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000f68:	4818      	ldr	r0, [pc, #96]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000f6a:	f002 f889 	bl	8003080 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000f6e:	2337      	movs	r3, #55	; 0x37
 8000f70:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4812      	ldr	r0, [pc, #72]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000f84:	f001 ff02 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin PE10
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|GPIO_PIN_10
 8000f88:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000f8c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480a      	ldr	r0, [pc, #40]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000fa2:	f001 fef3 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f001 fee6 	bl	8002d8c <HAL_GPIO_Init>

}
 8000fc0:	bf00      	nop
 8000fc2:	3730      	adds	r7, #48	; 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48001000 	.word	0x48001000

08000fd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
//		osMutexAcquire(diffBufferReadHandle, portMAX_DELAY);
//		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//		osMutexRelease(diffBufferReadHandle);
//	}
//	osMutexAcquire(mutex_id, timeout)
    osDelay(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f006 fc0b 	bl	80077f4 <osDelay>
 8000fde:	e7fb      	b.n	8000fd8 <StartDefaultTask+0x8>

08000fe0 <uartRxDiff_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartRxDiff_f */
void uartRxDiff_f(void *argument)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0a8      	sub	sp, #160	; 0xa0
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartRxDiff_f */
  /* Infinite loop */
  char d[150];
  for(;;)
  {
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <uartRxDiff_f+0x24>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 fd63 	bl	8007abc <osSemaphoreAcquire>
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);

	addToHandler(data);
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <uartRxDiff_f+0x28>)
 8000ff8:	f7ff fabb 	bl	8000572 <addToHandler>
//	if (data_c == '\r') {
//		data_c_idx = 0;
//		data[data_c_idx] = '\0';
////		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//	}
    osDelay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f006 fbf9 	bl	80077f4 <osDelay>
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 8001002:	e7f1      	b.n	8000fe8 <uartRxDiff_f+0x8>
 8001004:	200005c8 	.word	0x200005c8
 8001008:	200005d0 	.word	0x200005d0

0800100c <AvoidPIRHandler_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AvoidPIRHandler_f */
void AvoidPIRHandler_f(void *argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b092      	sub	sp, #72	; 0x48
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
//	  HAL_ADC_Start_DMA(&hadc1, rawAVOID, 2);
//	  osDelay(pdMS_TO_TICKS(50));
//	  HAL_ADC_Stop_DMA(&hadc1);
//	  HAL_ADC_

	  setADC1Configs(2);
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff fbd3 	bl	80007c0 <setADC1Configs>
	  uint32_t c2Val = HAL_ADC_GetValue(&hadc1);
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <AvoidPIRHandler_f+0x5c>)
 800101c:	f001 f8a6 	bl	800216c <HAL_ADC_GetValue>
 8001020:	6478      	str	r0, [r7, #68]	; 0x44

	  osDelay(pdMS_TO_TICKS(50));
 8001022:	2032      	movs	r0, #50	; 0x32
 8001024:	f006 fbe6 	bl	80077f4 <osDelay>

	  setADC1Configs(3);
 8001028:	2003      	movs	r0, #3
 800102a:	f7ff fbc9 	bl	80007c0 <setADC1Configs>
	  uint32_t c3Val = HAL_ADC_GetValue(&hadc1);
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <AvoidPIRHandler_f+0x5c>)
 8001030:	f001 f89c 	bl	800216c <HAL_ADC_GetValue>
 8001034:	6438      	str	r0, [r7, #64]	; 0x40

	  char tmp[50];
	  sprintf(tmp, "ch1:%d,ch2:%d\n", c2Val, c3Val);
 8001036:	f107 000c 	add.w	r0, r7, #12
 800103a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800103c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800103e:	490b      	ldr	r1, [pc, #44]	; (800106c <AvoidPIRHandler_f+0x60>)
 8001040:	f009 fec0 	bl	800adc4 <siprintf>

	  HAL_UART_Transmit(&huart2, tmp, strlen(tmp), 250);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f8c1 	bl	80001d0 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	f107 010c 	add.w	r1, r7, #12
 8001056:	23fa      	movs	r3, #250	; 0xfa
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <AvoidPIRHandler_f+0x64>)
 800105a:	f005 f819 	bl	8006090 <HAL_UART_Transmit>

	  osDelay(pdMS_TO_TICKS(250));
 800105e:	20fa      	movs	r0, #250	; 0xfa
 8001060:	f006 fbc8 	bl	80077f4 <osDelay>
  {
 8001064:	e7d6      	b.n	8001014 <AvoidPIRHandler_f+0x8>
 8001066:	bf00      	nop
 8001068:	200000a4 	.word	0x200000a4
 800106c:	0800c44c 	.word	0x0800c44c
 8001070:	20000244 	.word	0x20000244

08001074 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001086:	f000 fc59 	bl	800193c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40012c00 	.word	0x40012c00

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_MspInit+0x4c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_MspInit+0x4c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_MspInit+0x4c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_MspInit+0x4c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_MspInit+0x4c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_MspInit+0x4c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	210f      	movs	r1, #15
 80010de:	f06f 0001 	mvn.w	r0, #1
 80010e2:	f001 fdb1 	bl	8002c48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001114:	d124      	bne.n	8001160 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_ADC_MspInit+0x74>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_ADC_MspInit+0x74>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6153      	str	r3, [r2, #20]
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_ADC_MspInit+0x74>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_ADC_MspInit+0x74>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_ADC_MspInit+0x74>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_ADC_MspInit+0x74>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001146:	2306      	movs	r3, #6
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114a:	2303      	movs	r3, #3
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f001 fe16 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <HAL_I2C_MspInit+0x7c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d127      	bne.n	80011de <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_I2C_MspInit+0x80>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <HAL_I2C_MspInit+0x80>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_I2C_MspInit+0x80>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80011a6:	23c0      	movs	r3, #192	; 0xc0
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011aa:	2312      	movs	r3, #18
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b6:	2304      	movs	r3, #4
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <HAL_I2C_MspInit+0x84>)
 80011c2:	f001 fde3 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_I2C_MspInit+0x80>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_I2C_MspInit+0x80>)
 80011cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_I2C_MspInit+0x80>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000400 	.word	0x48000400

080011f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_SPI_MspInit+0x7c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d128      	bne.n	8001268 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_SPI_MspInit+0x80>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <HAL_SPI_MspInit+0x80>)
 800121c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_SPI_MspInit+0x80>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_SPI_MspInit+0x80>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_SPI_MspInit+0x80>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_SPI_MspInit+0x80>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001246:	23e0      	movs	r3, #224	; 0xe0
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001256:	2305      	movs	r3, #5
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f001 fd92 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40013000 	.word	0x40013000
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001288:	d10c      	bne.n	80012a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_TIM_PWM_MspInit+0x5c>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012a2:	e010      	b.n	80012c6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_TIM_PWM_MspInit+0x60>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10b      	bne.n	80012c6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40000400 	.word	0x40000400

080012dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012fc:	d157      	bne.n	80013ae <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a5a      	ldr	r2, [pc, #360]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b55      	ldr	r3, [pc, #340]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	4a54      	ldr	r2, [pc, #336]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	6153      	str	r3, [r2, #20]
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a4e      	ldr	r2, [pc, #312]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 8001334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001358:	2301      	movs	r3, #1
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	4843      	ldr	r0, [pc, #268]	; (8001470 <HAL_TIM_MspPostInit+0x194>)
 8001364:	f001 fd12 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800137a:	2301      	movs	r3, #1
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f001 fd00 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138c:	2310      	movs	r3, #16
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800139c:	2302      	movs	r3, #2
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4833      	ldr	r0, [pc, #204]	; (8001474 <HAL_TIM_MspPostInit+0x198>)
 80013a8:	f001 fcf0 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013ac:	e059      	b.n	8001462 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a31      	ldr	r2, [pc, #196]	; (8001478 <HAL_TIM_MspPostInit+0x19c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d154      	bne.n	8001462 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	4a2b      	ldr	r2, [pc, #172]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c2:	6153      	str	r3, [r2, #20]
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013da:	6153      	str	r3, [r2, #20]
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013f2:	6153      	str	r3, [r2, #20]
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_TIM_MspPostInit+0x190>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001400:	2310      	movs	r3, #16
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001410:	2302      	movs	r3, #2
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f001 fcb5 	bl	8002d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001422:	2301      	movs	r3, #1
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001432:	2302      	movs	r3, #2
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <HAL_TIM_MspPostInit+0x194>)
 800143e:	f001 fca5 	bl	8002d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001442:	2340      	movs	r3, #64	; 0x40
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001452:	2302      	movs	r3, #2
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <HAL_TIM_MspPostInit+0x1a0>)
 800145e:	f001 fc95 	bl	8002d8c <HAL_GPIO_Init>
}
 8001462:	bf00      	nop
 8001464:	3738      	adds	r7, #56	; 0x38
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	48000400 	.word	0x48000400
 8001474:	48000c00 	.word	0x48000c00
 8001478:	40000400 	.word	0x40000400
 800147c:	48000800 	.word	0x48000800

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_UART_MspInit+0xc4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d14c      	bne.n	800153c <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a28      	ldr	r2, [pc, #160]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	4a22      	ldr	r2, [pc, #136]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	6153      	str	r3, [r2, #20]
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014dc:	6153      	str	r3, [r2, #20]
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_UART_MspInit+0xc8>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ea:	2308      	movs	r3, #8
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fa:	2307      	movs	r3, #7
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f001 fc40 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800150c:	2320      	movs	r3, #32
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151c:	2307      	movs	r3, #7
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <HAL_UART_MspInit+0xcc>)
 8001528:	f001 fc30 	bl	8002d8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2105      	movs	r1, #5
 8001530:	2026      	movs	r0, #38	; 0x26
 8001532:	f001 fb89 	bl	8002c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001536:	2026      	movs	r0, #38	; 0x26
 8001538:	f001 fba2 	bl	8002c80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40004400 	.word	0x40004400
 8001548:	40021000 	.word	0x40021000
 800154c:	48000c00 	.word	0x48000c00

08001550 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <HAL_PCD_MspInit+0x80>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d129      	bne.n	80015c6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_PCD_MspInit+0x84>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_PCD_MspInit+0x84>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6153      	str	r3, [r2, #20]
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_PCD_MspInit+0x84>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800158a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800159c:	230e      	movs	r3, #14
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f001 fbef 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_PCD_MspInit+0x84>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_PCD_MspInit+0x84>)
 80015b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_PCD_MspInit+0x84>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40005c00 	.word	0x40005c00
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015e8:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <HAL_InitTick+0xcc>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a2d      	ldr	r2, [pc, #180]	; (80016a4 <HAL_InitTick+0xcc>)
 80015ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_InitTick+0xcc>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001600:	f107 020c 	add.w	r2, r7, #12
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f9bc 	bl	8004988 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001610:	f003 f998 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8001614:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <HAL_InitTick+0xd0>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0c9b      	lsrs	r3, r3, #18
 8001620:	3b01      	subs	r3, #1
 8001622:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_InitTick+0xd4>)
 8001626:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <HAL_InitTick+0xd8>)
 8001628:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_InitTick+0xd4>)
 800162c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001630:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_InitTick+0xd4>)
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_InitTick+0xd4>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_InitTick+0xd4>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_InitTick+0xd4>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800164a:	4818      	ldr	r0, [pc, #96]	; (80016ac <HAL_InitTick+0xd4>)
 800164c:	f003 fc29 	bl	8004ea2 <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800165a:	2b00      	cmp	r3, #0
 800165c:	d11b      	bne.n	8001696 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800165e:	4813      	ldr	r0, [pc, #76]	; (80016ac <HAL_InitTick+0xd4>)
 8001660:	f003 fc80 	bl	8004f64 <HAL_TIM_Base_Start_IT>
 8001664:	4603      	mov	r3, r0
 8001666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800166a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800166e:	2b00      	cmp	r3, #0
 8001670:	d111      	bne.n	8001696 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001672:	2019      	movs	r0, #25
 8001674:	f001 fb04 	bl	8002c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	d808      	bhi.n	8001690 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800167e:	2200      	movs	r2, #0
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	2019      	movs	r0, #25
 8001684:	f001 fae0 	bl	8002c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_InitTick+0xdc>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e002      	b.n	8001696 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800169a:	4618      	mov	r0, r3
 800169c:	3730      	adds	r7, #48	; 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	20000668 	.word	0x20000668
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	20000018 	.word	0x20000018

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <NMI_Handler+0x4>

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <MemManage_Handler+0x4>

080016ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016ea:	f003 fdfd 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000668 	.word	0x20000668

080016f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	f004 fd95 	bl	800622c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000244 	.word	0x20000244

0800170c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return 1;
 8001710:	2301      	movs	r3, #1
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_kill>:

int _kill(int pid, int sig)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001726:	f009 fb0d 	bl	800ad44 <__errno>
 800172a:	4603      	mov	r3, r0
 800172c:	2216      	movs	r2, #22
 800172e:	601a      	str	r2, [r3, #0]
  return -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_exit>:

void _exit (int status)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffe7 	bl	800171c <_kill>
  while (1) {}    /* Make sure we hang here */
 800174e:	e7fe      	b.n	800174e <_exit+0x12>

08001750 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e00a      	b.n	8001778 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001762:	f3af 8000 	nop.w
 8001766:	4601      	mov	r1, r0
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <_read+0x12>
  }

  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e009      	b.n	80017b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf1      	blt.n	800179c <_write+0x12>
  }
  return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_close>:

int _close(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ea:	605a      	str	r2, [r3, #4]
  return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <_isatty>:

int _isatty(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f009 fa72 	bl	800ad44 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000a000 	.word	0x2000a000
 800188c:	00000400 	.word	0x00000400
 8001890:	200006b4 	.word	0x200006b4
 8001894:	20002018 	.word	0x20002018

08001898 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c0:	f7ff ffea 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopForever+0xe>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopForever+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f009 fa31 	bl	800ad50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ee:	f7fe ff9b 	bl	8000828 <main>

080018f2 <LoopForever>:

LoopForever:
    b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001900:	0800c798 	.word	0x0800c798
  ldr r2, =_sbss
 8001904:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001908:	20002014 	.word	0x20002014

0800190c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_2_IRQHandler>
	...

08001910 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x28>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x28>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f001 f986 	bl	8002c32 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	200f      	movs	r0, #15
 8001928:	f7ff fe56 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fbba 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	2000001c 	.word	0x2000001c
 8001960:	200006b8 	.word	0x200006b8

08001964 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;  
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200006b8 	.word	0x200006b8

0800197c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b09a      	sub	sp, #104	; 0x68
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e1c9      	b.n	8001d30 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d176      	bne.n	8001a9c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d152      	bne.n	8001a5c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fb8f 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d13b      	bne.n	8001a5c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f001 f811 	bl	8002a0c <ADC_Disable>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d12f      	bne.n	8001a5c <HAL_ADC_Init+0xe0>
 80019fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d12b      	bne.n	8001a5c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a0c:	f023 0302 	bic.w	r3, r3, #2
 8001a10:	f043 0202 	orr.w	r2, r3, #2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a26:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a36:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a38:	4b86      	ldr	r3, [pc, #536]	; (8001c54 <HAL_ADC_Init+0x2d8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a86      	ldr	r2, [pc, #536]	; (8001c58 <HAL_ADC_Init+0x2dc>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0c9a      	lsrs	r2, r3, #18
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a4e:	e002      	b.n	8001a56 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f9      	bne.n	8001a50 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a78:	d110      	bne.n	8001a9c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f023 0312 	bic.w	r3, r3, #18
 8001a82:	f043 0210 	orr.w	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 8136 	bne.w	8001d16 <HAL_ADC_Init+0x39a>
 8001aaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8131 	bne.w	8001d16 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 8129 	bne.w	8001d16 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001acc:	f043 0202 	orr.w	r2, r3, #2
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001adc:	d004      	beq.n	8001ae8 <HAL_ADC_Init+0x16c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5e      	ldr	r2, [pc, #376]	; (8001c5c <HAL_ADC_Init+0x2e0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_Init+0x170>
 8001ae8:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <HAL_ADC_Init+0x2e4>)
 8001aea:	e000      	b.n	8001aee <HAL_ADC_Init+0x172>
 8001aec:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_ADC_Init+0x2e8>)
 8001aee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af8:	d102      	bne.n	8001b00 <HAL_ADC_Init+0x184>
 8001afa:	4b58      	ldr	r3, [pc, #352]	; (8001c5c <HAL_ADC_Init+0x2e0>)
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e01a      	b.n	8001b36 <HAL_ADC_Init+0x1ba>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a55      	ldr	r2, [pc, #340]	; (8001c5c <HAL_ADC_Init+0x2e0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d103      	bne.n	8001b12 <HAL_ADC_Init+0x196>
 8001b0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e011      	b.n	8001b36 <HAL_ADC_Init+0x1ba>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a54      	ldr	r2, [pc, #336]	; (8001c68 <HAL_ADC_Init+0x2ec>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d102      	bne.n	8001b22 <HAL_ADC_Init+0x1a6>
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_ADC_Init+0x2f0>)
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e009      	b.n	8001b36 <HAL_ADC_Init+0x1ba>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a51      	ldr	r2, [pc, #324]	; (8001c6c <HAL_ADC_Init+0x2f0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d102      	bne.n	8001b32 <HAL_ADC_Init+0x1b6>
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <HAL_ADC_Init+0x2ec>)
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	e001      	b.n	8001b36 <HAL_ADC_Init+0x1ba>
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d108      	bne.n	8001b56 <HAL_ADC_Init+0x1da>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Init+0x1da>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_ADC_Init+0x1dc>
 8001b56:	2300      	movs	r3, #0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11c      	bne.n	8001b96 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d010      	beq.n	8001b84 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_ADC_Init+0x202>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_Init+0x202>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_Init+0x204>
 8001b7e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d108      	bne.n	8001b96 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b94:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7e5b      	ldrb	r3, [r3, #25]
 8001b9a:	035b      	lsls	r3, r3, #13
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ba0:	2a01      	cmp	r2, #1
 8001ba2:	d002      	beq.n	8001baa <HAL_ADC_Init+0x22e>
 8001ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba8:	e000      	b.n	8001bac <HAL_ADC_Init+0x230>
 8001baa:	2200      	movs	r2, #0
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d11b      	bne.n	8001c02 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7e5b      	ldrb	r3, [r3, #25]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	045a      	lsls	r2, r3, #17
 8001bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be2:	663b      	str	r3, [r7, #96]	; 0x60
 8001be4:	e00d      	b.n	8001c02 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d03a      	beq.n	8001c80 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_ADC_Init+0x2ec>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d004      	beq.n	8001c1e <HAL_ADC_Init+0x2a2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_ADC_Init+0x2f0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d128      	bne.n	8001c70 <HAL_ADC_Init+0x2f4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001c26:	d012      	beq.n	8001c4e <HAL_ADC_Init+0x2d2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c30:	d00a      	beq.n	8001c48 <HAL_ADC_Init+0x2cc>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001c3a:	d002      	beq.n	8001c42 <HAL_ADC_Init+0x2c6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	e018      	b.n	8001c74 <HAL_ADC_Init+0x2f8>
 8001c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c46:	e015      	b.n	8001c74 <HAL_ADC_Init+0x2f8>
 8001c48:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001c4c:	e012      	b.n	8001c74 <HAL_ADC_Init+0x2f8>
 8001c4e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c52:	e00f      	b.n	8001c74 <HAL_ADC_Init+0x2f8>
 8001c54:	20000014 	.word	0x20000014
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	50000100 	.word	0x50000100
 8001c60:	50000300 	.word	0x50000300
 8001c64:	50000700 	.word	0x50000700
 8001c68:	50000400 	.word	0x50000400
 8001c6c:	50000500 	.word	0x50000500
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d114      	bne.n	8001cb8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c9c:	f023 0302 	bic.w	r3, r3, #2
 8001ca0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7e1b      	ldrb	r3, [r3, #24]
 8001ca6:	039a      	lsls	r2, r3, #14
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_ADC_Init+0x3bc>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d10c      	bne.n	8001cee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f023 010f 	bic.w	r1, r3, #15
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	1e5a      	subs	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
 8001cec:	e007      	b.n	8001cfe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 020f 	bic.w	r2, r2, #15
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f023 0303 	bic.w	r3, r3, #3
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
 8001d14:	e00a      	b.n	8001d2c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f023 0312 	bic.w	r3, r3, #18
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3768      	adds	r7, #104	; 0x68
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	fff0c007 	.word	0xfff0c007

08001d3c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 80f9 	bne.w	8001f4a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Start+0x2a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e0f4      	b.n	8001f50 <HAL_ADC_Start+0x214>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fde8 	bl	8002944 <ADC_Enable>
 8001d74:	4603      	mov	r3, r0
 8001d76:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 80e0 	bne.w	8001f40 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d9c:	d004      	beq.n	8001da8 <HAL_ADC_Start+0x6c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6d      	ldr	r2, [pc, #436]	; (8001f58 <HAL_ADC_Start+0x21c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_Start+0x7a>
 8001da8:	4b6c      	ldr	r3, [pc, #432]	; (8001f5c <HAL_ADC_Start+0x220>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_ADC_Start+0x9a>
 8001db4:	e005      	b.n	8001dc2 <HAL_ADC_Start+0x86>
 8001db6:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_ADC_Start+0x224>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_ADC_Start+0x9a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dca:	d004      	beq.n	8001dd6 <HAL_ADC_Start+0x9a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a64      	ldr	r2, [pc, #400]	; (8001f64 <HAL_ADC_Start+0x228>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d115      	bne.n	8001e02 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d036      	beq.n	8001e5e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e00:	e02d      	b.n	8001e5e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e16:	d004      	beq.n	8001e22 <HAL_ADC_Start+0xe6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a4e      	ldr	r2, [pc, #312]	; (8001f58 <HAL_ADC_Start+0x21c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d10a      	bne.n	8001e38 <HAL_ADC_Start+0xfc>
 8001e22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf14      	ite	ne
 8001e30:	2301      	movne	r3, #1
 8001e32:	2300      	moveq	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e008      	b.n	8001e4a <HAL_ADC_Start+0x10e>
 8001e38:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_ADC_Start+0x228>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6a:	d106      	bne.n	8001e7a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f023 0206 	bic.w	r2, r3, #6
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
 8001e78:	e002      	b.n	8001e80 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	221c      	movs	r2, #28
 8001e8e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_Start+0x168>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	; (8001f58 <HAL_ADC_Start+0x21c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d106      	bne.n	8001eb2 <HAL_ADC_Start+0x176>
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_ADC_Start+0x220>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d03e      	beq.n	8001f2e <HAL_ADC_Start+0x1f2>
 8001eb0:	e005      	b.n	8001ebe <HAL_ADC_Start+0x182>
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_ADC_Start+0x224>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d037      	beq.n	8001f2e <HAL_ADC_Start+0x1f2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec6:	d004      	beq.n	8001ed2 <HAL_ADC_Start+0x196>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_ADC_Start+0x21c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d106      	bne.n	8001ee0 <HAL_ADC_Start+0x1a4>
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_ADC_Start+0x220>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d027      	beq.n	8001f2e <HAL_ADC_Start+0x1f2>
 8001ede:	e005      	b.n	8001eec <HAL_ADC_Start+0x1b0>
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HAL_ADC_Start+0x224>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d020      	beq.n	8001f2e <HAL_ADC_Start+0x1f2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef4:	d004      	beq.n	8001f00 <HAL_ADC_Start+0x1c4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <HAL_ADC_Start+0x21c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d106      	bne.n	8001f0e <HAL_ADC_Start+0x1d2>
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_ADC_Start+0x220>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d010      	beq.n	8001f2e <HAL_ADC_Start+0x1f2>
 8001f0c:	e005      	b.n	8001f1a <HAL_ADC_Start+0x1de>
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_ADC_Start+0x224>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	d009      	beq.n	8001f2e <HAL_ADC_Start+0x1f2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_Start+0x1f2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_ADC_Start+0x228>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10f      	bne.n	8001f4e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0204 	orr.w	r2, r2, #4
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	e006      	b.n	8001f4e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f48:	e001      	b.n	8001f4e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	50000100 	.word	0x50000100
 8001f5c:	50000300 	.word	0x50000300
 8001f60:	50000700 	.word	0x50000700
 8001f64:	50000400 	.word	0x50000400

08001f68 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d102      	bne.n	8001f84 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e03a      	b.n	8001ffa <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8c:	d004      	beq.n	8001f98 <HAL_ADC_PollForConversion+0x30>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a72      	ldr	r2, [pc, #456]	; (800215c <HAL_ADC_PollForConversion+0x1f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x34>
 8001f98:	4b71      	ldr	r3, [pc, #452]	; (8002160 <HAL_ADC_PollForConversion+0x1f8>)
 8001f9a:	e000      	b.n	8001f9e <HAL_ADC_PollForConversion+0x36>
 8001f9c:	4b71      	ldr	r3, [pc, #452]	; (8002164 <HAL_ADC_PollForConversion+0x1fc>)
 8001f9e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d112      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d11d      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0bf      	b.n	8002152 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f043 0220 	orr.w	r2, r3, #32
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0ad      	b.n	8002152 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002002:	d004      	beq.n	800200e <HAL_ADC_PollForConversion+0xa6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a54      	ldr	r2, [pc, #336]	; (800215c <HAL_ADC_PollForConversion+0x1f4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d106      	bne.n	800201c <HAL_ADC_PollForConversion+0xb4>
 800200e:	4b54      	ldr	r3, [pc, #336]	; (8002160 <HAL_ADC_PollForConversion+0x1f8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_ADC_PollForConversion+0xd4>
 800201a:	e005      	b.n	8002028 <HAL_ADC_PollForConversion+0xc0>
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <HAL_ADC_PollForConversion+0x1fc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <HAL_ADC_PollForConversion+0xd4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002030:	d004      	beq.n	800203c <HAL_ADC_PollForConversion+0xd4>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <HAL_ADC_PollForConversion+0x200>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d104      	bne.n	8002046 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e00f      	b.n	8002066 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800204e:	d004      	beq.n	800205a <HAL_ADC_PollForConversion+0xf2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_ADC_PollForConversion+0x1f4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d102      	bne.n	8002060 <HAL_ADC_PollForConversion+0xf8>
 800205a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800205e:	e000      	b.n	8002062 <HAL_ADC_PollForConversion+0xfa>
 8002060:	4b41      	ldr	r3, [pc, #260]	; (8002168 <HAL_ADC_PollForConversion+0x200>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002066:	f7ff fc7d 	bl	8001964 <HAL_GetTick>
 800206a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800206c:	e021      	b.n	80020b2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002074:	d01d      	beq.n	80020b2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_ADC_PollForConversion+0x124>
 800207c:	f7ff fc72 	bl	8001964 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d212      	bcs.n	80020b2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f043 0204 	orr.w	r2, r3, #4
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e04f      	b.n	8002152 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0d6      	beq.n	800206e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d131      	bne.n	800213e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d12c      	bne.n	800213e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d125      	bne.n	800213e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d112      	bne.n	8002126 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d112      	bne.n	800213e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
 8002124:	e00b      	b.n	800213e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	50000100 	.word	0x50000100
 8002160:	50000300 	.word	0x50000300
 8002164:	50000700 	.word	0x50000700
 8002168:	50000400 	.word	0x50000400

0800216c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002188:	b480      	push	{r7}
 800218a:	b09b      	sub	sp, #108	; 0x6c
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x22>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e2ca      	b.n	8002740 <HAL_ADC_ConfigChannel+0x5b8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 82ae 	bne.w	800271e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d81c      	bhi.n	8002204 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	461a      	mov	r2, r3
 80021de:	231f      	movs	r3, #31
 80021e0:	4093      	lsls	r3, r2
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4019      	ands	r1, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa00 f203 	lsl.w	r2, r0, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	e063      	b.n	80022cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b09      	cmp	r3, #9
 800220a:	d81e      	bhi.n	800224a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	3b1e      	subs	r3, #30
 8002220:	221f      	movs	r2, #31
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	4019      	ands	r1, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	3b1e      	subs	r3, #30
 800223c:	fa00 f203 	lsl.w	r2, r0, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
 8002248:	e040      	b.n	80022cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b0e      	cmp	r3, #14
 8002250:	d81e      	bhi.n	8002290 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	3b3c      	subs	r3, #60	; 0x3c
 8002266:	221f      	movs	r2, #31
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	4019      	ands	r1, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	3b3c      	subs	r3, #60	; 0x3c
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
 800228e:	e01d      	b.n	80022cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	3b5a      	subs	r3, #90	; 0x5a
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	4019      	ands	r1, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	3b5a      	subs	r3, #90	; 0x5a
 80022c0:	fa00 f203 	lsl.w	r2, r0, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 80e5 	bne.w	80024a6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	d91c      	bls.n	800231e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6999      	ldr	r1, [r3, #24]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	4019      	ands	r1, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6898      	ldr	r0, [r3, #8]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	3b1e      	subs	r3, #30
 8002310:	fa00 f203 	lsl.w	r2, r0, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	619a      	str	r2, [r3, #24]
 800231c:	e019      	b.n	8002352 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6959      	ldr	r1, [r3, #20]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	2207      	movs	r2, #7
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	4019      	ands	r1, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6898      	ldr	r0, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	fa00 f203 	lsl.w	r2, r0, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	3b01      	subs	r3, #1
 8002370:	2b03      	cmp	r3, #3
 8002372:	d84f      	bhi.n	8002414 <HAL_ADC_ConfigChannel+0x28c>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <HAL_ADC_ConfigChannel+0x1f4>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	0800238d 	.word	0x0800238d
 8002380:	080023af 	.word	0x080023af
 8002384:	080023d1 	.word	0x080023d1
 8002388:	080023f3 	.word	0x080023f3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002392:	4b9a      	ldr	r3, [pc, #616]	; (80025fc <HAL_ADC_ConfigChannel+0x474>)
 8002394:	4013      	ands	r3, r2
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	0691      	lsls	r1, r2, #26
 800239c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800239e:	430a      	orrs	r2, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023aa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023ac:	e07e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023b4:	4b91      	ldr	r3, [pc, #580]	; (80025fc <HAL_ADC_ConfigChannel+0x474>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	0691      	lsls	r1, r2, #26
 80023be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c0:	430a      	orrs	r2, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023cc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023ce:	e06d      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_ADC_ConfigChannel+0x474>)
 80023d8:	4013      	ands	r3, r2
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	0691      	lsls	r1, r2, #26
 80023e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023e2:	430a      	orrs	r2, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023ee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023f0:	e05c      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023f8:	4b80      	ldr	r3, [pc, #512]	; (80025fc <HAL_ADC_ConfigChannel+0x474>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	0691      	lsls	r1, r2, #26
 8002402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002404:	430a      	orrs	r2, r1
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002410:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002412:	e04b      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	069b      	lsls	r3, r3, #26
 8002424:	429a      	cmp	r2, r3
 8002426:	d107      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002436:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	069b      	lsls	r3, r3, #26
 8002448:	429a      	cmp	r2, r3
 800244a:	d107      	bne.n	800245c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800245a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	069b      	lsls	r3, r3, #26
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800247e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	429a      	cmp	r2, r3
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80024a4:	e001      	b.n	80024aa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <HAL_ADC_ConfigChannel+0x324>
      break;
 80024aa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x344>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x344>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_ADC_ConfigChannel+0x346>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8130 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d00f      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80024fa:	e049      	b.n	8002590 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b09      	cmp	r3, #9
 800251c:	d91c      	bls.n	8002558 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6999      	ldr	r1, [r3, #24]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	3b1b      	subs	r3, #27
 8002530:	2207      	movs	r2, #7
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	4019      	ands	r1, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6898      	ldr	r0, [r3, #8]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3b1b      	subs	r3, #27
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	e01b      	b.n	8002590 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6959      	ldr	r1, [r3, #20]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	2207      	movs	r2, #7
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	4019      	ands	r1, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6898      	ldr	r0, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	fa00 f203 	lsl.w	r2, r0, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002598:	d004      	beq.n	80025a4 <HAL_ADC_ConfigChannel+0x41c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_ADC_ConfigChannel+0x478>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x420>
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_ADC_ConfigChannel+0x47c>)
 80025a6:	e000      	b.n	80025aa <HAL_ADC_ConfigChannel+0x422>
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_ADC_ConfigChannel+0x480>)
 80025aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d105      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80025c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80025d8:	2b12      	cmp	r3, #18
 80025da:	f040 80ab 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80025de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 80a4 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f4:	d10a      	bne.n	800260c <HAL_ADC_ConfigChannel+0x484>
 80025f6:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_ADC_ConfigChannel+0x478>)
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e022      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4ba>
 80025fc:	83fff000 	.word	0x83fff000
 8002600:	50000100 	.word	0x50000100
 8002604:	50000300 	.word	0x50000300
 8002608:	50000700 	.word	0x50000700
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a4e      	ldr	r2, [pc, #312]	; (800274c <HAL_ADC_ConfigChannel+0x5c4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d103      	bne.n	800261e <HAL_ADC_ConfigChannel+0x496>
 8002616:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e011      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4ba>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_ADC_ConfigChannel+0x5c8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d102      	bne.n	800262e <HAL_ADC_ConfigChannel+0x4a6>
 8002628:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_ADC_ConfigChannel+0x5cc>)
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e009      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4ba>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a48      	ldr	r2, [pc, #288]	; (8002754 <HAL_ADC_ConfigChannel+0x5cc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <HAL_ADC_ConfigChannel+0x4b6>
 8002638:	4b45      	ldr	r3, [pc, #276]	; (8002750 <HAL_ADC_ConfigChannel+0x5c8>)
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e001      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4ba>
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d108      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x4da>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x4da>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_ADC_ConfigChannel+0x4dc>
 8002662:	2300      	movs	r3, #0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d150      	bne.n	800270a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002668:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d010      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_ADC_ConfigChannel+0x502>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x502>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_ADC_ConfigChannel+0x504>
 800268a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800268c:	2b00      	cmp	r3, #0
 800268e:	d13c      	bne.n	800270a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b10      	cmp	r3, #16
 8002696:	d11d      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x54c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a0:	d118      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80026a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ac:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_ADC_ConfigChannel+0x5d0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2a      	ldr	r2, [pc, #168]	; (800275c <HAL_ADC_ConfigChannel+0x5d4>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0c9a      	lsrs	r2, r3, #18
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026c4:	e002      	b.n	80026cc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f9      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026d2:	e02e      	b.n	8002732 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b11      	cmp	r3, #17
 80026da:	d10b      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x56c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e4:	d106      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80026e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80026ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026f2:	e01e      	b.n	8002732 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b12      	cmp	r3, #18
 80026fa:	d11a      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80026fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002706:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002708:	e013      	b.n	8002732 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800271c:	e00a      	b.n	8002734 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002730:	e000      	b.n	8002734 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002732:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800273c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002740:	4618      	mov	r0, r3
 8002742:	376c      	adds	r7, #108	; 0x6c
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	50000100 	.word	0x50000100
 8002750:	50000400 	.word	0x50000400
 8002754:	50000500 	.word	0x50000500
 8002758:	20000014 	.word	0x20000014
 800275c:	431bde83 	.word	0x431bde83

08002760 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002760:	b480      	push	{r7}
 8002762:	b099      	sub	sp, #100	; 0x64
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002778:	d102      	bne.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800277a:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	e01a      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6a      	ldr	r2, [pc, #424]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d103      	bne.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800278a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	e011      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d102      	bne.n	80027a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800279c:	4b66      	ldr	r3, [pc, #408]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	e009      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a64      	ldr	r2, [pc, #400]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d102      	bne.n	80027b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80027ac:	4b61      	ldr	r3, [pc, #388]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	e001      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0b0      	b.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0a9      	b.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 808d 	bne.w	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 8086 	bne.w	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fc:	d004      	beq.n	8002808 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4b      	ldr	r2, [pc, #300]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002808:	4b4c      	ldr	r3, [pc, #304]	; (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800280a:	e000      	b.n	800280e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800280c:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800280e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d040      	beq.n	800289a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800282a:	035b      	lsls	r3, r3, #13
 800282c:	430b      	orrs	r3, r1
 800282e:	431a      	orrs	r2, r3
 8002830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002832:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002854:	2300      	movs	r3, #0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d15c      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002876:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d14b      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800287c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002884:	f023 030f 	bic.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	6811      	ldr	r1, [r2, #0]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	6892      	ldr	r2, [r2, #8]
 8002890:	430a      	orrs	r2, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002896:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002898:	e03c      	b.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800289a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d108      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d123      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80028e8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d112      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80028ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028f6:	f023 030f 	bic.w	r3, r3, #15
 80028fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028fc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028fe:	e009      	b.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002912:	e000      	b.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002914:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800291e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002922:	4618      	mov	r0, r3
 8002924:	3764      	adds	r7, #100	; 0x64
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	50000100 	.word	0x50000100
 8002934:	50000400 	.word	0x50000400
 8002938:	50000500 	.word	0x50000500
 800293c:	50000300 	.word	0x50000300
 8002940:	50000700 	.word	0x50000700

08002944 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d108      	bne.n	8002970 <ADC_Enable+0x2c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <ADC_Enable+0x2c>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <ADC_Enable+0x2e>
 8002970:	2300      	movs	r3, #0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d143      	bne.n	80029fe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <ADC_Enable+0xc4>)
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e02f      	b.n	8002a00 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80029b0:	f7fe ffd8 	bl	8001964 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029b6:	e01b      	b.n	80029f0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b8:	f7fe ffd4 	bl	8001964 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d914      	bls.n	80029f0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d00d      	beq.n	80029f0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d1dc      	bne.n	80029b8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	8000003f 	.word	0x8000003f

08002a0c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d108      	bne.n	8002a38 <ADC_Disable+0x2c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <ADC_Disable+0x2c>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <ADC_Disable+0x2e>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d047      	beq.n	8002ace <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030d 	and.w	r3, r3, #13
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10f      	bne.n	8002a6c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0202 	orr.w	r2, r2, #2
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2203      	movs	r2, #3
 8002a62:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a64:	f7fe ff7e 	bl	8001964 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a6a:	e029      	b.n	8002ac0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e023      	b.n	8002ad0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a88:	f7fe ff6c 	bl	8001964 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d914      	bls.n	8002ac0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10d      	bne.n	8002ac0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f043 0210 	orr.w	r2, r3, #16
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d0dc      	beq.n	8002a88 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ff4c 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5a:	f7ff ff61 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	6978      	ldr	r0, [r7, #20]
 8002c66:	f7ff ffb1 	bl	8002bcc <NVIC_EncodePriority>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ff80 	bl	8002b78 <__NVIC_SetPriority>
}
 8002c78:	bf00      	nop
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff54 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d008      	beq.n	8002cc0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e020      	b.n	8002d02 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 020e 	bic.w	r2, r2, #14
 8002cce:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	2101      	movs	r1, #1
 8002cea:	fa01 f202 	lsl.w	r2, r1, r2
 8002cee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d005      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2204      	movs	r2, #4
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e027      	b.n	8002d80 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 020e 	bic.w	r2, r2, #14
 8002d3e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
    } 
  }
  return status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9a:	e154      	b.n	8003046 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8146 	beq.w	8003040 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d005      	beq.n	8002dcc <HAL_GPIO_Init+0x40>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d130      	bne.n	8002e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e02:	2201      	movs	r2, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0201 	and.w	r2, r3, #1
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d017      	beq.n	8002e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d123      	bne.n	8002ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	6939      	ldr	r1, [r7, #16]
 8002eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a0 	beq.w	8003040 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f00:	4b58      	ldr	r3, [pc, #352]	; (8003064 <HAL_GPIO_Init+0x2d8>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4a57      	ldr	r2, [pc, #348]	; (8003064 <HAL_GPIO_Init+0x2d8>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6193      	str	r3, [r2, #24]
 8002f0c:	4b55      	ldr	r3, [pc, #340]	; (8003064 <HAL_GPIO_Init+0x2d8>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f18:	4a53      	ldr	r2, [pc, #332]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	220f      	movs	r2, #15
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f42:	d019      	beq.n	8002f78 <HAL_GPIO_Init+0x1ec>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a49      	ldr	r2, [pc, #292]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_GPIO_Init+0x1e8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a48      	ldr	r2, [pc, #288]	; (8003070 <HAL_GPIO_Init+0x2e4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00d      	beq.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a47      	ldr	r2, [pc, #284]	; (8003074 <HAL_GPIO_Init+0x2e8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <HAL_GPIO_Init+0x1e0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a46      	ldr	r2, [pc, #280]	; (8003078 <HAL_GPIO_Init+0x2ec>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_GPIO_Init+0x1dc>
 8002f64:	2304      	movs	r3, #4
 8002f66:	e008      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f68:	2305      	movs	r3, #5
 8002f6a:	e006      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e004      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e002      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	f002 0203 	and.w	r2, r2, #3
 8002f80:	0092      	lsls	r2, r2, #2
 8002f82:	4093      	lsls	r3, r2
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f8a:	4937      	ldr	r1, [pc, #220]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	3302      	adds	r3, #2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f98:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fbc:	4a2f      	ldr	r2, [pc, #188]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fe6:	4a25      	ldr	r2, [pc, #148]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fec:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003010:	4a1a      	ldr	r2, [pc, #104]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003016:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <HAL_GPIO_Init+0x2f0>)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3301      	adds	r3, #1
 8003044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f aea3 	bne.w	8002d9c <HAL_GPIO_Init+0x10>
  }
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	40021000 	.word	0x40021000
 8003068:	40010000 	.word	0x40010000
 800306c:	48000400 	.word	0x48000400
 8003070:	48000800 	.word	0x48000800
 8003074:	48000c00 	.word	0x48000c00
 8003078:	48001000 	.word	0x48001000
 800307c:	40010400 	.word	0x40010400

08003080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003090:	787b      	ldrb	r3, [r7, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800309c:	e002      	b.n	80030a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e081      	b.n	80031c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe f848 	bl	800116c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	; 0x24
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	e006      	b.n	8003138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d104      	bne.n	800314a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003148:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800316c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69d9      	ldr	r1, [r3, #28]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d138      	bne.n	8003256 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e032      	b.n	8003258 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2224      	movs	r2, #36	; 0x24
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003220:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b20      	cmp	r3, #32
 8003278:	d139      	bne.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003284:	2302      	movs	r3, #2
 8003286:	e033      	b.n	80032f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	; 0x24
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e000      	b.n	80032f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
  }
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fe:	b08b      	sub	sp, #44	; 0x2c
 8003300:	af06      	add	r7, sp, #24
 8003302:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0c4      	b.n	8003498 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe f914 	bl	8001550 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2203      	movs	r2, #3
 800332c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f004 f90f 	bl	8007558 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e040      	b.n	80033c2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	3301      	adds	r3, #1
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	3303      	adds	r3, #3
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	3338      	adds	r3, #56	; 0x38
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	333c      	adds	r3, #60	; 0x3c
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	3340      	adds	r3, #64	; 0x40
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	3301      	adds	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3b9      	bcc.n	8003340 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e044      	b.n	800345c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	3301      	adds	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d3b5      	bcc.n	80033d2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	687e      	ldr	r6, [r7, #4]
 800346e:	466d      	mov	r5, sp
 8003470:	f106 0410 	add.w	r4, r6, #16
 8003474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	1d33      	adds	r3, r6, #4
 800347e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003480:	6838      	ldr	r0, [r7, #0]
 8003482:	f004 f884 	bl	800758e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f001 b823 	b.w	800450c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 817d 	beq.w	80037d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034dc:	4bbc      	ldr	r3, [pc, #752]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d00c      	beq.n	8003502 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e8:	4bb9      	ldr	r3, [pc, #740]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d15c      	bne.n	80035ae <HAL_RCC_OscConfig+0x10e>
 80034f4:	4bb6      	ldr	r3, [pc, #728]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d155      	bne.n	80035ae <HAL_RCC_OscConfig+0x10e>
 8003502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003506:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003516:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <HAL_RCC_OscConfig+0x94>
 800352e:	4ba8      	ldr	r3, [pc, #672]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	e015      	b.n	8003560 <HAL_RCC_OscConfig+0xc0>
 8003534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003538:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003550:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800355c:	4b9c      	ldr	r3, [pc, #624]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003564:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003568:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003574:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f042 0220 	orr.w	r2, r2, #32
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f002 021f 	and.w	r2, r2, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 811f 	beq.w	80037d4 <HAL_RCC_OscConfig+0x334>
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 8116 	bne.w	80037d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f000 bfaf 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x12e>
 80035c0:	4b83      	ldr	r3, [pc, #524]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a82      	ldr	r2, [pc, #520]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e036      	b.n	800363c <HAL_RCC_OscConfig+0x19c>
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x158>
 80035de:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7b      	ldr	r2, [pc, #492]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a78      	ldr	r2, [pc, #480]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e021      	b.n	800363c <HAL_RCC_OscConfig+0x19c>
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x184>
 800360a:	4b71      	ldr	r3, [pc, #452]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a70      	ldr	r2, [pc, #448]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b6e      	ldr	r3, [pc, #440]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6d      	ldr	r2, [pc, #436]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0x19c>
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a69      	ldr	r2, [pc, #420]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a66      	ldr	r2, [pc, #408]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800363c:	4b64      	ldr	r3, [pc, #400]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	f023 020f 	bic.w	r2, r3, #15
 8003644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	495f      	ldr	r1, [pc, #380]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003652:	4313      	orrs	r3, r2
 8003654:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d059      	beq.n	800371a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe f97d 	bl	8001964 <HAL_GetTick>
 800366a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	e00a      	b.n	8003686 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe f978 	bl	8001964 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b64      	cmp	r3, #100	; 0x64
 800367e:	d902      	bls.n	8003686 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	f000 bf43 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800368a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800369a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_OscConfig+0x218>
 80036b2:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	e015      	b.n	80036e4 <HAL_RCC_OscConfig+0x244>
 80036b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80036ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80036f0:	fa92 f2a2 	rbit	r2, r2
 80036f4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80036f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f042 0220 	orr.w	r2, r2, #32
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f002 021f 	and.w	r2, r2, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ab      	beq.n	8003670 <HAL_RCC_OscConfig+0x1d0>
 8003718:	e05d      	b.n	80037d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe f923 	bl	8001964 <HAL_GetTick>
 800371e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe f91e 	bl	8001964 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	; 0x64
 8003732:	d902      	bls.n	800373a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	f000 bee9 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 800373a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800373e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800374e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x2cc>
 8003766:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	e015      	b.n	8003798 <HAL_RCC_OscConfig+0x2f8>
 800376c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003770:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003784:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003788:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCC_OscConfig+0x330>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800379c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037a4:	fa92 f2a2 	rbit	r2, r2
 80037a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80037ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ab      	bne.n	8003724 <HAL_RCC_OscConfig+0x284>
 80037cc:	e003      	b.n	80037d6 <HAL_RCC_OscConfig+0x336>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 817d 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037ec:	4ba6      	ldr	r3, [pc, #664]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 030c 	and.w	r3, r3, #12
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037f8:	4ba3      	ldr	r3, [pc, #652]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b08      	cmp	r3, #8
 8003802:	d172      	bne.n	80038ea <HAL_RCC_OscConfig+0x44a>
 8003804:	4ba0      	ldr	r3, [pc, #640]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d16c      	bne.n	80038ea <HAL_RCC_OscConfig+0x44a>
 8003810:	2302      	movs	r3, #2
 8003812:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003822:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_RCC_OscConfig+0x3a0>
 800383a:	4b93      	ldr	r3, [pc, #588]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e013      	b.n	8003868 <HAL_RCC_OscConfig+0x3c8>
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003852:	2302      	movs	r3, #2
 8003854:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003858:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003864:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2202      	movs	r2, #2
 800386a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800386e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003872:	fa92 f2a2 	rbit	r2, r2
 8003876:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800387a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800387e:	fab2 f282 	clz	r2, r2
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f042 0220 	orr.w	r2, r2, #32
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f002 021f 	and.w	r2, r2, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCC_OscConfig+0x410>
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f000 be2e 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b75      	ldr	r3, [pc, #468]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	21f8      	movs	r1, #248	; 0xf8
 80038c6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80038ce:	fa91 f1a1 	rbit	r1, r1
 80038d2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80038d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80038da:	fab1 f181 	clz	r1, r1
 80038de:	b2c9      	uxtb	r1, r1
 80038e0:	408b      	lsls	r3, r1
 80038e2:	4969      	ldr	r1, [pc, #420]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e8:	e0fd      	b.n	8003ae6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8088 	beq.w	8003a0c <HAL_RCC_OscConfig+0x56c>
 80038fc:	2301      	movs	r3, #1
 80038fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800390e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800391c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	461a      	mov	r2, r3
 8003924:	2301      	movs	r3, #1
 8003926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe f81c 	bl	8001964 <HAL_GetTick>
 800392c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003932:	f7fe f817 	bl	8001964 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	f000 bde2 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003948:	2302      	movs	r3, #2
 800394a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800395a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d102      	bne.n	8003978 <HAL_RCC_OscConfig+0x4d8>
 8003972:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	e013      	b.n	80039a0 <HAL_RCC_OscConfig+0x500>
 8003978:	2302      	movs	r3, #2
 800397a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800398a:	2302      	movs	r3, #2
 800398c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003990:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80039a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80039aa:	fa92 f2a2 	rbit	r2, r2
 80039ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039b6:	fab2 f282 	clz	r2, r2
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f042 0220 	orr.w	r2, r2, #32
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f002 021f 	and.w	r2, r2, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0af      	beq.n	8003932 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	21f8      	movs	r1, #248	; 0xf8
 80039e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039f0:	fa91 f1a1 	rbit	r1, r1
 80039f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80039f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80039fc:	fab1 f181 	clz	r1, r1
 8003a00:	b2c9      	uxtb	r1, r1
 8003a02:	408b      	lsls	r3, r1
 8003a04:	4920      	ldr	r1, [pc, #128]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
 8003a0a:	e06c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x646>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	2300      	movs	r3, #0
 8003a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fd ff94 	bl	8001964 <HAL_GetTick>
 8003a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fd ff8f 	bl	8001964 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	f000 bd5a 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d104      	bne.n	8003a8c <HAL_RCC_OscConfig+0x5ec>
 8003a82:	4b01      	ldr	r3, [pc, #4]	; (8003a88 <HAL_RCC_OscConfig+0x5e8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	e015      	b.n	8003ab4 <HAL_RCC_OscConfig+0x614>
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ab0:	4bc8      	ldr	r3, [pc, #800]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003aba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003abe:	fa92 f2a2 	rbit	r2, r2
 8003ac2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ac6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003aca:	fab2 f282 	clz	r2, r2
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f042 0220 	orr.w	r2, r2, #32
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f002 021f 	and.w	r2, r2, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ad      	bne.n	8003a42 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8110 	beq.w	8003d1c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d079      	beq.n	8003c00 <HAL_RCC_OscConfig+0x760>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4bab      	ldr	r3, [pc, #684]	; (8003dd8 <HAL_RCC_OscConfig+0x938>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	461a      	mov	r2, r3
 8003b32:	2301      	movs	r3, #1
 8003b34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b36:	f7fd ff15 	bl	8001964 <HAL_GetTick>
 8003b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b40:	f7fd ff10 	bl	8001964 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d902      	bls.n	8003b56 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	f000 bcdb 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003b56:	2302      	movs	r3, #2
 8003b58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b70:	2202      	movs	r2, #2
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b94:	2202      	movs	r2, #2
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	fa93 f2a3 	rbit	r2, r3
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb0:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	6019      	str	r1, [r3, #0]
 8003bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	fa93 f1a3 	rbit	r1, r3
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bd6:	6019      	str	r1, [r3, #0]
  return result;
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0a0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x6a0>
 8003bfe:	e08d      	b.n	8003d1c <HAL_RCC_OscConfig+0x87c>
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c22:	601a      	str	r2, [r3, #0]
  return result;
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b68      	ldr	r3, [pc, #416]	; (8003dd8 <HAL_RCC_OscConfig+0x938>)
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fd fe8f 	bl	8001964 <HAL_GetTick>
 8003c46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fe8a 	bl	8001964 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d902      	bls.n	8003c62 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	f000 bc55 	b.w	800450c <HAL_RCC_OscConfig+0x106c>
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c8e:	2202      	movs	r2, #2
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	fa93 f2a3 	rbit	r2, r3
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	fa93 f2a3 	rbit	r2, r3
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ccc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cda:	2102      	movs	r1, #2
 8003cdc:	6019      	str	r1, [r3, #0]
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fa93 f1a3 	rbit	r1, r3
 8003cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cf4:	6019      	str	r1, [r3, #0]
  return result;
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d197      	bne.n	8003c4c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 81a1 	beq.w	8004074 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d38:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d116      	bne.n	8003d72 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	61d3      	str	r3, [r2, #28]
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d66:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d6a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x93c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11a      	bne.n	8003db4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_RCC_OscConfig+0x93c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <HAL_RCC_OscConfig+0x93c>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8a:	f7fd fdeb 	bl	8001964 <HAL_GetTick>
 8003d8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	e009      	b.n	8003da8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fd fde6 	bl	8001964 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b64      	cmp	r3, #100	; 0x64
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e3b1      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x93c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ef      	beq.n	8003d94 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10d      	bne.n	8003de0 <HAL_RCC_OscConfig+0x940>
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4a02      	ldr	r2, [pc, #8]	; (8003dd4 <HAL_RCC_OscConfig+0x934>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6213      	str	r3, [r2, #32]
 8003dd0:	e03c      	b.n	8003e4c <HAL_RCC_OscConfig+0x9ac>
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	10908120 	.word	0x10908120
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x96a>
 8003df0:	4bc1      	ldr	r3, [pc, #772]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4ac0      	ldr	r2, [pc, #768]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	4bbe      	ldr	r3, [pc, #760]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4abd      	ldr	r2, [pc, #756]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e02:	f023 0304 	bic.w	r3, r3, #4
 8003e06:	6213      	str	r3, [r2, #32]
 8003e08:	e020      	b.n	8003e4c <HAL_RCC_OscConfig+0x9ac>
 8003e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x994>
 8003e1a:	4bb7      	ldr	r3, [pc, #732]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4ab6      	ldr	r2, [pc, #728]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	4bb4      	ldr	r3, [pc, #720]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4ab3      	ldr	r2, [pc, #716]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0x9ac>
 8003e34:	4bb0      	ldr	r3, [pc, #704]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4aaf      	ldr	r2, [pc, #700]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	6213      	str	r3, [r2, #32]
 8003e40:	4bad      	ldr	r3, [pc, #692]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4aac      	ldr	r2, [pc, #688]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003e46:	f023 0304 	bic.w	r3, r3, #4
 8003e4a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8081 	beq.w	8003f60 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fd fd81 	bl	8001964 <HAL_GetTick>
 8003e62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fd fd7c 	bl	8001964 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e345      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e88:	2202      	movs	r2, #2
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003eac:	2202      	movs	r2, #2
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	fa93 f2a3 	rbit	r2, r3
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ec6:	601a      	str	r2, [r3, #0]
  return result;
 8003ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ecc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ed0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d102      	bne.n	8003eec <HAL_RCC_OscConfig+0xa4c>
 8003ee6:	4b84      	ldr	r3, [pc, #528]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	e013      	b.n	8003f14 <HAL_RCC_OscConfig+0xa74>
 8003eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	fa93 f2a3 	rbit	r2, r3
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	4b79      	ldr	r3, [pc, #484]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	6011      	str	r1, [r2, #0]
 8003f20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f24:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	fa92 f1a2 	rbit	r1, r2
 8003f2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f32:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f36:	6011      	str	r1, [r2, #0]
  return result;
 8003f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f3c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	fab2 f282 	clz	r2, r2
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f002 021f 	and.w	r2, r2, #31
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f202 	lsl.w	r2, r1, r2
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d084      	beq.n	8003e68 <HAL_RCC_OscConfig+0x9c8>
 8003f5e:	e07f      	b.n	8004060 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f60:	f7fd fd00 	bl	8001964 <HAL_GetTick>
 8003f64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f68:	e00b      	b.n	8003f82 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fd fcfb 	bl	8001964 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e2c4      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003fae:	2202      	movs	r2, #2
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	fa93 f2a3 	rbit	r2, r3
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fc8:	601a      	str	r2, [r3, #0]
  return result;
 8003fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fd2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d102      	bne.n	8003fee <HAL_RCC_OscConfig+0xb4e>
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	e013      	b.n	8004016 <HAL_RCC_OscConfig+0xb76>
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	fa93 f2a3 	rbit	r2, r3
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800401a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800401e:	2102      	movs	r1, #2
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004026:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	fa92 f1a2 	rbit	r1, r2
 8004030:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004034:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004038:	6011      	str	r1, [r2, #0]
  return result;
 800403a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800403e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	fab2 f282 	clz	r2, r2
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	f002 021f 	and.w	r2, r2, #31
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f202 	lsl.w	r2, r1, r2
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d184      	bne.n	8003f6a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004060:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004064:	2b01      	cmp	r3, #1
 8004066:	d105      	bne.n	8004074 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004068:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 800406e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004072:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8242 	beq.w	800450a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <HAL_RCC_OscConfig+0xc58>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	f000 8213 	beq.w	80044ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	f040 8162 	bne.w	800436a <HAL_RCC_OscConfig+0xeca>
 80040a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040aa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80040ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	fa93 f2a3 	rbit	r2, r3
 80040c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040ca:	601a      	str	r2, [r3, #0]
  return result;
 80040cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	461a      	mov	r2, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fd fc3a 	bl	8001964 <HAL_GetTick>
 80040f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f4:	e00c      	b.n	8004110 <HAL_RCC_OscConfig+0xc70>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd fc32 	bl	8001964 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e1fd      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800411c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004122:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004130:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004134:	601a      	str	r2, [r3, #0]
  return result;
 8004136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800413e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d102      	bne.n	800415a <HAL_RCC_OscConfig+0xcba>
 8004154:	4bb0      	ldr	r3, [pc, #704]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	e027      	b.n	80041aa <HAL_RCC_OscConfig+0xd0a>
 800415a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fa93 f2a3 	rbit	r2, r3
 8004176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004192:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80041b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b6:	6011      	str	r1, [r2, #0]
 80041b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	fa92 f1a2 	rbit	r1, r2
 80041c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041ce:	6011      	str	r1, [r2, #0]
  return result;
 80041d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	fab2 f282 	clz	r2, r2
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f042 0220 	orr.w	r2, r2, #32
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	f002 021f 	and.w	r2, r2, #31
 80041ea:	2101      	movs	r1, #1
 80041ec:	fa01 f202 	lsl.w	r2, r1, r2
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d182      	bne.n	80040fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f6:	4b88      	ldr	r3, [pc, #544]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800420a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	430b      	orrs	r3, r1
 8004218:	497f      	ldr	r1, [pc, #508]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
 800421e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004222:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004226:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800422a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004230:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fa93 f2a3 	rbit	r2, r3
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004242:	601a      	str	r2, [r3, #0]
  return result;
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800424c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	461a      	mov	r2, r3
 8004260:	2301      	movs	r3, #1
 8004262:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fd fb7e 	bl	8001964 <HAL_GetTick>
 8004268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800426c:	e009      	b.n	8004282 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd fb79 	bl	8001964 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e144      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800428a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800428e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80042a6:	601a      	str	r2, [r3, #0]
  return result;
 80042a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80042b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d102      	bne.n	80042cc <HAL_RCC_OscConfig+0xe2c>
 80042c6:	4b54      	ldr	r3, [pc, #336]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	e027      	b.n	800431c <HAL_RCC_OscConfig+0xe7c>
 80042cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	fa93 f2a3 	rbit	r2, r3
 80042e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80042fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	fa93 f2a3 	rbit	r2, r3
 800430e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004312:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004320:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004328:	6011      	str	r1, [r2, #0]
 800432a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800432e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	fa92 f1a2 	rbit	r1, r2
 8004338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800433c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004340:	6011      	str	r1, [r2, #0]
  return result;
 8004342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004346:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	fab2 f282 	clz	r2, r2
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f002 021f 	and.w	r2, r2, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f202 	lsl.w	r2, r1, r2
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d082      	beq.n	800426e <HAL_RCC_OscConfig+0xdce>
 8004368:	e0cf      	b.n	800450a <HAL_RCC_OscConfig+0x106a>
 800436a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004372:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	fa93 f2a3 	rbit	r2, r3
 8004386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800438e:	601a      	str	r2, [r3, #0]
  return result;
 8004390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004394:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004398:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	461a      	mov	r2, r3
 80043ac:	2300      	movs	r3, #0
 80043ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7fd fad8 	bl	8001964 <HAL_GetTick>
 80043b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b8:	e009      	b.n	80043ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ba:	f7fd fad3 	bl	8001964 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e09e      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
 80043ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	fa93 f2a3 	rbit	r2, r3
 80043ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80043f2:	601a      	str	r2, [r3, #0]
  return result;
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80043fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d104      	bne.n	800441c <HAL_RCC_OscConfig+0xf7c>
 8004412:	4b01      	ldr	r3, [pc, #4]	; (8004418 <HAL_RCC_OscConfig+0xf78>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	e029      	b.n	800446c <HAL_RCC_OscConfig+0xfcc>
 8004418:	40021000 	.word	0x40021000
 800441c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004420:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	fa93 f2a3 	rbit	r2, r3
 8004438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004446:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800444a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004454:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	fa93 f2a3 	rbit	r2, r3
 800445e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004462:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <HAL_RCC_OscConfig+0x1078>)
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004470:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004474:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004478:	6011      	str	r1, [r2, #0]
 800447a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800447e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	fa92 f1a2 	rbit	r1, r2
 8004488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800448c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004490:	6011      	str	r1, [r2, #0]
  return result;
 8004492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004496:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	fab2 f282 	clz	r2, r2
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	f042 0220 	orr.w	r2, r2, #32
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	f002 021f 	and.w	r2, r2, #31
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f202 	lsl.w	r2, r1, r2
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d180      	bne.n	80043ba <HAL_RCC_OscConfig+0xf1a>
 80044b8:	e027      	b.n	800450a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e01e      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <HAL_RCC_OscConfig+0x1078>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10b      	bne.n	8004506 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80044ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b09e      	sub	sp, #120	; 0x78
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e162      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b90      	ldr	r3, [pc, #576]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d910      	bls.n	8004564 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b8d      	ldr	r3, [pc, #564]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 0207 	bic.w	r2, r3, #7
 800454a:	498b      	ldr	r1, [pc, #556]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b89      	ldr	r3, [pc, #548]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e14a      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004570:	4b82      	ldr	r3, [pc, #520]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	497f      	ldr	r1, [pc, #508]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80dc 	beq.w	8004748 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d13c      	bne.n	8004612 <HAL_RCC_ClockConfig+0xf6>
 8004598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800459c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xa6>
 80045bc:	4b6f      	ldr	r3, [pc, #444]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e00f      	b.n	80045e2 <HAL_RCC_ClockConfig+0xc6>
 80045c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	667b      	str	r3, [r7, #100]	; 0x64
 80045d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d4:	663b      	str	r3, [r7, #96]	; 0x60
 80045d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ea:	fa92 f2a2 	rbit	r2, r2
 80045ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80045f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045f2:	fab2 f282 	clz	r2, r2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	f042 0220 	orr.w	r2, r2, #32
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	f002 021f 	and.w	r2, r2, #31
 8004602:	2101      	movs	r1, #1
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d17b      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e0f3      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d13c      	bne.n	8004694 <HAL_RCC_ClockConfig+0x178>
 800461a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800461e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d102      	bne.n	8004644 <HAL_RCC_ClockConfig+0x128>
 800463e:	4b4f      	ldr	r3, [pc, #316]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	e00f      	b.n	8004664 <HAL_RCC_ClockConfig+0x148>
 8004644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004648:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464c:	fa93 f3a3 	rbit	r3, r3
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
 8004652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004656:	643b      	str	r3, [r7, #64]	; 0x40
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004660:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004668:	63ba      	str	r2, [r7, #56]	; 0x38
 800466a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800466c:	fa92 f2a2 	rbit	r2, r2
 8004670:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004674:	fab2 f282 	clz	r2, r2
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	f042 0220 	orr.w	r2, r2, #32
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	f002 021f 	and.w	r2, r2, #31
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f202 	lsl.w	r2, r1, r2
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d13a      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0b2      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
 8004694:	2302      	movs	r3, #2
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d102      	bne.n	80046bc <HAL_RCC_ClockConfig+0x1a0>
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	e00d      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1bc>
 80046bc:	2302      	movs	r3, #2
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	2302      	movs	r3, #2
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	fa93 f3a3 	rbit	r3, r3
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2202      	movs	r2, #2
 80046da:	61ba      	str	r2, [r7, #24]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	fa92 f2a2 	rbit	r2, r2
 80046e2:	617a      	str	r2, [r7, #20]
  return result;
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	fab2 f282 	clz	r2, r2
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	f042 0220 	orr.w	r2, r2, #32
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f002 021f 	and.w	r2, r2, #31
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e079      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	491a      	ldr	r1, [pc, #104]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004718:	f7fd f924 	bl	8001964 <HAL_GetTick>
 800471c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	e00a      	b.n	8004736 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fd f920 	bl	8001964 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e061      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_RCC_ClockConfig+0x260>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 020c 	and.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	429a      	cmp	r2, r3
 8004746:	d1eb      	bne.n	8004720 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d214      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 0207 	bic.w	r2, r3, #7
 800475e:	4906      	ldr	r1, [pc, #24]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b04      	ldr	r3, [pc, #16]	; (8004778 <HAL_RCC_ClockConfig+0x25c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e040      	b.n	80047fa <HAL_RCC_ClockConfig+0x2de>
 8004778:	40022000 	.word	0x40022000
 800477c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478c:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	491a      	ldr	r1, [pc, #104]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047aa:	4b16      	ldr	r3, [pc, #88]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4912      	ldr	r1, [pc, #72]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047be:	f000 f829 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 80047c2:	4601      	mov	r1, r0
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_RCC_ClockConfig+0x2e8>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047cc:	22f0      	movs	r2, #240	; 0xf0
 80047ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	fa92 f2a2 	rbit	r2, r2
 80047d6:	60fa      	str	r2, [r7, #12]
  return result;
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	fab2 f282 	clz	r2, r2
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	40d3      	lsrs	r3, r2
 80047e2:	4a09      	ldr	r2, [pc, #36]	; (8004808 <HAL_RCC_ClockConfig+0x2ec>)
 80047e4:	5cd3      	ldrb	r3, [r2, r3]
 80047e6:	fa21 f303 	lsr.w	r3, r1, r3
 80047ea:	4a08      	ldr	r2, [pc, #32]	; (800480c <HAL_RCC_ClockConfig+0x2f0>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_RCC_ClockConfig+0x2f4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fc fef0 	bl	80015d8 <HAL_InitTick>
  
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3778      	adds	r7, #120	; 0x78
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	0800c510 	.word	0x0800c510
 800480c:	20000014 	.word	0x20000014
 8004810:	20000018 	.word	0x20000018

08004814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	b08b      	sub	sp, #44	; 0x2c
 8004818:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	2300      	movs	r3, #0
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800482e:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b04      	cmp	r3, #4
 800483c:	d002      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x30>
 800483e:	2b08      	cmp	r3, #8
 8004840:	d003      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0x36>
 8004842:	e03c      	b.n	80048be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004846:	623b      	str	r3, [r7, #32]
      break;
 8004848:	e03c      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004850:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004854:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	fa92 f2a2 	rbit	r2, r2
 800485c:	607a      	str	r2, [r7, #4]
  return result;
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	fab2 f282 	clz	r2, r2
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	40d3      	lsrs	r3, r2
 8004868:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800486e:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	220f      	movs	r2, #15
 8004878:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	fa92 f2a2 	rbit	r2, r2
 8004880:	60fa      	str	r2, [r7, #12]
  return result;
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	fab2 f282 	clz	r2, r2
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	40d3      	lsrs	r3, r2
 800488c:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800489c:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	e004      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	623b      	str	r3, [r7, #32]
      break;
 80048bc:	e002      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048c0:	623b      	str	r3, [r7, #32]
      break;
 80048c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c4:	6a3b      	ldr	r3, [r7, #32]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	372c      	adds	r7, #44	; 0x2c
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	007a1200 	.word	0x007a1200
 80048dc:	0800c528 	.word	0x0800c528
 80048e0:	0800c538 	.word	0x0800c538
 80048e4:	003d0900 	.word	0x003d0900

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000014 	.word	0x20000014

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004906:	f7ff ffef 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 800490a:	4601      	mov	r1, r0
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004914:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004918:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	fa92 f2a2 	rbit	r2, r2
 8004920:	603a      	str	r2, [r7, #0]
  return result;
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	fab2 f282 	clz	r2, r2
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	40d3      	lsrs	r3, r2
 800492c:	4a04      	ldr	r2, [pc, #16]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x40>)
 800492e:	5cd3      	ldrb	r3, [r2, r3]
 8004930:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	0800c520 	.word	0x0800c520

08004944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800494a:	f7ff ffcd 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 800494e:	4601      	mov	r1, r0
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004958:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800495c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	fa92 f2a2 	rbit	r2, r2
 8004964:	603a      	str	r2, [r7, #0]
  return result;
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	fab2 f282 	clz	r2, r2
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	40d3      	lsrs	r3, r2
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004972:	5cd3      	ldrb	r3, [r2, r3]
 8004974:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	0800c520 	.word	0x0800c520

08004988 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	220f      	movs	r2, #15
 8004996:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004998:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_RCC_GetClockConfig+0x5c>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0203 	and.w	r2, r3, #3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <HAL_RCC_GetClockConfig+0x5c>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_RCC_GetClockConfig+0x5c>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_RCC_GetClockConfig+0x5c>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	08db      	lsrs	r3, r3, #3
 80049c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <HAL_RCC_GetClockConfig+0x60>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0207 	and.w	r2, r3, #7
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40022000 	.word	0x40022000

080049ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b092      	sub	sp, #72	; 0x48
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80d4 	beq.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a10:	4b4e      	ldr	r3, [pc, #312]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10e      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1c:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	4a4a      	ldr	r2, [pc, #296]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a26:	61d3      	str	r3, [r2, #28]
 8004a28:	4b48      	ldr	r3, [pc, #288]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3a:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d118      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a46:	4b42      	ldr	r3, [pc, #264]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a41      	ldr	r2, [pc, #260]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a52:	f7fc ff87 	bl	8001964 <HAL_GetTick>
 8004a56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	e008      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5a:	f7fc ff83 	bl	8001964 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b64      	cmp	r3, #100	; 0x64
 8004a66:	d901      	bls.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e169      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6c:	4b38      	ldr	r3, [pc, #224]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a78:	4b34      	ldr	r3, [pc, #208]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8084 	beq.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d07c      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a98:	4b2c      	ldr	r3, [pc, #176]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004aea:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d04b      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fc ff33 	bl	8001964 <HAL_GetTick>
 8004afe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fc ff2f 	bl	8001964 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e113      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
 8004b24:	2302      	movs	r3, #2
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	fa93 f3a3 	rbit	r3, r3
 8004b2e:	61fb      	str	r3, [r7, #28]
  return result;
 8004b30:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b32:	fab3 f383 	clz	r3, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f043 0302 	orr.w	r3, r3, #2
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d108      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b46:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	e00d      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40007000 	.word	0x40007000
 8004b54:	10908100 	.word	0x10908100
 8004b58:	2302      	movs	r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	4b78      	ldr	r3, [pc, #480]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2202      	movs	r2, #2
 8004b6a:	613a      	str	r2, [r7, #16]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	fa92 f2a2 	rbit	r2, r2
 8004b72:	60fa      	str	r2, [r7, #12]
  return result;
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	fab2 f282 	clz	r2, r2
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	f002 021f 	and.w	r2, r2, #31
 8004b86:	2101      	movs	r1, #1
 8004b88:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0b7      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b92:	4b6d      	ldr	r3, [pc, #436]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	496a      	ldr	r1, [pc, #424]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ba4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bac:	4b66      	ldr	r3, [pc, #408]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	4a65      	ldr	r2, [pc, #404]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc4:	4b60      	ldr	r3, [pc, #384]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	f023 0203 	bic.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	495d      	ldr	r1, [pc, #372]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be2:	4b59      	ldr	r3, [pc, #356]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4956      	ldr	r1, [pc, #344]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c00:	4b51      	ldr	r3, [pc, #324]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	494e      	ldr	r1, [pc, #312]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c1e:	4b4a      	ldr	r3, [pc, #296]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f023 0210 	bic.w	r2, r3, #16
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4947      	ldr	r1, [pc, #284]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c3c:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	493f      	ldr	r1, [pc, #252]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f023 0220 	bic.w	r2, r3, #32
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4938      	ldr	r1, [pc, #224]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c78:	4b33      	ldr	r3, [pc, #204]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	4930      	ldr	r1, [pc, #192]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c96:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	4929      	ldr	r1, [pc, #164]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4921      	ldr	r1, [pc, #132]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	491a      	ldr	r1, [pc, #104]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004cf0:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	4912      	ldr	r1, [pc, #72]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d0e:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	490b      	ldr	r1, [pc, #44]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	4903      	ldr	r1, [pc, #12]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3748      	adds	r7, #72	; 0x48
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000

08004d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e09d      	b.n	8004e9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d108      	bne.n	8004d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d6e:	d009      	beq.n	8004d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
 8004d76:	e005      	b.n	8004d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc fa28 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc4:	d902      	bls.n	8004dcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	e002      	b.n	8004dd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004dda:	d007      	beq.n	8004dec <HAL_SPI_Init+0xa0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004de4:	d002      	beq.n	8004dec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	ea42 0103 	orr.w	r1, r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	0c1b      	lsrs	r3, r3, #16
 8004e48:	f003 0204 	and.w	r2, r3, #4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e68:	ea42 0103 	orr.w	r1, r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e049      	b.n	8004f48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f841 	bl	8004f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f000 fc5d 	bl	80057a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d001      	beq.n	8004f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e04a      	b.n	8005012 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a21      	ldr	r2, [pc, #132]	; (8005020 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d018      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d013      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <HAL_TIM_Base_Start_IT+0xc0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1a      	ldr	r2, [pc, #104]	; (800502c <HAL_TIM_Base_Start_IT+0xc8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a19      	ldr	r2, [pc, #100]	; (8005030 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d115      	bne.n	8004ffc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	4b17      	ldr	r3, [pc, #92]	; (8005034 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d015      	beq.n	800500e <HAL_TIM_Base_Start_IT+0xaa>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe8:	d011      	beq.n	800500e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffa:	e008      	b.n	800500e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	e000      	b.n	8005010 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	00010007 	.word	0x00010007

08005038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e049      	b.n	80050de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fc f90a 	bl	8001278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f000 fb92 	bl	80057a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <HAL_TIM_PWM_Start+0x24>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e03c      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d109      	bne.n	8005126 <HAL_TIM_PWM_Start+0x3e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e02f      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b08      	cmp	r3, #8
 800512a:	d109      	bne.n	8005140 <HAL_TIM_PWM_Start+0x58>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e022      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d109      	bne.n	800515a <HAL_TIM_PWM_Start+0x72>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	bf14      	ite	ne
 8005152:	2301      	movne	r3, #1
 8005154:	2300      	moveq	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	e015      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b10      	cmp	r3, #16
 800515e:	d109      	bne.n	8005174 <HAL_TIM_PWM_Start+0x8c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e008      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e097      	b.n	80052be <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_TIM_PWM_Start+0xb6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519c:	e023      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_PWM_Start+0xc6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ac:	e01b      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0xd6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051bc:	e013      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_PWM_Start+0xe6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051cc:	e00b      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	d104      	bne.n	80051de <HAL_TIM_PWM_Start+0xf6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051dc:	e003      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2201      	movs	r2, #1
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fe3c 	bl	8005e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a33      	ldr	r2, [pc, #204]	; (80052c8 <HAL_TIM_PWM_Start+0x1e0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_TIM_PWM_Start+0x13e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a32      	ldr	r2, [pc, #200]	; (80052cc <HAL_TIM_PWM_Start+0x1e4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_TIM_PWM_Start+0x13e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a30      	ldr	r2, [pc, #192]	; (80052d0 <HAL_TIM_PWM_Start+0x1e8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_TIM_PWM_Start+0x13e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <HAL_TIM_PWM_Start+0x1ec>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_TIM_PWM_Start+0x13e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2d      	ldr	r2, [pc, #180]	; (80052d8 <HAL_TIM_PWM_Start+0x1f0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_TIM_PWM_Start+0x142>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <HAL_TIM_PWM_Start+0x144>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800523e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a20      	ldr	r2, [pc, #128]	; (80052c8 <HAL_TIM_PWM_Start+0x1e0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_TIM_PWM_Start+0x194>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005252:	d013      	beq.n	800527c <HAL_TIM_PWM_Start+0x194>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a20      	ldr	r2, [pc, #128]	; (80052dc <HAL_TIM_PWM_Start+0x1f4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_TIM_PWM_Start+0x194>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_TIM_PWM_Start+0x194>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a17      	ldr	r2, [pc, #92]	; (80052cc <HAL_TIM_PWM_Start+0x1e4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_TIM_PWM_Start+0x194>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <HAL_TIM_PWM_Start+0x1e8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d115      	bne.n	80052a8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <HAL_TIM_PWM_Start+0x1fc>)
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b06      	cmp	r3, #6
 800528c:	d015      	beq.n	80052ba <HAL_TIM_PWM_Start+0x1d2>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d011      	beq.n	80052ba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	e008      	b.n	80052ba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e000      	b.n	80052bc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40013400 	.word	0x40013400
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400
 80052d8:	40014800 	.word	0x40014800
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	00010007 	.word	0x00010007

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa1a 	bl	8005764 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa0c 	bl	8005750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa1d 	bl	8005778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9f0 	bl	8005764 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f9e2 	bl	8005750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f9f3 	bl	8005778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f9c6 	bl	8005764 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9b8 	bl	8005750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f9c9 	bl	8005778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2208      	movs	r2, #8
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f99c 	bl	8005764 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f98e 	bl	8005750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f99f 	bl	8005778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0201 	mvn.w	r2, #1
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fe04 	bl	8001074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fd9a 	bl	8005fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a6:	d10e      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fd8d 	bl	8005fe0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d10e      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f94d 	bl	800578c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f06f 0220 	mvn.w	r2, #32
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fd4d 	bl	8005fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005542:	2302      	movs	r3, #2
 8005544:	e0ff      	b.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b14      	cmp	r3, #20
 8005552:	f200 80f0 	bhi.w	8005736 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	080055b1 	.word	0x080055b1
 8005560:	08005737 	.word	0x08005737
 8005564:	08005737 	.word	0x08005737
 8005568:	08005737 	.word	0x08005737
 800556c:	080055f1 	.word	0x080055f1
 8005570:	08005737 	.word	0x08005737
 8005574:	08005737 	.word	0x08005737
 8005578:	08005737 	.word	0x08005737
 800557c:	08005633 	.word	0x08005633
 8005580:	08005737 	.word	0x08005737
 8005584:	08005737 	.word	0x08005737
 8005588:	08005737 	.word	0x08005737
 800558c:	08005673 	.word	0x08005673
 8005590:	08005737 	.word	0x08005737
 8005594:	08005737 	.word	0x08005737
 8005598:	08005737 	.word	0x08005737
 800559c:	080056b5 	.word	0x080056b5
 80055a0:	08005737 	.word	0x08005737
 80055a4:	08005737 	.word	0x08005737
 80055a8:	08005737 	.word	0x08005737
 80055ac:	080056f5 	.word	0x080056f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f982 	bl	80058c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0208 	orr.w	r2, r2, #8
 80055ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0204 	bic.w	r2, r2, #4
 80055da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6999      	ldr	r1, [r3, #24]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	619a      	str	r2, [r3, #24]
      break;
 80055ee:	e0a5      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f9f2 	bl	80059e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	619a      	str	r2, [r3, #24]
      break;
 8005630:	e084      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fa5b 	bl	8005af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0208 	orr.w	r2, r2, #8
 800564c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0204 	bic.w	r2, r2, #4
 800565c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69d9      	ldr	r1, [r3, #28]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	61da      	str	r2, [r3, #28]
      break;
 8005670:	e064      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fac3 	bl	8005c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	021a      	lsls	r2, r3, #8
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	61da      	str	r2, [r3, #28]
      break;
 80056b2:	e043      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fb0c 	bl	8005cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0208 	orr.w	r2, r2, #8
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0204 	bic.w	r2, r2, #4
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f2:	e023      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fb50 	bl	8005da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800570e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005734:	e002      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	75fb      	strb	r3, [r7, #23]
      break;
 800573a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop

08005750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3c      	ldr	r2, [pc, #240]	; (80058a4 <TIM_Base_SetConfig+0x104>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x38>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x38>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a39      	ldr	r2, [pc, #228]	; (80058a8 <TIM_Base_SetConfig+0x108>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x38>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a38      	ldr	r2, [pc, #224]	; (80058ac <TIM_Base_SetConfig+0x10c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x38>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a37      	ldr	r2, [pc, #220]	; (80058b0 <TIM_Base_SetConfig+0x110>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <TIM_Base_SetConfig+0x104>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01b      	beq.n	800582a <TIM_Base_SetConfig+0x8a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f8:	d017      	beq.n	800582a <TIM_Base_SetConfig+0x8a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2a      	ldr	r2, [pc, #168]	; (80058a8 <TIM_Base_SetConfig+0x108>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <TIM_Base_SetConfig+0x8a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a29      	ldr	r2, [pc, #164]	; (80058ac <TIM_Base_SetConfig+0x10c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00f      	beq.n	800582a <TIM_Base_SetConfig+0x8a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <TIM_Base_SetConfig+0x110>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_Base_SetConfig+0x8a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a27      	ldr	r2, [pc, #156]	; (80058b4 <TIM_Base_SetConfig+0x114>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_Base_SetConfig+0x8a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <TIM_Base_SetConfig+0x118>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a25      	ldr	r2, [pc, #148]	; (80058bc <TIM_Base_SetConfig+0x11c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a10      	ldr	r2, [pc, #64]	; (80058a4 <TIM_Base_SetConfig+0x104>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00f      	beq.n	8005888 <TIM_Base_SetConfig+0xe8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <TIM_Base_SetConfig+0x110>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_Base_SetConfig+0xe8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a10      	ldr	r2, [pc, #64]	; (80058b4 <TIM_Base_SetConfig+0x114>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_Base_SetConfig+0xe8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a0f      	ldr	r2, [pc, #60]	; (80058b8 <TIM_Base_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_Base_SetConfig+0xe8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0e      	ldr	r2, [pc, #56]	; (80058bc <TIM_Base_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d103      	bne.n	8005890 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	615a      	str	r2, [r3, #20]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40013400 	.word	0x40013400
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800

080058c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f023 0201 	bic.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 0302 	bic.w	r3, r3, #2
 800590c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <TIM_OC1_SetConfig+0x10c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00f      	beq.n	8005940 <TIM_OC1_SetConfig+0x80>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a2b      	ldr	r2, [pc, #172]	; (80059d0 <TIM_OC1_SetConfig+0x110>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_OC1_SetConfig+0x80>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a2a      	ldr	r2, [pc, #168]	; (80059d4 <TIM_OC1_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_OC1_SetConfig+0x80>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a29      	ldr	r2, [pc, #164]	; (80059d8 <TIM_OC1_SetConfig+0x118>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC1_SetConfig+0x80>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a28      	ldr	r2, [pc, #160]	; (80059dc <TIM_OC1_SetConfig+0x11c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10c      	bne.n	800595a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 0308 	bic.w	r3, r3, #8
 8005946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f023 0304 	bic.w	r3, r3, #4
 8005958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <TIM_OC1_SetConfig+0x10c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00f      	beq.n	8005982 <TIM_OC1_SetConfig+0xc2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a1a      	ldr	r2, [pc, #104]	; (80059d0 <TIM_OC1_SetConfig+0x110>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_OC1_SetConfig+0xc2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <TIM_OC1_SetConfig+0x114>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_OC1_SetConfig+0xc2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a18      	ldr	r2, [pc, #96]	; (80059d8 <TIM_OC1_SetConfig+0x118>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_OC1_SetConfig+0xc2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a17      	ldr	r2, [pc, #92]	; (80059dc <TIM_OC1_SetConfig+0x11c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d111      	bne.n	80059a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40013400 	.word	0x40013400
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40014400 	.word	0x40014400
 80059dc:	40014800 	.word	0x40014800

080059e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0210 	bic.w	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f023 0320 	bic.w	r3, r3, #32
 8005a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <TIM_OC2_SetConfig+0x100>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC2_SetConfig+0x6c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a27      	ldr	r2, [pc, #156]	; (8005ae4 <TIM_OC2_SetConfig+0x104>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d10d      	bne.n	8005a68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <TIM_OC2_SetConfig+0x100>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00f      	beq.n	8005a90 <TIM_OC2_SetConfig+0xb0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <TIM_OC2_SetConfig+0x104>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00b      	beq.n	8005a90 <TIM_OC2_SetConfig+0xb0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <TIM_OC2_SetConfig+0x108>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d007      	beq.n	8005a90 <TIM_OC2_SetConfig+0xb0>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <TIM_OC2_SetConfig+0x10c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_OC2_SetConfig+0xb0>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <TIM_OC2_SetConfig+0x110>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d113      	bne.n	8005ab8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a96:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40013400 	.word	0x40013400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800

08005af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a27      	ldr	r2, [pc, #156]	; (8005bf0 <TIM_OC3_SetConfig+0xfc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_OC3_SetConfig+0x6a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <TIM_OC3_SetConfig+0x100>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10d      	bne.n	8005b7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b78:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1c      	ldr	r2, [pc, #112]	; (8005bf0 <TIM_OC3_SetConfig+0xfc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00f      	beq.n	8005ba2 <TIM_OC3_SetConfig+0xae>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <TIM_OC3_SetConfig+0x100>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00b      	beq.n	8005ba2 <TIM_OC3_SetConfig+0xae>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <TIM_OC3_SetConfig+0x104>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <TIM_OC3_SetConfig+0xae>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <TIM_OC3_SetConfig+0x108>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_OC3_SetConfig+0xae>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a18      	ldr	r2, [pc, #96]	; (8005c00 <TIM_OC3_SetConfig+0x10c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d113      	bne.n	8005bca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800

08005c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	031b      	lsls	r3, r3, #12
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a18      	ldr	r2, [pc, #96]	; (8005cc4 <TIM_OC4_SetConfig+0xc0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00f      	beq.n	8005c88 <TIM_OC4_SetConfig+0x84>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <TIM_OC4_SetConfig+0xc4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00b      	beq.n	8005c88 <TIM_OC4_SetConfig+0x84>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <TIM_OC4_SetConfig+0xc8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d007      	beq.n	8005c88 <TIM_OC4_SetConfig+0x84>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <TIM_OC4_SetConfig+0xcc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_OC4_SetConfig+0x84>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <TIM_OC4_SetConfig+0xd0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d109      	bne.n	8005c9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	019b      	lsls	r3, r3, #6
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40013400 	.word	0x40013400
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800

08005cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <TIM_OC5_SetConfig+0xb4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <TIM_OC5_SetConfig+0x7a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <TIM_OC5_SetConfig+0xb8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00b      	beq.n	8005d52 <TIM_OC5_SetConfig+0x7a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <TIM_OC5_SetConfig+0xbc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <TIM_OC5_SetConfig+0x7a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <TIM_OC5_SetConfig+0xc0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <TIM_OC5_SetConfig+0x7a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <TIM_OC5_SetConfig+0xc4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d109      	bne.n	8005d66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	621a      	str	r2, [r3, #32]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40014400 	.word	0x40014400
 8005d9c:	40014800 	.word	0x40014800

08005da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	051b      	lsls	r3, r3, #20
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <TIM_OC6_SetConfig+0xb8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_OC6_SetConfig+0x7c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <TIM_OC6_SetConfig+0xbc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_OC6_SetConfig+0x7c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <TIM_OC6_SetConfig+0xc0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_OC6_SetConfig+0x7c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <TIM_OC6_SetConfig+0xc4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC6_SetConfig+0x7c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <TIM_OC6_SetConfig+0xc8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40013400 	.word	0x40013400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800

08005e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2201      	movs	r2, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	401a      	ands	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e063      	b.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d108      	bne.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d018      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f42:	d013      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a18      	ldr	r2, [pc, #96]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00e      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d009      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d10c      	bne.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40012c00 	.word	0x40012c00
 8005fa8:	40013400 	.word	0x40013400
 8005fac:	40000400 	.word	0x40000400
 8005fb0:	40000800 	.word	0x40000800
 8005fb4:	40014000 	.word	0x40014000

08005fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e040      	b.n	8006088 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fb fa32 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2224      	movs	r2, #36	; 0x24
 8006020:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fc00 	bl	8006838 <UART_SetConfig>
 8006038:	4603      	mov	r3, r0
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e022      	b.n	8006088 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fdc8 	bl	8006be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800605e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800606e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fe4f 	bl	8006d24 <UART_CheckIdleState>
 8006086:	4603      	mov	r3, r0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d178      	bne.n	800619a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_UART_Transmit+0x24>
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e071      	b.n	800619c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2221      	movs	r2, #33	; 0x21
 80060c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060c6:	f7fb fc4d 	bl	8001964 <HAL_GetTick>
 80060ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e4:	d108      	bne.n	80060f8 <HAL_UART_Transmit+0x68>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	e003      	b.n	8006100 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006100:	e030      	b.n	8006164 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 feb1 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e03c      	b.n	800619c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	881a      	ldrh	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006134:	b292      	uxth	r2, r2
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	3302      	adds	r3, #2
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e008      	b.n	8006152 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	781a      	ldrb	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	b292      	uxth	r2, r2
 800614a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	3301      	adds	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1c8      	bne.n	8006102 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	2140      	movs	r1, #64	; 0x40
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 fe7a 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e005      	b.n	800619c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2220      	movs	r2, #32
 8006194:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e000      	b.n	800619c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800619a:	2302      	movs	r3, #2
  }
}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08a      	sub	sp, #40	; 0x28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	d132      	bne.n	8006222 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_UART_Receive_IT+0x24>
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e02b      	b.n	8006224 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d018      	beq.n	8006212 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	613b      	str	r3, [r7, #16]
   return(result);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	69f9      	ldr	r1, [r7, #28]
 8006204:	6a3a      	ldr	r2, [r7, #32]
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	61bb      	str	r3, [r7, #24]
   return(result);
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e6      	bne.n	80061e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	461a      	mov	r2, r3
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fe93 	bl	8006f44 <UART_Start_Receive_IT>
 800621e:	4603      	mov	r3, r0
 8006220:	e000      	b.n	8006224 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3728      	adds	r7, #40	; 0x28
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b0ba      	sub	sp, #232	; 0xe8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006256:	f640 030f 	movw	r3, #2063	; 0x80f
 800625a:	4013      	ands	r3, r2
 800625c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006264:	2b00      	cmp	r3, #0
 8006266:	d115      	bne.n	8006294 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00f      	beq.n	8006294 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 82ab 	beq.w	80067e0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4798      	blx	r3
      }
      return;
 8006292:	e2a5      	b.n	80067e0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8117 	beq.w	80064cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800629e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062ae:	4b85      	ldr	r3, [pc, #532]	; (80064c4 <HAL_UART_IRQHandler+0x298>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 810a 	beq.w	80064cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <HAL_UART_IRQHandler+0xbc>
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2201      	movs	r2, #1
 80062d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062de:	f043 0201 	orr.w	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d011      	beq.n	8006318 <HAL_UART_IRQHandler+0xec>
 80062f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2202      	movs	r2, #2
 8006306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800630e:	f043 0204 	orr.w	r2, r3, #4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d011      	beq.n	8006348 <HAL_UART_IRQHandler+0x11c>
 8006324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2204      	movs	r2, #4
 8006336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800633e:	f043 0202 	orr.w	r2, r3, #2
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006364:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2208      	movs	r2, #8
 8006372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637a:	f043 0208 	orr.w	r2, r3, #8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638c:	2b00      	cmp	r3, #0
 800638e:	d012      	beq.n	80063b6 <HAL_UART_IRQHandler+0x18a>
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8211 	beq.w	80067e4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00d      	beq.n	80063ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d005      	beq.n	800640e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006406:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800640a:	2b00      	cmp	r3, #0
 800640c:	d04f      	beq.n	80064ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fe4c 	bl	80070ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d141      	bne.n	80064a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800643c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800644e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800645a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1d9      	bne.n	8006422 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006472:	2b00      	cmp	r3, #0
 8006474:	d013      	beq.n	800649e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647a:	4a13      	ldr	r2, [pc, #76]	; (80064c8 <HAL_UART_IRQHandler+0x29c>)
 800647c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006482:	4618      	mov	r0, r3
 8006484:	f7fc fc43 	bl	8002d0e <HAL_DMA_Abort_IT>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d017      	beq.n	80064be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649c:	e00f      	b.n	80064be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f9b4 	bl	800680c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	e00b      	b.n	80064be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9b0 	bl	800680c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e007      	b.n	80064be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9ac 	bl	800680c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80064bc:	e192      	b.n	80067e4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064be:	bf00      	nop
    return;
 80064c0:	e190      	b.n	80067e4 <HAL_UART_IRQHandler+0x5b8>
 80064c2:	bf00      	nop
 80064c4:	04000120 	.word	0x04000120
 80064c8:	08007175 	.word	0x08007175

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	f040 814b 	bne.w	800676c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8144 	beq.w	800676c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 813d 	beq.w	800676c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2210      	movs	r2, #16
 80064f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	f040 80b5 	bne.w	8006674 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006516:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8164 	beq.w	80067e8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800652a:	429a      	cmp	r2, r3
 800652c:	f080 815c 	bcs.w	80067e8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b20      	cmp	r3, #32
 8006542:	f000 8086 	beq.w	8006652 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800655a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800655e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006574:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800657c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1da      	bne.n	8006546 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e1      	bne.n	8006590 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3308      	adds	r3, #8
 80065d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e3      	bne.n	80065cc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006622:	f023 0310 	bic.w	r3, r3, #16
 8006626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006634:	65bb      	str	r3, [r7, #88]	; 0x58
 8006636:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800663a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e4      	bne.n	8006612 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664c:	4618      	mov	r0, r3
 800664e:	f7fc fb25 	bl	8002c9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006664:	b29b      	uxth	r3, r3
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	b29b      	uxth	r3, r3
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f8d7 	bl	8006820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006672:	e0b9      	b.n	80067e8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006680:	b29b      	uxth	r3, r3
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80ab 	beq.w	80067ec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80a6 	beq.w	80067ec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066c2:	647b      	str	r3, [r7, #68]	; 0x44
 80066c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e4      	bne.n	80066a0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	623b      	str	r3, [r7, #32]
   return(result);
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066fa:	633a      	str	r2, [r7, #48]	; 0x30
 80066fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e3      	bne.n	80066d6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0310 	bic.w	r3, r3, #16
 8006736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	69b9      	ldr	r1, [r7, #24]
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	617b      	str	r3, [r7, #20]
   return(result);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e4      	bne.n	8006722 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800675e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f85b 	bl	8006820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800676a:	e03f      	b.n	80067ec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800676c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00e      	beq.n	8006796 <HAL_UART_IRQHandler+0x56a>
 8006778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800677c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800678c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fed8 	bl	8007544 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006794:	e02d      	b.n	80067f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01c      	beq.n	80067f0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
    }
    return;
 80067be:	e017      	b.n	80067f0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d012      	beq.n	80067f2 <HAL_UART_IRQHandler+0x5c6>
 80067cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00c      	beq.n	80067f2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fce1 	bl	80071a0 <UART_EndTransmit_IT>
    return;
 80067de:	e008      	b.n	80067f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80067e0:	bf00      	nop
 80067e2:	e006      	b.n	80067f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80067e4:	bf00      	nop
 80067e6:	e004      	b.n	80067f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80067e8:	bf00      	nop
 80067ea:	e002      	b.n	80067f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80067ec:	bf00      	nop
 80067ee:	e000      	b.n	80067f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80067f0:	bf00      	nop
  }

}
 80067f2:	37e8      	adds	r7, #232	; 0xe8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006866:	f023 030c 	bic.w	r3, r3, #12
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	6979      	ldr	r1, [r7, #20]
 8006870:	430b      	orrs	r3, r1
 8006872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4aa7      	ldr	r2, [pc, #668]	; (8006b50 <UART_SetConfig+0x318>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d120      	bne.n	80068fa <UART_SetConfig+0xc2>
 80068b8:	4ba6      	ldr	r3, [pc, #664]	; (8006b54 <UART_SetConfig+0x31c>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	f003 0303 	and.w	r3, r3, #3
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d817      	bhi.n	80068f4 <UART_SetConfig+0xbc>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <UART_SetConfig+0x94>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068e9 	.word	0x080068e9
 80068d4:	080068ef 	.word	0x080068ef
 80068d8:	080068e3 	.word	0x080068e3
 80068dc:	2301      	movs	r3, #1
 80068de:	77fb      	strb	r3, [r7, #31]
 80068e0:	e0b5      	b.n	8006a4e <UART_SetConfig+0x216>
 80068e2:	2302      	movs	r3, #2
 80068e4:	77fb      	strb	r3, [r7, #31]
 80068e6:	e0b2      	b.n	8006a4e <UART_SetConfig+0x216>
 80068e8:	2304      	movs	r3, #4
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e0af      	b.n	8006a4e <UART_SetConfig+0x216>
 80068ee:	2308      	movs	r3, #8
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e0ac      	b.n	8006a4e <UART_SetConfig+0x216>
 80068f4:	2310      	movs	r3, #16
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e0a9      	b.n	8006a4e <UART_SetConfig+0x216>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a96      	ldr	r2, [pc, #600]	; (8006b58 <UART_SetConfig+0x320>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d124      	bne.n	800694e <UART_SetConfig+0x116>
 8006904:	4b93      	ldr	r3, [pc, #588]	; (8006b54 <UART_SetConfig+0x31c>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800690c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006910:	d011      	beq.n	8006936 <UART_SetConfig+0xfe>
 8006912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006916:	d817      	bhi.n	8006948 <UART_SetConfig+0x110>
 8006918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800691c:	d011      	beq.n	8006942 <UART_SetConfig+0x10a>
 800691e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006922:	d811      	bhi.n	8006948 <UART_SetConfig+0x110>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <UART_SetConfig+0xf8>
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692c:	d006      	beq.n	800693c <UART_SetConfig+0x104>
 800692e:	e00b      	b.n	8006948 <UART_SetConfig+0x110>
 8006930:	2300      	movs	r3, #0
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e08b      	b.n	8006a4e <UART_SetConfig+0x216>
 8006936:	2302      	movs	r3, #2
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e088      	b.n	8006a4e <UART_SetConfig+0x216>
 800693c:	2304      	movs	r3, #4
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e085      	b.n	8006a4e <UART_SetConfig+0x216>
 8006942:	2308      	movs	r3, #8
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e082      	b.n	8006a4e <UART_SetConfig+0x216>
 8006948:	2310      	movs	r3, #16
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e07f      	b.n	8006a4e <UART_SetConfig+0x216>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a82      	ldr	r2, [pc, #520]	; (8006b5c <UART_SetConfig+0x324>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d124      	bne.n	80069a2 <UART_SetConfig+0x16a>
 8006958:	4b7e      	ldr	r3, [pc, #504]	; (8006b54 <UART_SetConfig+0x31c>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006960:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006964:	d011      	beq.n	800698a <UART_SetConfig+0x152>
 8006966:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800696a:	d817      	bhi.n	800699c <UART_SetConfig+0x164>
 800696c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006970:	d011      	beq.n	8006996 <UART_SetConfig+0x15e>
 8006972:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006976:	d811      	bhi.n	800699c <UART_SetConfig+0x164>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <UART_SetConfig+0x14c>
 800697c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006980:	d006      	beq.n	8006990 <UART_SetConfig+0x158>
 8006982:	e00b      	b.n	800699c <UART_SetConfig+0x164>
 8006984:	2300      	movs	r3, #0
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e061      	b.n	8006a4e <UART_SetConfig+0x216>
 800698a:	2302      	movs	r3, #2
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e05e      	b.n	8006a4e <UART_SetConfig+0x216>
 8006990:	2304      	movs	r3, #4
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e05b      	b.n	8006a4e <UART_SetConfig+0x216>
 8006996:	2308      	movs	r3, #8
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e058      	b.n	8006a4e <UART_SetConfig+0x216>
 800699c:	2310      	movs	r3, #16
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e055      	b.n	8006a4e <UART_SetConfig+0x216>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a6e      	ldr	r2, [pc, #440]	; (8006b60 <UART_SetConfig+0x328>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d124      	bne.n	80069f6 <UART_SetConfig+0x1be>
 80069ac:	4b69      	ldr	r3, [pc, #420]	; (8006b54 <UART_SetConfig+0x31c>)
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80069b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069b8:	d011      	beq.n	80069de <UART_SetConfig+0x1a6>
 80069ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069be:	d817      	bhi.n	80069f0 <UART_SetConfig+0x1b8>
 80069c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069c4:	d011      	beq.n	80069ea <UART_SetConfig+0x1b2>
 80069c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069ca:	d811      	bhi.n	80069f0 <UART_SetConfig+0x1b8>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <UART_SetConfig+0x1a0>
 80069d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d4:	d006      	beq.n	80069e4 <UART_SetConfig+0x1ac>
 80069d6:	e00b      	b.n	80069f0 <UART_SetConfig+0x1b8>
 80069d8:	2300      	movs	r3, #0
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e037      	b.n	8006a4e <UART_SetConfig+0x216>
 80069de:	2302      	movs	r3, #2
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e034      	b.n	8006a4e <UART_SetConfig+0x216>
 80069e4:	2304      	movs	r3, #4
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e031      	b.n	8006a4e <UART_SetConfig+0x216>
 80069ea:	2308      	movs	r3, #8
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e02e      	b.n	8006a4e <UART_SetConfig+0x216>
 80069f0:	2310      	movs	r3, #16
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e02b      	b.n	8006a4e <UART_SetConfig+0x216>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5a      	ldr	r2, [pc, #360]	; (8006b64 <UART_SetConfig+0x32c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d124      	bne.n	8006a4a <UART_SetConfig+0x212>
 8006a00:	4b54      	ldr	r3, [pc, #336]	; (8006b54 <UART_SetConfig+0x31c>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006a08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a0c:	d011      	beq.n	8006a32 <UART_SetConfig+0x1fa>
 8006a0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a12:	d817      	bhi.n	8006a44 <UART_SetConfig+0x20c>
 8006a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a18:	d011      	beq.n	8006a3e <UART_SetConfig+0x206>
 8006a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a1e:	d811      	bhi.n	8006a44 <UART_SetConfig+0x20c>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <UART_SetConfig+0x1f4>
 8006a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a28:	d006      	beq.n	8006a38 <UART_SetConfig+0x200>
 8006a2a:	e00b      	b.n	8006a44 <UART_SetConfig+0x20c>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e00d      	b.n	8006a4e <UART_SetConfig+0x216>
 8006a32:	2302      	movs	r3, #2
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e00a      	b.n	8006a4e <UART_SetConfig+0x216>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e007      	b.n	8006a4e <UART_SetConfig+0x216>
 8006a3e:	2308      	movs	r3, #8
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e004      	b.n	8006a4e <UART_SetConfig+0x216>
 8006a44:	2310      	movs	r3, #16
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e001      	b.n	8006a4e <UART_SetConfig+0x216>
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a56:	d15b      	bne.n	8006b10 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006a58:	7ffb      	ldrb	r3, [r7, #31]
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d827      	bhi.n	8006aae <UART_SetConfig+0x276>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <UART_SetConfig+0x22c>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006a89 	.word	0x08006a89
 8006a68:	08006a91 	.word	0x08006a91
 8006a6c:	08006a99 	.word	0x08006a99
 8006a70:	08006aaf 	.word	0x08006aaf
 8006a74:	08006a9f 	.word	0x08006a9f
 8006a78:	08006aaf 	.word	0x08006aaf
 8006a7c:	08006aaf 	.word	0x08006aaf
 8006a80:	08006aaf 	.word	0x08006aaf
 8006a84:	08006aa7 	.word	0x08006aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a88:	f7fd ff3a 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8006a8c:	61b8      	str	r0, [r7, #24]
        break;
 8006a8e:	e013      	b.n	8006ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a90:	f7fd ff58 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8006a94:	61b8      	str	r0, [r7, #24]
        break;
 8006a96:	e00f      	b.n	8006ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a98:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <UART_SetConfig+0x330>)
 8006a9a:	61bb      	str	r3, [r7, #24]
        break;
 8006a9c:	e00c      	b.n	8006ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9e:	f7fd feb9 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 8006aa2:	61b8      	str	r0, [r7, #24]
        break;
 8006aa4:	e008      	b.n	8006ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aaa:	61bb      	str	r3, [r7, #24]
        break;
 8006aac:	e004      	b.n	8006ab8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8006ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8082 	beq.w	8006bc4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	005a      	lsls	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	085b      	lsrs	r3, r3, #1
 8006aca:	441a      	add	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b0f      	cmp	r3, #15
 8006ada:	d916      	bls.n	8006b0a <UART_SetConfig+0x2d2>
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae2:	d212      	bcs.n	8006b0a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f023 030f 	bic.w	r3, r3, #15
 8006aec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	89fb      	ldrh	r3, [r7, #14]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	89fa      	ldrh	r2, [r7, #14]
 8006b06:	60da      	str	r2, [r3, #12]
 8006b08:	e05c      	b.n	8006bc4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	77bb      	strb	r3, [r7, #30]
 8006b0e:	e059      	b.n	8006bc4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b10:	7ffb      	ldrb	r3, [r7, #31]
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d835      	bhi.n	8006b82 <UART_SetConfig+0x34a>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <UART_SetConfig+0x2e4>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b41 	.word	0x08006b41
 8006b20:	08006b49 	.word	0x08006b49
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b83 	.word	0x08006b83
 8006b2c:	08006b73 	.word	0x08006b73
 8006b30:	08006b83 	.word	0x08006b83
 8006b34:	08006b83 	.word	0x08006b83
 8006b38:	08006b83 	.word	0x08006b83
 8006b3c:	08006b7b 	.word	0x08006b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b40:	f7fd fede 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8006b44:	61b8      	str	r0, [r7, #24]
        break;
 8006b46:	e021      	b.n	8006b8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b48:	f7fd fefc 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8006b4c:	61b8      	str	r0, [r7, #24]
        break;
 8006b4e:	e01d      	b.n	8006b8c <UART_SetConfig+0x354>
 8006b50:	40013800 	.word	0x40013800
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40004400 	.word	0x40004400
 8006b5c:	40004800 	.word	0x40004800
 8006b60:	40004c00 	.word	0x40004c00
 8006b64:	40005000 	.word	0x40005000
 8006b68:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6c:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <UART_SetConfig+0x3a4>)
 8006b6e:	61bb      	str	r3, [r7, #24]
        break;
 8006b70:	e00c      	b.n	8006b8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b72:	f7fd fe4f 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 8006b76:	61b8      	str	r0, [r7, #24]
        break;
 8006b78:	e008      	b.n	8006b8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7e:	61bb      	str	r3, [r7, #24]
        break;
 8006b80:	e004      	b.n	8006b8c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	77bb      	strb	r3, [r7, #30]
        break;
 8006b8a:	bf00      	nop
    }

    if (pclk != 0U)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d018      	beq.n	8006bc4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	085a      	lsrs	r2, r3, #1
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	441a      	add	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b0f      	cmp	r3, #15
 8006baa:	d909      	bls.n	8006bc0 <UART_SetConfig+0x388>
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb2:	d205      	bcs.n	8006bc0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60da      	str	r2, [r3, #12]
 8006bbe:	e001      	b.n	8006bc4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006bd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	007a1200 	.word	0x007a1200

08006be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cde:	d10a      	bne.n	8006cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	605a      	str	r2, [r3, #4]
  }
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b098      	sub	sp, #96	; 0x60
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d34:	f7fa fe16 	bl	8001964 <HAL_GetTick>
 8006d38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d12e      	bne.n	8006da6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d50:	2200      	movs	r2, #0
 8006d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f88c 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d021      	beq.n	8006da6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d76:	653b      	str	r3, [r7, #80]	; 0x50
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d80:	647b      	str	r3, [r7, #68]	; 0x44
 8006d82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e062      	b.n	8006e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d149      	bne.n	8006e48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f856 	bl	8006e74 <UART_WaitOnFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d03c      	beq.n	8006e48 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	623b      	str	r3, [r7, #32]
   return(result);
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dec:	633b      	str	r3, [r7, #48]	; 0x30
 8006dee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e20:	61fa      	str	r2, [r7, #28]
 8006e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	69b9      	ldr	r1, [r7, #24]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e011      	b.n	8006e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3758      	adds	r7, #88	; 0x58
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	4613      	mov	r3, r2
 8006e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e84:	e049      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e8c:	d045      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8e:	f7fa fd69 	bl	8001964 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d302      	bcc.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e048      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d031      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d110      	bne.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2208      	movs	r2, #8
 8006eca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 f8ed 	bl	80070ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e029      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef4:	d111      	bne.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 f8d3 	bl	80070ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e00f      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	bf0c      	ite	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	2300      	movne	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d0a6      	beq.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b097      	sub	sp, #92	; 0x5c
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	88fa      	ldrh	r2, [r7, #6]
 8006f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f76:	d10e      	bne.n	8006f96 <UART_Start_Receive_IT+0x52>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d105      	bne.n	8006f8c <UART_Start_Receive_IT+0x48>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f8a:	e01a      	b.n	8006fc2 <UART_Start_Receive_IT+0x7e>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	22ff      	movs	r2, #255	; 0xff
 8006f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f94:	e015      	b.n	8006fc2 <UART_Start_Receive_IT+0x7e>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10d      	bne.n	8006fba <UART_Start_Receive_IT+0x76>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <UART_Start_Receive_IT+0x6c>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	22ff      	movs	r2, #255	; 0xff
 8006faa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fae:	e008      	b.n	8006fc2 <UART_Start_Receive_IT+0x7e>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	227f      	movs	r2, #127	; 0x7f
 8006fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fb8:	e003      	b.n	8006fc2 <UART_Start_Receive_IT+0x7e>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2222      	movs	r2, #34	; 0x22
 8006fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	657b      	str	r3, [r7, #84]	; 0x54
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ff2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ff4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e5      	bne.n	8006fd2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700e:	d107      	bne.n	8007020 <UART_Start_Receive_IT+0xdc>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d103      	bne.n	8007020 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4a22      	ldr	r2, [pc, #136]	; (80070a4 <UART_Start_Receive_IT+0x160>)
 800701c:	669a      	str	r2, [r3, #104]	; 0x68
 800701e:	e002      	b.n	8007026 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <UART_Start_Receive_IT+0x164>)
 8007024:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d019      	beq.n	8007062 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
 800704e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e6      	bne.n	800702e <UART_Start_Receive_IT+0xea>
 8007060:	e018      	b.n	8007094 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	613b      	str	r3, [r7, #16]
   return(result);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f043 0320 	orr.w	r3, r3, #32
 8007076:	653b      	str	r3, [r7, #80]	; 0x50
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007080:	623b      	str	r3, [r7, #32]
 8007082:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	69f9      	ldr	r1, [r7, #28]
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	61bb      	str	r3, [r7, #24]
   return(result);
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e6      	bne.n	8007062 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	375c      	adds	r7, #92	; 0x5c
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	0800739d 	.word	0x0800739d
 80070a8:	080071f5 	.word	0x080071f5

080070ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b095      	sub	sp, #84	; 0x54
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d2:	643b      	str	r3, [r7, #64]	; 0x40
 80070d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e6      	bne.n	80070b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800710c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711e:	2b01      	cmp	r3, #1
 8007120:	d118      	bne.n	8007154 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f023 0310 	bic.w	r3, r3, #16
 8007136:	647b      	str	r3, [r7, #68]	; 0x44
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6979      	ldr	r1, [r7, #20]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	613b      	str	r3, [r7, #16]
   return(result);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e6      	bne.n	8007122 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007168:	bf00      	nop
 800716a:	3754      	adds	r7, #84	; 0x54
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff fb3a 	bl	800680c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6979      	ldr	r1, [r7, #20]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e6      	bne.n	80071a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fb06 	bl	80067f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ec:	bf00      	nop
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b09c      	sub	sp, #112	; 0x70
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007202:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800720c:	2b22      	cmp	r3, #34	; 0x22
 800720e:	f040 80b9 	bne.w	8007384 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007218:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800721c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007220:	b2d9      	uxtb	r1, r3
 8007222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007226:	b2da      	uxtb	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722c:	400a      	ands	r2, r1
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	f040 809c 	bne.w	8007394 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800726a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800726c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007270:	66bb      	str	r3, [r7, #104]	; 0x68
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800727a:	65bb      	str	r3, [r7, #88]	; 0x58
 800727c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e6      	bne.n	800725c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800729e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	667b      	str	r3, [r7, #100]	; 0x64
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072ae:	647a      	str	r2, [r7, #68]	; 0x44
 80072b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e5      	bne.n	800728e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d018      	beq.n	8007316 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	623b      	str	r3, [r7, #32]
   return(result);
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072f8:	663b      	str	r3, [r7, #96]	; 0x60
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007302:	633b      	str	r3, [r7, #48]	; 0x30
 8007304:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e6      	bne.n	80072e4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731a:	2b01      	cmp	r3, #1
 800731c:	d12e      	bne.n	800737c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	60fb      	str	r3, [r7, #12]
   return(result);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f023 0310 	bic.w	r3, r3, #16
 8007338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	69b9      	ldr	r1, [r7, #24]
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	617b      	str	r3, [r7, #20]
   return(result);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e6      	bne.n	8007324 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b10      	cmp	r3, #16
 8007362:	d103      	bne.n	800736c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2210      	movs	r2, #16
 800736a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff fa53 	bl	8006820 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800737a:	e00b      	b.n	8007394 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7f8 ff7f 	bl	8000280 <HAL_UART_RxCpltCallback>
}
 8007382:	e007      	b.n	8007394 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0208 	orr.w	r2, r2, #8
 8007392:	619a      	str	r2, [r3, #24]
}
 8007394:	bf00      	nop
 8007396:	3770      	adds	r7, #112	; 0x70
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b09c      	sub	sp, #112	; 0x70
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073b4:	2b22      	cmp	r3, #34	; 0x22
 80073b6:	f040 80b9 	bne.w	800752c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80073ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80073ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80073d2:	4013      	ands	r3, r2
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	1c9a      	adds	r2, r3, #2
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f040 809c 	bne.w	800753c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007418:	667b      	str	r3, [r7, #100]	; 0x64
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007422:	657b      	str	r3, [r7, #84]	; 0x54
 8007424:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e6      	bne.n	8007404 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	663b      	str	r3, [r7, #96]	; 0x60
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3308      	adds	r3, #8
 8007454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007456:	643a      	str	r2, [r7, #64]	; 0x40
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800745c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e5      	bne.n	8007436 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d018      	beq.n	80074be <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	61fb      	str	r3, [r7, #28]
   return(result);
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e6      	bne.n	800748c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d12e      	bne.n	8007524 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f023 0310 	bic.w	r3, r3, #16
 80074e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	6979      	ldr	r1, [r7, #20]
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	613b      	str	r3, [r7, #16]
   return(result);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e6      	bne.n	80074cc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b10      	cmp	r3, #16
 800750a:	d103      	bne.n	8007514 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2210      	movs	r2, #16
 8007512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff f97f 	bl	8006820 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007522:	e00b      	b.n	800753c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7f8 feab 	bl	8000280 <HAL_UART_RxCpltCallback>
}
 800752a:	e007      	b.n	800753c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0208 	orr.w	r2, r2, #8
 800753a:	619a      	str	r2, [r3, #24]
}
 800753c:	bf00      	nop
 800753e:	3770      	adds	r7, #112	; 0x70
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007560:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007564:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	b29b      	uxth	r3, r3
 8007572:	43db      	mvns	r3, r3
 8007574:	b29b      	uxth	r3, r3
 8007576:	4013      	ands	r3, r2
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800758e:	b084      	sub	sp, #16
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	f107 0014 	add.w	r0, r7, #20
 800759c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	b004      	add	sp, #16
 80075ce:	4770      	bx	lr

080075d0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d6:	f3ef 8305 	mrs	r3, IPSR
 80075da:	60bb      	str	r3, [r7, #8]
  return(result);
 80075dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10f      	bne.n	8007602 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e2:	f3ef 8310 	mrs	r3, PRIMASK
 80075e6:	607b      	str	r3, [r7, #4]
  return(result);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <osKernelInitialize+0x32>
 80075ee:	4b11      	ldr	r3, [pc, #68]	; (8007634 <osKernelInitialize+0x64>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d109      	bne.n	800760a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075f6:	f3ef 8311 	mrs	r3, BASEPRI
 80075fa:	603b      	str	r3, [r7, #0]
  return(result);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007602:	f06f 0305 	mvn.w	r3, #5
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e00c      	b.n	8007624 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800760a:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <osKernelInitialize+0x64>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d105      	bne.n	800761e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007612:	4b08      	ldr	r3, [pc, #32]	; (8007634 <osKernelInitialize+0x64>)
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e002      	b.n	8007624 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800761e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007622:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007624:	68fb      	ldr	r3, [r7, #12]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	200006bc 	.word	0x200006bc

08007638 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800763e:	f3ef 8305 	mrs	r3, IPSR
 8007642:	60bb      	str	r3, [r7, #8]
  return(result);
 8007644:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10f      	bne.n	800766a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800764a:	f3ef 8310 	mrs	r3, PRIMASK
 800764e:	607b      	str	r3, [r7, #4]
  return(result);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <osKernelStart+0x32>
 8007656:	4b11      	ldr	r3, [pc, #68]	; (800769c <osKernelStart+0x64>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d109      	bne.n	8007672 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800765e:	f3ef 8311 	mrs	r3, BASEPRI
 8007662:	603b      	str	r3, [r7, #0]
  return(result);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <osKernelStart+0x3a>
    stat = osErrorISR;
 800766a:	f06f 0305 	mvn.w	r3, #5
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e00e      	b.n	8007690 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007672:	4b0a      	ldr	r3, [pc, #40]	; (800769c <osKernelStart+0x64>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d107      	bne.n	800768a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800767a:	4b08      	ldr	r3, [pc, #32]	; (800769c <osKernelStart+0x64>)
 800767c:	2202      	movs	r2, #2
 800767e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007680:	f001 fdea 	bl	8009258 <vTaskStartScheduler>
      stat = osOK;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e002      	b.n	8007690 <osKernelStart+0x58>
    } else {
      stat = osError;
 800768a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800768e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007690:	68fb      	ldr	r3, [r7, #12]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	200006bc 	.word	0x200006bc

080076a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b092      	sub	sp, #72	; 0x48
 80076a4:	af04      	add	r7, sp, #16
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b0:	f3ef 8305 	mrs	r3, IPSR
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f040 8094 	bne.w	80077e6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076be:	f3ef 8310 	mrs	r3, PRIMASK
 80076c2:	623b      	str	r3, [r7, #32]
  return(result);
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f040 808d 	bne.w	80077e6 <osThreadNew+0x146>
 80076cc:	4b48      	ldr	r3, [pc, #288]	; (80077f0 <osThreadNew+0x150>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d106      	bne.n	80076e2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076d4:	f3ef 8311 	mrs	r3, BASEPRI
 80076d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8082 	bne.w	80077e6 <osThreadNew+0x146>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d07e      	beq.n	80077e6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80076ec:	2318      	movs	r3, #24
 80076ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80076f0:	2300      	movs	r3, #0
 80076f2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80076f4:	f107 031b 	add.w	r3, r7, #27
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d045      	beq.n	8007792 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <osThreadNew+0x74>
        name = attr->name;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <osThreadNew+0x9a>
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	2b38      	cmp	r3, #56	; 0x38
 800772c:	d805      	bhi.n	800773a <osThreadNew+0x9a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <osThreadNew+0x9e>
        return (NULL);
 800773a:	2300      	movs	r3, #0
 800773c:	e054      	b.n	80077e8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	089b      	lsrs	r3, r3, #2
 800774c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <osThreadNew+0xd4>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2b5b      	cmp	r3, #91	; 0x5b
 800775c:	d90a      	bls.n	8007774 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007762:	2b00      	cmp	r3, #0
 8007764:	d006      	beq.n	8007774 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <osThreadNew+0xd4>
        mem = 1;
 800776e:	2301      	movs	r3, #1
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
 8007772:	e010      	b.n	8007796 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10c      	bne.n	8007796 <osThreadNew+0xf6>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d108      	bne.n	8007796 <osThreadNew+0xf6>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <osThreadNew+0xf6>
          mem = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007790:	e001      	b.n	8007796 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	2b01      	cmp	r3, #1
 800779a:	d110      	bne.n	80077be <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077a4:	9202      	str	r2, [sp, #8]
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f001 fb84 	bl	8008ec0 <xTaskCreateStatic>
 80077b8:	4603      	mov	r3, r0
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e013      	b.n	80077e6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d110      	bne.n	80077e6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f107 0314 	add.w	r3, r7, #20
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f001 fbce 	bl	8008f78 <xTaskCreate>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <osThreadNew+0x146>
          hTask = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80077e6:	697b      	ldr	r3, [r7, #20]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3738      	adds	r7, #56	; 0x38
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200006bc 	.word	0x200006bc

080077f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077fc:	f3ef 8305 	mrs	r3, IPSR
 8007800:	613b      	str	r3, [r7, #16]
  return(result);
 8007802:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10f      	bne.n	8007828 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007808:	f3ef 8310 	mrs	r3, PRIMASK
 800780c:	60fb      	str	r3, [r7, #12]
  return(result);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d109      	bne.n	8007828 <osDelay+0x34>
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <osDelay+0x58>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d109      	bne.n	8007830 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800781c:	f3ef 8311 	mrs	r3, BASEPRI
 8007820:	60bb      	str	r3, [r7, #8]
  return(result);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <osDelay+0x3c>
    stat = osErrorISR;
 8007828:	f06f 0305 	mvn.w	r3, #5
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	e007      	b.n	8007840 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007830:	2300      	movs	r3, #0
 8007832:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <osDelay+0x4c>
      vTaskDelay(ticks);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 fcd8 	bl	80091f0 <vTaskDelay>
    }
  }

  return (stat);
 8007840:	697b      	ldr	r3, [r7, #20]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200006bc 	.word	0x200006bc

08007850 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007858:	2300      	movs	r3, #0
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800785c:	f3ef 8305 	mrs	r3, IPSR
 8007860:	613b      	str	r3, [r7, #16]
  return(result);
 8007862:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007864:	2b00      	cmp	r3, #0
 8007866:	f040 8085 	bne.w	8007974 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786a:	f3ef 8310 	mrs	r3, PRIMASK
 800786e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d17e      	bne.n	8007974 <osMutexNew+0x124>
 8007876:	4b42      	ldr	r3, [pc, #264]	; (8007980 <osMutexNew+0x130>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d105      	bne.n	800788a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800787e:	f3ef 8311 	mrs	r3, BASEPRI
 8007882:	60bb      	str	r3, [r7, #8]
  return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d174      	bne.n	8007974 <osMutexNew+0x124>
    if (attr != NULL) {
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	623b      	str	r3, [r7, #32]
 8007896:	e001      	b.n	800789c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <osMutexNew+0x5c>
      rmtx = 1U;
 80078a6:	2301      	movs	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
 80078aa:	e001      	b.n	80078b0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d15c      	bne.n	8007974 <osMutexNew+0x124>
      mem = -1;
 80078ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078be:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d015      	beq.n	80078f2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d006      	beq.n	80078dc <osMutexNew+0x8c>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	2b4f      	cmp	r3, #79	; 0x4f
 80078d4:	d902      	bls.n	80078dc <osMutexNew+0x8c>
          mem = 1;
 80078d6:	2301      	movs	r3, #1
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	e00c      	b.n	80078f6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d108      	bne.n	80078f6 <osMutexNew+0xa6>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d104      	bne.n	80078f6 <osMutexNew+0xa6>
            mem = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	e001      	b.n	80078f6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d112      	bne.n	8007922 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d007      	beq.n	8007912 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	4619      	mov	r1, r3
 8007908:	2004      	movs	r0, #4
 800790a:	f000 fbef 	bl	80080ec <xQueueCreateMutexStatic>
 800790e:	6278      	str	r0, [r7, #36]	; 0x24
 8007910:	e016      	b.n	8007940 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	4619      	mov	r1, r3
 8007918:	2001      	movs	r0, #1
 800791a:	f000 fbe7 	bl	80080ec <xQueueCreateMutexStatic>
 800791e:	6278      	str	r0, [r7, #36]	; 0x24
 8007920:	e00e      	b.n	8007940 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10b      	bne.n	8007940 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800792e:	2004      	movs	r0, #4
 8007930:	f000 fbc4 	bl	80080bc <xQueueCreateMutex>
 8007934:	6278      	str	r0, [r7, #36]	; 0x24
 8007936:	e003      	b.n	8007940 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007938:	2001      	movs	r0, #1
 800793a:	f000 fbbf 	bl	80080bc <xQueueCreateMutex>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00c      	beq.n	8007960 <osMutexNew+0x110>
        if (attr != NULL) {
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <osMutexNew+0x104>
          name = attr->name;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	e001      	b.n	8007958 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007958:	6979      	ldr	r1, [r7, #20]
 800795a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800795c:	f001 fa28 	bl	8008db0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	2b00      	cmp	r3, #0
 8007964:	d006      	beq.n	8007974 <osMutexNew+0x124>
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007976:	4618      	mov	r0, r3
 8007978:	3728      	adds	r7, #40	; 0x28
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	200006bc 	.word	0x200006bc

08007984 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b08c      	sub	sp, #48	; 0x30
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007994:	f3ef 8305 	mrs	r3, IPSR
 8007998:	61bb      	str	r3, [r7, #24]
  return(result);
 800799a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 8086 	bne.w	8007aae <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a2:	f3ef 8310 	mrs	r3, PRIMASK
 80079a6:	617b      	str	r3, [r7, #20]
  return(result);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d17f      	bne.n	8007aae <osSemaphoreNew+0x12a>
 80079ae:	4b42      	ldr	r3, [pc, #264]	; (8007ab8 <osSemaphoreNew+0x134>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d105      	bne.n	80079c2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079b6:	f3ef 8311 	mrs	r3, BASEPRI
 80079ba:	613b      	str	r3, [r7, #16]
  return(result);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d175      	bne.n	8007aae <osSemaphoreNew+0x12a>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d072      	beq.n	8007aae <osSemaphoreNew+0x12a>
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d86e      	bhi.n	8007aae <osSemaphoreNew+0x12a>
    mem = -1;
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d006      	beq.n	80079f2 <osSemaphoreNew+0x6e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b4f      	cmp	r3, #79	; 0x4f
 80079ea:	d902      	bls.n	80079f2 <osSemaphoreNew+0x6e>
        mem = 1;
 80079ec:	2301      	movs	r3, #1
 80079ee:	623b      	str	r3, [r7, #32]
 80079f0:	e00c      	b.n	8007a0c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d108      	bne.n	8007a0c <osSemaphoreNew+0x88>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <osSemaphoreNew+0x88>
          mem = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	623b      	str	r3, [r7, #32]
 8007a06:	e001      	b.n	8007a0c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a12:	d04c      	beq.n	8007aae <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d128      	bne.n	8007a6c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d10a      	bne.n	8007a36 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2203      	movs	r2, #3
 8007a26:	9200      	str	r2, [sp, #0]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f000 fa53 	bl	8007ed8 <xQueueGenericCreateStatic>
 8007a32:	6278      	str	r0, [r7, #36]	; 0x24
 8007a34:	e005      	b.n	8007a42 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007a36:	2203      	movs	r2, #3
 8007a38:	2100      	movs	r1, #0
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	f000 fac3 	bl	8007fc6 <xQueueGenericCreate>
 8007a40:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d022      	beq.n	8007a8e <osSemaphoreNew+0x10a>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01f      	beq.n	8007a8e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2200      	movs	r2, #0
 8007a52:	2100      	movs	r1, #0
 8007a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a56:	f000 fbcf 	bl	80081f8 <xQueueGenericSend>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d016      	beq.n	8007a8e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a62:	f001 f859 	bl	8008b18 <vQueueDelete>
            hSemaphore = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6a:	e010      	b.n	8007a8e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d108      	bne.n	8007a84 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	461a      	mov	r2, r3
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fb51 	bl	8008122 <xQueueCreateCountingSemaphoreStatic>
 8007a80:	6278      	str	r0, [r7, #36]	; 0x24
 8007a82:	e004      	b.n	8007a8e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fb82 	bl	8008190 <xQueueCreateCountingSemaphore>
 8007a8c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	e001      	b.n	8007aa6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007aa6:	69f9      	ldr	r1, [r7, #28]
 8007aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aaa:	f001 f981 	bl	8008db0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3728      	adds	r7, #40	; 0x28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200006bc 	.word	0x200006bc

08007abc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d103      	bne.n	8007adc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007ad4:	f06f 0303 	mvn.w	r3, #3
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	e04b      	b.n	8007b74 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007adc:	f3ef 8305 	mrs	r3, IPSR
 8007ae0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ae2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10f      	bne.n	8007b08 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8007aec:	613b      	str	r3, [r7, #16]
  return(result);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <osSemaphoreAcquire+0x4c>
 8007af4:	4b22      	ldr	r3, [pc, #136]	; (8007b80 <osSemaphoreAcquire+0xc4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d128      	bne.n	8007b4e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007afc:	f3ef 8311 	mrs	r3, BASEPRI
 8007b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d022      	beq.n	8007b4e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007b0e:	f06f 0303 	mvn.w	r3, #3
 8007b12:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007b14:	e02d      	b.n	8007b72 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007b1a:	f107 0308 	add.w	r3, r7, #8
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2100      	movs	r1, #0
 8007b22:	69b8      	ldr	r0, [r7, #24]
 8007b24:	f000 ff78 	bl	8008a18 <xQueueReceiveFromISR>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d003      	beq.n	8007b36 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007b2e:	f06f 0302 	mvn.w	r3, #2
 8007b32:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007b34:	e01d      	b.n	8007b72 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01a      	beq.n	8007b72 <osSemaphoreAcquire+0xb6>
 8007b3c:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <osSemaphoreAcquire+0xc8>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007b4c:	e011      	b.n	8007b72 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	69b8      	ldr	r0, [r7, #24]
 8007b52:	f000 fe55 	bl	8008800 <xQueueSemaphoreTake>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d00b      	beq.n	8007b74 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007b62:	f06f 0301 	mvn.w	r3, #1
 8007b66:	61fb      	str	r3, [r7, #28]
 8007b68:	e004      	b.n	8007b74 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007b6a:	f06f 0302 	mvn.w	r3, #2
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	e000      	b.n	8007b74 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007b72:	bf00      	nop
      }
    }
  }

  return (stat);
 8007b74:	69fb      	ldr	r3, [r7, #28]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3720      	adds	r7, #32
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200006bc 	.word	0x200006bc
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d103      	bne.n	8007ba6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007b9e:	f06f 0303 	mvn.w	r3, #3
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	e03e      	b.n	8007c24 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ba6:	f3ef 8305 	mrs	r3, IPSR
 8007baa:	617b      	str	r3, [r7, #20]
  return(result);
 8007bac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10f      	bne.n	8007bd2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb6:	613b      	str	r3, [r7, #16]
  return(result);
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <osSemaphoreRelease+0x4a>
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	; (8007c30 <osSemaphoreRelease+0xa8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d120      	bne.n	8007c08 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8007bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01a      	beq.n	8007c08 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007bd6:	f107 0308 	add.w	r3, r7, #8
 8007bda:	4619      	mov	r1, r3
 8007bdc:	69b8      	ldr	r0, [r7, #24]
 8007bde:	f000 fca1 	bl	8008524 <xQueueGiveFromISR>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d003      	beq.n	8007bf0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007be8:	f06f 0302 	mvn.w	r3, #2
 8007bec:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007bee:	e018      	b.n	8007c22 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d015      	beq.n	8007c22 <osSemaphoreRelease+0x9a>
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <osSemaphoreRelease+0xac>)
 8007bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c06:	e00c      	b.n	8007c22 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	69b8      	ldr	r0, [r7, #24]
 8007c10:	f000 faf2 	bl	80081f8 <xQueueGenericSend>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d004      	beq.n	8007c24 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007c1a:	f06f 0302 	mvn.w	r3, #2
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	e000      	b.n	8007c24 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c22:	bf00      	nop
    }
  }

  return (stat);
 8007c24:	69fb      	ldr	r3, [r7, #28]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	200006bc 	.word	0x200006bc
 8007c34:	e000ed04 	.word	0xe000ed04

08007c38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4a07      	ldr	r2, [pc, #28]	; (8007c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	4a06      	ldr	r2, [pc, #24]	; (8007c68 <vApplicationGetIdleTaskMemory+0x30>)
 8007c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2280      	movs	r2, #128	; 0x80
 8007c54:	601a      	str	r2, [r3, #0]
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	200006c0 	.word	0x200006c0
 8007c68:	2000071c 	.word	0x2000071c

08007c6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4a07      	ldr	r2, [pc, #28]	; (8007c98 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4a06      	ldr	r2, [pc, #24]	; (8007c9c <vApplicationGetTimerTaskMemory+0x30>)
 8007c82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c8a:	601a      	str	r2, [r3, #0]
}
 8007c8c:	bf00      	nop
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	2000091c 	.word	0x2000091c
 8007c9c:	20000978 	.word	0x20000978

08007ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f103 0208 	add.w	r2, r3, #8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f103 0208 	add.w	r2, r3, #8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f103 0208 	add.w	r2, r3, #8
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	601a      	str	r2, [r3, #0]
}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d42:	b480      	push	{r7}
 8007d44:	b085      	sub	sp, #20
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d58:	d103      	bne.n	8007d62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e00c      	b.n	8007d7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3308      	adds	r3, #8
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e002      	b.n	8007d70 <vListInsert+0x2e>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d2f6      	bcs.n	8007d6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	601a      	str	r2, [r3, #0]
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6892      	ldr	r2, [r2, #8]
 8007dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6852      	ldr	r2, [r2, #4]
 8007dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d103      	bne.n	8007de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	1e5a      	subs	r2, r3, #1
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e32:	f002 fc87 	bl	800a744 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	441a      	add	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e62:	3b01      	subs	r3, #1
 8007e64:	68f9      	ldr	r1, [r7, #12]
 8007e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	22ff      	movs	r2, #255	; 0xff
 8007e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d114      	bne.n	8007eb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01a      	beq.n	8007ec6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3310      	adds	r3, #16
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 fc6d 	bl	8009774 <xTaskRemoveFromEventList>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d012      	beq.n	8007ec6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <xQueueGenericReset+0xcc>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	e009      	b.n	8007ec6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3310      	adds	r3, #16
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fef2 	bl	8007ca0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff feed 	bl	8007ca0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ec6:	f002 fc6d 	bl	800a7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007eca:	2301      	movs	r3, #1
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08e      	sub	sp, #56	; 0x38
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <xQueueGenericCreateStatic+0x52>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <xQueueGenericCreateStatic+0x56>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <xQueueGenericCreateStatic+0x58>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	623b      	str	r3, [r7, #32]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <xQueueGenericCreateStatic+0x7e>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <xQueueGenericCreateStatic+0x82>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <xQueueGenericCreateStatic+0x84>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	61fb      	str	r3, [r7, #28]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f76:	2350      	movs	r3, #80	; 0x50
 8007f78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b50      	cmp	r3, #80	; 0x50
 8007f7e:	d00a      	beq.n	8007f96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61bb      	str	r3, [r7, #24]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00d      	beq.n	8007fbc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fa8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 f843 	bl	8008042 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3730      	adds	r7, #48	; 0x30
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b08a      	sub	sp, #40	; 0x28
 8007fca:	af02      	add	r7, sp, #8
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	613b      	str	r3, [r7, #16]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d102      	bne.n	8007ffc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	e004      	b.n	8008006 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	fb02 f303 	mul.w	r3, r2, r3
 8008004:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	3350      	adds	r3, #80	; 0x50
 800800a:	4618      	mov	r0, r3
 800800c:	f002 fcbc 	bl	800a988 <pvPortMalloc>
 8008010:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00f      	beq.n	8008038 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	3350      	adds	r3, #80	; 0x50
 800801c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008026:	79fa      	ldrb	r2, [r7, #7]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f805 	bl	8008042 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008038:	69bb      	ldr	r3, [r7, #24]
	}
 800803a:	4618      	mov	r0, r3
 800803c:	3720      	adds	r7, #32
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d103      	bne.n	800805e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	e002      	b.n	8008064 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008070:	2101      	movs	r1, #1
 8008072:	69b8      	ldr	r0, [r7, #24]
 8008074:	f7ff fec8 	bl	8007e08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	78fa      	ldrb	r2, [r7, #3]
 800807c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008080:	bf00      	nop
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00e      	beq.n	80080b4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80080a8:	2300      	movs	r3, #0
 80080aa:	2200      	movs	r2, #0
 80080ac:	2100      	movs	r1, #0
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f8a2 	bl	80081f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080c6:	2301      	movs	r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	461a      	mov	r2, r3
 80080d2:	6939      	ldr	r1, [r7, #16]
 80080d4:	6978      	ldr	r0, [r7, #20]
 80080d6:	f7ff ff76 	bl	8007fc6 <xQueueGenericCreate>
 80080da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff ffd3 	bl	8008088 <prvInitialiseMutex>

		return pxNewQueue;
 80080e2:	68fb      	ldr	r3, [r7, #12]
	}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	4603      	mov	r3, r0
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080f8:	2301      	movs	r3, #1
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	2300      	movs	r3, #0
 80080fe:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2200      	movs	r2, #0
 8008108:	6939      	ldr	r1, [r7, #16]
 800810a:	6978      	ldr	r0, [r7, #20]
 800810c:	f7ff fee4 	bl	8007ed8 <xQueueGenericCreateStatic>
 8008110:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff ffb8 	bl	8008088 <prvInitialiseMutex>

		return pxNewQueue;
 8008118:	68fb      	ldr	r3, [r7, #12]
	}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008122:	b580      	push	{r7, lr}
 8008124:	b08a      	sub	sp, #40	; 0x28
 8008126:	af02      	add	r7, sp, #8
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	61bb      	str	r3, [r7, #24]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	429a      	cmp	r2, r3
 8008150:	d90a      	bls.n	8008168 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	617b      	str	r3, [r7, #20]
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008168:	2302      	movs	r3, #2
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	2100      	movs	r1, #0
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff feb0 	bl	8007ed8 <xQueueGenericCreateStatic>
 8008178:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008186:	69fb      	ldr	r3, [r7, #28]
	}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	613b      	str	r3, [r7, #16]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d90a      	bls.n	80081d4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	60fb      	str	r3, [r7, #12]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80081d4:	2202      	movs	r2, #2
 80081d6:	2100      	movs	r1, #0
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff fef4 	bl	8007fc6 <xQueueGenericCreate>
 80081de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80081ec:	697b      	ldr	r3, [r7, #20]
	}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08e      	sub	sp, #56	; 0x38
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008206:	2300      	movs	r3, #0
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10a      	bne.n	800822a <xQueueGenericSend+0x32>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008226:	bf00      	nop
 8008228:	e7fe      	b.n	8008228 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <xQueueGenericSend+0x40>
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <xQueueGenericSend+0x44>
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <xQueueGenericSend+0x46>
 800823c:	2300      	movs	r3, #0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10a      	bne.n	8008258 <xQueueGenericSend+0x60>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d103      	bne.n	8008266 <xQueueGenericSend+0x6e>
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <xQueueGenericSend+0x72>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <xQueueGenericSend+0x74>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueGenericSend+0x8e>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	623b      	str	r3, [r7, #32]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008286:	f001 fc39 	bl	8009afc <xTaskGetSchedulerState>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <xQueueGenericSend+0x9e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <xQueueGenericSend+0xa2>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <xQueueGenericSend+0xa4>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	61fb      	str	r3, [r7, #28]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082b6:	f002 fa45 	bl	800a744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d302      	bcc.n	80082cc <xQueueGenericSend+0xd4>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d129      	bne.n	8008320 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082d2:	f000 fc5c 	bl	8008b8e <prvCopyDataToQueue>
 80082d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d010      	beq.n	8008302 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	3324      	adds	r3, #36	; 0x24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 fa45 	bl	8009774 <xTaskRemoveFromEventList>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d013      	beq.n	8008318 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082f0:	4b3f      	ldr	r3, [pc, #252]	; (80083f0 <xQueueGenericSend+0x1f8>)
 80082f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	e00a      	b.n	8008318 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008308:	4b39      	ldr	r3, [pc, #228]	; (80083f0 <xQueueGenericSend+0x1f8>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008318:	f002 fa44 	bl	800a7a4 <vPortExitCritical>
				return pdPASS;
 800831c:	2301      	movs	r3, #1
 800831e:	e063      	b.n	80083e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008326:	f002 fa3d 	bl	800a7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800832a:	2300      	movs	r3, #0
 800832c:	e05c      	b.n	80083e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800832e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	4618      	mov	r0, r3
 800833a:	f001 fa7f 	bl	800983c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800833e:	2301      	movs	r3, #1
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008342:	f002 fa2f 	bl	800a7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008346:	f000 ffed 	bl	8009324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800834a:	f002 f9fb 	bl	800a744 <vPortEnterCritical>
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008354:	b25b      	sxtb	r3, r3
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800835a:	d103      	bne.n	8008364 <xQueueGenericSend+0x16c>
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800836a:	b25b      	sxtb	r3, r3
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008370:	d103      	bne.n	800837a <xQueueGenericSend+0x182>
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800837a:	f002 fa13 	bl	800a7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800837e:	1d3a      	adds	r2, r7, #4
 8008380:	f107 0314 	add.w	r3, r7, #20
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fa6e 	bl	8009868 <xTaskCheckForTimeOut>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d124      	bne.n	80083dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008394:	f000 fcf3 	bl	8008d7e <prvIsQueueFull>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d018      	beq.n	80083d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	3310      	adds	r3, #16
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 f994 	bl	80096d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ae:	f000 fc7e 	bl	8008cae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083b2:	f000 ffc5 	bl	8009340 <xTaskResumeAll>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f47f af7c 	bne.w	80082b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <xQueueGenericSend+0x1f8>)
 80083c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	e772      	b.n	80082b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083d2:	f000 fc6c 	bl	8008cae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083d6:	f000 ffb3 	bl	8009340 <xTaskResumeAll>
 80083da:	e76c      	b.n	80082b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083de:	f000 fc66 	bl	8008cae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083e2:	f000 ffad 	bl	8009340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083e6:	2300      	movs	r3, #0
		}
	}
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3738      	adds	r7, #56	; 0x38
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08e      	sub	sp, #56	; 0x38
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <xQueueGenericSendFromISR+0x3c>
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <xQueueGenericSendFromISR+0x40>
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <xQueueGenericSendFromISR+0x42>
 8008434:	2300      	movs	r3, #0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	623b      	str	r3, [r7, #32]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d103      	bne.n	800845e <xQueueGenericSendFromISR+0x6a>
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <xQueueGenericSendFromISR+0x6e>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <xQueueGenericSendFromISR+0x70>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	61fb      	str	r3, [r7, #28]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800847e:	f002 fa43 	bl	800a908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008482:	f3ef 8211 	mrs	r2, BASEPRI
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	61ba      	str	r2, [r7, #24]
 8008498:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800849a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d302      	bcc.n	80084b0 <xQueueGenericSendFromISR+0xbc>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d12c      	bne.n	800850a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c0:	f000 fb65 	bl	8008b8e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084cc:	d112      	bne.n	80084f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d016      	beq.n	8008504 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	3324      	adds	r3, #36	; 0x24
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 f94a 	bl	8009774 <xTaskRemoveFromEventList>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00e      	beq.n	8008504 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00b      	beq.n	8008504 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	e007      	b.n	8008504 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084f8:	3301      	adds	r3, #1
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	b25a      	sxtb	r2, r3
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008504:	2301      	movs	r3, #1
 8008506:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008508:	e001      	b.n	800850e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800850a:	2300      	movs	r3, #0
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008518:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800851c:	4618      	mov	r0, r3
 800851e:	3738      	adds	r7, #56	; 0x38
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08e      	sub	sp, #56	; 0x38
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	623b      	str	r3, [r7, #32]
}
 800854a:	bf00      	nop
 800854c:	e7fe      	b.n	800854c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <xQueueGiveFromISR+0x48>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	61fb      	str	r3, [r7, #28]
}
 8008568:	bf00      	nop
 800856a:	e7fe      	b.n	800856a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <xQueueGiveFromISR+0x58>
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <xQueueGiveFromISR+0x5c>
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <xQueueGiveFromISR+0x5e>
 8008580:	2300      	movs	r3, #0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10a      	bne.n	800859c <xQueueGiveFromISR+0x78>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	61bb      	str	r3, [r7, #24]
}
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800859c:	f002 f9b4 	bl	800a908 <vPortValidateInterruptPriority>
	__asm volatile
 80085a0:	f3ef 8211 	mrs	r2, BASEPRI
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	617a      	str	r2, [r7, #20]
 80085b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80085b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d22b      	bcs.n	8008624 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085e6:	d112      	bne.n	800860e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d016      	beq.n	800861e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	3324      	adds	r3, #36	; 0x24
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 f8bd 	bl	8009774 <xTaskRemoveFromEventList>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00e      	beq.n	800861e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e007      	b.n	800861e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800860e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008612:	3301      	adds	r3, #1
 8008614:	b2db      	uxtb	r3, r3
 8008616:	b25a      	sxtb	r2, r3
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800861e:	2301      	movs	r3, #1
 8008620:	637b      	str	r3, [r7, #52]	; 0x34
 8008622:	e001      	b.n	8008628 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008624:	2300      	movs	r3, #0
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f383 8811 	msr	BASEPRI, r3
}
 8008632:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008636:	4618      	mov	r0, r3
 8008638:	3738      	adds	r7, #56	; 0x38
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08c      	sub	sp, #48	; 0x30
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800864c:	2300      	movs	r3, #0
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10a      	bne.n	8008670 <xQueueReceive+0x30>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	623b      	str	r3, [r7, #32]
}
 800866c:	bf00      	nop
 800866e:	e7fe      	b.n	800866e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d103      	bne.n	800867e <xQueueReceive+0x3e>
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <xQueueReceive+0x42>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <xQueueReceive+0x44>
 8008682:	2300      	movs	r3, #0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <xQueueReceive+0x5e>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	61fb      	str	r3, [r7, #28]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800869e:	f001 fa2d 	bl	8009afc <xTaskGetSchedulerState>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d102      	bne.n	80086ae <xQueueReceive+0x6e>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <xQueueReceive+0x72>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e000      	b.n	80086b4 <xQueueReceive+0x74>
 80086b2:	2300      	movs	r3, #0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <xQueueReceive+0x8e>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	61bb      	str	r3, [r7, #24]
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ce:	f002 f839 	bl	800a744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d01f      	beq.n	800871e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e2:	f000 fabe 	bl	8008c62 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	1e5a      	subs	r2, r3, #1
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00f      	beq.n	8008716 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	3310      	adds	r3, #16
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 f83a 	bl	8009774 <xTaskRemoveFromEventList>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008706:	4b3d      	ldr	r3, [pc, #244]	; (80087fc <xQueueReceive+0x1bc>)
 8008708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008716:	f002 f845 	bl	800a7a4 <vPortExitCritical>
				return pdPASS;
 800871a:	2301      	movs	r3, #1
 800871c:	e069      	b.n	80087f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d103      	bne.n	800872c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008724:	f002 f83e 	bl	800a7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008728:	2300      	movs	r3, #0
 800872a:	e062      	b.n	80087f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008732:	f107 0310 	add.w	r3, r7, #16
 8008736:	4618      	mov	r0, r3
 8008738:	f001 f880 	bl	800983c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800873c:	2301      	movs	r3, #1
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008740:	f002 f830 	bl	800a7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008744:	f000 fdee 	bl	8009324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008748:	f001 fffc 	bl	800a744 <vPortEnterCritical>
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008752:	b25b      	sxtb	r3, r3
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008758:	d103      	bne.n	8008762 <xQueueReceive+0x122>
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008768:	b25b      	sxtb	r3, r3
 800876a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800876e:	d103      	bne.n	8008778 <xQueueReceive+0x138>
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008778:	f002 f814 	bl	800a7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800877c:	1d3a      	adds	r2, r7, #4
 800877e:	f107 0310 	add.w	r3, r7, #16
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f001 f86f 	bl	8009868 <xTaskCheckForTimeOut>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d123      	bne.n	80087d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008792:	f000 fade 	bl	8008d52 <prvIsQueueEmpty>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d017      	beq.n	80087cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	3324      	adds	r3, #36	; 0x24
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 ff95 	bl	80096d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ac:	f000 fa7f 	bl	8008cae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087b0:	f000 fdc6 	bl	8009340 <xTaskResumeAll>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d189      	bne.n	80086ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80087ba:	4b10      	ldr	r3, [pc, #64]	; (80087fc <xQueueReceive+0x1bc>)
 80087bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	e780      	b.n	80086ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ce:	f000 fa6e 	bl	8008cae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087d2:	f000 fdb5 	bl	8009340 <xTaskResumeAll>
 80087d6:	e77a      	b.n	80086ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 fa68 	bl	8008cae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087de:	f000 fdaf 	bl	8009340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e4:	f000 fab5 	bl	8008d52 <prvIsQueueEmpty>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f43f af6f 	beq.w	80086ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3730      	adds	r7, #48	; 0x30
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	e000ed04 	.word	0xe000ed04

08008800 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08e      	sub	sp, #56	; 0x38
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800880a:	2300      	movs	r3, #0
 800880c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008812:	2300      	movs	r3, #0
 8008814:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	623b      	str	r3, [r7, #32]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	61fb      	str	r3, [r7, #28]
}
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008850:	f001 f954 	bl	8009afc <xTaskGetSchedulerState>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d102      	bne.n	8008860 <xQueueSemaphoreTake+0x60>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <xQueueSemaphoreTake+0x64>
 8008860:	2301      	movs	r3, #1
 8008862:	e000      	b.n	8008866 <xQueueSemaphoreTake+0x66>
 8008864:	2300      	movs	r3, #0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	61bb      	str	r3, [r7, #24]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008880:	f001 ff60 	bl	800a744 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888c:	2b00      	cmp	r3, #0
 800888e:	d024      	beq.n	80088da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80088a0:	f001 faac 	bl	8009dfc <pvTaskIncrementMutexHeldCount>
 80088a4:	4602      	mov	r2, r0
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00f      	beq.n	80088d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	3310      	adds	r3, #16
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 ff5c 	bl	8009774 <xTaskRemoveFromEventList>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088c2:	4b54      	ldr	r3, [pc, #336]	; (8008a14 <xQueueSemaphoreTake+0x214>)
 80088c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088d2:	f001 ff67 	bl	800a7a4 <vPortExitCritical>
				return pdPASS;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e097      	b.n	8008a0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d111      	bne.n	8008904 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	617b      	str	r3, [r7, #20]
}
 80088f8:	bf00      	nop
 80088fa:	e7fe      	b.n	80088fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80088fc:	f001 ff52 	bl	800a7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008900:	2300      	movs	r3, #0
 8008902:	e082      	b.n	8008a0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800890a:	f107 030c 	add.w	r3, r7, #12
 800890e:	4618      	mov	r0, r3
 8008910:	f000 ff94 	bl	800983c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008914:	2301      	movs	r3, #1
 8008916:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008918:	f001 ff44 	bl	800a7a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800891c:	f000 fd02 	bl	8009324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008920:	f001 ff10 	bl	800a744 <vPortEnterCritical>
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800892a:	b25b      	sxtb	r3, r3
 800892c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008930:	d103      	bne.n	800893a <xQueueSemaphoreTake+0x13a>
 8008932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008940:	b25b      	sxtb	r3, r3
 8008942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008946:	d103      	bne.n	8008950 <xQueueSemaphoreTake+0x150>
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008950:	f001 ff28 	bl	800a7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008954:	463a      	mov	r2, r7
 8008956:	f107 030c 	add.w	r3, r7, #12
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f000 ff83 	bl	8009868 <xTaskCheckForTimeOut>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d132      	bne.n	80089ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800896a:	f000 f9f2 	bl	8008d52 <prvIsQueueEmpty>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d026      	beq.n	80089c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d109      	bne.n	8008990 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800897c:	f001 fee2 	bl	800a744 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4618      	mov	r0, r3
 8008986:	f001 f8d7 	bl	8009b38 <xTaskPriorityInherit>
 800898a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800898c:	f001 ff0a 	bl	800a7a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	3324      	adds	r3, #36	; 0x24
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fe9b 	bl	80096d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800899e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089a0:	f000 f985 	bl	8008cae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089a4:	f000 fccc 	bl	8009340 <xTaskResumeAll>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f47f af68 	bne.w	8008880 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80089b0:	4b18      	ldr	r3, [pc, #96]	; (8008a14 <xQueueSemaphoreTake+0x214>)
 80089b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	e75e      	b.n	8008880 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80089c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089c4:	f000 f973 	bl	8008cae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089c8:	f000 fcba 	bl	8009340 <xTaskResumeAll>
 80089cc:	e758      	b.n	8008880 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089d0:	f000 f96d 	bl	8008cae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089d4:	f000 fcb4 	bl	8009340 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089da:	f000 f9ba 	bl	8008d52 <prvIsQueueEmpty>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f43f af4d 	beq.w	8008880 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00d      	beq.n	8008a08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80089ec:	f001 feaa 	bl	800a744 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089f2:	f000 f8b4 	bl	8008b5e <prvGetDisinheritPriorityAfterTimeout>
 80089f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 f976 	bl	8009cf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008a04:	f001 fece 	bl	800a7a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3738      	adds	r7, #56	; 0x38
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	e000ed04 	.word	0xe000ed04

08008a18 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08e      	sub	sp, #56	; 0x38
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	623b      	str	r3, [r7, #32]
}
 8008a40:	bf00      	nop
 8008a42:	e7fe      	b.n	8008a42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d103      	bne.n	8008a52 <xQueueReceiveFromISR+0x3a>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <xQueueReceiveFromISR+0x3e>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e000      	b.n	8008a58 <xQueueReceiveFromISR+0x40>
 8008a56:	2300      	movs	r3, #0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	61fb      	str	r3, [r7, #28]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a72:	f001 ff49 	bl	800a908 <vPortValidateInterruptPriority>
	__asm volatile
 8008a76:	f3ef 8211 	mrs	r2, BASEPRI
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	61ba      	str	r2, [r7, #24]
 8008a8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d02f      	beq.n	8008afe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008aa8:	68b9      	ldr	r1, [r7, #8]
 8008aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aac:	f000 f8d9 	bl	8008c62 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	1e5a      	subs	r2, r3, #1
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac0:	d112      	bne.n	8008ae8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d016      	beq.n	8008af8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	3310      	adds	r3, #16
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fe50 	bl	8009774 <xTaskRemoveFromEventList>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00e      	beq.n	8008af8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	e007      	b.n	8008af8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aec:	3301      	adds	r3, #1
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	b25a      	sxtb	r2, r3
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008af8:	2301      	movs	r3, #1
 8008afa:	637b      	str	r3, [r7, #52]	; 0x34
 8008afc:	e001      	b.n	8008b02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f383 8811 	msr	BASEPRI, r3
}
 8008b0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3738      	adds	r7, #56	; 0x38
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <vQueueDelete+0x28>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	60bb      	str	r3, [r7, #8]
}
 8008b3c:	bf00      	nop
 8008b3e:	e7fe      	b.n	8008b3e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f95f 	bl	8008e04 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d102      	bne.n	8008b56 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f001 ffdd 	bl	800ab10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008b56:	bf00      	nop
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d006      	beq.n	8008b7c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	e001      	b.n	8008b80 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b80:	68fb      	ldr	r3, [r7, #12]
	}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b086      	sub	sp, #24
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10d      	bne.n	8008bc8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d14d      	bne.n	8008c50 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f001 f82b 	bl	8009c14 <xTaskPriorityDisinherit>
 8008bbe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	605a      	str	r2, [r3, #4]
 8008bc6:	e043      	b.n	8008c50 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d119      	bne.n	8008c02 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6898      	ldr	r0, [r3, #8]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	f002 f8dd 	bl	800ad98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689a      	ldr	r2, [r3, #8]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	441a      	add	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d32b      	bcc.n	8008c50 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	609a      	str	r2, [r3, #8]
 8008c00:	e026      	b.n	8008c50 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	68d8      	ldr	r0, [r3, #12]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	f002 f8c3 	bl	800ad98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	425b      	negs	r3, r3
 8008c1c:	441a      	add	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d207      	bcs.n	8008c3e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	425b      	negs	r3, r3
 8008c38:	441a      	add	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d105      	bne.n	8008c50 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c58:	697b      	ldr	r3, [r7, #20]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d018      	beq.n	8008ca6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	441a      	add	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d303      	bcc.n	8008c96 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68d9      	ldr	r1, [r3, #12]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6838      	ldr	r0, [r7, #0]
 8008ca2:	f002 f879 	bl	800ad98 <memcpy>
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cb6:	f001 fd45 	bl	800a744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cc2:	e011      	b.n	8008ce8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d012      	beq.n	8008cf2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3324      	adds	r3, #36	; 0x24
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fd4f 	bl	8009774 <xTaskRemoveFromEventList>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cdc:	f000 fe26 	bl	800992c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dce9      	bgt.n	8008cc4 <prvUnlockQueue+0x16>
 8008cf0:	e000      	b.n	8008cf4 <prvUnlockQueue+0x46>
					break;
 8008cf2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	22ff      	movs	r2, #255	; 0xff
 8008cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008cfc:	f001 fd52 	bl	800a7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d00:	f001 fd20 	bl	800a744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d0a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d0c:	e011      	b.n	8008d32 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d012      	beq.n	8008d3c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3310      	adds	r3, #16
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fd2a 	bl	8009774 <xTaskRemoveFromEventList>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d26:	f000 fe01 	bl	800992c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dce9      	bgt.n	8008d0e <prvUnlockQueue+0x60>
 8008d3a:	e000      	b.n	8008d3e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d3c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	22ff      	movs	r2, #255	; 0xff
 8008d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d46:	f001 fd2d 	bl	800a7a4 <vPortExitCritical>
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d5a:	f001 fcf3 	bl	800a744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d102      	bne.n	8008d6c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d66:	2301      	movs	r3, #1
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	e001      	b.n	8008d70 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d70:	f001 fd18 	bl	800a7a4 <vPortExitCritical>

	return xReturn;
 8008d74:	68fb      	ldr	r3, [r7, #12]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d86:	f001 fcdd 	bl	800a744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d102      	bne.n	8008d9c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d96:	2301      	movs	r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]
 8008d9a:	e001      	b.n	8008da0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008da0:	f001 fd00 	bl	800a7a4 <vPortExitCritical>

	return xReturn;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e014      	b.n	8008dea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dc0:	4a0f      	ldr	r2, [pc, #60]	; (8008e00 <vQueueAddToRegistry+0x50>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10b      	bne.n	8008de4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dcc:	490c      	ldr	r1, [pc, #48]	; (8008e00 <vQueueAddToRegistry+0x50>)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dd6:	4a0a      	ldr	r2, [pc, #40]	; (8008e00 <vQueueAddToRegistry+0x50>)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008de2:	e006      	b.n	8008df2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b07      	cmp	r3, #7
 8008dee:	d9e7      	bls.n	8008dc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20000d78 	.word	0x20000d78

08008e04 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	e016      	b.n	8008e40 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008e12:	4a10      	ldr	r2, [pc, #64]	; (8008e54 <vQueueUnregisterQueue+0x50>)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	4413      	add	r3, r2
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d10b      	bne.n	8008e3a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008e22:	4a0c      	ldr	r2, [pc, #48]	; (8008e54 <vQueueUnregisterQueue+0x50>)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2100      	movs	r1, #0
 8008e28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008e2c:	4a09      	ldr	r2, [pc, #36]	; (8008e54 <vQueueUnregisterQueue+0x50>)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	4413      	add	r3, r2
 8008e34:	2200      	movs	r2, #0
 8008e36:	605a      	str	r2, [r3, #4]
				break;
 8008e38:	e006      	b.n	8008e48 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b07      	cmp	r3, #7
 8008e44:	d9e5      	bls.n	8008e12 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008e46:	bf00      	nop
 8008e48:	bf00      	nop
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	20000d78 	.word	0x20000d78

08008e58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e68:	f001 fc6c 	bl	800a744 <vPortEnterCritical>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e72:	b25b      	sxtb	r3, r3
 8008e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e78:	d103      	bne.n	8008e82 <vQueueWaitForMessageRestricted+0x2a>
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e88:	b25b      	sxtb	r3, r3
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8e:	d103      	bne.n	8008e98 <vQueueWaitForMessageRestricted+0x40>
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e98:	f001 fc84 	bl	800a7a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	3324      	adds	r3, #36	; 0x24
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fc35 	bl	800971c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008eb2:	6978      	ldr	r0, [r7, #20]
 8008eb4:	f7ff fefb 	bl	8008cae <prvUnlockQueue>
	}
 8008eb8:	bf00      	nop
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08e      	sub	sp, #56	; 0x38
 8008ec4:	af04      	add	r7, sp, #16
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	623b      	str	r3, [r7, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	61fb      	str	r3, [r7, #28]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f06:	235c      	movs	r3, #92	; 0x5c
 8008f08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b5c      	cmp	r3, #92	; 0x5c
 8008f0e:	d00a      	beq.n	8008f26 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	61bb      	str	r3, [r7, #24]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01e      	beq.n	8008f6a <xTaskCreateStatic+0xaa>
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01b      	beq.n	8008f6a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f44:	2300      	movs	r3, #0
 8008f46:	9303      	str	r3, [sp, #12]
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	9302      	str	r3, [sp, #8]
 8008f4c:	f107 0314 	add.w	r3, r7, #20
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	68b9      	ldr	r1, [r7, #8]
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f850 	bl	8009002 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f64:	f000 f8d4 	bl	8009110 <prvAddNewTaskToReadyList>
 8008f68:	e001      	b.n	8008f6e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f6e:	697b      	ldr	r3, [r7, #20]
	}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3728      	adds	r7, #40	; 0x28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08c      	sub	sp, #48	; 0x30
 8008f7c:	af04      	add	r7, sp, #16
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f88:	88fb      	ldrh	r3, [r7, #6]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f001 fcfb 	bl	800a988 <pvPortMalloc>
 8008f92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00e      	beq.n	8008fb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008f9a:	205c      	movs	r0, #92	; 0x5c
 8008f9c:	f001 fcf4 	bl	800a988 <pvPortMalloc>
 8008fa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
 8008fae:	e005      	b.n	8008fbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fb0:	6978      	ldr	r0, [r7, #20]
 8008fb2:	f001 fdad 	bl	800ab10 <vPortFree>
 8008fb6:	e001      	b.n	8008fbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d017      	beq.n	8008ff2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fca:	88fa      	ldrh	r2, [r7, #6]
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9303      	str	r3, [sp, #12]
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	9302      	str	r3, [sp, #8]
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f80e 	bl	8009002 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fe6:	69f8      	ldr	r0, [r7, #28]
 8008fe8:	f000 f892 	bl	8009110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fec:	2301      	movs	r3, #1
 8008fee:	61bb      	str	r3, [r7, #24]
 8008ff0:	e002      	b.n	8008ff8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ff6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
	}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3720      	adds	r7, #32
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b088      	sub	sp, #32
 8009006:	af00      	add	r7, sp, #0
 8009008:	60f8      	str	r0, [r7, #12]
 800900a:	60b9      	str	r1, [r7, #8]
 800900c:	607a      	str	r2, [r7, #4]
 800900e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	461a      	mov	r2, r3
 800901a:	21a5      	movs	r1, #165	; 0xa5
 800901c:	f001 feca 	bl	800adb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800902a:	3b01      	subs	r3, #1
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	f023 0307 	bic.w	r3, r3, #7
 8009038:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f003 0307 	and.w	r3, r3, #7
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00a      	beq.n	800905a <prvInitialiseNewTask+0x58>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	617b      	str	r3, [r7, #20]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800905a:	2300      	movs	r3, #0
 800905c:	61fb      	str	r3, [r7, #28]
 800905e:	e012      	b.n	8009086 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	4413      	add	r3, r2
 8009066:	7819      	ldrb	r1, [r3, #0]
 8009068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	3334      	adds	r3, #52	; 0x34
 8009070:	460a      	mov	r2, r1
 8009072:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	4413      	add	r3, r2
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d006      	beq.n	800908e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	3301      	adds	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	2b0f      	cmp	r3, #15
 800908a:	d9e9      	bls.n	8009060 <prvInitialiseNewTask+0x5e>
 800908c:	e000      	b.n	8009090 <prvInitialiseNewTask+0x8e>
		{
			break;
 800908e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	2b37      	cmp	r3, #55	; 0x37
 800909c:	d901      	bls.n	80090a2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800909e:	2337      	movs	r3, #55	; 0x37
 80090a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	2200      	movs	r2, #0
 80090b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	3304      	adds	r3, #4
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fe11 	bl	8007ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	3318      	adds	r3, #24
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fe0c 	bl	8007ce0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	2200      	movs	r2, #0
 80090e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	68f9      	ldr	r1, [r7, #12]
 80090f0:	69b8      	ldr	r0, [r7, #24]
 80090f2:	f001 f9fd 	bl	800a4f0 <pxPortInitialiseStack>
 80090f6:	4602      	mov	r2, r0
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009106:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009108:	bf00      	nop
 800910a:	3720      	adds	r7, #32
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009118:	f001 fb14 	bl	800a744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800911c:	4b2d      	ldr	r3, [pc, #180]	; (80091d4 <prvAddNewTaskToReadyList+0xc4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3301      	adds	r3, #1
 8009122:	4a2c      	ldr	r2, [pc, #176]	; (80091d4 <prvAddNewTaskToReadyList+0xc4>)
 8009124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009126:	4b2c      	ldr	r3, [pc, #176]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800912e:	4a2a      	ldr	r2, [pc, #168]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009134:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <prvAddNewTaskToReadyList+0xc4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d110      	bne.n	800915e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800913c:	f000 fc1a 	bl	8009974 <prvInitialiseTaskLists>
 8009140:	e00d      	b.n	800915e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009142:	4b26      	ldr	r3, [pc, #152]	; (80091dc <prvAddNewTaskToReadyList+0xcc>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d109      	bne.n	800915e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800914a:	4b23      	ldr	r3, [pc, #140]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	429a      	cmp	r2, r3
 8009156:	d802      	bhi.n	800915e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009158:	4a1f      	ldr	r2, [pc, #124]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800915e:	4b20      	ldr	r3, [pc, #128]	; (80091e0 <prvAddNewTaskToReadyList+0xd0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <prvAddNewTaskToReadyList+0xd0>)
 8009166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009168:	4b1d      	ldr	r3, [pc, #116]	; (80091e0 <prvAddNewTaskToReadyList+0xd0>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009174:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <prvAddNewTaskToReadyList+0xd4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d903      	bls.n	8009184 <prvAddNewTaskToReadyList+0x74>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	4a18      	ldr	r2, [pc, #96]	; (80091e4 <prvAddNewTaskToReadyList+0xd4>)
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4a15      	ldr	r2, [pc, #84]	; (80091e8 <prvAddNewTaskToReadyList+0xd8>)
 8009192:	441a      	add	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f7fe fdad 	bl	8007cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091a0:	f001 fb00 	bl	800a7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091a4:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <prvAddNewTaskToReadyList+0xcc>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00e      	beq.n	80091ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d207      	bcs.n	80091ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091ba:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <prvAddNewTaskToReadyList+0xdc>)
 80091bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	2000128c 	.word	0x2000128c
 80091d8:	20000db8 	.word	0x20000db8
 80091dc:	20001298 	.word	0x20001298
 80091e0:	200012a8 	.word	0x200012a8
 80091e4:	20001294 	.word	0x20001294
 80091e8:	20000dbc 	.word	0x20000dbc
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d017      	beq.n	8009232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009202:	4b13      	ldr	r3, [pc, #76]	; (8009250 <vTaskDelay+0x60>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <vTaskDelay+0x30>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	60bb      	str	r3, [r7, #8]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009220:	f000 f880 	bl	8009324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009224:	2100      	movs	r1, #0
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fdfc 	bl	8009e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800922c:	f000 f888 	bl	8009340 <xTaskResumeAll>
 8009230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d107      	bne.n	8009248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009238:	4b06      	ldr	r3, [pc, #24]	; (8009254 <vTaskDelay+0x64>)
 800923a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	200012b4 	.word	0x200012b4
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08a      	sub	sp, #40	; 0x28
 800925c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009266:	463a      	mov	r2, r7
 8009268:	1d39      	adds	r1, r7, #4
 800926a:	f107 0308 	add.w	r3, r7, #8
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe fce2 	bl	8007c38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	9202      	str	r2, [sp, #8]
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	2300      	movs	r3, #0
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	2300      	movs	r3, #0
 8009284:	460a      	mov	r2, r1
 8009286:	4921      	ldr	r1, [pc, #132]	; (800930c <vTaskStartScheduler+0xb4>)
 8009288:	4821      	ldr	r0, [pc, #132]	; (8009310 <vTaskStartScheduler+0xb8>)
 800928a:	f7ff fe19 	bl	8008ec0 <xTaskCreateStatic>
 800928e:	4603      	mov	r3, r0
 8009290:	4a20      	ldr	r2, [pc, #128]	; (8009314 <vTaskStartScheduler+0xbc>)
 8009292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009294:	4b1f      	ldr	r3, [pc, #124]	; (8009314 <vTaskStartScheduler+0xbc>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800929c:	2301      	movs	r3, #1
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e001      	b.n	80092a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d102      	bne.n	80092b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092ac:	f000 fe0e 	bl	8009ecc <xTimerCreateTimerTask>
 80092b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d116      	bne.n	80092e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	613b      	str	r3, [r7, #16]
}
 80092ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092cc:	4b12      	ldr	r3, [pc, #72]	; (8009318 <vTaskStartScheduler+0xc0>)
 80092ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092d4:	4b11      	ldr	r3, [pc, #68]	; (800931c <vTaskStartScheduler+0xc4>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <vTaskStartScheduler+0xc8>)
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092e0:	f001 f98e 	bl	800a600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092e4:	e00e      	b.n	8009304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ec:	d10a      	bne.n	8009304 <vTaskStartScheduler+0xac>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	60fb      	str	r3, [r7, #12]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <vTaskStartScheduler+0xaa>
}
 8009304:	bf00      	nop
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	0800c45c 	.word	0x0800c45c
 8009310:	08009945 	.word	0x08009945
 8009314:	200012b0 	.word	0x200012b0
 8009318:	200012ac 	.word	0x200012ac
 800931c:	20001298 	.word	0x20001298
 8009320:	20001290 	.word	0x20001290

08009324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009324:	b480      	push	{r7}
 8009326:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009328:	4b04      	ldr	r3, [pc, #16]	; (800933c <vTaskSuspendAll+0x18>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3301      	adds	r3, #1
 800932e:	4a03      	ldr	r2, [pc, #12]	; (800933c <vTaskSuspendAll+0x18>)
 8009330:	6013      	str	r3, [r2, #0]
}
 8009332:	bf00      	nop
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	200012b4 	.word	0x200012b4

08009340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800934e:	4b42      	ldr	r3, [pc, #264]	; (8009458 <xTaskResumeAll+0x118>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <xTaskResumeAll+0x2c>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	603b      	str	r3, [r7, #0]
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800936c:	f001 f9ea 	bl	800a744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009370:	4b39      	ldr	r3, [pc, #228]	; (8009458 <xTaskResumeAll+0x118>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3b01      	subs	r3, #1
 8009376:	4a38      	ldr	r2, [pc, #224]	; (8009458 <xTaskResumeAll+0x118>)
 8009378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800937a:	4b37      	ldr	r3, [pc, #220]	; (8009458 <xTaskResumeAll+0x118>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d162      	bne.n	8009448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009382:	4b36      	ldr	r3, [pc, #216]	; (800945c <xTaskResumeAll+0x11c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d05e      	beq.n	8009448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800938a:	e02f      	b.n	80093ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800938c:	4b34      	ldr	r3, [pc, #208]	; (8009460 <xTaskResumeAll+0x120>)
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3318      	adds	r3, #24
 8009398:	4618      	mov	r0, r3
 800939a:	f7fe fd0b 	bl	8007db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3304      	adds	r3, #4
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fd06 	bl	8007db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	4b2d      	ldr	r3, [pc, #180]	; (8009464 <xTaskResumeAll+0x124>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d903      	bls.n	80093bc <xTaskResumeAll+0x7c>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a2a      	ldr	r2, [pc, #168]	; (8009464 <xTaskResumeAll+0x124>)
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4a27      	ldr	r2, [pc, #156]	; (8009468 <xTaskResumeAll+0x128>)
 80093ca:	441a      	add	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4619      	mov	r1, r3
 80093d2:	4610      	mov	r0, r2
 80093d4:	f7fe fc91 	bl	8007cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	4b23      	ldr	r3, [pc, #140]	; (800946c <xTaskResumeAll+0x12c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d302      	bcc.n	80093ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093e6:	4b22      	ldr	r3, [pc, #136]	; (8009470 <xTaskResumeAll+0x130>)
 80093e8:	2201      	movs	r2, #1
 80093ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093ec:	4b1c      	ldr	r3, [pc, #112]	; (8009460 <xTaskResumeAll+0x120>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1cb      	bne.n	800938c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093fa:	f000 fb59 	bl	8009ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80093fe:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <xTaskResumeAll+0x134>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d010      	beq.n	800942c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800940a:	f000 f847 	bl	800949c <xTaskIncrementTick>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009414:	4b16      	ldr	r3, [pc, #88]	; (8009470 <xTaskResumeAll+0x130>)
 8009416:	2201      	movs	r2, #1
 8009418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3b01      	subs	r3, #1
 800941e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f1      	bne.n	800940a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <xTaskResumeAll+0x134>)
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800942c:	4b10      	ldr	r3, [pc, #64]	; (8009470 <xTaskResumeAll+0x130>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d009      	beq.n	8009448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009438:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <xTaskResumeAll+0x138>)
 800943a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009448:	f001 f9ac 	bl	800a7a4 <vPortExitCritical>

	return xAlreadyYielded;
 800944c:	68bb      	ldr	r3, [r7, #8]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	200012b4 	.word	0x200012b4
 800945c:	2000128c 	.word	0x2000128c
 8009460:	2000124c 	.word	0x2000124c
 8009464:	20001294 	.word	0x20001294
 8009468:	20000dbc 	.word	0x20000dbc
 800946c:	20000db8 	.word	0x20000db8
 8009470:	200012a0 	.word	0x200012a0
 8009474:	2000129c 	.word	0x2000129c
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <xTaskGetTickCount+0x1c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009488:	687b      	ldr	r3, [r7, #4]
}
 800948a:	4618      	mov	r0, r3
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20001290 	.word	0x20001290

0800949c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094a6:	4b51      	ldr	r3, [pc, #324]	; (80095ec <xTaskIncrementTick+0x150>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f040 808e 	bne.w	80095cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094b0:	4b4f      	ldr	r3, [pc, #316]	; (80095f0 <xTaskIncrementTick+0x154>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094b8:	4a4d      	ldr	r2, [pc, #308]	; (80095f0 <xTaskIncrementTick+0x154>)
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d120      	bne.n	8009506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094c4:	4b4b      	ldr	r3, [pc, #300]	; (80095f4 <xTaskIncrementTick+0x158>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	603b      	str	r3, [r7, #0]
}
 80094e0:	bf00      	nop
 80094e2:	e7fe      	b.n	80094e2 <xTaskIncrementTick+0x46>
 80094e4:	4b43      	ldr	r3, [pc, #268]	; (80095f4 <xTaskIncrementTick+0x158>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	4b43      	ldr	r3, [pc, #268]	; (80095f8 <xTaskIncrementTick+0x15c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a41      	ldr	r2, [pc, #260]	; (80095f4 <xTaskIncrementTick+0x158>)
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	4a41      	ldr	r2, [pc, #260]	; (80095f8 <xTaskIncrementTick+0x15c>)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	4b40      	ldr	r3, [pc, #256]	; (80095fc <xTaskIncrementTick+0x160>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3301      	adds	r3, #1
 80094fe:	4a3f      	ldr	r2, [pc, #252]	; (80095fc <xTaskIncrementTick+0x160>)
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	f000 fad5 	bl	8009ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009506:	4b3e      	ldr	r3, [pc, #248]	; (8009600 <xTaskIncrementTick+0x164>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	429a      	cmp	r2, r3
 800950e:	d34e      	bcc.n	80095ae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009510:	4b38      	ldr	r3, [pc, #224]	; (80095f4 <xTaskIncrementTick+0x158>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <xTaskIncrementTick+0x82>
 800951a:	2301      	movs	r3, #1
 800951c:	e000      	b.n	8009520 <xTaskIncrementTick+0x84>
 800951e:	2300      	movs	r3, #0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009524:	4b36      	ldr	r3, [pc, #216]	; (8009600 <xTaskIncrementTick+0x164>)
 8009526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800952a:	601a      	str	r2, [r3, #0]
					break;
 800952c:	e03f      	b.n	80095ae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800952e:	4b31      	ldr	r3, [pc, #196]	; (80095f4 <xTaskIncrementTick+0x158>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	429a      	cmp	r2, r3
 8009544:	d203      	bcs.n	800954e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009546:	4a2e      	ldr	r2, [pc, #184]	; (8009600 <xTaskIncrementTick+0x164>)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6013      	str	r3, [r2, #0]
						break;
 800954c:	e02f      	b.n	80095ae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	3304      	adds	r3, #4
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fc2e 	bl	8007db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	3318      	adds	r3, #24
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe fc25 	bl	8007db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956e:	4b25      	ldr	r3, [pc, #148]	; (8009604 <xTaskIncrementTick+0x168>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	429a      	cmp	r2, r3
 8009574:	d903      	bls.n	800957e <xTaskIncrementTick+0xe2>
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	4a22      	ldr	r2, [pc, #136]	; (8009604 <xTaskIncrementTick+0x168>)
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4a1f      	ldr	r2, [pc, #124]	; (8009608 <xTaskIncrementTick+0x16c>)
 800958c:	441a      	add	r2, r3
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	3304      	adds	r3, #4
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f7fe fbb0 	bl	8007cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959e:	4b1b      	ldr	r3, [pc, #108]	; (800960c <xTaskIncrementTick+0x170>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3b3      	bcc.n	8009510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80095a8:	2301      	movs	r3, #1
 80095aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ac:	e7b0      	b.n	8009510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095ae:	4b17      	ldr	r3, [pc, #92]	; (800960c <xTaskIncrementTick+0x170>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	4914      	ldr	r1, [pc, #80]	; (8009608 <xTaskIncrementTick+0x16c>)
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d907      	bls.n	80095d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80095c6:	2301      	movs	r3, #1
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	e004      	b.n	80095d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80095cc:	4b10      	ldr	r3, [pc, #64]	; (8009610 <xTaskIncrementTick+0x174>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3301      	adds	r3, #1
 80095d2:	4a0f      	ldr	r2, [pc, #60]	; (8009610 <xTaskIncrementTick+0x174>)
 80095d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <xTaskIncrementTick+0x178>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80095de:	2301      	movs	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80095e2:	697b      	ldr	r3, [r7, #20]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	200012b4 	.word	0x200012b4
 80095f0:	20001290 	.word	0x20001290
 80095f4:	20001244 	.word	0x20001244
 80095f8:	20001248 	.word	0x20001248
 80095fc:	200012a4 	.word	0x200012a4
 8009600:	200012ac 	.word	0x200012ac
 8009604:	20001294 	.word	0x20001294
 8009608:	20000dbc 	.word	0x20000dbc
 800960c:	20000db8 	.word	0x20000db8
 8009610:	2000129c 	.word	0x2000129c
 8009614:	200012a0 	.word	0x200012a0

08009618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800961e:	4b28      	ldr	r3, [pc, #160]	; (80096c0 <vTaskSwitchContext+0xa8>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009626:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <vTaskSwitchContext+0xac>)
 8009628:	2201      	movs	r2, #1
 800962a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800962c:	e041      	b.n	80096b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800962e:	4b25      	ldr	r3, [pc, #148]	; (80096c4 <vTaskSwitchContext+0xac>)
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009634:	4b24      	ldr	r3, [pc, #144]	; (80096c8 <vTaskSwitchContext+0xb0>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	e010      	b.n	800965e <vTaskSwitchContext+0x46>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <vTaskSwitchContext+0x40>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	607b      	str	r3, [r7, #4]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <vTaskSwitchContext+0x3e>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3b01      	subs	r3, #1
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	491b      	ldr	r1, [pc, #108]	; (80096cc <vTaskSwitchContext+0xb4>)
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0e4      	beq.n	800963c <vTaskSwitchContext+0x24>
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4a13      	ldr	r2, [pc, #76]	; (80096cc <vTaskSwitchContext+0xb4>)
 800967e:	4413      	add	r3, r2
 8009680:	60bb      	str	r3, [r7, #8]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	605a      	str	r2, [r3, #4]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	3308      	adds	r3, #8
 8009694:	429a      	cmp	r2, r3
 8009696:	d104      	bne.n	80096a2 <vTaskSwitchContext+0x8a>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	605a      	str	r2, [r3, #4]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a09      	ldr	r2, [pc, #36]	; (80096d0 <vTaskSwitchContext+0xb8>)
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	4a06      	ldr	r2, [pc, #24]	; (80096c8 <vTaskSwitchContext+0xb0>)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6013      	str	r3, [r2, #0]
}
 80096b2:	bf00      	nop
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	200012b4 	.word	0x200012b4
 80096c4:	200012a0 	.word	0x200012a0
 80096c8:	20001294 	.word	0x20001294
 80096cc:	20000dbc 	.word	0x20000dbc
 80096d0:	20000db8 	.word	0x20000db8

080096d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	60fb      	str	r3, [r7, #12]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096fa:	4b07      	ldr	r3, [pc, #28]	; (8009718 <vTaskPlaceOnEventList+0x44>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3318      	adds	r3, #24
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7fe fb1d 	bl	8007d42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009708:	2101      	movs	r1, #1
 800970a:	6838      	ldr	r0, [r7, #0]
 800970c:	f000 fb8a 	bl	8009e24 <prvAddCurrentTaskToDelayedList>
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20000db8 	.word	0x20000db8

0800971c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	617b      	str	r3, [r7, #20]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009744:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <vTaskPlaceOnEventListRestricted+0x54>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3318      	adds	r3, #24
 800974a:	4619      	mov	r1, r3
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f7fe fad4 	bl	8007cfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800975c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	68b8      	ldr	r0, [r7, #8]
 8009762:	f000 fb5f 	bl	8009e24 <prvAddCurrentTaskToDelayedList>
	}
 8009766:	bf00      	nop
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000db8 	.word	0x20000db8

08009774 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10a      	bne.n	80097a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	60fb      	str	r3, [r7, #12]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	3318      	adds	r3, #24
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fe fb05 	bl	8007db4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097aa:	4b1e      	ldr	r3, [pc, #120]	; (8009824 <xTaskRemoveFromEventList+0xb0>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d11d      	bne.n	80097ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	3304      	adds	r3, #4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fafc 	bl	8007db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c0:	4b19      	ldr	r3, [pc, #100]	; (8009828 <xTaskRemoveFromEventList+0xb4>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d903      	bls.n	80097d0 <xTaskRemoveFromEventList+0x5c>
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097cc:	4a16      	ldr	r2, [pc, #88]	; (8009828 <xTaskRemoveFromEventList+0xb4>)
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4a13      	ldr	r2, [pc, #76]	; (800982c <xTaskRemoveFromEventList+0xb8>)
 80097de:	441a      	add	r2, r3
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	3304      	adds	r3, #4
 80097e4:	4619      	mov	r1, r3
 80097e6:	4610      	mov	r0, r2
 80097e8:	f7fe fa87 	bl	8007cfa <vListInsertEnd>
 80097ec:	e005      	b.n	80097fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	3318      	adds	r3, #24
 80097f2:	4619      	mov	r1, r3
 80097f4:	480e      	ldr	r0, [pc, #56]	; (8009830 <xTaskRemoveFromEventList+0xbc>)
 80097f6:	f7fe fa80 	bl	8007cfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fe:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <xTaskRemoveFromEventList+0xc0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	429a      	cmp	r2, r3
 8009806:	d905      	bls.n	8009814 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009808:	2301      	movs	r3, #1
 800980a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <xTaskRemoveFromEventList+0xc4>)
 800980e:	2201      	movs	r2, #1
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	e001      	b.n	8009818 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009814:	2300      	movs	r3, #0
 8009816:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009818:	697b      	ldr	r3, [r7, #20]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	200012b4 	.word	0x200012b4
 8009828:	20001294 	.word	0x20001294
 800982c:	20000dbc 	.word	0x20000dbc
 8009830:	2000124c 	.word	0x2000124c
 8009834:	20000db8 	.word	0x20000db8
 8009838:	200012a0 	.word	0x200012a0

0800983c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009844:	4b06      	ldr	r3, [pc, #24]	; (8009860 <vTaskInternalSetTimeOutState+0x24>)
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800984c:	4b05      	ldr	r3, [pc, #20]	; (8009864 <vTaskInternalSetTimeOutState+0x28>)
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	605a      	str	r2, [r3, #4]
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	200012a4 	.word	0x200012a4
 8009864:	20001290 	.word	0x20001290

08009868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	613b      	str	r3, [r7, #16]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	60fb      	str	r3, [r7, #12]
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098aa:	f000 ff4b 	bl	800a744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098ae:	4b1d      	ldr	r3, [pc, #116]	; (8009924 <xTaskCheckForTimeOut+0xbc>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098c6:	d102      	bne.n	80098ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61fb      	str	r3, [r7, #28]
 80098cc:	e023      	b.n	8009916 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <xTaskCheckForTimeOut+0xc0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d007      	beq.n	80098ea <xTaskCheckForTimeOut+0x82>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d302      	bcc.n	80098ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098e4:	2301      	movs	r3, #1
 80098e6:	61fb      	str	r3, [r7, #28]
 80098e8:	e015      	b.n	8009916 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d20b      	bcs.n	800990c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	1ad2      	subs	r2, r2, r3
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff ff9b 	bl	800983c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009906:	2300      	movs	r3, #0
 8009908:	61fb      	str	r3, [r7, #28]
 800990a:	e004      	b.n	8009916 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009912:	2301      	movs	r3, #1
 8009914:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009916:	f000 ff45 	bl	800a7a4 <vPortExitCritical>

	return xReturn;
 800991a:	69fb      	ldr	r3, [r7, #28]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3720      	adds	r7, #32
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20001290 	.word	0x20001290
 8009928:	200012a4 	.word	0x200012a4

0800992c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009930:	4b03      	ldr	r3, [pc, #12]	; (8009940 <vTaskMissedYield+0x14>)
 8009932:	2201      	movs	r2, #1
 8009934:	601a      	str	r2, [r3, #0]
}
 8009936:	bf00      	nop
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	200012a0 	.word	0x200012a0

08009944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800994c:	f000 f852 	bl	80099f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <prvIdleTask+0x28>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d9f9      	bls.n	800994c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009958:	4b05      	ldr	r3, [pc, #20]	; (8009970 <prvIdleTask+0x2c>)
 800995a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009968:	e7f0      	b.n	800994c <prvIdleTask+0x8>
 800996a:	bf00      	nop
 800996c:	20000dbc 	.word	0x20000dbc
 8009970:	e000ed04 	.word	0xe000ed04

08009974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800997a:	2300      	movs	r3, #0
 800997c:	607b      	str	r3, [r7, #4]
 800997e:	e00c      	b.n	800999a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4a12      	ldr	r2, [pc, #72]	; (80099d4 <prvInitialiseTaskLists+0x60>)
 800998c:	4413      	add	r3, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7fe f986 	bl	8007ca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3301      	adds	r3, #1
 8009998:	607b      	str	r3, [r7, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b37      	cmp	r3, #55	; 0x37
 800999e:	d9ef      	bls.n	8009980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099a0:	480d      	ldr	r0, [pc, #52]	; (80099d8 <prvInitialiseTaskLists+0x64>)
 80099a2:	f7fe f97d 	bl	8007ca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099a6:	480d      	ldr	r0, [pc, #52]	; (80099dc <prvInitialiseTaskLists+0x68>)
 80099a8:	f7fe f97a 	bl	8007ca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099ac:	480c      	ldr	r0, [pc, #48]	; (80099e0 <prvInitialiseTaskLists+0x6c>)
 80099ae:	f7fe f977 	bl	8007ca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099b2:	480c      	ldr	r0, [pc, #48]	; (80099e4 <prvInitialiseTaskLists+0x70>)
 80099b4:	f7fe f974 	bl	8007ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099b8:	480b      	ldr	r0, [pc, #44]	; (80099e8 <prvInitialiseTaskLists+0x74>)
 80099ba:	f7fe f971 	bl	8007ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099be:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <prvInitialiseTaskLists+0x78>)
 80099c0:	4a05      	ldr	r2, [pc, #20]	; (80099d8 <prvInitialiseTaskLists+0x64>)
 80099c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099c4:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <prvInitialiseTaskLists+0x7c>)
 80099c6:	4a05      	ldr	r2, [pc, #20]	; (80099dc <prvInitialiseTaskLists+0x68>)
 80099c8:	601a      	str	r2, [r3, #0]
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000dbc 	.word	0x20000dbc
 80099d8:	2000121c 	.word	0x2000121c
 80099dc:	20001230 	.word	0x20001230
 80099e0:	2000124c 	.word	0x2000124c
 80099e4:	20001260 	.word	0x20001260
 80099e8:	20001278 	.word	0x20001278
 80099ec:	20001244 	.word	0x20001244
 80099f0:	20001248 	.word	0x20001248

080099f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099fa:	e019      	b.n	8009a30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099fc:	f000 fea2 	bl	800a744 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009a00:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <prvCheckTasksWaitingTermination+0x50>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe f9d1 	bl	8007db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a12:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <prvCheckTasksWaitingTermination+0x54>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	4a0b      	ldr	r2, [pc, #44]	; (8009a48 <prvCheckTasksWaitingTermination+0x54>)
 8009a1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <prvCheckTasksWaitingTermination+0x58>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <prvCheckTasksWaitingTermination+0x58>)
 8009a24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a26:	f000 febd 	bl	800a7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f810 	bl	8009a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a30:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <prvCheckTasksWaitingTermination+0x58>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e1      	bne.n	80099fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20001260 	.word	0x20001260
 8009a48:	2000128c 	.word	0x2000128c
 8009a4c:	20001274 	.word	0x20001274

08009a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d108      	bne.n	8009a74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	4618      	mov	r0, r3
 8009a68:	f001 f852 	bl	800ab10 <vPortFree>
				vPortFree( pxTCB );
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f001 f84f 	bl	800ab10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a72:	e018      	b.n	8009aa6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d103      	bne.n	8009a86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f001 f846 	bl	800ab10 <vPortFree>
	}
 8009a84:	e00f      	b.n	8009aa6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d00a      	beq.n	8009aa6 <prvDeleteTCB+0x56>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	60fb      	str	r3, [r7, #12]
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <prvDeleteTCB+0x54>
	}
 8009aa6:	bf00      	nop
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ab6:	4b0f      	ldr	r3, [pc, #60]	; (8009af4 <prvResetNextTaskUnblockTime+0x44>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <prvResetNextTaskUnblockTime+0x14>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e000      	b.n	8009ac6 <prvResetNextTaskUnblockTime+0x16>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d004      	beq.n	8009ad4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009aca:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <prvResetNextTaskUnblockTime+0x48>)
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ad0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ad2:	e008      	b.n	8009ae6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009ad4:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <prvResetNextTaskUnblockTime+0x44>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	4a05      	ldr	r2, [pc, #20]	; (8009af8 <prvResetNextTaskUnblockTime+0x48>)
 8009ae4:	6013      	str	r3, [r2, #0]
}
 8009ae6:	bf00      	nop
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20001244 	.word	0x20001244
 8009af8:	200012ac 	.word	0x200012ac

08009afc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b02:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <xTaskGetSchedulerState+0x34>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	607b      	str	r3, [r7, #4]
 8009b0e:	e008      	b.n	8009b22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b10:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <xTaskGetSchedulerState+0x38>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	607b      	str	r3, [r7, #4]
 8009b1c:	e001      	b.n	8009b22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b22:	687b      	ldr	r3, [r7, #4]
	}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	20001298 	.word	0x20001298
 8009b34:	200012b4 	.word	0x200012b4

08009b38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d056      	beq.n	8009bfc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b52:	4b2d      	ldr	r3, [pc, #180]	; (8009c08 <xTaskPriorityInherit+0xd0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d246      	bcs.n	8009bea <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	db06      	blt.n	8009b72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b64:	4b28      	ldr	r3, [pc, #160]	; (8009c08 <xTaskPriorityInherit+0xd0>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	6959      	ldr	r1, [r3, #20]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4a22      	ldr	r2, [pc, #136]	; (8009c0c <xTaskPriorityInherit+0xd4>)
 8009b84:	4413      	add	r3, r2
 8009b86:	4299      	cmp	r1, r3
 8009b88:	d101      	bne.n	8009b8e <xTaskPriorityInherit+0x56>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e000      	b.n	8009b90 <xTaskPriorityInherit+0x58>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d022      	beq.n	8009bda <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	3304      	adds	r3, #4
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe f90b 	bl	8007db4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b9e:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <xTaskPriorityInherit+0xd0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bac:	4b18      	ldr	r3, [pc, #96]	; (8009c10 <xTaskPriorityInherit+0xd8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d903      	bls.n	8009bbc <xTaskPriorityInherit+0x84>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <xTaskPriorityInherit+0xd8>)
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4a10      	ldr	r2, [pc, #64]	; (8009c0c <xTaskPriorityInherit+0xd4>)
 8009bca:	441a      	add	r2, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	f7fe f891 	bl	8007cfa <vListInsertEnd>
 8009bd8:	e004      	b.n	8009be4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <xTaskPriorityInherit+0xd0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009be4:	2301      	movs	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	e008      	b.n	8009bfc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <xTaskPriorityInherit+0xd0>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d201      	bcs.n	8009bfc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
	}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000db8 	.word	0x20000db8
 8009c0c:	20000dbc 	.word	0x20000dbc
 8009c10:	20001294 	.word	0x20001294

08009c14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c20:	2300      	movs	r3, #0
 8009c22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d056      	beq.n	8009cd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ce4 <xTaskPriorityDisinherit+0xd0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d00a      	beq.n	8009c4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	60fb      	str	r3, [r7, #12]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10a      	bne.n	8009c68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	60bb      	str	r3, [r7, #8]
}
 8009c64:	bf00      	nop
 8009c66:	e7fe      	b.n	8009c66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6c:	1e5a      	subs	r2, r3, #1
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d02c      	beq.n	8009cd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d128      	bne.n	8009cd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe f892 	bl	8007db4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca8:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <xTaskPriorityDisinherit+0xd4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d903      	bls.n	8009cb8 <xTaskPriorityDisinherit+0xa4>
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	4a0c      	ldr	r2, [pc, #48]	; (8009ce8 <xTaskPriorityDisinherit+0xd4>)
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4a09      	ldr	r2, [pc, #36]	; (8009cec <xTaskPriorityDisinherit+0xd8>)
 8009cc6:	441a      	add	r2, r3
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7fe f813 	bl	8007cfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cd8:	697b      	ldr	r3, [r7, #20]
	}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000db8 	.word	0x20000db8
 8009ce8:	20001294 	.word	0x20001294
 8009cec:	20000dbc 	.word	0x20000dbc

08009cf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d06f      	beq.n	8009de8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d902      	bls.n	8009d36 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	61fb      	str	r3, [r7, #28]
 8009d34:	e002      	b.n	8009d3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d40:	69fa      	ldr	r2, [r7, #28]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d050      	beq.n	8009de8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d14b      	bne.n	8009de8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d50:	4b27      	ldr	r3, [pc, #156]	; (8009df0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d10a      	bne.n	8009d70 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	60bb      	str	r3, [r7, #8]
}
 8009d6c:	bf00      	nop
 8009d6e:	e7fe      	b.n	8009d6e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	69fa      	ldr	r2, [r7, #28]
 8009d7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	db04      	blt.n	8009d8e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	6959      	ldr	r1, [r3, #20]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4a15      	ldr	r2, [pc, #84]	; (8009df4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009d9e:	4413      	add	r3, r2
 8009da0:	4299      	cmp	r1, r3
 8009da2:	d101      	bne.n	8009da8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009da8:	2300      	movs	r3, #0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d01c      	beq.n	8009de8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd fffe 	bl	8007db4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dbc:	4b0e      	ldr	r3, [pc, #56]	; (8009df8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d903      	bls.n	8009dcc <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	4a0b      	ldr	r2, [pc, #44]	; (8009df8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4a06      	ldr	r2, [pc, #24]	; (8009df4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009dda:	441a      	add	r2, r3
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	3304      	adds	r3, #4
 8009de0:	4619      	mov	r1, r3
 8009de2:	4610      	mov	r0, r2
 8009de4:	f7fd ff89 	bl	8007cfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009de8:	bf00      	nop
 8009dea:	3720      	adds	r7, #32
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	20000db8 	.word	0x20000db8
 8009df4:	20000dbc 	.word	0x20000dbc
 8009df8:	20001294 	.word	0x20001294

08009dfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e08:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e0e:	3201      	adds	r2, #1
 8009e10:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009e12:	4b03      	ldr	r3, [pc, #12]	; (8009e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e14:	681b      	ldr	r3, [r3, #0]
	}
 8009e16:	4618      	mov	r0, r3
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	20000db8 	.word	0x20000db8

08009e24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e2e:	4b21      	ldr	r3, [pc, #132]	; (8009eb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e34:	4b20      	ldr	r3, [pc, #128]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fd ffba 	bl	8007db4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e46:	d10a      	bne.n	8009e5e <prvAddCurrentTaskToDelayedList+0x3a>
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d007      	beq.n	8009e5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e4e:	4b1a      	ldr	r3, [pc, #104]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3304      	adds	r3, #4
 8009e54:	4619      	mov	r1, r3
 8009e56:	4819      	ldr	r0, [pc, #100]	; (8009ebc <prvAddCurrentTaskToDelayedList+0x98>)
 8009e58:	f7fd ff4f 	bl	8007cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e5c:	e026      	b.n	8009eac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4413      	add	r3, r2
 8009e64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e66:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d209      	bcs.n	8009e8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e76:	4b12      	ldr	r3, [pc, #72]	; (8009ec0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	4b0f      	ldr	r3, [pc, #60]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f7fd ff5d 	bl	8007d42 <vListInsert>
}
 8009e88:	e010      	b.n	8009eac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e8a:	4b0e      	ldr	r3, [pc, #56]	; (8009ec4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4b0a      	ldr	r3, [pc, #40]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4619      	mov	r1, r3
 8009e96:	4610      	mov	r0, r2
 8009e98:	f7fd ff53 	bl	8007d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d202      	bcs.n	8009eac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ea6:	4a08      	ldr	r2, [pc, #32]	; (8009ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6013      	str	r3, [r2, #0]
}
 8009eac:	bf00      	nop
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	20001290 	.word	0x20001290
 8009eb8:	20000db8 	.word	0x20000db8
 8009ebc:	20001278 	.word	0x20001278
 8009ec0:	20001248 	.word	0x20001248
 8009ec4:	20001244 	.word	0x20001244
 8009ec8:	200012ac 	.word	0x200012ac

08009ecc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08a      	sub	sp, #40	; 0x28
 8009ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ed6:	f000 facb 	bl	800a470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009eda:	4b1c      	ldr	r3, [pc, #112]	; (8009f4c <xTimerCreateTimerTask+0x80>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d021      	beq.n	8009f26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009eea:	1d3a      	adds	r2, r7, #4
 8009eec:	f107 0108 	add.w	r1, r7, #8
 8009ef0:	f107 030c 	add.w	r3, r7, #12
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fd feb9 	bl	8007c6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	9202      	str	r2, [sp, #8]
 8009f02:	9301      	str	r3, [sp, #4]
 8009f04:	2302      	movs	r3, #2
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	460a      	mov	r2, r1
 8009f0c:	4910      	ldr	r1, [pc, #64]	; (8009f50 <xTimerCreateTimerTask+0x84>)
 8009f0e:	4811      	ldr	r0, [pc, #68]	; (8009f54 <xTimerCreateTimerTask+0x88>)
 8009f10:	f7fe ffd6 	bl	8008ec0 <xTaskCreateStatic>
 8009f14:	4603      	mov	r3, r0
 8009f16:	4a10      	ldr	r2, [pc, #64]	; (8009f58 <xTimerCreateTimerTask+0x8c>)
 8009f18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f1a:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <xTimerCreateTimerTask+0x8c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f22:	2301      	movs	r3, #1
 8009f24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	613b      	str	r3, [r7, #16]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f42:	697b      	ldr	r3, [r7, #20]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	200012e8 	.word	0x200012e8
 8009f50:	0800c464 	.word	0x0800c464
 8009f54:	0800a079 	.word	0x0800a079
 8009f58:	200012ec 	.word	0x200012ec

08009f5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08a      	sub	sp, #40	; 0x28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	623b      	str	r3, [r7, #32]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f8a:	4b1a      	ldr	r3, [pc, #104]	; (8009ff4 <xTimerGenericCommand+0x98>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d02a      	beq.n	8009fe8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b05      	cmp	r3, #5
 8009fa2:	dc18      	bgt.n	8009fd6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fa4:	f7ff fdaa 	bl	8009afc <xTaskGetSchedulerState>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d109      	bne.n	8009fc2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fae:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <xTimerGenericCommand+0x98>)
 8009fb0:	6818      	ldr	r0, [r3, #0]
 8009fb2:	f107 0110 	add.w	r1, r7, #16
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fba:	f7fe f91d 	bl	80081f8 <xQueueGenericSend>
 8009fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8009fc0:	e012      	b.n	8009fe8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fc2:	4b0c      	ldr	r3, [pc, #48]	; (8009ff4 <xTimerGenericCommand+0x98>)
 8009fc4:	6818      	ldr	r0, [r3, #0]
 8009fc6:	f107 0110 	add.w	r1, r7, #16
 8009fca:	2300      	movs	r3, #0
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f7fe f913 	bl	80081f8 <xQueueGenericSend>
 8009fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8009fd4:	e008      	b.n	8009fe8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fd6:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <xTimerGenericCommand+0x98>)
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	f107 0110 	add.w	r1, r7, #16
 8009fde:	2300      	movs	r3, #0
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	f7fe fa07 	bl	80083f4 <xQueueGenericSendFromISR>
 8009fe6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3728      	adds	r7, #40	; 0x28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200012e8 	.word	0x200012e8

08009ff8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b088      	sub	sp, #32
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a002:	4b1c      	ldr	r3, [pc, #112]	; (800a074 <prvProcessExpiredTimer+0x7c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	3304      	adds	r3, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f7fd fecf 	bl	8007db4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d122      	bne.n	800a064 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	699a      	ldr	r2, [r3, #24]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	18d1      	adds	r1, r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	6978      	ldr	r0, [r7, #20]
 800a02c:	f000 f8c8 	bl	800a1c0 <prvInsertTimerInActiveList>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d016      	beq.n	800a064 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a036:	2300      	movs	r3, #0
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	2300      	movs	r3, #0
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	2100      	movs	r1, #0
 800a040:	6978      	ldr	r0, [r7, #20]
 800a042:	f7ff ff8b 	bl	8009f5c <xTimerGenericCommand>
 800a046:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60fb      	str	r3, [r7, #12]
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	6978      	ldr	r0, [r7, #20]
 800a06a:	4798      	blx	r3
}
 800a06c:	bf00      	nop
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	200012e0 	.word	0x200012e0

0800a078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a080:	f107 0308 	add.w	r3, r7, #8
 800a084:	4618      	mov	r0, r3
 800a086:	f000 f857 	bl	800a138 <prvGetNextExpireTime>
 800a08a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	4619      	mov	r1, r3
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f803 	bl	800a09c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a096:	f000 f8d5 	bl	800a244 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a09a:	e7f1      	b.n	800a080 <prvTimerTask+0x8>

0800a09c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0a6:	f7ff f93d 	bl	8009324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f866 	bl	800a180 <prvSampleTimeNow>
 800a0b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d130      	bne.n	800a11e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <prvProcessTimerOrBlockTask+0x3c>
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d806      	bhi.n	800a0d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0ca:	f7ff f939 	bl	8009340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0ce:	68f9      	ldr	r1, [r7, #12]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff ff91 	bl	8009ff8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0d6:	e024      	b.n	800a122 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d008      	beq.n	800a0f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0de:	4b13      	ldr	r3, [pc, #76]	; (800a12c <prvProcessTimerOrBlockTask+0x90>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	bf0c      	ite	eq
 800a0e8:	2301      	moveq	r3, #1
 800a0ea:	2300      	movne	r3, #0
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0f0:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <prvProcessTimerOrBlockTask+0x94>)
 800a0f2:	6818      	ldr	r0, [r3, #0]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f7fe feab 	bl	8008e58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a102:	f7ff f91d 	bl	8009340 <xTaskResumeAll>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10a      	bne.n	800a122 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a10c:	4b09      	ldr	r3, [pc, #36]	; (800a134 <prvProcessTimerOrBlockTask+0x98>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	f3bf 8f6f 	isb	sy
}
 800a11c:	e001      	b.n	800a122 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a11e:	f7ff f90f 	bl	8009340 <xTaskResumeAll>
}
 800a122:	bf00      	nop
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	200012e4 	.word	0x200012e4
 800a130:	200012e8 	.word	0x200012e8
 800a134:	e000ed04 	.word	0xe000ed04

0800a138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a140:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <prvGetNextExpireTime+0x44>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	bf0c      	ite	eq
 800a14a:	2301      	moveq	r3, #1
 800a14c:	2300      	movne	r3, #0
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	461a      	mov	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d105      	bne.n	800a16a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a15e:	4b07      	ldr	r3, [pc, #28]	; (800a17c <prvGetNextExpireTime+0x44>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	e001      	b.n	800a16e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a16e:	68fb      	ldr	r3, [r7, #12]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	200012e0 	.word	0x200012e0

0800a180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a188:	f7ff f978 	bl	800947c <xTaskGetTickCount>
 800a18c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a18e:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <prvSampleTimeNow+0x3c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	429a      	cmp	r2, r3
 800a196:	d205      	bcs.n	800a1a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a198:	f000 f908 	bl	800a3ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	e002      	b.n	800a1aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1aa:	4a04      	ldr	r2, [pc, #16]	; (800a1bc <prvSampleTimeNow+0x3c>)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	200012f0 	.word	0x200012f0

0800a1c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d812      	bhi.n	800a20c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	1ad2      	subs	r2, r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d302      	bcc.n	800a1fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e01b      	b.n	800a232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1fa:	4b10      	ldr	r3, [pc, #64]	; (800a23c <prvInsertTimerInActiveList+0x7c>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3304      	adds	r3, #4
 800a202:	4619      	mov	r1, r3
 800a204:	4610      	mov	r0, r2
 800a206:	f7fd fd9c 	bl	8007d42 <vListInsert>
 800a20a:	e012      	b.n	800a232 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d206      	bcs.n	800a222 <prvInsertTimerInActiveList+0x62>
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d302      	bcc.n	800a222 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a21c:	2301      	movs	r3, #1
 800a21e:	617b      	str	r3, [r7, #20]
 800a220:	e007      	b.n	800a232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a222:	4b07      	ldr	r3, [pc, #28]	; (800a240 <prvInsertTimerInActiveList+0x80>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3304      	adds	r3, #4
 800a22a:	4619      	mov	r1, r3
 800a22c:	4610      	mov	r0, r2
 800a22e:	f7fd fd88 	bl	8007d42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a232:	697b      	ldr	r3, [r7, #20]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	200012e4 	.word	0x200012e4
 800a240:	200012e0 	.word	0x200012e0

0800a244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08e      	sub	sp, #56	; 0x38
 800a248:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a24a:	e09d      	b.n	800a388 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	da18      	bge.n	800a284 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a252:	1d3b      	adds	r3, r7, #4
 800a254:	3304      	adds	r3, #4
 800a256:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	61fb      	str	r3, [r7, #28]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a27a:	6850      	ldr	r0, [r2, #4]
 800a27c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a27e:	6892      	ldr	r2, [r2, #8]
 800a280:	4611      	mov	r1, r2
 800a282:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	db7d      	blt.n	800a386 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d004      	beq.n	800a2a0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	3304      	adds	r3, #4
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fd fd8a 	bl	8007db4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2a0:	463b      	mov	r3, r7
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff ff6c 	bl	800a180 <prvSampleTimeNow>
 800a2a8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2b09      	cmp	r3, #9
 800a2ae:	d86b      	bhi.n	800a388 <prvProcessReceivedCommands+0x144>
 800a2b0:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <prvProcessReceivedCommands+0x74>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2e1 	.word	0x0800a2e1
 800a2bc:	0800a2e1 	.word	0x0800a2e1
 800a2c0:	0800a2e1 	.word	0x0800a2e1
 800a2c4:	0800a389 	.word	0x0800a389
 800a2c8:	0800a33d 	.word	0x0800a33d
 800a2cc:	0800a375 	.word	0x0800a375
 800a2d0:	0800a2e1 	.word	0x0800a2e1
 800a2d4:	0800a2e1 	.word	0x0800a2e1
 800a2d8:	0800a389 	.word	0x0800a389
 800a2dc:	0800a33d 	.word	0x0800a33d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	18d1      	adds	r1, r2, r3
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ee:	f7ff ff67 	bl	800a1c0 <prvInsertTimerInActiveList>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d047      	beq.n	800a388 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d13f      	bne.n	800a388 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	441a      	add	r2, r3
 800a310:	2300      	movs	r3, #0
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	2300      	movs	r3, #0
 800a316:	2100      	movs	r1, #0
 800a318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a31a:	f7ff fe1f 	bl	8009f5c <xTimerGenericCommand>
 800a31e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d130      	bne.n	800a388 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	61bb      	str	r3, [r7, #24]
}
 800a338:	bf00      	nop
 800a33a:	e7fe      	b.n	800a33a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10a      	bne.n	800a360 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	617b      	str	r3, [r7, #20]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	18d1      	adds	r1, r2, r3
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a36c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a36e:	f7ff ff27 	bl	800a1c0 <prvInsertTimerInActiveList>
					break;
 800a372:	e009      	b.n	800a388 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d104      	bne.n	800a388 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a37e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a380:	f000 fbc6 	bl	800ab10 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a384:	e000      	b.n	800a388 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a386:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a388:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <prvProcessReceivedCommands+0x164>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	1d39      	adds	r1, r7, #4
 800a38e:	2200      	movs	r2, #0
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe f955 	bl	8008640 <xQueueReceive>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f47f af57 	bne.w	800a24c <prvProcessReceivedCommands+0x8>
	}
}
 800a39e:	bf00      	nop
 800a3a0:	bf00      	nop
 800a3a2:	3730      	adds	r7, #48	; 0x30
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	200012e8 	.word	0x200012e8

0800a3ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3b2:	e045      	b.n	800a440 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3b4:	4b2c      	ldr	r3, [pc, #176]	; (800a468 <prvSwitchTimerLists+0xbc>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3be:	4b2a      	ldr	r3, [pc, #168]	; (800a468 <prvSwitchTimerLists+0xbc>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fd fcf1 	bl	8007db4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d12e      	bne.n	800a440 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d90e      	bls.n	800a412 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a400:	4b19      	ldr	r3, [pc, #100]	; (800a468 <prvSwitchTimerLists+0xbc>)
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3304      	adds	r3, #4
 800a408:	4619      	mov	r1, r3
 800a40a:	4610      	mov	r0, r2
 800a40c:	f7fd fc99 	bl	8007d42 <vListInsert>
 800a410:	e016      	b.n	800a440 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a412:	2300      	movs	r3, #0
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	2300      	movs	r3, #0
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	2100      	movs	r1, #0
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f7ff fd9d 	bl	8009f5c <xTimerGenericCommand>
 800a422:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10a      	bne.n	800a440 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	603b      	str	r3, [r7, #0]
}
 800a43c:	bf00      	nop
 800a43e:	e7fe      	b.n	800a43e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a440:	4b09      	ldr	r3, [pc, #36]	; (800a468 <prvSwitchTimerLists+0xbc>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1b4      	bne.n	800a3b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a44a:	4b07      	ldr	r3, [pc, #28]	; (800a468 <prvSwitchTimerLists+0xbc>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a450:	4b06      	ldr	r3, [pc, #24]	; (800a46c <prvSwitchTimerLists+0xc0>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a04      	ldr	r2, [pc, #16]	; (800a468 <prvSwitchTimerLists+0xbc>)
 800a456:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a458:	4a04      	ldr	r2, [pc, #16]	; (800a46c <prvSwitchTimerLists+0xc0>)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	6013      	str	r3, [r2, #0]
}
 800a45e:	bf00      	nop
 800a460:	3718      	adds	r7, #24
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200012e0 	.word	0x200012e0
 800a46c:	200012e4 	.word	0x200012e4

0800a470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a476:	f000 f965 	bl	800a744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a47a:	4b15      	ldr	r3, [pc, #84]	; (800a4d0 <prvCheckForValidListAndQueue+0x60>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d120      	bne.n	800a4c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a482:	4814      	ldr	r0, [pc, #80]	; (800a4d4 <prvCheckForValidListAndQueue+0x64>)
 800a484:	f7fd fc0c 	bl	8007ca0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a488:	4813      	ldr	r0, [pc, #76]	; (800a4d8 <prvCheckForValidListAndQueue+0x68>)
 800a48a:	f7fd fc09 	bl	8007ca0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <prvCheckForValidListAndQueue+0x6c>)
 800a490:	4a10      	ldr	r2, [pc, #64]	; (800a4d4 <prvCheckForValidListAndQueue+0x64>)
 800a492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a494:	4b12      	ldr	r3, [pc, #72]	; (800a4e0 <prvCheckForValidListAndQueue+0x70>)
 800a496:	4a10      	ldr	r2, [pc, #64]	; (800a4d8 <prvCheckForValidListAndQueue+0x68>)
 800a498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a49a:	2300      	movs	r3, #0
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	4b11      	ldr	r3, [pc, #68]	; (800a4e4 <prvCheckForValidListAndQueue+0x74>)
 800a4a0:	4a11      	ldr	r2, [pc, #68]	; (800a4e8 <prvCheckForValidListAndQueue+0x78>)
 800a4a2:	2110      	movs	r1, #16
 800a4a4:	200a      	movs	r0, #10
 800a4a6:	f7fd fd17 	bl	8007ed8 <xQueueGenericCreateStatic>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4a08      	ldr	r2, [pc, #32]	; (800a4d0 <prvCheckForValidListAndQueue+0x60>)
 800a4ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4b0:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <prvCheckForValidListAndQueue+0x60>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d005      	beq.n	800a4c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4b8:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <prvCheckForValidListAndQueue+0x60>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	490b      	ldr	r1, [pc, #44]	; (800a4ec <prvCheckForValidListAndQueue+0x7c>)
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fc76 	bl	8008db0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4c4:	f000 f96e 	bl	800a7a4 <vPortExitCritical>
}
 800a4c8:	bf00      	nop
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	200012e8 	.word	0x200012e8
 800a4d4:	200012b8 	.word	0x200012b8
 800a4d8:	200012cc 	.word	0x200012cc
 800a4dc:	200012e0 	.word	0x200012e0
 800a4e0:	200012e4 	.word	0x200012e4
 800a4e4:	20001394 	.word	0x20001394
 800a4e8:	200012f4 	.word	0x200012f4
 800a4ec:	0800c46c 	.word	0x0800c46c

0800a4f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3b04      	subs	r3, #4
 800a500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3b04      	subs	r3, #4
 800a50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	f023 0201 	bic.w	r2, r3, #1
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3b04      	subs	r3, #4
 800a51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a520:	4a0c      	ldr	r2, [pc, #48]	; (800a554 <pxPortInitialiseStack+0x64>)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3b14      	subs	r3, #20
 800a52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3b04      	subs	r3, #4
 800a536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f06f 0202 	mvn.w	r2, #2
 800a53e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3b20      	subs	r3, #32
 800a544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a546:	68fb      	ldr	r3, [r7, #12]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	0800a559 	.word	0x0800a559

0800a558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a562:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <prvTaskExitError+0x54>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a56a:	d00a      	beq.n	800a582 <prvTaskExitError+0x2a>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	60fb      	str	r3, [r7, #12]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <prvTaskExitError+0x28>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60bb      	str	r3, [r7, #8]
}
 800a594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a596:	bf00      	nop
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0fc      	beq.n	800a598 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	20000020 	.word	0x20000020

0800a5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5b0:	4b07      	ldr	r3, [pc, #28]	; (800a5d0 <pxCurrentTCBConst2>)
 800a5b2:	6819      	ldr	r1, [r3, #0]
 800a5b4:	6808      	ldr	r0, [r1, #0]
 800a5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ba:	f380 8809 	msr	PSP, r0
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f04f 0000 	mov.w	r0, #0
 800a5c6:	f380 8811 	msr	BASEPRI, r0
 800a5ca:	4770      	bx	lr
 800a5cc:	f3af 8000 	nop.w

0800a5d0 <pxCurrentTCBConst2>:
 800a5d0:	20000db8 	.word	0x20000db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop

0800a5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5d8:	4808      	ldr	r0, [pc, #32]	; (800a5fc <prvPortStartFirstTask+0x24>)
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	6800      	ldr	r0, [r0, #0]
 800a5de:	f380 8808 	msr	MSP, r0
 800a5e2:	f04f 0000 	mov.w	r0, #0
 800a5e6:	f380 8814 	msr	CONTROL, r0
 800a5ea:	b662      	cpsie	i
 800a5ec:	b661      	cpsie	f
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	df00      	svc	0
 800a5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5fa:	bf00      	nop
 800a5fc:	e000ed08 	.word	0xe000ed08

0800a600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a606:	4b46      	ldr	r3, [pc, #280]	; (800a720 <xPortStartScheduler+0x120>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a46      	ldr	r2, [pc, #280]	; (800a724 <xPortStartScheduler+0x124>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d10a      	bne.n	800a626 <xPortStartScheduler+0x26>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	613b      	str	r3, [r7, #16]
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a626:	4b3e      	ldr	r3, [pc, #248]	; (800a720 <xPortStartScheduler+0x120>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a3f      	ldr	r2, [pc, #252]	; (800a728 <xPortStartScheduler+0x128>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d10a      	bne.n	800a646 <xPortStartScheduler+0x46>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	60fb      	str	r3, [r7, #12]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a646:	4b39      	ldr	r3, [pc, #228]	; (800a72c <xPortStartScheduler+0x12c>)
 800a648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	22ff      	movs	r2, #255	; 0xff
 800a656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	b2db      	uxtb	r3, r3
 800a664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	4b31      	ldr	r3, [pc, #196]	; (800a730 <xPortStartScheduler+0x130>)
 800a66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a66e:	4b31      	ldr	r3, [pc, #196]	; (800a734 <xPortStartScheduler+0x134>)
 800a670:	2207      	movs	r2, #7
 800a672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a674:	e009      	b.n	800a68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a676:	4b2f      	ldr	r3, [pc, #188]	; (800a734 <xPortStartScheduler+0x134>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	4a2d      	ldr	r2, [pc, #180]	; (800a734 <xPortStartScheduler+0x134>)
 800a67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	b2db      	uxtb	r3, r3
 800a688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a68a:	78fb      	ldrb	r3, [r7, #3]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a692:	2b80      	cmp	r3, #128	; 0x80
 800a694:	d0ef      	beq.n	800a676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a696:	4b27      	ldr	r3, [pc, #156]	; (800a734 <xPortStartScheduler+0x134>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f1c3 0307 	rsb	r3, r3, #7
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d00a      	beq.n	800a6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	60bb      	str	r3, [r7, #8]
}
 800a6b4:	bf00      	nop
 800a6b6:	e7fe      	b.n	800a6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6b8:	4b1e      	ldr	r3, [pc, #120]	; (800a734 <xPortStartScheduler+0x134>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	021b      	lsls	r3, r3, #8
 800a6be:	4a1d      	ldr	r2, [pc, #116]	; (800a734 <xPortStartScheduler+0x134>)
 800a6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6c2:	4b1c      	ldr	r3, [pc, #112]	; (800a734 <xPortStartScheduler+0x134>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6ca:	4a1a      	ldr	r2, [pc, #104]	; (800a734 <xPortStartScheduler+0x134>)
 800a6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	b2da      	uxtb	r2, r3
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6d6:	4b18      	ldr	r3, [pc, #96]	; (800a738 <xPortStartScheduler+0x138>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a17      	ldr	r2, [pc, #92]	; (800a738 <xPortStartScheduler+0x138>)
 800a6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6e2:	4b15      	ldr	r3, [pc, #84]	; (800a738 <xPortStartScheduler+0x138>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a14      	ldr	r2, [pc, #80]	; (800a738 <xPortStartScheduler+0x138>)
 800a6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6ee:	f000 f8dd 	bl	800a8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6f2:	4b12      	ldr	r3, [pc, #72]	; (800a73c <xPortStartScheduler+0x13c>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6f8:	f000 f8fc 	bl	800a8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6fc:	4b10      	ldr	r3, [pc, #64]	; (800a740 <xPortStartScheduler+0x140>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a0f      	ldr	r2, [pc, #60]	; (800a740 <xPortStartScheduler+0x140>)
 800a702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a708:	f7ff ff66 	bl	800a5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a70c:	f7fe ff84 	bl	8009618 <vTaskSwitchContext>
	prvTaskExitError();
 800a710:	f7ff ff22 	bl	800a558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	e000ed00 	.word	0xe000ed00
 800a724:	410fc271 	.word	0x410fc271
 800a728:	410fc270 	.word	0x410fc270
 800a72c:	e000e400 	.word	0xe000e400
 800a730:	200013e4 	.word	0x200013e4
 800a734:	200013e8 	.word	0x200013e8
 800a738:	e000ed20 	.word	0xe000ed20
 800a73c:	20000020 	.word	0x20000020
 800a740:	e000ef34 	.word	0xe000ef34

0800a744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	607b      	str	r3, [r7, #4]
}
 800a75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a75e:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <vPortEnterCritical+0x58>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3301      	adds	r3, #1
 800a764:	4a0d      	ldr	r2, [pc, #52]	; (800a79c <vPortEnterCritical+0x58>)
 800a766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a768:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <vPortEnterCritical+0x58>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d10f      	bne.n	800a790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a770:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <vPortEnterCritical+0x5c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <vPortEnterCritical+0x4c>
	__asm volatile
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	603b      	str	r3, [r7, #0]
}
 800a78c:	bf00      	nop
 800a78e:	e7fe      	b.n	800a78e <vPortEnterCritical+0x4a>
	}
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	20000020 	.word	0x20000020
 800a7a0:	e000ed04 	.word	0xe000ed04

0800a7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <vPortExitCritical+0x50>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <vPortExitCritical+0x24>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	607b      	str	r3, [r7, #4]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7c8:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <vPortExitCritical+0x50>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	4a09      	ldr	r2, [pc, #36]	; (800a7f4 <vPortExitCritical+0x50>)
 800a7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7d2:	4b08      	ldr	r3, [pc, #32]	; (800a7f4 <vPortExitCritical+0x50>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d105      	bne.n	800a7e6 <vPortExitCritical+0x42>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	f383 8811 	msr	BASEPRI, r3
}
 800a7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	20000020 	.word	0x20000020
	...

0800a800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a800:	f3ef 8009 	mrs	r0, PSP
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	4b15      	ldr	r3, [pc, #84]	; (800a860 <pxCurrentTCBConst>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	f01e 0f10 	tst.w	lr, #16
 800a810:	bf08      	it	eq
 800a812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	6010      	str	r0, [r2, #0]
 800a81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a824:	f380 8811 	msr	BASEPRI, r0
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f7fe fef2 	bl	8009618 <vTaskSwitchContext>
 800a834:	f04f 0000 	mov.w	r0, #0
 800a838:	f380 8811 	msr	BASEPRI, r0
 800a83c:	bc09      	pop	{r0, r3}
 800a83e:	6819      	ldr	r1, [r3, #0]
 800a840:	6808      	ldr	r0, [r1, #0]
 800a842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a846:	f01e 0f10 	tst.w	lr, #16
 800a84a:	bf08      	it	eq
 800a84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a850:	f380 8809 	msr	PSP, r0
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w

0800a860 <pxCurrentTCBConst>:
 800a860:	20000db8 	.word	0x20000db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop

0800a868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	607b      	str	r3, [r7, #4]
}
 800a880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a882:	f7fe fe0b 	bl	800949c <xTaskIncrementTick>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a88c:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <SysTick_Handler+0x40>)
 800a88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	2300      	movs	r3, #0
 800a896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f383 8811 	msr	BASEPRI, r3
}
 800a89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <vPortSetupTimerInterrupt+0x34>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	; (800a8e4 <vPortSetupTimerInterrupt+0x38>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <vPortSetupTimerInterrupt+0x3c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <vPortSetupTimerInterrupt+0x40>)
 800a8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c6:	099b      	lsrs	r3, r3, #6
 800a8c8:	4a09      	ldr	r2, [pc, #36]	; (800a8f0 <vPortSetupTimerInterrupt+0x44>)
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <vPortSetupTimerInterrupt+0x34>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	601a      	str	r2, [r3, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	e000e010 	.word	0xe000e010
 800a8e4:	e000e018 	.word	0xe000e018
 800a8e8:	20000014 	.word	0x20000014
 800a8ec:	10624dd3 	.word	0x10624dd3
 800a8f0:	e000e014 	.word	0xe000e014

0800a8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a904 <vPortEnableVFP+0x10>
 800a8f8:	6801      	ldr	r1, [r0, #0]
 800a8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a8fe:	6001      	str	r1, [r0, #0]
 800a900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a902:	bf00      	nop
 800a904:	e000ed88 	.word	0xe000ed88

0800a908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a90e:	f3ef 8305 	mrs	r3, IPSR
 800a912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b0f      	cmp	r3, #15
 800a918:	d914      	bls.n	800a944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a91a:	4a17      	ldr	r2, [pc, #92]	; (800a978 <vPortValidateInterruptPriority+0x70>)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4413      	add	r3, r2
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a924:	4b15      	ldr	r3, [pc, #84]	; (800a97c <vPortValidateInterruptPriority+0x74>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	7afa      	ldrb	r2, [r7, #11]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d20a      	bcs.n	800a944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	607b      	str	r3, [r7, #4]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a944:	4b0e      	ldr	r3, [pc, #56]	; (800a980 <vPortValidateInterruptPriority+0x78>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a94c:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <vPortValidateInterruptPriority+0x7c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d90a      	bls.n	800a96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	603b      	str	r3, [r7, #0]
}
 800a966:	bf00      	nop
 800a968:	e7fe      	b.n	800a968 <vPortValidateInterruptPriority+0x60>
	}
 800a96a:	bf00      	nop
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	e000e3f0 	.word	0xe000e3f0
 800a97c:	200013e4 	.word	0x200013e4
 800a980:	e000ed0c 	.word	0xe000ed0c
 800a984:	200013e8 	.word	0x200013e8

0800a988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08a      	sub	sp, #40	; 0x28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a990:	2300      	movs	r3, #0
 800a992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a994:	f7fe fcc6 	bl	8009324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a998:	4b58      	ldr	r3, [pc, #352]	; (800aafc <pvPortMalloc+0x174>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9a0:	f000 f910 	bl	800abc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9a4:	4b56      	ldr	r3, [pc, #344]	; (800ab00 <pvPortMalloc+0x178>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f040 808e 	bne.w	800aace <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01d      	beq.n	800a9f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4413      	add	r3, r2
 800a9be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f003 0307 	and.w	r3, r3, #7
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d014      	beq.n	800a9f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f023 0307 	bic.w	r3, r3, #7
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00a      	beq.n	800a9f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	617b      	str	r3, [r7, #20]
}
 800a9f0:	bf00      	nop
 800a9f2:	e7fe      	b.n	800a9f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d069      	beq.n	800aace <pvPortMalloc+0x146>
 800a9fa:	4b42      	ldr	r3, [pc, #264]	; (800ab04 <pvPortMalloc+0x17c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d864      	bhi.n	800aace <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa04:	4b40      	ldr	r3, [pc, #256]	; (800ab08 <pvPortMalloc+0x180>)
 800aa06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa08:	4b3f      	ldr	r3, [pc, #252]	; (800ab08 <pvPortMalloc+0x180>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa0e:	e004      	b.n	800aa1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d903      	bls.n	800aa2c <pvPortMalloc+0xa4>
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1f1      	bne.n	800aa10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa2c:	4b33      	ldr	r3, [pc, #204]	; (800aafc <pvPortMalloc+0x174>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d04b      	beq.n	800aace <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	4413      	add	r3, r2
 800aa3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	2308      	movs	r3, #8
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d91f      	bls.n	800aa98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00a      	beq.n	800aa80 <pvPortMalloc+0xf8>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	613b      	str	r3, [r7, #16]
}
 800aa7c:	bf00      	nop
 800aa7e:	e7fe      	b.n	800aa7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	1ad2      	subs	r2, r2, r3
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa92:	69b8      	ldr	r0, [r7, #24]
 800aa94:	f000 f8f8 	bl	800ac88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa98:	4b1a      	ldr	r3, [pc, #104]	; (800ab04 <pvPortMalloc+0x17c>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	4a18      	ldr	r2, [pc, #96]	; (800ab04 <pvPortMalloc+0x17c>)
 800aaa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aaa6:	4b17      	ldr	r3, [pc, #92]	; (800ab04 <pvPortMalloc+0x17c>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	4b18      	ldr	r3, [pc, #96]	; (800ab0c <pvPortMalloc+0x184>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d203      	bcs.n	800aaba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aab2:	4b14      	ldr	r3, [pc, #80]	; (800ab04 <pvPortMalloc+0x17c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a15      	ldr	r2, [pc, #84]	; (800ab0c <pvPortMalloc+0x184>)
 800aab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	4b10      	ldr	r3, [pc, #64]	; (800ab00 <pvPortMalloc+0x178>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	431a      	orrs	r2, r3
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aace:	f7fe fc37 	bl	8009340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	f003 0307 	and.w	r3, r3, #7
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00a      	beq.n	800aaf2 <pvPortMalloc+0x16a>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	60fb      	str	r3, [r7, #12]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <pvPortMalloc+0x168>
	return pvReturn;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3728      	adds	r7, #40	; 0x28
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20001ff4 	.word	0x20001ff4
 800ab00:	20002000 	.word	0x20002000
 800ab04:	20001ff8 	.word	0x20001ff8
 800ab08:	20001fec 	.word	0x20001fec
 800ab0c:	20001ffc 	.word	0x20001ffc

0800ab10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d048      	beq.n	800abb4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab22:	2308      	movs	r3, #8
 800ab24:	425b      	negs	r3, r3
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	4413      	add	r3, r2
 800ab2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	4b21      	ldr	r3, [pc, #132]	; (800abbc <vPortFree+0xac>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4013      	ands	r3, r2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10a      	bne.n	800ab54 <vPortFree+0x44>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	60fb      	str	r3, [r7, #12]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00a      	beq.n	800ab72 <vPortFree+0x62>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	60bb      	str	r3, [r7, #8]
}
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	4b11      	ldr	r3, [pc, #68]	; (800abbc <vPortFree+0xac>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d019      	beq.n	800abb4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d115      	bne.n	800abb4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <vPortFree+0xac>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	43db      	mvns	r3, r3
 800ab92:	401a      	ands	r2, r3
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab98:	f7fe fbc4 	bl	8009324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <vPortFree+0xb0>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4413      	add	r3, r2
 800aba6:	4a06      	ldr	r2, [pc, #24]	; (800abc0 <vPortFree+0xb0>)
 800aba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abaa:	6938      	ldr	r0, [r7, #16]
 800abac:	f000 f86c 	bl	800ac88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800abb0:	f7fe fbc6 	bl	8009340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abb4:	bf00      	nop
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	20002000 	.word	0x20002000
 800abc0:	20001ff8 	.word	0x20001ff8

0800abc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800abce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abd0:	4b27      	ldr	r3, [pc, #156]	; (800ac70 <prvHeapInit+0xac>)
 800abd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f003 0307 	and.w	r3, r3, #7
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00c      	beq.n	800abf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3307      	adds	r3, #7
 800abe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 0307 	bic.w	r3, r3, #7
 800abea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	4a1f      	ldr	r2, [pc, #124]	; (800ac70 <prvHeapInit+0xac>)
 800abf4:	4413      	add	r3, r2
 800abf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abfc:	4a1d      	ldr	r2, [pc, #116]	; (800ac74 <prvHeapInit+0xb0>)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac02:	4b1c      	ldr	r3, [pc, #112]	; (800ac74 <prvHeapInit+0xb0>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac10:	2208      	movs	r2, #8
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1a9b      	subs	r3, r3, r2
 800ac16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f023 0307 	bic.w	r3, r3, #7
 800ac1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4a15      	ldr	r2, [pc, #84]	; (800ac78 <prvHeapInit+0xb4>)
 800ac24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac26:	4b14      	ldr	r3, [pc, #80]	; (800ac78 <prvHeapInit+0xb4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac2e:	4b12      	ldr	r3, [pc, #72]	; (800ac78 <prvHeapInit+0xb4>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac44:	4b0c      	ldr	r3, [pc, #48]	; (800ac78 <prvHeapInit+0xb4>)
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	4a0a      	ldr	r2, [pc, #40]	; (800ac7c <prvHeapInit+0xb8>)
 800ac52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	4a09      	ldr	r2, [pc, #36]	; (800ac80 <prvHeapInit+0xbc>)
 800ac5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac5c:	4b09      	ldr	r3, [pc, #36]	; (800ac84 <prvHeapInit+0xc0>)
 800ac5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac62:	601a      	str	r2, [r3, #0]
}
 800ac64:	bf00      	nop
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	200013ec 	.word	0x200013ec
 800ac74:	20001fec 	.word	0x20001fec
 800ac78:	20001ff4 	.word	0x20001ff4
 800ac7c:	20001ffc 	.word	0x20001ffc
 800ac80:	20001ff8 	.word	0x20001ff8
 800ac84:	20002000 	.word	0x20002000

0800ac88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac90:	4b28      	ldr	r3, [pc, #160]	; (800ad34 <prvInsertBlockIntoFreeList+0xac>)
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	e002      	b.n	800ac9c <prvInsertBlockIntoFreeList+0x14>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d8f7      	bhi.n	800ac96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	4413      	add	r3, r2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d108      	bne.n	800acca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	441a      	add	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	441a      	add	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d118      	bne.n	800ad10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <prvInsertBlockIntoFreeList+0xb0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d00d      	beq.n	800ad06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	441a      	add	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	e008      	b.n	800ad18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad06:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <prvInsertBlockIntoFreeList+0xb0>)
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	e003      	b.n	800ad18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d002      	beq.n	800ad26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad26:	bf00      	nop
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20001fec 	.word	0x20001fec
 800ad38:	20001ff4 	.word	0x20001ff4

0800ad3c <atoi>:
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	2100      	movs	r1, #0
 800ad40:	f000 b970 	b.w	800b024 <strtol>

0800ad44 <__errno>:
 800ad44:	4b01      	ldr	r3, [pc, #4]	; (800ad4c <__errno+0x8>)
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	20000024 	.word	0x20000024

0800ad50 <__libc_init_array>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	4d0d      	ldr	r5, [pc, #52]	; (800ad88 <__libc_init_array+0x38>)
 800ad54:	4c0d      	ldr	r4, [pc, #52]	; (800ad8c <__libc_init_array+0x3c>)
 800ad56:	1b64      	subs	r4, r4, r5
 800ad58:	10a4      	asrs	r4, r4, #2
 800ad5a:	2600      	movs	r6, #0
 800ad5c:	42a6      	cmp	r6, r4
 800ad5e:	d109      	bne.n	800ad74 <__libc_init_array+0x24>
 800ad60:	4d0b      	ldr	r5, [pc, #44]	; (800ad90 <__libc_init_array+0x40>)
 800ad62:	4c0c      	ldr	r4, [pc, #48]	; (800ad94 <__libc_init_array+0x44>)
 800ad64:	f001 fb10 	bl	800c388 <_init>
 800ad68:	1b64      	subs	r4, r4, r5
 800ad6a:	10a4      	asrs	r4, r4, #2
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	42a6      	cmp	r6, r4
 800ad70:	d105      	bne.n	800ad7e <__libc_init_array+0x2e>
 800ad72:	bd70      	pop	{r4, r5, r6, pc}
 800ad74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad78:	4798      	blx	r3
 800ad7a:	3601      	adds	r6, #1
 800ad7c:	e7ee      	b.n	800ad5c <__libc_init_array+0xc>
 800ad7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad82:	4798      	blx	r3
 800ad84:	3601      	adds	r6, #1
 800ad86:	e7f2      	b.n	800ad6e <__libc_init_array+0x1e>
 800ad88:	0800c790 	.word	0x0800c790
 800ad8c:	0800c790 	.word	0x0800c790
 800ad90:	0800c790 	.word	0x0800c790
 800ad94:	0800c794 	.word	0x0800c794

0800ad98 <memcpy>:
 800ad98:	440a      	add	r2, r1
 800ad9a:	4291      	cmp	r1, r2
 800ad9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ada0:	d100      	bne.n	800ada4 <memcpy+0xc>
 800ada2:	4770      	bx	lr
 800ada4:	b510      	push	{r4, lr}
 800ada6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adae:	4291      	cmp	r1, r2
 800adb0:	d1f9      	bne.n	800ada6 <memcpy+0xe>
 800adb2:	bd10      	pop	{r4, pc}

0800adb4 <memset>:
 800adb4:	4402      	add	r2, r0
 800adb6:	4603      	mov	r3, r0
 800adb8:	4293      	cmp	r3, r2
 800adba:	d100      	bne.n	800adbe <memset+0xa>
 800adbc:	4770      	bx	lr
 800adbe:	f803 1b01 	strb.w	r1, [r3], #1
 800adc2:	e7f9      	b.n	800adb8 <memset+0x4>

0800adc4 <siprintf>:
 800adc4:	b40e      	push	{r1, r2, r3}
 800adc6:	b500      	push	{lr}
 800adc8:	b09c      	sub	sp, #112	; 0x70
 800adca:	ab1d      	add	r3, sp, #116	; 0x74
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	9006      	str	r0, [sp, #24]
 800add0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800add4:	4809      	ldr	r0, [pc, #36]	; (800adfc <siprintf+0x38>)
 800add6:	9107      	str	r1, [sp, #28]
 800add8:	9104      	str	r1, [sp, #16]
 800adda:	4909      	ldr	r1, [pc, #36]	; (800ae00 <siprintf+0x3c>)
 800addc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade0:	9105      	str	r1, [sp, #20]
 800ade2:	6800      	ldr	r0, [r0, #0]
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	a902      	add	r1, sp, #8
 800ade8:	f000 fa9a 	bl	800b320 <_svfiprintf_r>
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	b01c      	add	sp, #112	; 0x70
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b003      	add	sp, #12
 800adfa:	4770      	bx	lr
 800adfc:	20000024 	.word	0x20000024
 800ae00:	ffff0208 	.word	0xffff0208

0800ae04 <strcpy>:
 800ae04:	4603      	mov	r3, r0
 800ae06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae0a:	f803 2b01 	strb.w	r2, [r3], #1
 800ae0e:	2a00      	cmp	r2, #0
 800ae10:	d1f9      	bne.n	800ae06 <strcpy+0x2>
 800ae12:	4770      	bx	lr

0800ae14 <strncmp>:
 800ae14:	b510      	push	{r4, lr}
 800ae16:	b17a      	cbz	r2, 800ae38 <strncmp+0x24>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	3901      	subs	r1, #1
 800ae1c:	1884      	adds	r4, r0, r2
 800ae1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae26:	4290      	cmp	r0, r2
 800ae28:	d101      	bne.n	800ae2e <strncmp+0x1a>
 800ae2a:	42a3      	cmp	r3, r4
 800ae2c:	d101      	bne.n	800ae32 <strncmp+0x1e>
 800ae2e:	1a80      	subs	r0, r0, r2
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d1f3      	bne.n	800ae1e <strncmp+0xa>
 800ae36:	e7fa      	b.n	800ae2e <strncmp+0x1a>
 800ae38:	4610      	mov	r0, r2
 800ae3a:	e7f9      	b.n	800ae30 <strncmp+0x1c>

0800ae3c <strstr>:
 800ae3c:	780a      	ldrb	r2, [r1, #0]
 800ae3e:	b570      	push	{r4, r5, r6, lr}
 800ae40:	b96a      	cbnz	r2, 800ae5e <strstr+0x22>
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d109      	bne.n	800ae5c <strstr+0x20>
 800ae48:	460c      	mov	r4, r1
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0f6      	beq.n	800ae42 <strstr+0x6>
 800ae54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ae58:	429e      	cmp	r6, r3
 800ae5a:	d0f7      	beq.n	800ae4c <strstr+0x10>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	7803      	ldrb	r3, [r0, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1ef      	bne.n	800ae44 <strstr+0x8>
 800ae64:	4618      	mov	r0, r3
 800ae66:	e7ec      	b.n	800ae42 <strstr+0x6>

0800ae68 <strtok>:
 800ae68:	4b16      	ldr	r3, [pc, #88]	; (800aec4 <strtok+0x5c>)
 800ae6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae6c:	681e      	ldr	r6, [r3, #0]
 800ae6e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ae70:	4605      	mov	r5, r0
 800ae72:	b9fc      	cbnz	r4, 800aeb4 <strtok+0x4c>
 800ae74:	2050      	movs	r0, #80	; 0x50
 800ae76:	9101      	str	r1, [sp, #4]
 800ae78:	f000 f90e 	bl	800b098 <malloc>
 800ae7c:	9901      	ldr	r1, [sp, #4]
 800ae7e:	65b0      	str	r0, [r6, #88]	; 0x58
 800ae80:	4602      	mov	r2, r0
 800ae82:	b920      	cbnz	r0, 800ae8e <strtok+0x26>
 800ae84:	4b10      	ldr	r3, [pc, #64]	; (800aec8 <strtok+0x60>)
 800ae86:	4811      	ldr	r0, [pc, #68]	; (800aecc <strtok+0x64>)
 800ae88:	2157      	movs	r1, #87	; 0x57
 800ae8a:	f000 f8d5 	bl	800b038 <__assert_func>
 800ae8e:	e9c0 4400 	strd	r4, r4, [r0]
 800ae92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ae96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ae9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ae9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aea2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aea6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800aeaa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800aeae:	6184      	str	r4, [r0, #24]
 800aeb0:	7704      	strb	r4, [r0, #28]
 800aeb2:	6244      	str	r4, [r0, #36]	; 0x24
 800aeb4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4628      	mov	r0, r5
 800aeba:	b002      	add	sp, #8
 800aebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aec0:	f000 b806 	b.w	800aed0 <__strtok_r>
 800aec4:	20000024 	.word	0x20000024
 800aec8:	0800c54c 	.word	0x0800c54c
 800aecc:	0800c563 	.word	0x0800c563

0800aed0 <__strtok_r>:
 800aed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aed2:	b908      	cbnz	r0, 800aed8 <__strtok_r+0x8>
 800aed4:	6810      	ldr	r0, [r2, #0]
 800aed6:	b188      	cbz	r0, 800aefc <__strtok_r+0x2c>
 800aed8:	4604      	mov	r4, r0
 800aeda:	4620      	mov	r0, r4
 800aedc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aee0:	460f      	mov	r7, r1
 800aee2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aee6:	b91e      	cbnz	r6, 800aef0 <__strtok_r+0x20>
 800aee8:	b965      	cbnz	r5, 800af04 <__strtok_r+0x34>
 800aeea:	6015      	str	r5, [r2, #0]
 800aeec:	4628      	mov	r0, r5
 800aeee:	e005      	b.n	800aefc <__strtok_r+0x2c>
 800aef0:	42b5      	cmp	r5, r6
 800aef2:	d1f6      	bne.n	800aee2 <__strtok_r+0x12>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1f0      	bne.n	800aeda <__strtok_r+0xa>
 800aef8:	6014      	str	r4, [r2, #0]
 800aefa:	7003      	strb	r3, [r0, #0]
 800aefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aefe:	461c      	mov	r4, r3
 800af00:	e00c      	b.n	800af1c <__strtok_r+0x4c>
 800af02:	b915      	cbnz	r5, 800af0a <__strtok_r+0x3a>
 800af04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af08:	460e      	mov	r6, r1
 800af0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af0e:	42ab      	cmp	r3, r5
 800af10:	d1f7      	bne.n	800af02 <__strtok_r+0x32>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0f3      	beq.n	800aefe <__strtok_r+0x2e>
 800af16:	2300      	movs	r3, #0
 800af18:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af1c:	6014      	str	r4, [r2, #0]
 800af1e:	e7ed      	b.n	800aefc <__strtok_r+0x2c>

0800af20 <_strtol_l.constprop.0>:
 800af20:	2b01      	cmp	r3, #1
 800af22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af26:	d001      	beq.n	800af2c <_strtol_l.constprop.0+0xc>
 800af28:	2b24      	cmp	r3, #36	; 0x24
 800af2a:	d906      	bls.n	800af3a <_strtol_l.constprop.0+0x1a>
 800af2c:	f7ff ff0a 	bl	800ad44 <__errno>
 800af30:	2316      	movs	r3, #22
 800af32:	6003      	str	r3, [r0, #0]
 800af34:	2000      	movs	r0, #0
 800af36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b020 <_strtol_l.constprop.0+0x100>
 800af3e:	460d      	mov	r5, r1
 800af40:	462e      	mov	r6, r5
 800af42:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af46:	f814 700c 	ldrb.w	r7, [r4, ip]
 800af4a:	f017 0708 	ands.w	r7, r7, #8
 800af4e:	d1f7      	bne.n	800af40 <_strtol_l.constprop.0+0x20>
 800af50:	2c2d      	cmp	r4, #45	; 0x2d
 800af52:	d132      	bne.n	800afba <_strtol_l.constprop.0+0x9a>
 800af54:	782c      	ldrb	r4, [r5, #0]
 800af56:	2701      	movs	r7, #1
 800af58:	1cb5      	adds	r5, r6, #2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d05b      	beq.n	800b016 <_strtol_l.constprop.0+0xf6>
 800af5e:	2b10      	cmp	r3, #16
 800af60:	d109      	bne.n	800af76 <_strtol_l.constprop.0+0x56>
 800af62:	2c30      	cmp	r4, #48	; 0x30
 800af64:	d107      	bne.n	800af76 <_strtol_l.constprop.0+0x56>
 800af66:	782c      	ldrb	r4, [r5, #0]
 800af68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af6c:	2c58      	cmp	r4, #88	; 0x58
 800af6e:	d14d      	bne.n	800b00c <_strtol_l.constprop.0+0xec>
 800af70:	786c      	ldrb	r4, [r5, #1]
 800af72:	2310      	movs	r3, #16
 800af74:	3502      	adds	r5, #2
 800af76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800af7e:	f04f 0c00 	mov.w	ip, #0
 800af82:	fbb8 f9f3 	udiv	r9, r8, r3
 800af86:	4666      	mov	r6, ip
 800af88:	fb03 8a19 	mls	sl, r3, r9, r8
 800af8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800af90:	f1be 0f09 	cmp.w	lr, #9
 800af94:	d816      	bhi.n	800afc4 <_strtol_l.constprop.0+0xa4>
 800af96:	4674      	mov	r4, lr
 800af98:	42a3      	cmp	r3, r4
 800af9a:	dd24      	ble.n	800afe6 <_strtol_l.constprop.0+0xc6>
 800af9c:	f1bc 0f00 	cmp.w	ip, #0
 800afa0:	db1e      	blt.n	800afe0 <_strtol_l.constprop.0+0xc0>
 800afa2:	45b1      	cmp	r9, r6
 800afa4:	d31c      	bcc.n	800afe0 <_strtol_l.constprop.0+0xc0>
 800afa6:	d101      	bne.n	800afac <_strtol_l.constprop.0+0x8c>
 800afa8:	45a2      	cmp	sl, r4
 800afaa:	db19      	blt.n	800afe0 <_strtol_l.constprop.0+0xc0>
 800afac:	fb06 4603 	mla	r6, r6, r3, r4
 800afb0:	f04f 0c01 	mov.w	ip, #1
 800afb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afb8:	e7e8      	b.n	800af8c <_strtol_l.constprop.0+0x6c>
 800afba:	2c2b      	cmp	r4, #43	; 0x2b
 800afbc:	bf04      	itt	eq
 800afbe:	782c      	ldrbeq	r4, [r5, #0]
 800afc0:	1cb5      	addeq	r5, r6, #2
 800afc2:	e7ca      	b.n	800af5a <_strtol_l.constprop.0+0x3a>
 800afc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800afc8:	f1be 0f19 	cmp.w	lr, #25
 800afcc:	d801      	bhi.n	800afd2 <_strtol_l.constprop.0+0xb2>
 800afce:	3c37      	subs	r4, #55	; 0x37
 800afd0:	e7e2      	b.n	800af98 <_strtol_l.constprop.0+0x78>
 800afd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800afd6:	f1be 0f19 	cmp.w	lr, #25
 800afda:	d804      	bhi.n	800afe6 <_strtol_l.constprop.0+0xc6>
 800afdc:	3c57      	subs	r4, #87	; 0x57
 800afde:	e7db      	b.n	800af98 <_strtol_l.constprop.0+0x78>
 800afe0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800afe4:	e7e6      	b.n	800afb4 <_strtol_l.constprop.0+0x94>
 800afe6:	f1bc 0f00 	cmp.w	ip, #0
 800afea:	da05      	bge.n	800aff8 <_strtol_l.constprop.0+0xd8>
 800afec:	2322      	movs	r3, #34	; 0x22
 800afee:	6003      	str	r3, [r0, #0]
 800aff0:	4646      	mov	r6, r8
 800aff2:	b942      	cbnz	r2, 800b006 <_strtol_l.constprop.0+0xe6>
 800aff4:	4630      	mov	r0, r6
 800aff6:	e79e      	b.n	800af36 <_strtol_l.constprop.0+0x16>
 800aff8:	b107      	cbz	r7, 800affc <_strtol_l.constprop.0+0xdc>
 800affa:	4276      	negs	r6, r6
 800affc:	2a00      	cmp	r2, #0
 800affe:	d0f9      	beq.n	800aff4 <_strtol_l.constprop.0+0xd4>
 800b000:	f1bc 0f00 	cmp.w	ip, #0
 800b004:	d000      	beq.n	800b008 <_strtol_l.constprop.0+0xe8>
 800b006:	1e69      	subs	r1, r5, #1
 800b008:	6011      	str	r1, [r2, #0]
 800b00a:	e7f3      	b.n	800aff4 <_strtol_l.constprop.0+0xd4>
 800b00c:	2430      	movs	r4, #48	; 0x30
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1b1      	bne.n	800af76 <_strtol_l.constprop.0+0x56>
 800b012:	2308      	movs	r3, #8
 800b014:	e7af      	b.n	800af76 <_strtol_l.constprop.0+0x56>
 800b016:	2c30      	cmp	r4, #48	; 0x30
 800b018:	d0a5      	beq.n	800af66 <_strtol_l.constprop.0+0x46>
 800b01a:	230a      	movs	r3, #10
 800b01c:	e7ab      	b.n	800af76 <_strtol_l.constprop.0+0x56>
 800b01e:	bf00      	nop
 800b020:	0800c5fd 	.word	0x0800c5fd

0800b024 <strtol>:
 800b024:	4613      	mov	r3, r2
 800b026:	460a      	mov	r2, r1
 800b028:	4601      	mov	r1, r0
 800b02a:	4802      	ldr	r0, [pc, #8]	; (800b034 <strtol+0x10>)
 800b02c:	6800      	ldr	r0, [r0, #0]
 800b02e:	f7ff bf77 	b.w	800af20 <_strtol_l.constprop.0>
 800b032:	bf00      	nop
 800b034:	20000024 	.word	0x20000024

0800b038 <__assert_func>:
 800b038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b03a:	4614      	mov	r4, r2
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b09      	ldr	r3, [pc, #36]	; (800b064 <__assert_func+0x2c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4605      	mov	r5, r0
 800b044:	68d8      	ldr	r0, [r3, #12]
 800b046:	b14c      	cbz	r4, 800b05c <__assert_func+0x24>
 800b048:	4b07      	ldr	r3, [pc, #28]	; (800b068 <__assert_func+0x30>)
 800b04a:	9100      	str	r1, [sp, #0]
 800b04c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b050:	4906      	ldr	r1, [pc, #24]	; (800b06c <__assert_func+0x34>)
 800b052:	462b      	mov	r3, r5
 800b054:	f000 f80e 	bl	800b074 <fiprintf>
 800b058:	f000 fe20 	bl	800bc9c <abort>
 800b05c:	4b04      	ldr	r3, [pc, #16]	; (800b070 <__assert_func+0x38>)
 800b05e:	461c      	mov	r4, r3
 800b060:	e7f3      	b.n	800b04a <__assert_func+0x12>
 800b062:	bf00      	nop
 800b064:	20000024 	.word	0x20000024
 800b068:	0800c5c0 	.word	0x0800c5c0
 800b06c:	0800c5cd 	.word	0x0800c5cd
 800b070:	0800c5fb 	.word	0x0800c5fb

0800b074 <fiprintf>:
 800b074:	b40e      	push	{r1, r2, r3}
 800b076:	b503      	push	{r0, r1, lr}
 800b078:	4601      	mov	r1, r0
 800b07a:	ab03      	add	r3, sp, #12
 800b07c:	4805      	ldr	r0, [pc, #20]	; (800b094 <fiprintf+0x20>)
 800b07e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b082:	6800      	ldr	r0, [r0, #0]
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	f000 fa75 	bl	800b574 <_vfiprintf_r>
 800b08a:	b002      	add	sp, #8
 800b08c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b090:	b003      	add	sp, #12
 800b092:	4770      	bx	lr
 800b094:	20000024 	.word	0x20000024

0800b098 <malloc>:
 800b098:	4b02      	ldr	r3, [pc, #8]	; (800b0a4 <malloc+0xc>)
 800b09a:	4601      	mov	r1, r0
 800b09c:	6818      	ldr	r0, [r3, #0]
 800b09e:	f000 b86f 	b.w	800b180 <_malloc_r>
 800b0a2:	bf00      	nop
 800b0a4:	20000024 	.word	0x20000024

0800b0a8 <_free_r>:
 800b0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0aa:	2900      	cmp	r1, #0
 800b0ac:	d044      	beq.n	800b138 <_free_r+0x90>
 800b0ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0b2:	9001      	str	r0, [sp, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f1a1 0404 	sub.w	r4, r1, #4
 800b0ba:	bfb8      	it	lt
 800b0bc:	18e4      	addlt	r4, r4, r3
 800b0be:	f001 f82f 	bl	800c120 <__malloc_lock>
 800b0c2:	4a1e      	ldr	r2, [pc, #120]	; (800b13c <_free_r+0x94>)
 800b0c4:	9801      	ldr	r0, [sp, #4]
 800b0c6:	6813      	ldr	r3, [r2, #0]
 800b0c8:	b933      	cbnz	r3, 800b0d8 <_free_r+0x30>
 800b0ca:	6063      	str	r3, [r4, #4]
 800b0cc:	6014      	str	r4, [r2, #0]
 800b0ce:	b003      	add	sp, #12
 800b0d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0d4:	f001 b82a 	b.w	800c12c <__malloc_unlock>
 800b0d8:	42a3      	cmp	r3, r4
 800b0da:	d908      	bls.n	800b0ee <_free_r+0x46>
 800b0dc:	6825      	ldr	r5, [r4, #0]
 800b0de:	1961      	adds	r1, r4, r5
 800b0e0:	428b      	cmp	r3, r1
 800b0e2:	bf01      	itttt	eq
 800b0e4:	6819      	ldreq	r1, [r3, #0]
 800b0e6:	685b      	ldreq	r3, [r3, #4]
 800b0e8:	1949      	addeq	r1, r1, r5
 800b0ea:	6021      	streq	r1, [r4, #0]
 800b0ec:	e7ed      	b.n	800b0ca <_free_r+0x22>
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	b10b      	cbz	r3, 800b0f8 <_free_r+0x50>
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	d9fa      	bls.n	800b0ee <_free_r+0x46>
 800b0f8:	6811      	ldr	r1, [r2, #0]
 800b0fa:	1855      	adds	r5, r2, r1
 800b0fc:	42a5      	cmp	r5, r4
 800b0fe:	d10b      	bne.n	800b118 <_free_r+0x70>
 800b100:	6824      	ldr	r4, [r4, #0]
 800b102:	4421      	add	r1, r4
 800b104:	1854      	adds	r4, r2, r1
 800b106:	42a3      	cmp	r3, r4
 800b108:	6011      	str	r1, [r2, #0]
 800b10a:	d1e0      	bne.n	800b0ce <_free_r+0x26>
 800b10c:	681c      	ldr	r4, [r3, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	6053      	str	r3, [r2, #4]
 800b112:	4421      	add	r1, r4
 800b114:	6011      	str	r1, [r2, #0]
 800b116:	e7da      	b.n	800b0ce <_free_r+0x26>
 800b118:	d902      	bls.n	800b120 <_free_r+0x78>
 800b11a:	230c      	movs	r3, #12
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	e7d6      	b.n	800b0ce <_free_r+0x26>
 800b120:	6825      	ldr	r5, [r4, #0]
 800b122:	1961      	adds	r1, r4, r5
 800b124:	428b      	cmp	r3, r1
 800b126:	bf04      	itt	eq
 800b128:	6819      	ldreq	r1, [r3, #0]
 800b12a:	685b      	ldreq	r3, [r3, #4]
 800b12c:	6063      	str	r3, [r4, #4]
 800b12e:	bf04      	itt	eq
 800b130:	1949      	addeq	r1, r1, r5
 800b132:	6021      	streq	r1, [r4, #0]
 800b134:	6054      	str	r4, [r2, #4]
 800b136:	e7ca      	b.n	800b0ce <_free_r+0x26>
 800b138:	b003      	add	sp, #12
 800b13a:	bd30      	pop	{r4, r5, pc}
 800b13c:	20002004 	.word	0x20002004

0800b140 <sbrk_aligned>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	4e0e      	ldr	r6, [pc, #56]	; (800b17c <sbrk_aligned+0x3c>)
 800b144:	460c      	mov	r4, r1
 800b146:	6831      	ldr	r1, [r6, #0]
 800b148:	4605      	mov	r5, r0
 800b14a:	b911      	cbnz	r1, 800b152 <sbrk_aligned+0x12>
 800b14c:	f000 fcd6 	bl	800bafc <_sbrk_r>
 800b150:	6030      	str	r0, [r6, #0]
 800b152:	4621      	mov	r1, r4
 800b154:	4628      	mov	r0, r5
 800b156:	f000 fcd1 	bl	800bafc <_sbrk_r>
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	d00a      	beq.n	800b174 <sbrk_aligned+0x34>
 800b15e:	1cc4      	adds	r4, r0, #3
 800b160:	f024 0403 	bic.w	r4, r4, #3
 800b164:	42a0      	cmp	r0, r4
 800b166:	d007      	beq.n	800b178 <sbrk_aligned+0x38>
 800b168:	1a21      	subs	r1, r4, r0
 800b16a:	4628      	mov	r0, r5
 800b16c:	f000 fcc6 	bl	800bafc <_sbrk_r>
 800b170:	3001      	adds	r0, #1
 800b172:	d101      	bne.n	800b178 <sbrk_aligned+0x38>
 800b174:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b178:	4620      	mov	r0, r4
 800b17a:	bd70      	pop	{r4, r5, r6, pc}
 800b17c:	20002008 	.word	0x20002008

0800b180 <_malloc_r>:
 800b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	1ccd      	adds	r5, r1, #3
 800b186:	f025 0503 	bic.w	r5, r5, #3
 800b18a:	3508      	adds	r5, #8
 800b18c:	2d0c      	cmp	r5, #12
 800b18e:	bf38      	it	cc
 800b190:	250c      	movcc	r5, #12
 800b192:	2d00      	cmp	r5, #0
 800b194:	4607      	mov	r7, r0
 800b196:	db01      	blt.n	800b19c <_malloc_r+0x1c>
 800b198:	42a9      	cmp	r1, r5
 800b19a:	d905      	bls.n	800b1a8 <_malloc_r+0x28>
 800b19c:	230c      	movs	r3, #12
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	2600      	movs	r6, #0
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a8:	4e2e      	ldr	r6, [pc, #184]	; (800b264 <_malloc_r+0xe4>)
 800b1aa:	f000 ffb9 	bl	800c120 <__malloc_lock>
 800b1ae:	6833      	ldr	r3, [r6, #0]
 800b1b0:	461c      	mov	r4, r3
 800b1b2:	bb34      	cbnz	r4, 800b202 <_malloc_r+0x82>
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	f7ff ffc2 	bl	800b140 <sbrk_aligned>
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	4604      	mov	r4, r0
 800b1c0:	d14d      	bne.n	800b25e <_malloc_r+0xde>
 800b1c2:	6834      	ldr	r4, [r6, #0]
 800b1c4:	4626      	mov	r6, r4
 800b1c6:	2e00      	cmp	r6, #0
 800b1c8:	d140      	bne.n	800b24c <_malloc_r+0xcc>
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	4631      	mov	r1, r6
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	eb04 0803 	add.w	r8, r4, r3
 800b1d4:	f000 fc92 	bl	800bafc <_sbrk_r>
 800b1d8:	4580      	cmp	r8, r0
 800b1da:	d13a      	bne.n	800b252 <_malloc_r+0xd2>
 800b1dc:	6821      	ldr	r1, [r4, #0]
 800b1de:	3503      	adds	r5, #3
 800b1e0:	1a6d      	subs	r5, r5, r1
 800b1e2:	f025 0503 	bic.w	r5, r5, #3
 800b1e6:	3508      	adds	r5, #8
 800b1e8:	2d0c      	cmp	r5, #12
 800b1ea:	bf38      	it	cc
 800b1ec:	250c      	movcc	r5, #12
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	4638      	mov	r0, r7
 800b1f2:	f7ff ffa5 	bl	800b140 <sbrk_aligned>
 800b1f6:	3001      	adds	r0, #1
 800b1f8:	d02b      	beq.n	800b252 <_malloc_r+0xd2>
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	442b      	add	r3, r5
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	e00e      	b.n	800b220 <_malloc_r+0xa0>
 800b202:	6822      	ldr	r2, [r4, #0]
 800b204:	1b52      	subs	r2, r2, r5
 800b206:	d41e      	bmi.n	800b246 <_malloc_r+0xc6>
 800b208:	2a0b      	cmp	r2, #11
 800b20a:	d916      	bls.n	800b23a <_malloc_r+0xba>
 800b20c:	1961      	adds	r1, r4, r5
 800b20e:	42a3      	cmp	r3, r4
 800b210:	6025      	str	r5, [r4, #0]
 800b212:	bf18      	it	ne
 800b214:	6059      	strne	r1, [r3, #4]
 800b216:	6863      	ldr	r3, [r4, #4]
 800b218:	bf08      	it	eq
 800b21a:	6031      	streq	r1, [r6, #0]
 800b21c:	5162      	str	r2, [r4, r5]
 800b21e:	604b      	str	r3, [r1, #4]
 800b220:	4638      	mov	r0, r7
 800b222:	f104 060b 	add.w	r6, r4, #11
 800b226:	f000 ff81 	bl	800c12c <__malloc_unlock>
 800b22a:	f026 0607 	bic.w	r6, r6, #7
 800b22e:	1d23      	adds	r3, r4, #4
 800b230:	1af2      	subs	r2, r6, r3
 800b232:	d0b6      	beq.n	800b1a2 <_malloc_r+0x22>
 800b234:	1b9b      	subs	r3, r3, r6
 800b236:	50a3      	str	r3, [r4, r2]
 800b238:	e7b3      	b.n	800b1a2 <_malloc_r+0x22>
 800b23a:	6862      	ldr	r2, [r4, #4]
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	bf0c      	ite	eq
 800b240:	6032      	streq	r2, [r6, #0]
 800b242:	605a      	strne	r2, [r3, #4]
 800b244:	e7ec      	b.n	800b220 <_malloc_r+0xa0>
 800b246:	4623      	mov	r3, r4
 800b248:	6864      	ldr	r4, [r4, #4]
 800b24a:	e7b2      	b.n	800b1b2 <_malloc_r+0x32>
 800b24c:	4634      	mov	r4, r6
 800b24e:	6876      	ldr	r6, [r6, #4]
 800b250:	e7b9      	b.n	800b1c6 <_malloc_r+0x46>
 800b252:	230c      	movs	r3, #12
 800b254:	603b      	str	r3, [r7, #0]
 800b256:	4638      	mov	r0, r7
 800b258:	f000 ff68 	bl	800c12c <__malloc_unlock>
 800b25c:	e7a1      	b.n	800b1a2 <_malloc_r+0x22>
 800b25e:	6025      	str	r5, [r4, #0]
 800b260:	e7de      	b.n	800b220 <_malloc_r+0xa0>
 800b262:	bf00      	nop
 800b264:	20002004 	.word	0x20002004

0800b268 <__ssputs_r>:
 800b268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	688e      	ldr	r6, [r1, #8]
 800b26e:	429e      	cmp	r6, r3
 800b270:	4682      	mov	sl, r0
 800b272:	460c      	mov	r4, r1
 800b274:	4690      	mov	r8, r2
 800b276:	461f      	mov	r7, r3
 800b278:	d838      	bhi.n	800b2ec <__ssputs_r+0x84>
 800b27a:	898a      	ldrh	r2, [r1, #12]
 800b27c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b280:	d032      	beq.n	800b2e8 <__ssputs_r+0x80>
 800b282:	6825      	ldr	r5, [r4, #0]
 800b284:	6909      	ldr	r1, [r1, #16]
 800b286:	eba5 0901 	sub.w	r9, r5, r1
 800b28a:	6965      	ldr	r5, [r4, #20]
 800b28c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b294:	3301      	adds	r3, #1
 800b296:	444b      	add	r3, r9
 800b298:	106d      	asrs	r5, r5, #1
 800b29a:	429d      	cmp	r5, r3
 800b29c:	bf38      	it	cc
 800b29e:	461d      	movcc	r5, r3
 800b2a0:	0553      	lsls	r3, r2, #21
 800b2a2:	d531      	bpl.n	800b308 <__ssputs_r+0xa0>
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	f7ff ff6b 	bl	800b180 <_malloc_r>
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	b950      	cbnz	r0, 800b2c4 <__ssputs_r+0x5c>
 800b2ae:	230c      	movs	r3, #12
 800b2b0:	f8ca 3000 	str.w	r3, [sl]
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c4:	6921      	ldr	r1, [r4, #16]
 800b2c6:	464a      	mov	r2, r9
 800b2c8:	f7ff fd66 	bl	800ad98 <memcpy>
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d6:	81a3      	strh	r3, [r4, #12]
 800b2d8:	6126      	str	r6, [r4, #16]
 800b2da:	6165      	str	r5, [r4, #20]
 800b2dc:	444e      	add	r6, r9
 800b2de:	eba5 0509 	sub.w	r5, r5, r9
 800b2e2:	6026      	str	r6, [r4, #0]
 800b2e4:	60a5      	str	r5, [r4, #8]
 800b2e6:	463e      	mov	r6, r7
 800b2e8:	42be      	cmp	r6, r7
 800b2ea:	d900      	bls.n	800b2ee <__ssputs_r+0x86>
 800b2ec:	463e      	mov	r6, r7
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	4632      	mov	r2, r6
 800b2f2:	4641      	mov	r1, r8
 800b2f4:	f000 fefa 	bl	800c0ec <memmove>
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	1b9b      	subs	r3, r3, r6
 800b2fc:	60a3      	str	r3, [r4, #8]
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	4433      	add	r3, r6
 800b302:	6023      	str	r3, [r4, #0]
 800b304:	2000      	movs	r0, #0
 800b306:	e7db      	b.n	800b2c0 <__ssputs_r+0x58>
 800b308:	462a      	mov	r2, r5
 800b30a:	f000 ff15 	bl	800c138 <_realloc_r>
 800b30e:	4606      	mov	r6, r0
 800b310:	2800      	cmp	r0, #0
 800b312:	d1e1      	bne.n	800b2d8 <__ssputs_r+0x70>
 800b314:	6921      	ldr	r1, [r4, #16]
 800b316:	4650      	mov	r0, sl
 800b318:	f7ff fec6 	bl	800b0a8 <_free_r>
 800b31c:	e7c7      	b.n	800b2ae <__ssputs_r+0x46>
	...

0800b320 <_svfiprintf_r>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	4698      	mov	r8, r3
 800b326:	898b      	ldrh	r3, [r1, #12]
 800b328:	061b      	lsls	r3, r3, #24
 800b32a:	b09d      	sub	sp, #116	; 0x74
 800b32c:	4607      	mov	r7, r0
 800b32e:	460d      	mov	r5, r1
 800b330:	4614      	mov	r4, r2
 800b332:	d50e      	bpl.n	800b352 <_svfiprintf_r+0x32>
 800b334:	690b      	ldr	r3, [r1, #16]
 800b336:	b963      	cbnz	r3, 800b352 <_svfiprintf_r+0x32>
 800b338:	2140      	movs	r1, #64	; 0x40
 800b33a:	f7ff ff21 	bl	800b180 <_malloc_r>
 800b33e:	6028      	str	r0, [r5, #0]
 800b340:	6128      	str	r0, [r5, #16]
 800b342:	b920      	cbnz	r0, 800b34e <_svfiprintf_r+0x2e>
 800b344:	230c      	movs	r3, #12
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b34c:	e0d1      	b.n	800b4f2 <_svfiprintf_r+0x1d2>
 800b34e:	2340      	movs	r3, #64	; 0x40
 800b350:	616b      	str	r3, [r5, #20]
 800b352:	2300      	movs	r3, #0
 800b354:	9309      	str	r3, [sp, #36]	; 0x24
 800b356:	2320      	movs	r3, #32
 800b358:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b35c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b360:	2330      	movs	r3, #48	; 0x30
 800b362:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b50c <_svfiprintf_r+0x1ec>
 800b366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b36a:	f04f 0901 	mov.w	r9, #1
 800b36e:	4623      	mov	r3, r4
 800b370:	469a      	mov	sl, r3
 800b372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b376:	b10a      	cbz	r2, 800b37c <_svfiprintf_r+0x5c>
 800b378:	2a25      	cmp	r2, #37	; 0x25
 800b37a:	d1f9      	bne.n	800b370 <_svfiprintf_r+0x50>
 800b37c:	ebba 0b04 	subs.w	fp, sl, r4
 800b380:	d00b      	beq.n	800b39a <_svfiprintf_r+0x7a>
 800b382:	465b      	mov	r3, fp
 800b384:	4622      	mov	r2, r4
 800b386:	4629      	mov	r1, r5
 800b388:	4638      	mov	r0, r7
 800b38a:	f7ff ff6d 	bl	800b268 <__ssputs_r>
 800b38e:	3001      	adds	r0, #1
 800b390:	f000 80aa 	beq.w	800b4e8 <_svfiprintf_r+0x1c8>
 800b394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b396:	445a      	add	r2, fp
 800b398:	9209      	str	r2, [sp, #36]	; 0x24
 800b39a:	f89a 3000 	ldrb.w	r3, [sl]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 80a2 	beq.w	800b4e8 <_svfiprintf_r+0x1c8>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ae:	f10a 0a01 	add.w	sl, sl, #1
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	9307      	str	r3, [sp, #28]
 800b3b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b3bc:	4654      	mov	r4, sl
 800b3be:	2205      	movs	r2, #5
 800b3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c4:	4851      	ldr	r0, [pc, #324]	; (800b50c <_svfiprintf_r+0x1ec>)
 800b3c6:	f7f4 ff0b 	bl	80001e0 <memchr>
 800b3ca:	9a04      	ldr	r2, [sp, #16]
 800b3cc:	b9d8      	cbnz	r0, 800b406 <_svfiprintf_r+0xe6>
 800b3ce:	06d0      	lsls	r0, r2, #27
 800b3d0:	bf44      	itt	mi
 800b3d2:	2320      	movmi	r3, #32
 800b3d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3d8:	0711      	lsls	r1, r2, #28
 800b3da:	bf44      	itt	mi
 800b3dc:	232b      	movmi	r3, #43	; 0x2b
 800b3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b3e8:	d015      	beq.n	800b416 <_svfiprintf_r+0xf6>
 800b3ea:	9a07      	ldr	r2, [sp, #28]
 800b3ec:	4654      	mov	r4, sl
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	f04f 0c0a 	mov.w	ip, #10
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3fa:	3b30      	subs	r3, #48	; 0x30
 800b3fc:	2b09      	cmp	r3, #9
 800b3fe:	d94e      	bls.n	800b49e <_svfiprintf_r+0x17e>
 800b400:	b1b0      	cbz	r0, 800b430 <_svfiprintf_r+0x110>
 800b402:	9207      	str	r2, [sp, #28]
 800b404:	e014      	b.n	800b430 <_svfiprintf_r+0x110>
 800b406:	eba0 0308 	sub.w	r3, r0, r8
 800b40a:	fa09 f303 	lsl.w	r3, r9, r3
 800b40e:	4313      	orrs	r3, r2
 800b410:	9304      	str	r3, [sp, #16]
 800b412:	46a2      	mov	sl, r4
 800b414:	e7d2      	b.n	800b3bc <_svfiprintf_r+0x9c>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	1d19      	adds	r1, r3, #4
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	9103      	str	r1, [sp, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	bfbb      	ittet	lt
 800b422:	425b      	neglt	r3, r3
 800b424:	f042 0202 	orrlt.w	r2, r2, #2
 800b428:	9307      	strge	r3, [sp, #28]
 800b42a:	9307      	strlt	r3, [sp, #28]
 800b42c:	bfb8      	it	lt
 800b42e:	9204      	strlt	r2, [sp, #16]
 800b430:	7823      	ldrb	r3, [r4, #0]
 800b432:	2b2e      	cmp	r3, #46	; 0x2e
 800b434:	d10c      	bne.n	800b450 <_svfiprintf_r+0x130>
 800b436:	7863      	ldrb	r3, [r4, #1]
 800b438:	2b2a      	cmp	r3, #42	; 0x2a
 800b43a:	d135      	bne.n	800b4a8 <_svfiprintf_r+0x188>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	1d1a      	adds	r2, r3, #4
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	9203      	str	r2, [sp, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	bfb8      	it	lt
 800b448:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b44c:	3402      	adds	r4, #2
 800b44e:	9305      	str	r3, [sp, #20]
 800b450:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b51c <_svfiprintf_r+0x1fc>
 800b454:	7821      	ldrb	r1, [r4, #0]
 800b456:	2203      	movs	r2, #3
 800b458:	4650      	mov	r0, sl
 800b45a:	f7f4 fec1 	bl	80001e0 <memchr>
 800b45e:	b140      	cbz	r0, 800b472 <_svfiprintf_r+0x152>
 800b460:	2340      	movs	r3, #64	; 0x40
 800b462:	eba0 000a 	sub.w	r0, r0, sl
 800b466:	fa03 f000 	lsl.w	r0, r3, r0
 800b46a:	9b04      	ldr	r3, [sp, #16]
 800b46c:	4303      	orrs	r3, r0
 800b46e:	3401      	adds	r4, #1
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b476:	4826      	ldr	r0, [pc, #152]	; (800b510 <_svfiprintf_r+0x1f0>)
 800b478:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b47c:	2206      	movs	r2, #6
 800b47e:	f7f4 feaf 	bl	80001e0 <memchr>
 800b482:	2800      	cmp	r0, #0
 800b484:	d038      	beq.n	800b4f8 <_svfiprintf_r+0x1d8>
 800b486:	4b23      	ldr	r3, [pc, #140]	; (800b514 <_svfiprintf_r+0x1f4>)
 800b488:	bb1b      	cbnz	r3, 800b4d2 <_svfiprintf_r+0x1b2>
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	3307      	adds	r3, #7
 800b48e:	f023 0307 	bic.w	r3, r3, #7
 800b492:	3308      	adds	r3, #8
 800b494:	9303      	str	r3, [sp, #12]
 800b496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b498:	4433      	add	r3, r6
 800b49a:	9309      	str	r3, [sp, #36]	; 0x24
 800b49c:	e767      	b.n	800b36e <_svfiprintf_r+0x4e>
 800b49e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	2001      	movs	r0, #1
 800b4a6:	e7a5      	b.n	800b3f4 <_svfiprintf_r+0xd4>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	3401      	adds	r4, #1
 800b4ac:	9305      	str	r3, [sp, #20]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	f04f 0c0a 	mov.w	ip, #10
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4ba:	3a30      	subs	r2, #48	; 0x30
 800b4bc:	2a09      	cmp	r2, #9
 800b4be:	d903      	bls.n	800b4c8 <_svfiprintf_r+0x1a8>
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0c5      	beq.n	800b450 <_svfiprintf_r+0x130>
 800b4c4:	9105      	str	r1, [sp, #20]
 800b4c6:	e7c3      	b.n	800b450 <_svfiprintf_r+0x130>
 800b4c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e7f0      	b.n	800b4b4 <_svfiprintf_r+0x194>
 800b4d2:	ab03      	add	r3, sp, #12
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	462a      	mov	r2, r5
 800b4d8:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <_svfiprintf_r+0x1f8>)
 800b4da:	a904      	add	r1, sp, #16
 800b4dc:	4638      	mov	r0, r7
 800b4de:	f3af 8000 	nop.w
 800b4e2:	1c42      	adds	r2, r0, #1
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	d1d6      	bne.n	800b496 <_svfiprintf_r+0x176>
 800b4e8:	89ab      	ldrh	r3, [r5, #12]
 800b4ea:	065b      	lsls	r3, r3, #25
 800b4ec:	f53f af2c 	bmi.w	800b348 <_svfiprintf_r+0x28>
 800b4f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4f2:	b01d      	add	sp, #116	; 0x74
 800b4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f8:	ab03      	add	r3, sp, #12
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	462a      	mov	r2, r5
 800b4fe:	4b06      	ldr	r3, [pc, #24]	; (800b518 <_svfiprintf_r+0x1f8>)
 800b500:	a904      	add	r1, sp, #16
 800b502:	4638      	mov	r0, r7
 800b504:	f000 f9d4 	bl	800b8b0 <_printf_i>
 800b508:	e7eb      	b.n	800b4e2 <_svfiprintf_r+0x1c2>
 800b50a:	bf00      	nop
 800b50c:	0800c6fd 	.word	0x0800c6fd
 800b510:	0800c707 	.word	0x0800c707
 800b514:	00000000 	.word	0x00000000
 800b518:	0800b269 	.word	0x0800b269
 800b51c:	0800c703 	.word	0x0800c703

0800b520 <__sfputc_r>:
 800b520:	6893      	ldr	r3, [r2, #8]
 800b522:	3b01      	subs	r3, #1
 800b524:	2b00      	cmp	r3, #0
 800b526:	b410      	push	{r4}
 800b528:	6093      	str	r3, [r2, #8]
 800b52a:	da08      	bge.n	800b53e <__sfputc_r+0x1e>
 800b52c:	6994      	ldr	r4, [r2, #24]
 800b52e:	42a3      	cmp	r3, r4
 800b530:	db01      	blt.n	800b536 <__sfputc_r+0x16>
 800b532:	290a      	cmp	r1, #10
 800b534:	d103      	bne.n	800b53e <__sfputc_r+0x1e>
 800b536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b53a:	f000 baef 	b.w	800bb1c <__swbuf_r>
 800b53e:	6813      	ldr	r3, [r2, #0]
 800b540:	1c58      	adds	r0, r3, #1
 800b542:	6010      	str	r0, [r2, #0]
 800b544:	7019      	strb	r1, [r3, #0]
 800b546:	4608      	mov	r0, r1
 800b548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <__sfputs_r>:
 800b54e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b550:	4606      	mov	r6, r0
 800b552:	460f      	mov	r7, r1
 800b554:	4614      	mov	r4, r2
 800b556:	18d5      	adds	r5, r2, r3
 800b558:	42ac      	cmp	r4, r5
 800b55a:	d101      	bne.n	800b560 <__sfputs_r+0x12>
 800b55c:	2000      	movs	r0, #0
 800b55e:	e007      	b.n	800b570 <__sfputs_r+0x22>
 800b560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b564:	463a      	mov	r2, r7
 800b566:	4630      	mov	r0, r6
 800b568:	f7ff ffda 	bl	800b520 <__sfputc_r>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d1f3      	bne.n	800b558 <__sfputs_r+0xa>
 800b570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b574 <_vfiprintf_r>:
 800b574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b578:	460d      	mov	r5, r1
 800b57a:	b09d      	sub	sp, #116	; 0x74
 800b57c:	4614      	mov	r4, r2
 800b57e:	4698      	mov	r8, r3
 800b580:	4606      	mov	r6, r0
 800b582:	b118      	cbz	r0, 800b58c <_vfiprintf_r+0x18>
 800b584:	6983      	ldr	r3, [r0, #24]
 800b586:	b90b      	cbnz	r3, 800b58c <_vfiprintf_r+0x18>
 800b588:	f000 fcaa 	bl	800bee0 <__sinit>
 800b58c:	4b89      	ldr	r3, [pc, #548]	; (800b7b4 <_vfiprintf_r+0x240>)
 800b58e:	429d      	cmp	r5, r3
 800b590:	d11b      	bne.n	800b5ca <_vfiprintf_r+0x56>
 800b592:	6875      	ldr	r5, [r6, #4]
 800b594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b596:	07d9      	lsls	r1, r3, #31
 800b598:	d405      	bmi.n	800b5a6 <_vfiprintf_r+0x32>
 800b59a:	89ab      	ldrh	r3, [r5, #12]
 800b59c:	059a      	lsls	r2, r3, #22
 800b59e:	d402      	bmi.n	800b5a6 <_vfiprintf_r+0x32>
 800b5a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5a2:	f000 fd3b 	bl	800c01c <__retarget_lock_acquire_recursive>
 800b5a6:	89ab      	ldrh	r3, [r5, #12]
 800b5a8:	071b      	lsls	r3, r3, #28
 800b5aa:	d501      	bpl.n	800b5b0 <_vfiprintf_r+0x3c>
 800b5ac:	692b      	ldr	r3, [r5, #16]
 800b5ae:	b9eb      	cbnz	r3, 800b5ec <_vfiprintf_r+0x78>
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f000 fb04 	bl	800bbc0 <__swsetup_r>
 800b5b8:	b1c0      	cbz	r0, 800b5ec <_vfiprintf_r+0x78>
 800b5ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5bc:	07dc      	lsls	r4, r3, #31
 800b5be:	d50e      	bpl.n	800b5de <_vfiprintf_r+0x6a>
 800b5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5c4:	b01d      	add	sp, #116	; 0x74
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ca:	4b7b      	ldr	r3, [pc, #492]	; (800b7b8 <_vfiprintf_r+0x244>)
 800b5cc:	429d      	cmp	r5, r3
 800b5ce:	d101      	bne.n	800b5d4 <_vfiprintf_r+0x60>
 800b5d0:	68b5      	ldr	r5, [r6, #8]
 800b5d2:	e7df      	b.n	800b594 <_vfiprintf_r+0x20>
 800b5d4:	4b79      	ldr	r3, [pc, #484]	; (800b7bc <_vfiprintf_r+0x248>)
 800b5d6:	429d      	cmp	r5, r3
 800b5d8:	bf08      	it	eq
 800b5da:	68f5      	ldreq	r5, [r6, #12]
 800b5dc:	e7da      	b.n	800b594 <_vfiprintf_r+0x20>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	0598      	lsls	r0, r3, #22
 800b5e2:	d4ed      	bmi.n	800b5c0 <_vfiprintf_r+0x4c>
 800b5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e6:	f000 fd1a 	bl	800c01e <__retarget_lock_release_recursive>
 800b5ea:	e7e9      	b.n	800b5c0 <_vfiprintf_r+0x4c>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f0:	2320      	movs	r3, #32
 800b5f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5fa:	2330      	movs	r3, #48	; 0x30
 800b5fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7c0 <_vfiprintf_r+0x24c>
 800b600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b604:	f04f 0901 	mov.w	r9, #1
 800b608:	4623      	mov	r3, r4
 800b60a:	469a      	mov	sl, r3
 800b60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b610:	b10a      	cbz	r2, 800b616 <_vfiprintf_r+0xa2>
 800b612:	2a25      	cmp	r2, #37	; 0x25
 800b614:	d1f9      	bne.n	800b60a <_vfiprintf_r+0x96>
 800b616:	ebba 0b04 	subs.w	fp, sl, r4
 800b61a:	d00b      	beq.n	800b634 <_vfiprintf_r+0xc0>
 800b61c:	465b      	mov	r3, fp
 800b61e:	4622      	mov	r2, r4
 800b620:	4629      	mov	r1, r5
 800b622:	4630      	mov	r0, r6
 800b624:	f7ff ff93 	bl	800b54e <__sfputs_r>
 800b628:	3001      	adds	r0, #1
 800b62a:	f000 80aa 	beq.w	800b782 <_vfiprintf_r+0x20e>
 800b62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b630:	445a      	add	r2, fp
 800b632:	9209      	str	r2, [sp, #36]	; 0x24
 800b634:	f89a 3000 	ldrb.w	r3, [sl]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 80a2 	beq.w	800b782 <_vfiprintf_r+0x20e>
 800b63e:	2300      	movs	r3, #0
 800b640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b648:	f10a 0a01 	add.w	sl, sl, #1
 800b64c:	9304      	str	r3, [sp, #16]
 800b64e:	9307      	str	r3, [sp, #28]
 800b650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b654:	931a      	str	r3, [sp, #104]	; 0x68
 800b656:	4654      	mov	r4, sl
 800b658:	2205      	movs	r2, #5
 800b65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65e:	4858      	ldr	r0, [pc, #352]	; (800b7c0 <_vfiprintf_r+0x24c>)
 800b660:	f7f4 fdbe 	bl	80001e0 <memchr>
 800b664:	9a04      	ldr	r2, [sp, #16]
 800b666:	b9d8      	cbnz	r0, 800b6a0 <_vfiprintf_r+0x12c>
 800b668:	06d1      	lsls	r1, r2, #27
 800b66a:	bf44      	itt	mi
 800b66c:	2320      	movmi	r3, #32
 800b66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b672:	0713      	lsls	r3, r2, #28
 800b674:	bf44      	itt	mi
 800b676:	232b      	movmi	r3, #43	; 0x2b
 800b678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b67c:	f89a 3000 	ldrb.w	r3, [sl]
 800b680:	2b2a      	cmp	r3, #42	; 0x2a
 800b682:	d015      	beq.n	800b6b0 <_vfiprintf_r+0x13c>
 800b684:	9a07      	ldr	r2, [sp, #28]
 800b686:	4654      	mov	r4, sl
 800b688:	2000      	movs	r0, #0
 800b68a:	f04f 0c0a 	mov.w	ip, #10
 800b68e:	4621      	mov	r1, r4
 800b690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b694:	3b30      	subs	r3, #48	; 0x30
 800b696:	2b09      	cmp	r3, #9
 800b698:	d94e      	bls.n	800b738 <_vfiprintf_r+0x1c4>
 800b69a:	b1b0      	cbz	r0, 800b6ca <_vfiprintf_r+0x156>
 800b69c:	9207      	str	r2, [sp, #28]
 800b69e:	e014      	b.n	800b6ca <_vfiprintf_r+0x156>
 800b6a0:	eba0 0308 	sub.w	r3, r0, r8
 800b6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	46a2      	mov	sl, r4
 800b6ae:	e7d2      	b.n	800b656 <_vfiprintf_r+0xe2>
 800b6b0:	9b03      	ldr	r3, [sp, #12]
 800b6b2:	1d19      	adds	r1, r3, #4
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	9103      	str	r1, [sp, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	bfbb      	ittet	lt
 800b6bc:	425b      	neglt	r3, r3
 800b6be:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c2:	9307      	strge	r3, [sp, #28]
 800b6c4:	9307      	strlt	r3, [sp, #28]
 800b6c6:	bfb8      	it	lt
 800b6c8:	9204      	strlt	r2, [sp, #16]
 800b6ca:	7823      	ldrb	r3, [r4, #0]
 800b6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b6ce:	d10c      	bne.n	800b6ea <_vfiprintf_r+0x176>
 800b6d0:	7863      	ldrb	r3, [r4, #1]
 800b6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b6d4:	d135      	bne.n	800b742 <_vfiprintf_r+0x1ce>
 800b6d6:	9b03      	ldr	r3, [sp, #12]
 800b6d8:	1d1a      	adds	r2, r3, #4
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	9203      	str	r2, [sp, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	bfb8      	it	lt
 800b6e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6e6:	3402      	adds	r4, #2
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7d0 <_vfiprintf_r+0x25c>
 800b6ee:	7821      	ldrb	r1, [r4, #0]
 800b6f0:	2203      	movs	r2, #3
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	f7f4 fd74 	bl	80001e0 <memchr>
 800b6f8:	b140      	cbz	r0, 800b70c <_vfiprintf_r+0x198>
 800b6fa:	2340      	movs	r3, #64	; 0x40
 800b6fc:	eba0 000a 	sub.w	r0, r0, sl
 800b700:	fa03 f000 	lsl.w	r0, r3, r0
 800b704:	9b04      	ldr	r3, [sp, #16]
 800b706:	4303      	orrs	r3, r0
 800b708:	3401      	adds	r4, #1
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b710:	482c      	ldr	r0, [pc, #176]	; (800b7c4 <_vfiprintf_r+0x250>)
 800b712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b716:	2206      	movs	r2, #6
 800b718:	f7f4 fd62 	bl	80001e0 <memchr>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d03f      	beq.n	800b7a0 <_vfiprintf_r+0x22c>
 800b720:	4b29      	ldr	r3, [pc, #164]	; (800b7c8 <_vfiprintf_r+0x254>)
 800b722:	bb1b      	cbnz	r3, 800b76c <_vfiprintf_r+0x1f8>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	3307      	adds	r3, #7
 800b728:	f023 0307 	bic.w	r3, r3, #7
 800b72c:	3308      	adds	r3, #8
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b732:	443b      	add	r3, r7
 800b734:	9309      	str	r3, [sp, #36]	; 0x24
 800b736:	e767      	b.n	800b608 <_vfiprintf_r+0x94>
 800b738:	fb0c 3202 	mla	r2, ip, r2, r3
 800b73c:	460c      	mov	r4, r1
 800b73e:	2001      	movs	r0, #1
 800b740:	e7a5      	b.n	800b68e <_vfiprintf_r+0x11a>
 800b742:	2300      	movs	r3, #0
 800b744:	3401      	adds	r4, #1
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	4619      	mov	r1, r3
 800b74a:	f04f 0c0a 	mov.w	ip, #10
 800b74e:	4620      	mov	r0, r4
 800b750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b754:	3a30      	subs	r2, #48	; 0x30
 800b756:	2a09      	cmp	r2, #9
 800b758:	d903      	bls.n	800b762 <_vfiprintf_r+0x1ee>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0c5      	beq.n	800b6ea <_vfiprintf_r+0x176>
 800b75e:	9105      	str	r1, [sp, #20]
 800b760:	e7c3      	b.n	800b6ea <_vfiprintf_r+0x176>
 800b762:	fb0c 2101 	mla	r1, ip, r1, r2
 800b766:	4604      	mov	r4, r0
 800b768:	2301      	movs	r3, #1
 800b76a:	e7f0      	b.n	800b74e <_vfiprintf_r+0x1da>
 800b76c:	ab03      	add	r3, sp, #12
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	462a      	mov	r2, r5
 800b772:	4b16      	ldr	r3, [pc, #88]	; (800b7cc <_vfiprintf_r+0x258>)
 800b774:	a904      	add	r1, sp, #16
 800b776:	4630      	mov	r0, r6
 800b778:	f3af 8000 	nop.w
 800b77c:	4607      	mov	r7, r0
 800b77e:	1c78      	adds	r0, r7, #1
 800b780:	d1d6      	bne.n	800b730 <_vfiprintf_r+0x1bc>
 800b782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b784:	07d9      	lsls	r1, r3, #31
 800b786:	d405      	bmi.n	800b794 <_vfiprintf_r+0x220>
 800b788:	89ab      	ldrh	r3, [r5, #12]
 800b78a:	059a      	lsls	r2, r3, #22
 800b78c:	d402      	bmi.n	800b794 <_vfiprintf_r+0x220>
 800b78e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b790:	f000 fc45 	bl	800c01e <__retarget_lock_release_recursive>
 800b794:	89ab      	ldrh	r3, [r5, #12]
 800b796:	065b      	lsls	r3, r3, #25
 800b798:	f53f af12 	bmi.w	800b5c0 <_vfiprintf_r+0x4c>
 800b79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b79e:	e711      	b.n	800b5c4 <_vfiprintf_r+0x50>
 800b7a0:	ab03      	add	r3, sp, #12
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <_vfiprintf_r+0x258>)
 800b7a8:	a904      	add	r1, sp, #16
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f000 f880 	bl	800b8b0 <_printf_i>
 800b7b0:	e7e4      	b.n	800b77c <_vfiprintf_r+0x208>
 800b7b2:	bf00      	nop
 800b7b4:	0800c750 	.word	0x0800c750
 800b7b8:	0800c770 	.word	0x0800c770
 800b7bc:	0800c730 	.word	0x0800c730
 800b7c0:	0800c6fd 	.word	0x0800c6fd
 800b7c4:	0800c707 	.word	0x0800c707
 800b7c8:	00000000 	.word	0x00000000
 800b7cc:	0800b54f 	.word	0x0800b54f
 800b7d0:	0800c703 	.word	0x0800c703

0800b7d4 <_printf_common>:
 800b7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d8:	4616      	mov	r6, r2
 800b7da:	4699      	mov	r9, r3
 800b7dc:	688a      	ldr	r2, [r1, #8]
 800b7de:	690b      	ldr	r3, [r1, #16]
 800b7e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	bfb8      	it	lt
 800b7e8:	4613      	movlt	r3, r2
 800b7ea:	6033      	str	r3, [r6, #0]
 800b7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	b10a      	cbz	r2, 800b7fa <_printf_common+0x26>
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	6033      	str	r3, [r6, #0]
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	0699      	lsls	r1, r3, #26
 800b7fe:	bf42      	ittt	mi
 800b800:	6833      	ldrmi	r3, [r6, #0]
 800b802:	3302      	addmi	r3, #2
 800b804:	6033      	strmi	r3, [r6, #0]
 800b806:	6825      	ldr	r5, [r4, #0]
 800b808:	f015 0506 	ands.w	r5, r5, #6
 800b80c:	d106      	bne.n	800b81c <_printf_common+0x48>
 800b80e:	f104 0a19 	add.w	sl, r4, #25
 800b812:	68e3      	ldr	r3, [r4, #12]
 800b814:	6832      	ldr	r2, [r6, #0]
 800b816:	1a9b      	subs	r3, r3, r2
 800b818:	42ab      	cmp	r3, r5
 800b81a:	dc26      	bgt.n	800b86a <_printf_common+0x96>
 800b81c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b820:	1e13      	subs	r3, r2, #0
 800b822:	6822      	ldr	r2, [r4, #0]
 800b824:	bf18      	it	ne
 800b826:	2301      	movne	r3, #1
 800b828:	0692      	lsls	r2, r2, #26
 800b82a:	d42b      	bmi.n	800b884 <_printf_common+0xb0>
 800b82c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b830:	4649      	mov	r1, r9
 800b832:	4638      	mov	r0, r7
 800b834:	47c0      	blx	r8
 800b836:	3001      	adds	r0, #1
 800b838:	d01e      	beq.n	800b878 <_printf_common+0xa4>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	68e5      	ldr	r5, [r4, #12]
 800b83e:	6832      	ldr	r2, [r6, #0]
 800b840:	f003 0306 	and.w	r3, r3, #6
 800b844:	2b04      	cmp	r3, #4
 800b846:	bf08      	it	eq
 800b848:	1aad      	subeq	r5, r5, r2
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	6922      	ldr	r2, [r4, #16]
 800b84e:	bf0c      	ite	eq
 800b850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b854:	2500      	movne	r5, #0
 800b856:	4293      	cmp	r3, r2
 800b858:	bfc4      	itt	gt
 800b85a:	1a9b      	subgt	r3, r3, r2
 800b85c:	18ed      	addgt	r5, r5, r3
 800b85e:	2600      	movs	r6, #0
 800b860:	341a      	adds	r4, #26
 800b862:	42b5      	cmp	r5, r6
 800b864:	d11a      	bne.n	800b89c <_printf_common+0xc8>
 800b866:	2000      	movs	r0, #0
 800b868:	e008      	b.n	800b87c <_printf_common+0xa8>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4652      	mov	r2, sl
 800b86e:	4649      	mov	r1, r9
 800b870:	4638      	mov	r0, r7
 800b872:	47c0      	blx	r8
 800b874:	3001      	adds	r0, #1
 800b876:	d103      	bne.n	800b880 <_printf_common+0xac>
 800b878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b880:	3501      	adds	r5, #1
 800b882:	e7c6      	b.n	800b812 <_printf_common+0x3e>
 800b884:	18e1      	adds	r1, r4, r3
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	2030      	movs	r0, #48	; 0x30
 800b88a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b88e:	4422      	add	r2, r4
 800b890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b898:	3302      	adds	r3, #2
 800b89a:	e7c7      	b.n	800b82c <_printf_common+0x58>
 800b89c:	2301      	movs	r3, #1
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4649      	mov	r1, r9
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	47c0      	blx	r8
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	d0e6      	beq.n	800b878 <_printf_common+0xa4>
 800b8aa:	3601      	adds	r6, #1
 800b8ac:	e7d9      	b.n	800b862 <_printf_common+0x8e>
	...

0800b8b0 <_printf_i>:
 800b8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	7e0f      	ldrb	r7, [r1, #24]
 800b8b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8b8:	2f78      	cmp	r7, #120	; 0x78
 800b8ba:	4691      	mov	r9, r2
 800b8bc:	4680      	mov	r8, r0
 800b8be:	460c      	mov	r4, r1
 800b8c0:	469a      	mov	sl, r3
 800b8c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b8c6:	d807      	bhi.n	800b8d8 <_printf_i+0x28>
 800b8c8:	2f62      	cmp	r7, #98	; 0x62
 800b8ca:	d80a      	bhi.n	800b8e2 <_printf_i+0x32>
 800b8cc:	2f00      	cmp	r7, #0
 800b8ce:	f000 80d8 	beq.w	800ba82 <_printf_i+0x1d2>
 800b8d2:	2f58      	cmp	r7, #88	; 0x58
 800b8d4:	f000 80a3 	beq.w	800ba1e <_printf_i+0x16e>
 800b8d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8e0:	e03a      	b.n	800b958 <_printf_i+0xa8>
 800b8e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8e6:	2b15      	cmp	r3, #21
 800b8e8:	d8f6      	bhi.n	800b8d8 <_printf_i+0x28>
 800b8ea:	a101      	add	r1, pc, #4	; (adr r1, 800b8f0 <_printf_i+0x40>)
 800b8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8f0:	0800b949 	.word	0x0800b949
 800b8f4:	0800b95d 	.word	0x0800b95d
 800b8f8:	0800b8d9 	.word	0x0800b8d9
 800b8fc:	0800b8d9 	.word	0x0800b8d9
 800b900:	0800b8d9 	.word	0x0800b8d9
 800b904:	0800b8d9 	.word	0x0800b8d9
 800b908:	0800b95d 	.word	0x0800b95d
 800b90c:	0800b8d9 	.word	0x0800b8d9
 800b910:	0800b8d9 	.word	0x0800b8d9
 800b914:	0800b8d9 	.word	0x0800b8d9
 800b918:	0800b8d9 	.word	0x0800b8d9
 800b91c:	0800ba69 	.word	0x0800ba69
 800b920:	0800b98d 	.word	0x0800b98d
 800b924:	0800ba4b 	.word	0x0800ba4b
 800b928:	0800b8d9 	.word	0x0800b8d9
 800b92c:	0800b8d9 	.word	0x0800b8d9
 800b930:	0800ba8b 	.word	0x0800ba8b
 800b934:	0800b8d9 	.word	0x0800b8d9
 800b938:	0800b98d 	.word	0x0800b98d
 800b93c:	0800b8d9 	.word	0x0800b8d9
 800b940:	0800b8d9 	.word	0x0800b8d9
 800b944:	0800ba53 	.word	0x0800ba53
 800b948:	682b      	ldr	r3, [r5, #0]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	602a      	str	r2, [r5, #0]
 800b950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b958:	2301      	movs	r3, #1
 800b95a:	e0a3      	b.n	800baa4 <_printf_i+0x1f4>
 800b95c:	6820      	ldr	r0, [r4, #0]
 800b95e:	6829      	ldr	r1, [r5, #0]
 800b960:	0606      	lsls	r6, r0, #24
 800b962:	f101 0304 	add.w	r3, r1, #4
 800b966:	d50a      	bpl.n	800b97e <_printf_i+0xce>
 800b968:	680e      	ldr	r6, [r1, #0]
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	2e00      	cmp	r6, #0
 800b96e:	da03      	bge.n	800b978 <_printf_i+0xc8>
 800b970:	232d      	movs	r3, #45	; 0x2d
 800b972:	4276      	negs	r6, r6
 800b974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b978:	485e      	ldr	r0, [pc, #376]	; (800baf4 <_printf_i+0x244>)
 800b97a:	230a      	movs	r3, #10
 800b97c:	e019      	b.n	800b9b2 <_printf_i+0x102>
 800b97e:	680e      	ldr	r6, [r1, #0]
 800b980:	602b      	str	r3, [r5, #0]
 800b982:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b986:	bf18      	it	ne
 800b988:	b236      	sxthne	r6, r6
 800b98a:	e7ef      	b.n	800b96c <_printf_i+0xbc>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	6820      	ldr	r0, [r4, #0]
 800b990:	1d19      	adds	r1, r3, #4
 800b992:	6029      	str	r1, [r5, #0]
 800b994:	0601      	lsls	r1, r0, #24
 800b996:	d501      	bpl.n	800b99c <_printf_i+0xec>
 800b998:	681e      	ldr	r6, [r3, #0]
 800b99a:	e002      	b.n	800b9a2 <_printf_i+0xf2>
 800b99c:	0646      	lsls	r6, r0, #25
 800b99e:	d5fb      	bpl.n	800b998 <_printf_i+0xe8>
 800b9a0:	881e      	ldrh	r6, [r3, #0]
 800b9a2:	4854      	ldr	r0, [pc, #336]	; (800baf4 <_printf_i+0x244>)
 800b9a4:	2f6f      	cmp	r7, #111	; 0x6f
 800b9a6:	bf0c      	ite	eq
 800b9a8:	2308      	moveq	r3, #8
 800b9aa:	230a      	movne	r3, #10
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9b2:	6865      	ldr	r5, [r4, #4]
 800b9b4:	60a5      	str	r5, [r4, #8]
 800b9b6:	2d00      	cmp	r5, #0
 800b9b8:	bfa2      	ittt	ge
 800b9ba:	6821      	ldrge	r1, [r4, #0]
 800b9bc:	f021 0104 	bicge.w	r1, r1, #4
 800b9c0:	6021      	strge	r1, [r4, #0]
 800b9c2:	b90e      	cbnz	r6, 800b9c8 <_printf_i+0x118>
 800b9c4:	2d00      	cmp	r5, #0
 800b9c6:	d04d      	beq.n	800ba64 <_printf_i+0x1b4>
 800b9c8:	4615      	mov	r5, r2
 800b9ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800b9ce:	fb03 6711 	mls	r7, r3, r1, r6
 800b9d2:	5dc7      	ldrb	r7, [r0, r7]
 800b9d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9d8:	4637      	mov	r7, r6
 800b9da:	42bb      	cmp	r3, r7
 800b9dc:	460e      	mov	r6, r1
 800b9de:	d9f4      	bls.n	800b9ca <_printf_i+0x11a>
 800b9e0:	2b08      	cmp	r3, #8
 800b9e2:	d10b      	bne.n	800b9fc <_printf_i+0x14c>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	07de      	lsls	r6, r3, #31
 800b9e8:	d508      	bpl.n	800b9fc <_printf_i+0x14c>
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	6861      	ldr	r1, [r4, #4]
 800b9ee:	4299      	cmp	r1, r3
 800b9f0:	bfde      	ittt	le
 800b9f2:	2330      	movle	r3, #48	; 0x30
 800b9f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b9fc:	1b52      	subs	r2, r2, r5
 800b9fe:	6122      	str	r2, [r4, #16]
 800ba00:	f8cd a000 	str.w	sl, [sp]
 800ba04:	464b      	mov	r3, r9
 800ba06:	aa03      	add	r2, sp, #12
 800ba08:	4621      	mov	r1, r4
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	f7ff fee2 	bl	800b7d4 <_printf_common>
 800ba10:	3001      	adds	r0, #1
 800ba12:	d14c      	bne.n	800baae <_printf_i+0x1fe>
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba18:	b004      	add	sp, #16
 800ba1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1e:	4835      	ldr	r0, [pc, #212]	; (800baf4 <_printf_i+0x244>)
 800ba20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba24:	6829      	ldr	r1, [r5, #0]
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba2c:	6029      	str	r1, [r5, #0]
 800ba2e:	061d      	lsls	r5, r3, #24
 800ba30:	d514      	bpl.n	800ba5c <_printf_i+0x1ac>
 800ba32:	07df      	lsls	r7, r3, #31
 800ba34:	bf44      	itt	mi
 800ba36:	f043 0320 	orrmi.w	r3, r3, #32
 800ba3a:	6023      	strmi	r3, [r4, #0]
 800ba3c:	b91e      	cbnz	r6, 800ba46 <_printf_i+0x196>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	f023 0320 	bic.w	r3, r3, #32
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	2310      	movs	r3, #16
 800ba48:	e7b0      	b.n	800b9ac <_printf_i+0xfc>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	f043 0320 	orr.w	r3, r3, #32
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	2378      	movs	r3, #120	; 0x78
 800ba54:	4828      	ldr	r0, [pc, #160]	; (800baf8 <_printf_i+0x248>)
 800ba56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba5a:	e7e3      	b.n	800ba24 <_printf_i+0x174>
 800ba5c:	0659      	lsls	r1, r3, #25
 800ba5e:	bf48      	it	mi
 800ba60:	b2b6      	uxthmi	r6, r6
 800ba62:	e7e6      	b.n	800ba32 <_printf_i+0x182>
 800ba64:	4615      	mov	r5, r2
 800ba66:	e7bb      	b.n	800b9e0 <_printf_i+0x130>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	6826      	ldr	r6, [r4, #0]
 800ba6c:	6961      	ldr	r1, [r4, #20]
 800ba6e:	1d18      	adds	r0, r3, #4
 800ba70:	6028      	str	r0, [r5, #0]
 800ba72:	0635      	lsls	r5, r6, #24
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	d501      	bpl.n	800ba7c <_printf_i+0x1cc>
 800ba78:	6019      	str	r1, [r3, #0]
 800ba7a:	e002      	b.n	800ba82 <_printf_i+0x1d2>
 800ba7c:	0670      	lsls	r0, r6, #25
 800ba7e:	d5fb      	bpl.n	800ba78 <_printf_i+0x1c8>
 800ba80:	8019      	strh	r1, [r3, #0]
 800ba82:	2300      	movs	r3, #0
 800ba84:	6123      	str	r3, [r4, #16]
 800ba86:	4615      	mov	r5, r2
 800ba88:	e7ba      	b.n	800ba00 <_printf_i+0x150>
 800ba8a:	682b      	ldr	r3, [r5, #0]
 800ba8c:	1d1a      	adds	r2, r3, #4
 800ba8e:	602a      	str	r2, [r5, #0]
 800ba90:	681d      	ldr	r5, [r3, #0]
 800ba92:	6862      	ldr	r2, [r4, #4]
 800ba94:	2100      	movs	r1, #0
 800ba96:	4628      	mov	r0, r5
 800ba98:	f7f4 fba2 	bl	80001e0 <memchr>
 800ba9c:	b108      	cbz	r0, 800baa2 <_printf_i+0x1f2>
 800ba9e:	1b40      	subs	r0, r0, r5
 800baa0:	6060      	str	r0, [r4, #4]
 800baa2:	6863      	ldr	r3, [r4, #4]
 800baa4:	6123      	str	r3, [r4, #16]
 800baa6:	2300      	movs	r3, #0
 800baa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baac:	e7a8      	b.n	800ba00 <_printf_i+0x150>
 800baae:	6923      	ldr	r3, [r4, #16]
 800bab0:	462a      	mov	r2, r5
 800bab2:	4649      	mov	r1, r9
 800bab4:	4640      	mov	r0, r8
 800bab6:	47d0      	blx	sl
 800bab8:	3001      	adds	r0, #1
 800baba:	d0ab      	beq.n	800ba14 <_printf_i+0x164>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	079b      	lsls	r3, r3, #30
 800bac0:	d413      	bmi.n	800baea <_printf_i+0x23a>
 800bac2:	68e0      	ldr	r0, [r4, #12]
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	4298      	cmp	r0, r3
 800bac8:	bfb8      	it	lt
 800baca:	4618      	movlt	r0, r3
 800bacc:	e7a4      	b.n	800ba18 <_printf_i+0x168>
 800bace:	2301      	movs	r3, #1
 800bad0:	4632      	mov	r2, r6
 800bad2:	4649      	mov	r1, r9
 800bad4:	4640      	mov	r0, r8
 800bad6:	47d0      	blx	sl
 800bad8:	3001      	adds	r0, #1
 800bada:	d09b      	beq.n	800ba14 <_printf_i+0x164>
 800badc:	3501      	adds	r5, #1
 800bade:	68e3      	ldr	r3, [r4, #12]
 800bae0:	9903      	ldr	r1, [sp, #12]
 800bae2:	1a5b      	subs	r3, r3, r1
 800bae4:	42ab      	cmp	r3, r5
 800bae6:	dcf2      	bgt.n	800bace <_printf_i+0x21e>
 800bae8:	e7eb      	b.n	800bac2 <_printf_i+0x212>
 800baea:	2500      	movs	r5, #0
 800baec:	f104 0619 	add.w	r6, r4, #25
 800baf0:	e7f5      	b.n	800bade <_printf_i+0x22e>
 800baf2:	bf00      	nop
 800baf4:	0800c70e 	.word	0x0800c70e
 800baf8:	0800c71f 	.word	0x0800c71f

0800bafc <_sbrk_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4d06      	ldr	r5, [pc, #24]	; (800bb18 <_sbrk_r+0x1c>)
 800bb00:	2300      	movs	r3, #0
 800bb02:	4604      	mov	r4, r0
 800bb04:	4608      	mov	r0, r1
 800bb06:	602b      	str	r3, [r5, #0]
 800bb08:	f7f5 fe90 	bl	800182c <_sbrk>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	d102      	bne.n	800bb16 <_sbrk_r+0x1a>
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	b103      	cbz	r3, 800bb16 <_sbrk_r+0x1a>
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	20002010 	.word	0x20002010

0800bb1c <__swbuf_r>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	460e      	mov	r6, r1
 800bb20:	4614      	mov	r4, r2
 800bb22:	4605      	mov	r5, r0
 800bb24:	b118      	cbz	r0, 800bb2e <__swbuf_r+0x12>
 800bb26:	6983      	ldr	r3, [r0, #24]
 800bb28:	b90b      	cbnz	r3, 800bb2e <__swbuf_r+0x12>
 800bb2a:	f000 f9d9 	bl	800bee0 <__sinit>
 800bb2e:	4b21      	ldr	r3, [pc, #132]	; (800bbb4 <__swbuf_r+0x98>)
 800bb30:	429c      	cmp	r4, r3
 800bb32:	d12b      	bne.n	800bb8c <__swbuf_r+0x70>
 800bb34:	686c      	ldr	r4, [r5, #4]
 800bb36:	69a3      	ldr	r3, [r4, #24]
 800bb38:	60a3      	str	r3, [r4, #8]
 800bb3a:	89a3      	ldrh	r3, [r4, #12]
 800bb3c:	071a      	lsls	r2, r3, #28
 800bb3e:	d52f      	bpl.n	800bba0 <__swbuf_r+0x84>
 800bb40:	6923      	ldr	r3, [r4, #16]
 800bb42:	b36b      	cbz	r3, 800bba0 <__swbuf_r+0x84>
 800bb44:	6923      	ldr	r3, [r4, #16]
 800bb46:	6820      	ldr	r0, [r4, #0]
 800bb48:	1ac0      	subs	r0, r0, r3
 800bb4a:	6963      	ldr	r3, [r4, #20]
 800bb4c:	b2f6      	uxtb	r6, r6
 800bb4e:	4283      	cmp	r3, r0
 800bb50:	4637      	mov	r7, r6
 800bb52:	dc04      	bgt.n	800bb5e <__swbuf_r+0x42>
 800bb54:	4621      	mov	r1, r4
 800bb56:	4628      	mov	r0, r5
 800bb58:	f000 f92e 	bl	800bdb8 <_fflush_r>
 800bb5c:	bb30      	cbnz	r0, 800bbac <__swbuf_r+0x90>
 800bb5e:	68a3      	ldr	r3, [r4, #8]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	60a3      	str	r3, [r4, #8]
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	6022      	str	r2, [r4, #0]
 800bb6a:	701e      	strb	r6, [r3, #0]
 800bb6c:	6963      	ldr	r3, [r4, #20]
 800bb6e:	3001      	adds	r0, #1
 800bb70:	4283      	cmp	r3, r0
 800bb72:	d004      	beq.n	800bb7e <__swbuf_r+0x62>
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	07db      	lsls	r3, r3, #31
 800bb78:	d506      	bpl.n	800bb88 <__swbuf_r+0x6c>
 800bb7a:	2e0a      	cmp	r6, #10
 800bb7c:	d104      	bne.n	800bb88 <__swbuf_r+0x6c>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4628      	mov	r0, r5
 800bb82:	f000 f919 	bl	800bdb8 <_fflush_r>
 800bb86:	b988      	cbnz	r0, 800bbac <__swbuf_r+0x90>
 800bb88:	4638      	mov	r0, r7
 800bb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <__swbuf_r+0x9c>)
 800bb8e:	429c      	cmp	r4, r3
 800bb90:	d101      	bne.n	800bb96 <__swbuf_r+0x7a>
 800bb92:	68ac      	ldr	r4, [r5, #8]
 800bb94:	e7cf      	b.n	800bb36 <__swbuf_r+0x1a>
 800bb96:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <__swbuf_r+0xa0>)
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	bf08      	it	eq
 800bb9c:	68ec      	ldreq	r4, [r5, #12]
 800bb9e:	e7ca      	b.n	800bb36 <__swbuf_r+0x1a>
 800bba0:	4621      	mov	r1, r4
 800bba2:	4628      	mov	r0, r5
 800bba4:	f000 f80c 	bl	800bbc0 <__swsetup_r>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d0cb      	beq.n	800bb44 <__swbuf_r+0x28>
 800bbac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbb0:	e7ea      	b.n	800bb88 <__swbuf_r+0x6c>
 800bbb2:	bf00      	nop
 800bbb4:	0800c750 	.word	0x0800c750
 800bbb8:	0800c770 	.word	0x0800c770
 800bbbc:	0800c730 	.word	0x0800c730

0800bbc0 <__swsetup_r>:
 800bbc0:	4b32      	ldr	r3, [pc, #200]	; (800bc8c <__swsetup_r+0xcc>)
 800bbc2:	b570      	push	{r4, r5, r6, lr}
 800bbc4:	681d      	ldr	r5, [r3, #0]
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	460c      	mov	r4, r1
 800bbca:	b125      	cbz	r5, 800bbd6 <__swsetup_r+0x16>
 800bbcc:	69ab      	ldr	r3, [r5, #24]
 800bbce:	b913      	cbnz	r3, 800bbd6 <__swsetup_r+0x16>
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	f000 f985 	bl	800bee0 <__sinit>
 800bbd6:	4b2e      	ldr	r3, [pc, #184]	; (800bc90 <__swsetup_r+0xd0>)
 800bbd8:	429c      	cmp	r4, r3
 800bbda:	d10f      	bne.n	800bbfc <__swsetup_r+0x3c>
 800bbdc:	686c      	ldr	r4, [r5, #4]
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbe4:	0719      	lsls	r1, r3, #28
 800bbe6:	d42c      	bmi.n	800bc42 <__swsetup_r+0x82>
 800bbe8:	06dd      	lsls	r5, r3, #27
 800bbea:	d411      	bmi.n	800bc10 <__swsetup_r+0x50>
 800bbec:	2309      	movs	r3, #9
 800bbee:	6033      	str	r3, [r6, #0]
 800bbf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbfa:	e03e      	b.n	800bc7a <__swsetup_r+0xba>
 800bbfc:	4b25      	ldr	r3, [pc, #148]	; (800bc94 <__swsetup_r+0xd4>)
 800bbfe:	429c      	cmp	r4, r3
 800bc00:	d101      	bne.n	800bc06 <__swsetup_r+0x46>
 800bc02:	68ac      	ldr	r4, [r5, #8]
 800bc04:	e7eb      	b.n	800bbde <__swsetup_r+0x1e>
 800bc06:	4b24      	ldr	r3, [pc, #144]	; (800bc98 <__swsetup_r+0xd8>)
 800bc08:	429c      	cmp	r4, r3
 800bc0a:	bf08      	it	eq
 800bc0c:	68ec      	ldreq	r4, [r5, #12]
 800bc0e:	e7e6      	b.n	800bbde <__swsetup_r+0x1e>
 800bc10:	0758      	lsls	r0, r3, #29
 800bc12:	d512      	bpl.n	800bc3a <__swsetup_r+0x7a>
 800bc14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc16:	b141      	cbz	r1, 800bc2a <__swsetup_r+0x6a>
 800bc18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc1c:	4299      	cmp	r1, r3
 800bc1e:	d002      	beq.n	800bc26 <__swsetup_r+0x66>
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7ff fa41 	bl	800b0a8 <_free_r>
 800bc26:	2300      	movs	r3, #0
 800bc28:	6363      	str	r3, [r4, #52]	; 0x34
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc30:	81a3      	strh	r3, [r4, #12]
 800bc32:	2300      	movs	r3, #0
 800bc34:	6063      	str	r3, [r4, #4]
 800bc36:	6923      	ldr	r3, [r4, #16]
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f043 0308 	orr.w	r3, r3, #8
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	6923      	ldr	r3, [r4, #16]
 800bc44:	b94b      	cbnz	r3, 800bc5a <__swsetup_r+0x9a>
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc50:	d003      	beq.n	800bc5a <__swsetup_r+0x9a>
 800bc52:	4621      	mov	r1, r4
 800bc54:	4630      	mov	r0, r6
 800bc56:	f000 fa09 	bl	800c06c <__smakebuf_r>
 800bc5a:	89a0      	ldrh	r0, [r4, #12]
 800bc5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc60:	f010 0301 	ands.w	r3, r0, #1
 800bc64:	d00a      	beq.n	800bc7c <__swsetup_r+0xbc>
 800bc66:	2300      	movs	r3, #0
 800bc68:	60a3      	str	r3, [r4, #8]
 800bc6a:	6963      	ldr	r3, [r4, #20]
 800bc6c:	425b      	negs	r3, r3
 800bc6e:	61a3      	str	r3, [r4, #24]
 800bc70:	6923      	ldr	r3, [r4, #16]
 800bc72:	b943      	cbnz	r3, 800bc86 <__swsetup_r+0xc6>
 800bc74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc78:	d1ba      	bne.n	800bbf0 <__swsetup_r+0x30>
 800bc7a:	bd70      	pop	{r4, r5, r6, pc}
 800bc7c:	0781      	lsls	r1, r0, #30
 800bc7e:	bf58      	it	pl
 800bc80:	6963      	ldrpl	r3, [r4, #20]
 800bc82:	60a3      	str	r3, [r4, #8]
 800bc84:	e7f4      	b.n	800bc70 <__swsetup_r+0xb0>
 800bc86:	2000      	movs	r0, #0
 800bc88:	e7f7      	b.n	800bc7a <__swsetup_r+0xba>
 800bc8a:	bf00      	nop
 800bc8c:	20000024 	.word	0x20000024
 800bc90:	0800c750 	.word	0x0800c750
 800bc94:	0800c770 	.word	0x0800c770
 800bc98:	0800c730 	.word	0x0800c730

0800bc9c <abort>:
 800bc9c:	b508      	push	{r3, lr}
 800bc9e:	2006      	movs	r0, #6
 800bca0:	f000 faa2 	bl	800c1e8 <raise>
 800bca4:	2001      	movs	r0, #1
 800bca6:	f7f5 fd49 	bl	800173c <_exit>
	...

0800bcac <__sflush_r>:
 800bcac:	898a      	ldrh	r2, [r1, #12]
 800bcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	0710      	lsls	r0, r2, #28
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	d458      	bmi.n	800bd6c <__sflush_r+0xc0>
 800bcba:	684b      	ldr	r3, [r1, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dc05      	bgt.n	800bccc <__sflush_r+0x20>
 800bcc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dc02      	bgt.n	800bccc <__sflush_r+0x20>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcce:	2e00      	cmp	r6, #0
 800bcd0:	d0f9      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcd8:	682f      	ldr	r7, [r5, #0]
 800bcda:	602b      	str	r3, [r5, #0]
 800bcdc:	d032      	beq.n	800bd44 <__sflush_r+0x98>
 800bcde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bce0:	89a3      	ldrh	r3, [r4, #12]
 800bce2:	075a      	lsls	r2, r3, #29
 800bce4:	d505      	bpl.n	800bcf2 <__sflush_r+0x46>
 800bce6:	6863      	ldr	r3, [r4, #4]
 800bce8:	1ac0      	subs	r0, r0, r3
 800bcea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcec:	b10b      	cbz	r3, 800bcf2 <__sflush_r+0x46>
 800bcee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcf0:	1ac0      	subs	r0, r0, r3
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcf8:	6a21      	ldr	r1, [r4, #32]
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	47b0      	blx	r6
 800bcfe:	1c43      	adds	r3, r0, #1
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	d106      	bne.n	800bd12 <__sflush_r+0x66>
 800bd04:	6829      	ldr	r1, [r5, #0]
 800bd06:	291d      	cmp	r1, #29
 800bd08:	d82c      	bhi.n	800bd64 <__sflush_r+0xb8>
 800bd0a:	4a2a      	ldr	r2, [pc, #168]	; (800bdb4 <__sflush_r+0x108>)
 800bd0c:	40ca      	lsrs	r2, r1
 800bd0e:	07d6      	lsls	r6, r2, #31
 800bd10:	d528      	bpl.n	800bd64 <__sflush_r+0xb8>
 800bd12:	2200      	movs	r2, #0
 800bd14:	6062      	str	r2, [r4, #4]
 800bd16:	04d9      	lsls	r1, r3, #19
 800bd18:	6922      	ldr	r2, [r4, #16]
 800bd1a:	6022      	str	r2, [r4, #0]
 800bd1c:	d504      	bpl.n	800bd28 <__sflush_r+0x7c>
 800bd1e:	1c42      	adds	r2, r0, #1
 800bd20:	d101      	bne.n	800bd26 <__sflush_r+0x7a>
 800bd22:	682b      	ldr	r3, [r5, #0]
 800bd24:	b903      	cbnz	r3, 800bd28 <__sflush_r+0x7c>
 800bd26:	6560      	str	r0, [r4, #84]	; 0x54
 800bd28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd2a:	602f      	str	r7, [r5, #0]
 800bd2c:	2900      	cmp	r1, #0
 800bd2e:	d0ca      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bd30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd34:	4299      	cmp	r1, r3
 800bd36:	d002      	beq.n	800bd3e <__sflush_r+0x92>
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f7ff f9b5 	bl	800b0a8 <_free_r>
 800bd3e:	2000      	movs	r0, #0
 800bd40:	6360      	str	r0, [r4, #52]	; 0x34
 800bd42:	e7c1      	b.n	800bcc8 <__sflush_r+0x1c>
 800bd44:	6a21      	ldr	r1, [r4, #32]
 800bd46:	2301      	movs	r3, #1
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b0      	blx	r6
 800bd4c:	1c41      	adds	r1, r0, #1
 800bd4e:	d1c7      	bne.n	800bce0 <__sflush_r+0x34>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0c4      	beq.n	800bce0 <__sflush_r+0x34>
 800bd56:	2b1d      	cmp	r3, #29
 800bd58:	d001      	beq.n	800bd5e <__sflush_r+0xb2>
 800bd5a:	2b16      	cmp	r3, #22
 800bd5c:	d101      	bne.n	800bd62 <__sflush_r+0xb6>
 800bd5e:	602f      	str	r7, [r5, #0]
 800bd60:	e7b1      	b.n	800bcc6 <__sflush_r+0x1a>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd68:	81a3      	strh	r3, [r4, #12]
 800bd6a:	e7ad      	b.n	800bcc8 <__sflush_r+0x1c>
 800bd6c:	690f      	ldr	r7, [r1, #16]
 800bd6e:	2f00      	cmp	r7, #0
 800bd70:	d0a9      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bd72:	0793      	lsls	r3, r2, #30
 800bd74:	680e      	ldr	r6, [r1, #0]
 800bd76:	bf08      	it	eq
 800bd78:	694b      	ldreq	r3, [r1, #20]
 800bd7a:	600f      	str	r7, [r1, #0]
 800bd7c:	bf18      	it	ne
 800bd7e:	2300      	movne	r3, #0
 800bd80:	eba6 0807 	sub.w	r8, r6, r7
 800bd84:	608b      	str	r3, [r1, #8]
 800bd86:	f1b8 0f00 	cmp.w	r8, #0
 800bd8a:	dd9c      	ble.n	800bcc6 <__sflush_r+0x1a>
 800bd8c:	6a21      	ldr	r1, [r4, #32]
 800bd8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd90:	4643      	mov	r3, r8
 800bd92:	463a      	mov	r2, r7
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b0      	blx	r6
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dc06      	bgt.n	800bdaa <__sflush_r+0xfe>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda2:	81a3      	strh	r3, [r4, #12]
 800bda4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bda8:	e78e      	b.n	800bcc8 <__sflush_r+0x1c>
 800bdaa:	4407      	add	r7, r0
 800bdac:	eba8 0800 	sub.w	r8, r8, r0
 800bdb0:	e7e9      	b.n	800bd86 <__sflush_r+0xda>
 800bdb2:	bf00      	nop
 800bdb4:	20400001 	.word	0x20400001

0800bdb8 <_fflush_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	690b      	ldr	r3, [r1, #16]
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	b913      	cbnz	r3, 800bdc8 <_fflush_r+0x10>
 800bdc2:	2500      	movs	r5, #0
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	b118      	cbz	r0, 800bdd2 <_fflush_r+0x1a>
 800bdca:	6983      	ldr	r3, [r0, #24]
 800bdcc:	b90b      	cbnz	r3, 800bdd2 <_fflush_r+0x1a>
 800bdce:	f000 f887 	bl	800bee0 <__sinit>
 800bdd2:	4b14      	ldr	r3, [pc, #80]	; (800be24 <_fflush_r+0x6c>)
 800bdd4:	429c      	cmp	r4, r3
 800bdd6:	d11b      	bne.n	800be10 <_fflush_r+0x58>
 800bdd8:	686c      	ldr	r4, [r5, #4]
 800bdda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d0ef      	beq.n	800bdc2 <_fflush_r+0xa>
 800bde2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bde4:	07d0      	lsls	r0, r2, #31
 800bde6:	d404      	bmi.n	800bdf2 <_fflush_r+0x3a>
 800bde8:	0599      	lsls	r1, r3, #22
 800bdea:	d402      	bmi.n	800bdf2 <_fflush_r+0x3a>
 800bdec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdee:	f000 f915 	bl	800c01c <__retarget_lock_acquire_recursive>
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	f7ff ff59 	bl	800bcac <__sflush_r>
 800bdfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdfc:	07da      	lsls	r2, r3, #31
 800bdfe:	4605      	mov	r5, r0
 800be00:	d4e0      	bmi.n	800bdc4 <_fflush_r+0xc>
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	059b      	lsls	r3, r3, #22
 800be06:	d4dd      	bmi.n	800bdc4 <_fflush_r+0xc>
 800be08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be0a:	f000 f908 	bl	800c01e <__retarget_lock_release_recursive>
 800be0e:	e7d9      	b.n	800bdc4 <_fflush_r+0xc>
 800be10:	4b05      	ldr	r3, [pc, #20]	; (800be28 <_fflush_r+0x70>)
 800be12:	429c      	cmp	r4, r3
 800be14:	d101      	bne.n	800be1a <_fflush_r+0x62>
 800be16:	68ac      	ldr	r4, [r5, #8]
 800be18:	e7df      	b.n	800bdda <_fflush_r+0x22>
 800be1a:	4b04      	ldr	r3, [pc, #16]	; (800be2c <_fflush_r+0x74>)
 800be1c:	429c      	cmp	r4, r3
 800be1e:	bf08      	it	eq
 800be20:	68ec      	ldreq	r4, [r5, #12]
 800be22:	e7da      	b.n	800bdda <_fflush_r+0x22>
 800be24:	0800c750 	.word	0x0800c750
 800be28:	0800c770 	.word	0x0800c770
 800be2c:	0800c730 	.word	0x0800c730

0800be30 <std>:
 800be30:	2300      	movs	r3, #0
 800be32:	b510      	push	{r4, lr}
 800be34:	4604      	mov	r4, r0
 800be36:	e9c0 3300 	strd	r3, r3, [r0]
 800be3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be3e:	6083      	str	r3, [r0, #8]
 800be40:	8181      	strh	r1, [r0, #12]
 800be42:	6643      	str	r3, [r0, #100]	; 0x64
 800be44:	81c2      	strh	r2, [r0, #14]
 800be46:	6183      	str	r3, [r0, #24]
 800be48:	4619      	mov	r1, r3
 800be4a:	2208      	movs	r2, #8
 800be4c:	305c      	adds	r0, #92	; 0x5c
 800be4e:	f7fe ffb1 	bl	800adb4 <memset>
 800be52:	4b05      	ldr	r3, [pc, #20]	; (800be68 <std+0x38>)
 800be54:	6263      	str	r3, [r4, #36]	; 0x24
 800be56:	4b05      	ldr	r3, [pc, #20]	; (800be6c <std+0x3c>)
 800be58:	62a3      	str	r3, [r4, #40]	; 0x28
 800be5a:	4b05      	ldr	r3, [pc, #20]	; (800be70 <std+0x40>)
 800be5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be5e:	4b05      	ldr	r3, [pc, #20]	; (800be74 <std+0x44>)
 800be60:	6224      	str	r4, [r4, #32]
 800be62:	6323      	str	r3, [r4, #48]	; 0x30
 800be64:	bd10      	pop	{r4, pc}
 800be66:	bf00      	nop
 800be68:	0800c221 	.word	0x0800c221
 800be6c:	0800c243 	.word	0x0800c243
 800be70:	0800c27b 	.word	0x0800c27b
 800be74:	0800c29f 	.word	0x0800c29f

0800be78 <_cleanup_r>:
 800be78:	4901      	ldr	r1, [pc, #4]	; (800be80 <_cleanup_r+0x8>)
 800be7a:	f000 b8af 	b.w	800bfdc <_fwalk_reent>
 800be7e:	bf00      	nop
 800be80:	0800bdb9 	.word	0x0800bdb9

0800be84 <__sfmoreglue>:
 800be84:	b570      	push	{r4, r5, r6, lr}
 800be86:	2268      	movs	r2, #104	; 0x68
 800be88:	1e4d      	subs	r5, r1, #1
 800be8a:	4355      	muls	r5, r2
 800be8c:	460e      	mov	r6, r1
 800be8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be92:	f7ff f975 	bl	800b180 <_malloc_r>
 800be96:	4604      	mov	r4, r0
 800be98:	b140      	cbz	r0, 800beac <__sfmoreglue+0x28>
 800be9a:	2100      	movs	r1, #0
 800be9c:	e9c0 1600 	strd	r1, r6, [r0]
 800bea0:	300c      	adds	r0, #12
 800bea2:	60a0      	str	r0, [r4, #8]
 800bea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bea8:	f7fe ff84 	bl	800adb4 <memset>
 800beac:	4620      	mov	r0, r4
 800beae:	bd70      	pop	{r4, r5, r6, pc}

0800beb0 <__sfp_lock_acquire>:
 800beb0:	4801      	ldr	r0, [pc, #4]	; (800beb8 <__sfp_lock_acquire+0x8>)
 800beb2:	f000 b8b3 	b.w	800c01c <__retarget_lock_acquire_recursive>
 800beb6:	bf00      	nop
 800beb8:	2000200d 	.word	0x2000200d

0800bebc <__sfp_lock_release>:
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <__sfp_lock_release+0x8>)
 800bebe:	f000 b8ae 	b.w	800c01e <__retarget_lock_release_recursive>
 800bec2:	bf00      	nop
 800bec4:	2000200d 	.word	0x2000200d

0800bec8 <__sinit_lock_acquire>:
 800bec8:	4801      	ldr	r0, [pc, #4]	; (800bed0 <__sinit_lock_acquire+0x8>)
 800beca:	f000 b8a7 	b.w	800c01c <__retarget_lock_acquire_recursive>
 800bece:	bf00      	nop
 800bed0:	2000200e 	.word	0x2000200e

0800bed4 <__sinit_lock_release>:
 800bed4:	4801      	ldr	r0, [pc, #4]	; (800bedc <__sinit_lock_release+0x8>)
 800bed6:	f000 b8a2 	b.w	800c01e <__retarget_lock_release_recursive>
 800beda:	bf00      	nop
 800bedc:	2000200e 	.word	0x2000200e

0800bee0 <__sinit>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	4604      	mov	r4, r0
 800bee4:	f7ff fff0 	bl	800bec8 <__sinit_lock_acquire>
 800bee8:	69a3      	ldr	r3, [r4, #24]
 800beea:	b11b      	cbz	r3, 800bef4 <__sinit+0x14>
 800beec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef0:	f7ff bff0 	b.w	800bed4 <__sinit_lock_release>
 800bef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bef8:	6523      	str	r3, [r4, #80]	; 0x50
 800befa:	4b13      	ldr	r3, [pc, #76]	; (800bf48 <__sinit+0x68>)
 800befc:	4a13      	ldr	r2, [pc, #76]	; (800bf4c <__sinit+0x6c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf02:	42a3      	cmp	r3, r4
 800bf04:	bf04      	itt	eq
 800bf06:	2301      	moveq	r3, #1
 800bf08:	61a3      	streq	r3, [r4, #24]
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f000 f820 	bl	800bf50 <__sfp>
 800bf10:	6060      	str	r0, [r4, #4]
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 f81c 	bl	800bf50 <__sfp>
 800bf18:	60a0      	str	r0, [r4, #8]
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 f818 	bl	800bf50 <__sfp>
 800bf20:	2200      	movs	r2, #0
 800bf22:	60e0      	str	r0, [r4, #12]
 800bf24:	2104      	movs	r1, #4
 800bf26:	6860      	ldr	r0, [r4, #4]
 800bf28:	f7ff ff82 	bl	800be30 <std>
 800bf2c:	68a0      	ldr	r0, [r4, #8]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	2109      	movs	r1, #9
 800bf32:	f7ff ff7d 	bl	800be30 <std>
 800bf36:	68e0      	ldr	r0, [r4, #12]
 800bf38:	2202      	movs	r2, #2
 800bf3a:	2112      	movs	r1, #18
 800bf3c:	f7ff ff78 	bl	800be30 <std>
 800bf40:	2301      	movs	r3, #1
 800bf42:	61a3      	str	r3, [r4, #24]
 800bf44:	e7d2      	b.n	800beec <__sinit+0xc>
 800bf46:	bf00      	nop
 800bf48:	0800c548 	.word	0x0800c548
 800bf4c:	0800be79 	.word	0x0800be79

0800bf50 <__sfp>:
 800bf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf52:	4607      	mov	r7, r0
 800bf54:	f7ff ffac 	bl	800beb0 <__sfp_lock_acquire>
 800bf58:	4b1e      	ldr	r3, [pc, #120]	; (800bfd4 <__sfp+0x84>)
 800bf5a:	681e      	ldr	r6, [r3, #0]
 800bf5c:	69b3      	ldr	r3, [r6, #24]
 800bf5e:	b913      	cbnz	r3, 800bf66 <__sfp+0x16>
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7ff ffbd 	bl	800bee0 <__sinit>
 800bf66:	3648      	adds	r6, #72	; 0x48
 800bf68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	d503      	bpl.n	800bf78 <__sfp+0x28>
 800bf70:	6833      	ldr	r3, [r6, #0]
 800bf72:	b30b      	cbz	r3, 800bfb8 <__sfp+0x68>
 800bf74:	6836      	ldr	r6, [r6, #0]
 800bf76:	e7f7      	b.n	800bf68 <__sfp+0x18>
 800bf78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf7c:	b9d5      	cbnz	r5, 800bfb4 <__sfp+0x64>
 800bf7e:	4b16      	ldr	r3, [pc, #88]	; (800bfd8 <__sfp+0x88>)
 800bf80:	60e3      	str	r3, [r4, #12]
 800bf82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf86:	6665      	str	r5, [r4, #100]	; 0x64
 800bf88:	f000 f847 	bl	800c01a <__retarget_lock_init_recursive>
 800bf8c:	f7ff ff96 	bl	800bebc <__sfp_lock_release>
 800bf90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf98:	6025      	str	r5, [r4, #0]
 800bf9a:	61a5      	str	r5, [r4, #24]
 800bf9c:	2208      	movs	r2, #8
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfa4:	f7fe ff06 	bl	800adb4 <memset>
 800bfa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb4:	3468      	adds	r4, #104	; 0x68
 800bfb6:	e7d9      	b.n	800bf6c <__sfp+0x1c>
 800bfb8:	2104      	movs	r1, #4
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f7ff ff62 	bl	800be84 <__sfmoreglue>
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	6030      	str	r0, [r6, #0]
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d1d5      	bne.n	800bf74 <__sfp+0x24>
 800bfc8:	f7ff ff78 	bl	800bebc <__sfp_lock_release>
 800bfcc:	230c      	movs	r3, #12
 800bfce:	603b      	str	r3, [r7, #0]
 800bfd0:	e7ee      	b.n	800bfb0 <__sfp+0x60>
 800bfd2:	bf00      	nop
 800bfd4:	0800c548 	.word	0x0800c548
 800bfd8:	ffff0001 	.word	0xffff0001

0800bfdc <_fwalk_reent>:
 800bfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe0:	4606      	mov	r6, r0
 800bfe2:	4688      	mov	r8, r1
 800bfe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfe8:	2700      	movs	r7, #0
 800bfea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfee:	f1b9 0901 	subs.w	r9, r9, #1
 800bff2:	d505      	bpl.n	800c000 <_fwalk_reent+0x24>
 800bff4:	6824      	ldr	r4, [r4, #0]
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	d1f7      	bne.n	800bfea <_fwalk_reent+0xe>
 800bffa:	4638      	mov	r0, r7
 800bffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c000:	89ab      	ldrh	r3, [r5, #12]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d907      	bls.n	800c016 <_fwalk_reent+0x3a>
 800c006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c00a:	3301      	adds	r3, #1
 800c00c:	d003      	beq.n	800c016 <_fwalk_reent+0x3a>
 800c00e:	4629      	mov	r1, r5
 800c010:	4630      	mov	r0, r6
 800c012:	47c0      	blx	r8
 800c014:	4307      	orrs	r7, r0
 800c016:	3568      	adds	r5, #104	; 0x68
 800c018:	e7e9      	b.n	800bfee <_fwalk_reent+0x12>

0800c01a <__retarget_lock_init_recursive>:
 800c01a:	4770      	bx	lr

0800c01c <__retarget_lock_acquire_recursive>:
 800c01c:	4770      	bx	lr

0800c01e <__retarget_lock_release_recursive>:
 800c01e:	4770      	bx	lr

0800c020 <__swhatbuf_r>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	460e      	mov	r6, r1
 800c024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c028:	2900      	cmp	r1, #0
 800c02a:	b096      	sub	sp, #88	; 0x58
 800c02c:	4614      	mov	r4, r2
 800c02e:	461d      	mov	r5, r3
 800c030:	da08      	bge.n	800c044 <__swhatbuf_r+0x24>
 800c032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	602a      	str	r2, [r5, #0]
 800c03a:	061a      	lsls	r2, r3, #24
 800c03c:	d410      	bmi.n	800c060 <__swhatbuf_r+0x40>
 800c03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c042:	e00e      	b.n	800c062 <__swhatbuf_r+0x42>
 800c044:	466a      	mov	r2, sp
 800c046:	f000 f951 	bl	800c2ec <_fstat_r>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	dbf1      	blt.n	800c032 <__swhatbuf_r+0x12>
 800c04e:	9a01      	ldr	r2, [sp, #4]
 800c050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c058:	425a      	negs	r2, r3
 800c05a:	415a      	adcs	r2, r3
 800c05c:	602a      	str	r2, [r5, #0]
 800c05e:	e7ee      	b.n	800c03e <__swhatbuf_r+0x1e>
 800c060:	2340      	movs	r3, #64	; 0x40
 800c062:	2000      	movs	r0, #0
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	b016      	add	sp, #88	; 0x58
 800c068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c06c <__smakebuf_r>:
 800c06c:	898b      	ldrh	r3, [r1, #12]
 800c06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c070:	079d      	lsls	r5, r3, #30
 800c072:	4606      	mov	r6, r0
 800c074:	460c      	mov	r4, r1
 800c076:	d507      	bpl.n	800c088 <__smakebuf_r+0x1c>
 800c078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	6123      	str	r3, [r4, #16]
 800c080:	2301      	movs	r3, #1
 800c082:	6163      	str	r3, [r4, #20]
 800c084:	b002      	add	sp, #8
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	ab01      	add	r3, sp, #4
 800c08a:	466a      	mov	r2, sp
 800c08c:	f7ff ffc8 	bl	800c020 <__swhatbuf_r>
 800c090:	9900      	ldr	r1, [sp, #0]
 800c092:	4605      	mov	r5, r0
 800c094:	4630      	mov	r0, r6
 800c096:	f7ff f873 	bl	800b180 <_malloc_r>
 800c09a:	b948      	cbnz	r0, 800c0b0 <__smakebuf_r+0x44>
 800c09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a0:	059a      	lsls	r2, r3, #22
 800c0a2:	d4ef      	bmi.n	800c084 <__smakebuf_r+0x18>
 800c0a4:	f023 0303 	bic.w	r3, r3, #3
 800c0a8:	f043 0302 	orr.w	r3, r3, #2
 800c0ac:	81a3      	strh	r3, [r4, #12]
 800c0ae:	e7e3      	b.n	800c078 <__smakebuf_r+0xc>
 800c0b0:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <__smakebuf_r+0x7c>)
 800c0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	6020      	str	r0, [r4, #0]
 800c0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0bc:	81a3      	strh	r3, [r4, #12]
 800c0be:	9b00      	ldr	r3, [sp, #0]
 800c0c0:	6163      	str	r3, [r4, #20]
 800c0c2:	9b01      	ldr	r3, [sp, #4]
 800c0c4:	6120      	str	r0, [r4, #16]
 800c0c6:	b15b      	cbz	r3, 800c0e0 <__smakebuf_r+0x74>
 800c0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f000 f91f 	bl	800c310 <_isatty_r>
 800c0d2:	b128      	cbz	r0, 800c0e0 <__smakebuf_r+0x74>
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	f023 0303 	bic.w	r3, r3, #3
 800c0da:	f043 0301 	orr.w	r3, r3, #1
 800c0de:	81a3      	strh	r3, [r4, #12]
 800c0e0:	89a0      	ldrh	r0, [r4, #12]
 800c0e2:	4305      	orrs	r5, r0
 800c0e4:	81a5      	strh	r5, [r4, #12]
 800c0e6:	e7cd      	b.n	800c084 <__smakebuf_r+0x18>
 800c0e8:	0800be79 	.word	0x0800be79

0800c0ec <memmove>:
 800c0ec:	4288      	cmp	r0, r1
 800c0ee:	b510      	push	{r4, lr}
 800c0f0:	eb01 0402 	add.w	r4, r1, r2
 800c0f4:	d902      	bls.n	800c0fc <memmove+0x10>
 800c0f6:	4284      	cmp	r4, r0
 800c0f8:	4623      	mov	r3, r4
 800c0fa:	d807      	bhi.n	800c10c <memmove+0x20>
 800c0fc:	1e43      	subs	r3, r0, #1
 800c0fe:	42a1      	cmp	r1, r4
 800c100:	d008      	beq.n	800c114 <memmove+0x28>
 800c102:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c10a:	e7f8      	b.n	800c0fe <memmove+0x12>
 800c10c:	4402      	add	r2, r0
 800c10e:	4601      	mov	r1, r0
 800c110:	428a      	cmp	r2, r1
 800c112:	d100      	bne.n	800c116 <memmove+0x2a>
 800c114:	bd10      	pop	{r4, pc}
 800c116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c11a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c11e:	e7f7      	b.n	800c110 <memmove+0x24>

0800c120 <__malloc_lock>:
 800c120:	4801      	ldr	r0, [pc, #4]	; (800c128 <__malloc_lock+0x8>)
 800c122:	f7ff bf7b 	b.w	800c01c <__retarget_lock_acquire_recursive>
 800c126:	bf00      	nop
 800c128:	2000200c 	.word	0x2000200c

0800c12c <__malloc_unlock>:
 800c12c:	4801      	ldr	r0, [pc, #4]	; (800c134 <__malloc_unlock+0x8>)
 800c12e:	f7ff bf76 	b.w	800c01e <__retarget_lock_release_recursive>
 800c132:	bf00      	nop
 800c134:	2000200c 	.word	0x2000200c

0800c138 <_realloc_r>:
 800c138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c13c:	4680      	mov	r8, r0
 800c13e:	4614      	mov	r4, r2
 800c140:	460e      	mov	r6, r1
 800c142:	b921      	cbnz	r1, 800c14e <_realloc_r+0x16>
 800c144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	4611      	mov	r1, r2
 800c14a:	f7ff b819 	b.w	800b180 <_malloc_r>
 800c14e:	b92a      	cbnz	r2, 800c15c <_realloc_r+0x24>
 800c150:	f7fe ffaa 	bl	800b0a8 <_free_r>
 800c154:	4625      	mov	r5, r4
 800c156:	4628      	mov	r0, r5
 800c158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15c:	f000 f8fa 	bl	800c354 <_malloc_usable_size_r>
 800c160:	4284      	cmp	r4, r0
 800c162:	4607      	mov	r7, r0
 800c164:	d802      	bhi.n	800c16c <_realloc_r+0x34>
 800c166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c16a:	d812      	bhi.n	800c192 <_realloc_r+0x5a>
 800c16c:	4621      	mov	r1, r4
 800c16e:	4640      	mov	r0, r8
 800c170:	f7ff f806 	bl	800b180 <_malloc_r>
 800c174:	4605      	mov	r5, r0
 800c176:	2800      	cmp	r0, #0
 800c178:	d0ed      	beq.n	800c156 <_realloc_r+0x1e>
 800c17a:	42bc      	cmp	r4, r7
 800c17c:	4622      	mov	r2, r4
 800c17e:	4631      	mov	r1, r6
 800c180:	bf28      	it	cs
 800c182:	463a      	movcs	r2, r7
 800c184:	f7fe fe08 	bl	800ad98 <memcpy>
 800c188:	4631      	mov	r1, r6
 800c18a:	4640      	mov	r0, r8
 800c18c:	f7fe ff8c 	bl	800b0a8 <_free_r>
 800c190:	e7e1      	b.n	800c156 <_realloc_r+0x1e>
 800c192:	4635      	mov	r5, r6
 800c194:	e7df      	b.n	800c156 <_realloc_r+0x1e>

0800c196 <_raise_r>:
 800c196:	291f      	cmp	r1, #31
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	4604      	mov	r4, r0
 800c19c:	460d      	mov	r5, r1
 800c19e:	d904      	bls.n	800c1aa <_raise_r+0x14>
 800c1a0:	2316      	movs	r3, #22
 800c1a2:	6003      	str	r3, [r0, #0]
 800c1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1a8:	bd38      	pop	{r3, r4, r5, pc}
 800c1aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1ac:	b112      	cbz	r2, 800c1b4 <_raise_r+0x1e>
 800c1ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b2:	b94b      	cbnz	r3, 800c1c8 <_raise_r+0x32>
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f000 f831 	bl	800c21c <_getpid_r>
 800c1ba:	462a      	mov	r2, r5
 800c1bc:	4601      	mov	r1, r0
 800c1be:	4620      	mov	r0, r4
 800c1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c4:	f000 b818 	b.w	800c1f8 <_kill_r>
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d00a      	beq.n	800c1e2 <_raise_r+0x4c>
 800c1cc:	1c59      	adds	r1, r3, #1
 800c1ce:	d103      	bne.n	800c1d8 <_raise_r+0x42>
 800c1d0:	2316      	movs	r3, #22
 800c1d2:	6003      	str	r3, [r0, #0]
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	e7e7      	b.n	800c1a8 <_raise_r+0x12>
 800c1d8:	2400      	movs	r4, #0
 800c1da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1de:	4628      	mov	r0, r5
 800c1e0:	4798      	blx	r3
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	e7e0      	b.n	800c1a8 <_raise_r+0x12>
	...

0800c1e8 <raise>:
 800c1e8:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <raise+0xc>)
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	f7ff bfd2 	b.w	800c196 <_raise_r>
 800c1f2:	bf00      	nop
 800c1f4:	20000024 	.word	0x20000024

0800c1f8 <_kill_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d07      	ldr	r5, [pc, #28]	; (800c218 <_kill_r+0x20>)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	4608      	mov	r0, r1
 800c202:	4611      	mov	r1, r2
 800c204:	602b      	str	r3, [r5, #0]
 800c206:	f7f5 fa89 	bl	800171c <_kill>
 800c20a:	1c43      	adds	r3, r0, #1
 800c20c:	d102      	bne.n	800c214 <_kill_r+0x1c>
 800c20e:	682b      	ldr	r3, [r5, #0]
 800c210:	b103      	cbz	r3, 800c214 <_kill_r+0x1c>
 800c212:	6023      	str	r3, [r4, #0]
 800c214:	bd38      	pop	{r3, r4, r5, pc}
 800c216:	bf00      	nop
 800c218:	20002010 	.word	0x20002010

0800c21c <_getpid_r>:
 800c21c:	f7f5 ba76 	b.w	800170c <_getpid>

0800c220 <__sread>:
 800c220:	b510      	push	{r4, lr}
 800c222:	460c      	mov	r4, r1
 800c224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c228:	f000 f89c 	bl	800c364 <_read_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	bfab      	itete	ge
 800c230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c232:	89a3      	ldrhlt	r3, [r4, #12]
 800c234:	181b      	addge	r3, r3, r0
 800c236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c23a:	bfac      	ite	ge
 800c23c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c23e:	81a3      	strhlt	r3, [r4, #12]
 800c240:	bd10      	pop	{r4, pc}

0800c242 <__swrite>:
 800c242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c246:	461f      	mov	r7, r3
 800c248:	898b      	ldrh	r3, [r1, #12]
 800c24a:	05db      	lsls	r3, r3, #23
 800c24c:	4605      	mov	r5, r0
 800c24e:	460c      	mov	r4, r1
 800c250:	4616      	mov	r6, r2
 800c252:	d505      	bpl.n	800c260 <__swrite+0x1e>
 800c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c258:	2302      	movs	r3, #2
 800c25a:	2200      	movs	r2, #0
 800c25c:	f000 f868 	bl	800c330 <_lseek_r>
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c26a:	81a3      	strh	r3, [r4, #12]
 800c26c:	4632      	mov	r2, r6
 800c26e:	463b      	mov	r3, r7
 800c270:	4628      	mov	r0, r5
 800c272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c276:	f000 b817 	b.w	800c2a8 <_write_r>

0800c27a <__sseek>:
 800c27a:	b510      	push	{r4, lr}
 800c27c:	460c      	mov	r4, r1
 800c27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c282:	f000 f855 	bl	800c330 <_lseek_r>
 800c286:	1c43      	adds	r3, r0, #1
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	bf15      	itete	ne
 800c28c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c28e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c296:	81a3      	strheq	r3, [r4, #12]
 800c298:	bf18      	it	ne
 800c29a:	81a3      	strhne	r3, [r4, #12]
 800c29c:	bd10      	pop	{r4, pc}

0800c29e <__sclose>:
 800c29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a2:	f000 b813 	b.w	800c2cc <_close_r>
	...

0800c2a8 <_write_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	; (800c2c8 <_write_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f5 fa67 	bl	800178a <_write>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_write_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_write_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20002010 	.word	0x20002010

0800c2cc <_close_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d06      	ldr	r5, [pc, #24]	; (800c2e8 <_close_r+0x1c>)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	f7f5 fa73 	bl	80017c2 <_close>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_close_r+0x1a>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_close_r+0x1a>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	20002010 	.word	0x20002010

0800c2ec <_fstat_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4d07      	ldr	r5, [pc, #28]	; (800c30c <_fstat_r+0x20>)
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	602b      	str	r3, [r5, #0]
 800c2fa:	f7f5 fa6e 	bl	80017da <_fstat>
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	d102      	bne.n	800c308 <_fstat_r+0x1c>
 800c302:	682b      	ldr	r3, [r5, #0]
 800c304:	b103      	cbz	r3, 800c308 <_fstat_r+0x1c>
 800c306:	6023      	str	r3, [r4, #0]
 800c308:	bd38      	pop	{r3, r4, r5, pc}
 800c30a:	bf00      	nop
 800c30c:	20002010 	.word	0x20002010

0800c310 <_isatty_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d06      	ldr	r5, [pc, #24]	; (800c32c <_isatty_r+0x1c>)
 800c314:	2300      	movs	r3, #0
 800c316:	4604      	mov	r4, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	602b      	str	r3, [r5, #0]
 800c31c:	f7f5 fa6d 	bl	80017fa <_isatty>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_isatty_r+0x1a>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b103      	cbz	r3, 800c32a <_isatty_r+0x1a>
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	20002010 	.word	0x20002010

0800c330 <_lseek_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d07      	ldr	r5, [pc, #28]	; (800c350 <_lseek_r+0x20>)
 800c334:	4604      	mov	r4, r0
 800c336:	4608      	mov	r0, r1
 800c338:	4611      	mov	r1, r2
 800c33a:	2200      	movs	r2, #0
 800c33c:	602a      	str	r2, [r5, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	f7f5 fa66 	bl	8001810 <_lseek>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d102      	bne.n	800c34e <_lseek_r+0x1e>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	b103      	cbz	r3, 800c34e <_lseek_r+0x1e>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	20002010 	.word	0x20002010

0800c354 <_malloc_usable_size_r>:
 800c354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c358:	1f18      	subs	r0, r3, #4
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	bfbc      	itt	lt
 800c35e:	580b      	ldrlt	r3, [r1, r0]
 800c360:	18c0      	addlt	r0, r0, r3
 800c362:	4770      	bx	lr

0800c364 <_read_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4d07      	ldr	r5, [pc, #28]	; (800c384 <_read_r+0x20>)
 800c368:	4604      	mov	r4, r0
 800c36a:	4608      	mov	r0, r1
 800c36c:	4611      	mov	r1, r2
 800c36e:	2200      	movs	r2, #0
 800c370:	602a      	str	r2, [r5, #0]
 800c372:	461a      	mov	r2, r3
 800c374:	f7f5 f9ec 	bl	8001750 <_read>
 800c378:	1c43      	adds	r3, r0, #1
 800c37a:	d102      	bne.n	800c382 <_read_r+0x1e>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	b103      	cbz	r3, 800c382 <_read_r+0x1e>
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	bd38      	pop	{r3, r4, r5, pc}
 800c384:	20002010 	.word	0x20002010

0800c388 <_init>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	bf00      	nop
 800c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c38e:	bc08      	pop	{r3}
 800c390:	469e      	mov	lr, r3
 800c392:	4770      	bx	lr

0800c394 <_fini>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	bf00      	nop
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr
