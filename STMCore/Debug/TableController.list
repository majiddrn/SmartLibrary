
TableController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800ada0  0800ada0  0001ada0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b134  0800b134  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800b134  0800b134  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b134  0800b134  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b134  0800b134  0001b134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001f30  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fa4  20001fa4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025014  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047ca  00000000  00000000  000450b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca8  00000000  00000000  00049888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ae0  00000000  00000000  0004b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022387  00000000  00000000  0004d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000235e9  00000000  00000000  0006f397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9456  00000000  00000000  00092980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015bdd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085f4  00000000  00000000  0015be28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad88 	.word	0x0800ad88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800ad88 	.word	0x0800ad88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_UART_RxCpltCallback>:
extern osSemaphoreId_t diffRxDataHandle;
extern char data_c;
extern char data[150];
extern uint8_t data_c_idx;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
	if (huart->Instance == huart2.Instance) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <HAL_UART_RxCpltCallback+0x68>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d124      	bne.n	80002ce <HAL_UART_RxCpltCallback+0x5e>
	        data[data_c_idx] = data_c;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	461a      	mov	r2, r3
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_UART_RxCpltCallback+0x70>)
 800028c:	7819      	ldrb	r1, [r3, #0]
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_UART_RxCpltCallback+0x74>)
 8000290:	5499      	strb	r1, [r3, r2]
	        if (data_c == '\r') {
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <HAL_UART_RxCpltCallback+0x70>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b0d      	cmp	r3, #13
 8000298:	d10e      	bne.n	80002b8 <HAL_UART_RxCpltCallback+0x48>
	            data[data_c_idx] = '\0';
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	461a      	mov	r2, r3
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HAL_UART_RxCpltCallback+0x74>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	5499      	strb	r1, [r3, r2]
	            data_c_idx = 0;
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
	            osSemaphoreRelease(diffRxDataHandle);
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <HAL_UART_RxCpltCallback+0x78>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f006 f967 	bl	8006584 <osSemaphoreRelease>
 80002b6:	e005      	b.n	80002c4 <HAL_UART_RxCpltCallback+0x54>
	        } else
	        	data_c_idx++;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <HAL_UART_RxCpltCallback+0x6c>)
 80002c2:	701a      	strb	r2, [r3, #0]

	        HAL_UART_Receive_IT(&huart2, &data_c, 1);
 80002c4:	2201      	movs	r2, #1
 80002c6:	4906      	ldr	r1, [pc, #24]	; (80002e0 <HAL_UART_RxCpltCallback+0x70>)
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <HAL_UART_RxCpltCallback+0x68>)
 80002ca:	f004 fc69 	bl	8004ba0 <HAL_UART_Receive_IT>
	}
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000194 	.word	0x20000194
 80002dc:	200005f7 	.word	0x200005f7
 80002e0:	200005f6 	.word	0x200005f6
 80002e4:	20000560 	.word	0x20000560
 80002e8:	20000558 	.word	0x20000558

080002ec <parseMessage>:
#include "Handler.h"

extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim2;

int parseMessage(char* message, LedMessage* ledMessage) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
	// Check if the message starts with "LED#"
	if (strncmp(message, "LED#", 4) != 0)
 80002f6:	2204      	movs	r2, #4
 80002f8:	4919      	ldr	r1, [pc, #100]	; (8000360 <parseMessage+0x74>)
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f009 fa8a 	bl	8009814 <strncmp>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d002      	beq.n	800030c <parseMessage+0x20>
		return -1; // Invalid message
 8000306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800030a:	e024      	b.n	8000356 <parseMessage+0x6a>

	// Extract the LED number
	char* token = strtok(message + 4, ":");
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3304      	adds	r3, #4
 8000310:	4914      	ldr	r1, [pc, #80]	; (8000364 <parseMessage+0x78>)
 8000312:	4618      	mov	r0, r3
 8000314:	f009 faa8 	bl	8009868 <strtok>
 8000318:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d102      	bne.n	8000326 <parseMessage+0x3a>
		return -1; // Invalid message
 8000320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000324:	e017      	b.n	8000356 <parseMessage+0x6a>

	ledMessage->ledNumber = atoi(token);
 8000326:	68f8      	ldr	r0, [r7, #12]
 8000328:	f009 fa08 	bl	800973c <atoi>
 800032c:	4602      	mov	r2, r0
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	601a      	str	r2, [r3, #0]

	// Extract the color
	token = strtok(NULL, "#");
 8000332:	490d      	ldr	r1, [pc, #52]	; (8000368 <parseMessage+0x7c>)
 8000334:	2000      	movs	r0, #0
 8000336:	f009 fa97 	bl	8009868 <strtok>
 800033a:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d102      	bne.n	8000348 <parseMessage+0x5c>
		return -1; // Invalid message
 8000342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000346:	e006      	b.n	8000356 <parseMessage+0x6a>

	strcpy(ledMessage->color, token);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	3304      	adds	r3, #4
 800034c:	68f9      	ldr	r1, [r7, #12]
 800034e:	4618      	mov	r0, r3
 8000350:	f009 fa58 	bl	8009804 <strcpy>

	return 0; // Valid message
 8000354:	2300      	movs	r3, #0
}
 8000356:	4618      	mov	r0, r3
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	0800ada0 	.word	0x0800ada0
 8000364:	0800ada8 	.word	0x0800ada8
 8000368:	0800adac 	.word	0x0800adac

0800036c <doLEDFunc>:

int doLEDFunc(LedMessage ledMessage) {
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b087      	sub	sp, #28
 8000370:	af00      	add	r7, sp, #0
 8000372:	463c      	mov	r4, r7
 8000374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	enum LED_COLOR color;
	if (strstr(ledMessage.color, "GREEN"))
 8000378:	463b      	mov	r3, r7
 800037a:	3304      	adds	r3, #4
 800037c:	492d      	ldr	r1, [pc, #180]	; (8000434 <doLEDFunc+0xc8>)
 800037e:	4618      	mov	r0, r3
 8000380:	f009 fa5c 	bl	800983c <strstr>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d002      	beq.n	8000390 <doLEDFunc+0x24>
		color = LED_GREEN;
 800038a:	2301      	movs	r3, #1
 800038c:	75fb      	strb	r3, [r7, #23]
 800038e:	e016      	b.n	80003be <doLEDFunc+0x52>

	else if (strstr(ledMessage.color, "YELLOW"))
 8000390:	463b      	mov	r3, r7
 8000392:	3304      	adds	r3, #4
 8000394:	4928      	ldr	r1, [pc, #160]	; (8000438 <doLEDFunc+0xcc>)
 8000396:	4618      	mov	r0, r3
 8000398:	f009 fa50 	bl	800983c <strstr>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <doLEDFunc+0x3c>
		color = LED_YELLOW;
 80003a2:	2302      	movs	r3, #2
 80003a4:	75fb      	strb	r3, [r7, #23]
 80003a6:	e00a      	b.n	80003be <doLEDFunc+0x52>

	else if (strstr(ledMessage.color, "RED"))
 80003a8:	463b      	mov	r3, r7
 80003aa:	3304      	adds	r3, #4
 80003ac:	4923      	ldr	r1, [pc, #140]	; (800043c <doLEDFunc+0xd0>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f009 fa44 	bl	800983c <strstr>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <doLEDFunc+0x52>
		color = LED_RED;
 80003ba:	2300      	movs	r3, #0
 80003bc:	75fb      	strb	r3, [r7, #23]
	 * TIM_CHANNEL_1 represents Red
	 * TIM_CHANNEL_2 represents Green
	 * TIM_CHANNEL_2 represents Blue
	 * */

	switch (color) {
 80003be:	7dfb      	ldrb	r3, [r7, #23]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d013      	beq.n	80003ec <doLEDFunc+0x80>
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	dc2e      	bgt.n	8000426 <doLEDFunc+0xba>
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d01e      	beq.n	800040a <doLEDFunc+0x9e>
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d12a      	bne.n	8000426 <doLEDFunc+0xba>
		case LED_GREEN:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80003d0:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <doLEDFunc+0xd4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2200      	movs	r2, #0
 80003d6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500);
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <doLEDFunc+0xd4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003e0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <doLEDFunc+0xd4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2200      	movs	r2, #0
 80003e8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80003ea:	e01d      	b.n	8000428 <doLEDFunc+0xbc>

		case LED_YELLOW:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <doLEDFunc+0xd4>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500);
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <doLEDFunc+0xd4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003fe:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <doLEDFunc+0xd4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2200      	movs	r2, #0
 8000406:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000408:	e00e      	b.n	8000428 <doLEDFunc+0xbc>

		case LED_RED:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 800040a:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <doLEDFunc+0xd4>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000412:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <doLEDFunc+0xd4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <doLEDFunc+0xd4>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2200      	movs	r2, #0
 8000422:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000424:	e000      	b.n	8000428 <doLEDFunc+0xbc>
		default:
			break;
 8000426:	bf00      	nop
	}

	return 1;
 8000428:	2301      	movs	r3, #1
}
 800042a:	4618      	mov	r0, r3
 800042c:	371c      	adds	r7, #28
 800042e:	46bd      	mov	sp, r7
 8000430:	bd90      	pop	{r4, r7, pc}
 8000432:	bf00      	nop
 8000434:	0800adb0 	.word	0x0800adb0
 8000438:	0800adb8 	.word	0x0800adb8
 800043c:	0800adc0 	.word	0x0800adc0
 8000440:	20000148 	.word	0x20000148

08000444 <addToHandler>:

void addToHandler(char data[]) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	LedMessage ledMessage;
	int parse = parseMessage(data, &ledMessage);
 800044c:	f107 0308 	add.w	r3, r7, #8
 8000450:	4619      	mov	r1, r3
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ff4a 	bl	80002ec <parseMessage>
 8000458:	61f8      	str	r0, [r7, #28]

	if (parse == -1) {
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000460:	d103      	bne.n	800046a <addToHandler+0x26>
		sendACK(ACK_INVALID);
 8000462:	2001      	movs	r0, #1
 8000464:	f000 f816 	bl	8000494 <sendACK>
		return;
 8000468:	e010      	b.n	800048c <addToHandler+0x48>
	}

	int funcStat = doLEDFunc(ledMessage);
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000470:	f7ff ff7c 	bl	800036c <doLEDFunc>
 8000474:	61b8      	str	r0, [r7, #24]

	if (funcStat == -1) {
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800047c:	d103      	bne.n	8000486 <addToHandler+0x42>
		sendACK(ACK_ERR);
 800047e:	2002      	movs	r0, #2
 8000480:	f000 f808 	bl	8000494 <sendACK>
		return;
 8000484:	e002      	b.n	800048c <addToHandler+0x48>
	}

	sendACK(ACK_OK);
 8000486:	2000      	movs	r0, #0
 8000488:	f000 f804 	bl	8000494 <sendACK>
}
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <sendACK>:


void sendACK(enum ACK_TYPE ack) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b08a      	sub	sp, #40	; 0x28
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
	char tmp[20];
	int len;
	HAL_StatusTypeDef status;

	switch (ack) {
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	d02b      	beq.n	80004fc <sendACK+0x68>
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	dc3c      	bgt.n	8000522 <sendACK+0x8e>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d014      	beq.n	80004d6 <sendACK+0x42>
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d138      	bne.n	8000522 <sendACK+0x8e>
		case ACK_INVALID:
			len = sprintf(tmp, "INVALID\r");
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	491d      	ldr	r1, [pc, #116]	; (800052c <sendACK+0x98>)
 80004b6:	4618      	mov	r0, r3
 80004b8:	f009 f984 	bl	80097c4 <siprintf>
 80004bc:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 80004be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	f107 010c 	add.w	r1, r7, #12
 80004c6:	23fa      	movs	r3, #250	; 0xfa
 80004c8:	4819      	ldr	r0, [pc, #100]	; (8000530 <sendACK+0x9c>)
 80004ca:	f004 fadf 	bl	8004a8c <HAL_UART_Transmit>
 80004ce:	4603      	mov	r3, r0
 80004d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			break;
 80004d4:	e026      	b.n	8000524 <sendACK+0x90>
		case ACK_OK:
			len = sprintf(tmp, "OK\r");
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	4916      	ldr	r1, [pc, #88]	; (8000534 <sendACK+0xa0>)
 80004dc:	4618      	mov	r0, r3
 80004de:	f009 f971 	bl	80097c4 <siprintf>
 80004e2:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 80004e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	f107 010c 	add.w	r1, r7, #12
 80004ec:	23fa      	movs	r3, #250	; 0xfa
 80004ee:	4810      	ldr	r0, [pc, #64]	; (8000530 <sendACK+0x9c>)
 80004f0:	f004 facc 	bl	8004a8c <HAL_UART_Transmit>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			break;
 80004fa:	e013      	b.n	8000524 <sendACK+0x90>
		case ACK_ERR:
			len = sprintf(tmp, "ERROR\r");
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	490d      	ldr	r1, [pc, #52]	; (8000538 <sendACK+0xa4>)
 8000502:	4618      	mov	r0, r3
 8000504:	f009 f95e 	bl	80097c4 <siprintf>
 8000508:	6278      	str	r0, [r7, #36]	; 0x24
			status = HAL_UART_Transmit(&huart2, tmp, len, 250);
 800050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050c:	b29a      	uxth	r2, r3
 800050e:	f107 010c 	add.w	r1, r7, #12
 8000512:	23fa      	movs	r3, #250	; 0xfa
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <sendACK+0x9c>)
 8000516:	f004 fab9 	bl	8004a8c <HAL_UART_Transmit>
 800051a:	4603      	mov	r3, r0
 800051c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			break;
 8000520:	e000      	b.n	8000524 <sendACK+0x90>
		default:
			break;
 8000522:	bf00      	nop
	}
}
 8000524:	bf00      	nop
 8000526:	3728      	adds	r7, #40	; 0x28
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	0800adc4 	.word	0x0800adc4
 8000530:	20000194 	.word	0x20000194
 8000534:	0800add0 	.word	0x0800add0
 8000538:	0800add4 	.word	0x0800add4

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fe6c 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f874 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fa34 	bl	80009b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 fa14 	bl	8000978 <MX_DMA_Init>
  MX_I2C1_Init();
 8000550:	f000 f8d2 	bl	80006f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000554:	f000 f910 	bl	8000778 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000558:	f000 f9ec 	bl	8000934 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f9ba 	bl	80008d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000560:	f000 f948 	bl	80007f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &data_c, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	4923      	ldr	r1, [pc, #140]	; (80005f4 <main+0xb8>)
 8000568:	4823      	ldr	r0, [pc, #140]	; (80005f8 <main+0xbc>)
 800056a:	f004 fb19 	bl	8004ba0 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	4822      	ldr	r0, [pc, #136]	; (80005fc <main+0xc0>)
 8000572:	f003 fab7 	bl	8003ae4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000576:	2104      	movs	r1, #4
 8000578:	4820      	ldr	r0, [pc, #128]	; (80005fc <main+0xc0>)
 800057a:	f003 fab3 	bl	8003ae4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800057e:	2108      	movs	r1, #8
 8000580:	481e      	ldr	r0, [pc, #120]	; (80005fc <main+0xc0>)
 8000582:	f003 faaf 	bl	8003ae4 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <main+0xc0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <main+0xc0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2200      	movs	r2, #0
 8000594:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <main+0xc0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2200      	movs	r2, #0
 800059c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059e:	f005 fd15 	bl	8005fcc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of diffBufferRead */
  diffBufferReadHandle = osMutexNew(&diffBufferRead_attributes);
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <main+0xc4>)
 80005a4:	f005 fe52 	bl	800624c <osMutexNew>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <main+0xc8>)
 80005ac:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of diffRxData */
  diffRxDataHandle = osSemaphoreNew(1, 1, &diffRxData_attributes);
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <main+0xcc>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	2001      	movs	r0, #1
 80005b4:	f005 fee4 	bl	8006380 <osSemaphoreNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a14      	ldr	r2, [pc, #80]	; (800060c <main+0xd0>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* creation of dataBufferSemaphore */
  dataBufferSemaphoreHandle = osSemaphoreNew(1, 1, &dataBufferSemaphore_attributes);
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <main+0xd4>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	2001      	movs	r0, #1
 80005c4:	f005 fedc 	bl	8006380 <osSemaphoreNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0xd8>)
 80005cc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <main+0xdc>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0xe0>)
 80005d4:	f005 fd62 	bl	800609c <osThreadNew>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <main+0xe4>)
 80005dc:	6013      	str	r3, [r2, #0]

  /* creation of uartRxDiff */
  uartRxDiffHandle = osThreadNew(uartRxDiff_f, NULL, &uartRxDiff_attributes);
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <main+0xe8>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <main+0xec>)
 80005e4:	f005 fd5a 	bl	800609c <osThreadNew>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <main+0xf0>)
 80005ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ee:	f005 fd21 	bl	8006034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <main+0xb6>
 80005f4:	200005f6 	.word	0x200005f6
 80005f8:	20000194 	.word	0x20000194
 80005fc:	20000148 	.word	0x20000148
 8000600:	0800ae84 	.word	0x0800ae84
 8000604:	20000554 	.word	0x20000554
 8000608:	0800ae94 	.word	0x0800ae94
 800060c:	20000558 	.word	0x20000558
 8000610:	0800aea4 	.word	0x0800aea4
 8000614:	2000055c 	.word	0x2000055c
 8000618:	0800ae3c 	.word	0x0800ae3c
 800061c:	08000ab1 	.word	0x08000ab1
 8000620:	2000054c 	.word	0x2000054c
 8000624:	0800ae60 	.word	0x0800ae60
 8000628:	08000ac1 	.word	0x08000ac1
 800062c:	20000550 	.word	0x20000550

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09e      	sub	sp, #120	; 0x78
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800063a:	2228      	movs	r2, #40	; 0x28
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f009 f8b8 	bl	80097b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	223c      	movs	r2, #60	; 0x3c
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f009 f8aa 	bl	80097b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000660:	2303      	movs	r3, #3
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000684:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc06 	bl	8001e9c <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000696:	f000 fa3b 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fc2e 	bl	8002f18 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c2:	f000 fa25 	bl	8000b10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <SystemClock_Config+0xc4>)
 80006c8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fe84 	bl	80033e8 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006e6:	f000 fa13 	bl	8000b10 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3778      	adds	r7, #120	; 0x78
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	00020022 	.word	0x00020022

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_I2C1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_I2C1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_I2C1_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <MX_I2C1_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_I2C1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_I2C1_Init+0x74>)
 8000734:	f001 f9ba 	bl	8001aac <HAL_I2C_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 f9e7 	bl	8000b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <MX_I2C1_Init+0x74>)
 8000746:	f001 fa40 	bl	8001bca <HAL_I2CEx_ConfigAnalogFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 f9de 	bl	8000b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2C1_Init+0x74>)
 8000758:	f001 fa82 	bl	8001c60 <HAL_I2CEx_ConfigDigitalFilter>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 f9d5 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000090 	.word	0x20000090
 8000770:	40005400 	.word	0x40005400
 8000774:	2000090e 	.word	0x2000090e

08000778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_SPI1_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_SPI1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_SPI1_Init+0x74>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_SPI1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI1_Init+0x74>)
 8000792:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000796:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_SPI1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI1_Init+0x74>)
 80007a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI1_Init+0x74>)
 80007ae:	2208      	movs	r2, #8
 80007b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI1_Init+0x74>)
 80007c6:	2207      	movs	r2, #7
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI1_Init+0x74>)
 80007d2:	2208      	movs	r2, #8
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_SPI1_Init+0x74>)
 80007d8:	f002 ffb6 	bl	8003748 <HAL_SPI_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f995 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000e4 	.word	0x200000e4
 80007f0:	40013000 	.word	0x40013000

080007f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <MX_TIM2_Init+0xdc>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8000820:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_TIM2_Init+0xdc>)
 8000822:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000826:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <MX_TIM2_Init+0xdc>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_TIM2_Init+0xdc>)
 8000830:	2263      	movs	r2, #99	; 0x63
 8000832:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_TIM2_Init+0xdc>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_TIM2_Init+0xdc>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000840:	4823      	ldr	r0, [pc, #140]	; (80008d0 <MX_TIM2_Init+0xdc>)
 8000842:	f003 f8f7 	bl	8003a34 <HAL_TIM_PWM_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 f960 	bl	8000b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	481c      	ldr	r0, [pc, #112]	; (80008d0 <MX_TIM2_Init+0xdc>)
 8000860:	f004 f828 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800086a:	f000 f951 	bl	8000b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086e:	2360      	movs	r3, #96	; 0x60
 8000870:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <MX_TIM2_Init+0xdc>)
 8000886:	f003 fb4d 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000890:	f000 f93e 	bl	8000b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	2204      	movs	r2, #4
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_TIM2_Init+0xdc>)
 800089c:	f003 fb42 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008a6:	f000 f933 	bl	8000b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	2208      	movs	r2, #8
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM2_Init+0xdc>)
 80008b2:	f003 fb37 	bl	8003f24 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80008bc:	f000 f928 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM2_Init+0xdc>)
 80008c2:	f000 f9f7 	bl	8000cb4 <HAL_TIM_MspPostInit>

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000148 	.word	0x20000148

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART2_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000918:	f004 f86a 	bl	80049f0 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f8f5 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000194 	.word	0x20000194
 8000930:	40004400 	.word	0x40004400

08000934 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <MX_USB_PCD_Init+0x40>)
 800093c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 8000940:	2208      	movs	r2, #8
 8000942:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 8000946:	2202      	movs	r2, #2
 8000948:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 800094c:	2202      	movs	r2, #2
 800094e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 800095e:	f001 f9cb 	bl	8001cf8 <HAL_PCD_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000968:	f000 f8d2 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000260 	.word	0x20000260
 8000974:	40005c00 	.word	0x40005c00

08000978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_DMA_Init+0x38>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <MX_DMA_Init+0x38>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_DMA_Init+0x38>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	2011      	movs	r0, #17
 800099c:	f000 fd2c 	bl	80013f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009a0:	2011      	movs	r0, #17
 80009a2:	f000 fd45 	bl	8001430 <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 80009d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d4:	6153      	str	r3, [r2, #20]
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a30      	ldr	r2, [pc, #192]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 80009e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ec:	6153      	str	r3, [r2, #20]
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a04:	6153      	str	r3, [r2, #20]
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	4a24      	ldr	r2, [pc, #144]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	6153      	str	r3, [r2, #20]
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0xf4>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a42:	2200      	movs	r2, #0
 8000a44:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000a48:	4818      	ldr	r0, [pc, #96]	; (8000aac <MX_GPIO_Init+0xf8>)
 8000a4a:	f001 f817 	bl	8001a7c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000a4e:	2337      	movs	r3, #55	; 0x37
 8000a50:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a52:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <MX_GPIO_Init+0xf8>)
 8000a64:	f000 fe90 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a68:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000a6c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480a      	ldr	r0, [pc, #40]	; (8000aac <MX_GPIO_Init+0xf8>)
 8000a82:	f000 fe81 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a86:	2301      	movs	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fe74 	bl	8001788 <HAL_GPIO_Init>

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	48001000 	.word	0x48001000

08000ab0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
//		osMutexAcquire(diffBufferReadHandle, portMAX_DELAY);
//		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//		osMutexRelease(diffBufferReadHandle);
//	}
//	osMutexAcquire(mutex_id, timeout)
    osDelay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f005 fb99 	bl	80061f0 <osDelay>
 8000abe:	e7fb      	b.n	8000ab8 <StartDefaultTask+0x8>

08000ac0 <uartRxDiff_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartRxDiff_f */
void uartRxDiff_f(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0a8      	sub	sp, #160	; 0xa0
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartRxDiff_f */
  /* Infinite loop */
  char d[150];
  for(;;)
  {
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <uartRxDiff_f+0x24>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f005 fcf1 	bl	80064b8 <osSemaphoreAcquire>
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);

	addToHandler(data);
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <uartRxDiff_f+0x28>)
 8000ad8:	f7ff fcb4 	bl	8000444 <addToHandler>
//	if (data_c == '\r') {
//		data_c_idx = 0;
//		data[data_c_idx] = '\0';
////		HAL_UART_Transmit_DMA(&huart2, data, strlen(data));
//	}
    osDelay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f005 fb87 	bl	80061f0 <osDelay>
	osSemaphoreAcquire(diffRxDataHandle, portMAX_DELAY);
 8000ae2:	e7f1      	b.n	8000ac8 <uartRxDiff_f+0x8>
 8000ae4:	20000558 	.word	0x20000558
 8000ae8:	20000560 	.word	0x20000560

08000aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afe:	f000 fba3 	bl	8001248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40012c00 	.word	0x40012c00

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210f      	movs	r1, #15
 8000b56:	f06f 0001 	mvn.w	r0, #1
 8000b5a:	f000 fc4d 	bl	80013f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_I2C_MspInit+0x7c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d127      	bne.n	8000bde <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_I2C_MspInit+0x80>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <HAL_I2C_MspInit+0x80>)
 8000b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b98:	6153      	str	r3, [r2, #20]
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_I2C_MspInit+0x80>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000ba6:	23c0      	movs	r3, #192	; 0xc0
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000baa:	2312      	movs	r3, #18
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <HAL_I2C_MspInit+0x84>)
 8000bc2:	f000 fde1 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_I2C_MspInit+0x80>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_I2C_MspInit+0x80>)
 8000bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_I2C_MspInit+0x80>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40005400 	.word	0x40005400
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000400 	.word	0x48000400

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_SPI_MspInit+0x7c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d128      	bne.n	8000c68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_SPI_MspInit+0x80>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000c46:	23e0      	movs	r3, #224	; 0xe0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c56:	2305      	movs	r3, #5
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fd90 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c88:	d10b      	bne.n	8000ca2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_TIM_PWM_MspInit+0x38>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_TIM_PWM_MspInit+0x38>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_TIM_PWM_MspInit+0x38>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd4:	d13a      	bne.n	8000d4c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_TIM_MspPostInit+0xa0>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_TIM_MspPostInit+0xa0>)
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_TIM_MspPostInit+0xa0>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_TIM_MspPostInit+0xa0>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <HAL_TIM_MspPostInit+0xa0>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_TIM_MspPostInit+0xa0>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000d06:	f248 0302 	movw	r3, #32770	; 0x8002
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f000 fd2f 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <HAL_TIM_MspPostInit+0xa4>)
 8000d48:	f000 fd1e 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <HAL_UART_MspInit+0xdc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d157      	bne.n	8000e2e <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <HAL_UART_MspInit+0xe0>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a2e      	ldr	r2, [pc, #184]	; (8000e3c <HAL_UART_MspInit+0xe0>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_UART_MspInit+0xe0>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_UART_MspInit+0xe0>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <HAL_UART_MspInit+0xe0>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_UART_MspInit+0xe0>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dae:	230c      	movs	r3, #12
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f000 fcdc 	bl	8001788 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <HAL_UART_MspInit+0xe8>)
 8000dd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000dd8:	2210      	movs	r2, #16
 8000dda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000dfc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000e04:	f000 fb22 	bl	800144c <HAL_DMA_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000e0e:	f7ff fe7f 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000e16:	671a      	str	r2, [r3, #112]	; 0x70
 8000e18:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <HAL_UART_MspInit+0xe4>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	2026      	movs	r0, #38	; 0x26
 8000e24:	f000 fae8 	bl	80013f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e28:	2026      	movs	r0, #38	; 0x26
 8000e2a:	f000 fb01 	bl	8001430 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	2000021c 	.word	0x2000021c
 8000e44:	40020080 	.word	0x40020080

08000e48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <HAL_PCD_MspInit+0x80>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d129      	bne.n	8000ebe <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_PCD_MspInit+0x84>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_PCD_MspInit+0x84>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_PCD_MspInit+0x84>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000e82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e94:	230e      	movs	r3, #14
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f000 fc71 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_PCD_MspInit+0x84>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_PCD_MspInit+0x84>)
 8000eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_PCD_MspInit+0x84>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40005c00 	.word	0x40005c00
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee0:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <HAL_InitTick+0xcc>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a2d      	ldr	r2, [pc, #180]	; (8000f9c <HAL_InitTick+0xcc>)
 8000ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_InitTick+0xcc>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 fa3e 	bl	8003384 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f08:	f002 fa1a 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8000f0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <HAL_InitTick+0xd0>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9b      	lsrs	r3, r3, #18
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_InitTick+0xd4>)
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_InitTick+0xd8>)
 8000f20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_InitTick+0xd4>)
 8000f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <HAL_InitTick+0xd4>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_InitTick+0xd4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_InitTick+0xd4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_InitTick+0xd4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <HAL_InitTick+0xd4>)
 8000f44:	f002 fcab 	bl	800389e <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d11b      	bne.n	8000f8e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <HAL_InitTick+0xd4>)
 8000f58:	f002 fd02 	bl	8003960 <HAL_TIM_Base_Start_IT>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d111      	bne.n	8000f8e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f000 fa60 	bl	8001430 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d808      	bhi.n	8000f88 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000f76:	2200      	movs	r2, #0
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	2019      	movs	r0, #25
 8000f7c:	f000 fa3c 	bl	80013f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_InitTick+0xdc>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e002      	b.n	8000f8e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3730      	adds	r7, #48	; 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	200005f8 	.word	0x200005f8
 8000fa8:	40012c00 	.word	0x40012c00
 8000fac:	20000004 	.word	0x20000004

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA1_Channel7_IRQHandler+0x10>)
 8000fe2:	f000 faf1 	bl	80015c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000021c 	.word	0x2000021c

08000ff0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ff6:	f002 fe75 	bl	8003ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200005f8 	.word	0x200005f8

08001004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <USART2_IRQHandler+0x10>)
 800100a:	f003 fe0d 	bl	8004c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000194 	.word	0x20000194

08001018 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return 1;
 800101c:	2301      	movs	r3, #1
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_kill>:

int _kill(int pid, int sig)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001032:	f008 fb87 	bl	8009744 <__errno>
 8001036:	4603      	mov	r3, r0
 8001038:	2216      	movs	r2, #22
 800103a:	601a      	str	r2, [r3, #0]
  return -1;
 800103c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_exit>:

void _exit (int status)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ffe7 	bl	8001028 <_kill>
  while (1) {}    /* Make sure we hang here */
 800105a:	e7fe      	b.n	800105a <_exit+0x12>

0800105c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e00a      	b.n	8001084 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800106e:	f3af 8000 	nop.w
 8001072:	4601      	mov	r1, r0
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	b2ca      	uxtb	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbf0      	blt.n	800106e <_read+0x12>
  }

  return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e009      	b.n	80010bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	60ba      	str	r2, [r7, #8]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf1      	blt.n	80010a8 <_write+0x12>
  }
  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_close>:

int _close(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f6:	605a      	str	r2, [r3, #4]
  return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_isatty>:

int _isatty(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f008 faec 	bl	8009744 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000a000 	.word	0x2000a000
 8001198:	00000400 	.word	0x00000400
 800119c:	20000644 	.word	0x20000644
 80011a0:	20001fa8 	.word	0x20001fa8

080011a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011cc:	f7ff ffea 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	; (8001208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <LoopForever+0xe>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	; (8001214 <LoopForever+0x16>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f008 faab 	bl	8009750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fa:	f7ff f99f 	bl	800053c <main>

080011fe <LoopForever>:

LoopForever:
    b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001200:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800120c:	0800b13c 	.word	0x0800b13c
  ldr r2, =_sbss
 8001210:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001214:	20001fa4 	.word	0x20001fa4

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>
	...

0800121c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x28>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x28>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f8d8 	bl	80013e2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	200f      	movs	r0, #15
 8001234:	f7ff fe4c 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fc70 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008
 800126c:	20000648 	.word	0x20000648

08001270 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;  
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000648 	.word	0x20000648

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff4c 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140a:	f7ff ff61 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800140e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	6978      	ldr	r0, [r7, #20]
 8001416:	f7ff ffb1 	bl	800137c <NVIC_EncodePriority>
 800141a:	4602      	mov	r2, r0
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff80 	bl	8001328 <__NVIC_SetPriority>
}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff54 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e037      	b.n	80014d2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2202      	movs	r2, #2
 8001466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001478:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800147c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f92b 	bl	8001710 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}  
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d008      	beq.n	80014fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2204      	movs	r2, #4
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e020      	b.n	8001540 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 020e 	bic.w	r2, r2, #14
 800150c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800155e:	2b02      	cmp	r3, #2
 8001560:	d005      	beq.n	800156e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2204      	movs	r2, #4
 8001566:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e027      	b.n	80015be <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 020e 	bic.w	r2, r2, #14
 800157c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	4798      	blx	r3
    } 
  }
  return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2204      	movs	r2, #4
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d024      	beq.n	800163a <HAL_DMA_IRQHandler+0x72>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01f      	beq.n	800163a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0204 	bic.w	r2, r2, #4
 8001616:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001620:	2104      	movs	r1, #4
 8001622:	fa01 f202 	lsl.w	r2, r1, r2
 8001626:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d06a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001638:	e065      	b.n	8001706 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2202      	movs	r2, #2
 8001640:	409a      	lsls	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d02c      	beq.n	80016a4 <HAL_DMA_IRQHandler+0xdc>
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d027      	beq.n	80016a4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10b      	bne.n	800167a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 020a 	bic.w	r2, r2, #10
 8001670:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001682:	2102      	movs	r1, #2
 8001684:	fa01 f202 	lsl.w	r2, r1, r2
 8001688:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	2b00      	cmp	r3, #0
 8001698:	d035      	beq.n	8001706 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80016a2:	e030      	b.n	8001706 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	2208      	movs	r2, #8
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d028      	beq.n	8001706 <HAL_DMA_IRQHandler+0x13e>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d023      	beq.n	8001706 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020e 	bic.w	r2, r2, #14
 80016cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
    }
  }
}  
 8001704:	e7ff      	b.n	8001706 <HAL_DMA_IRQHandler+0x13e>
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <DMA_CalcBaseAndBitshift+0x60>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d80f      	bhi.n	8001744 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <DMA_CalcBaseAndBitshift+0x64>)
 800172c:	4413      	add	r3, r2
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <DMA_CalcBaseAndBitshift+0x68>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	009a      	lsls	r2, r3, #2
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <DMA_CalcBaseAndBitshift+0x6c>)
 8001740:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001742:	e00e      	b.n	8001762 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <DMA_CalcBaseAndBitshift+0x70>)
 800174c:	4413      	add	r3, r2
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <DMA_CalcBaseAndBitshift+0x68>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	009a      	lsls	r2, r3, #2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <DMA_CalcBaseAndBitshift+0x74>)
 8001760:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40020407 	.word	0x40020407
 8001774:	bffdfff8 	.word	0xbffdfff8
 8001778:	cccccccd 	.word	0xcccccccd
 800177c:	40020000 	.word	0x40020000
 8001780:	bffdfbf8 	.word	0xbffdfbf8
 8001784:	40020400 	.word	0x40020400

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	e154      	b.n	8001a42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8146 	beq.w	8001a3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d005      	beq.n	80017c8 <HAL_GPIO_Init+0x40>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d130      	bne.n	800182a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fe:	2201      	movs	r2, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 0201 	and.w	r2, r3, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d017      	beq.n	8001866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d123      	bne.n	80018ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	6939      	ldr	r1, [r7, #16]
 80018b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0203 	and.w	r2, r3, #3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80a0 	beq.w	8001a3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_GPIO_Init+0x2d8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_GPIO_Init+0x2d8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b55      	ldr	r3, [pc, #340]	; (8001a60 <HAL_GPIO_Init+0x2d8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001914:	4a53      	ldr	r2, [pc, #332]	; (8001a64 <HAL_GPIO_Init+0x2dc>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800193e:	d019      	beq.n	8001974 <HAL_GPIO_Init+0x1ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_GPIO_Init+0x2e0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d013      	beq.n	8001970 <HAL_GPIO_Init+0x1e8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a48      	ldr	r2, [pc, #288]	; (8001a6c <HAL_GPIO_Init+0x2e4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00d      	beq.n	800196c <HAL_GPIO_Init+0x1e4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_Init+0x1e0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <HAL_GPIO_Init+0x2ec>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_GPIO_Init+0x1dc>
 8001960:	2304      	movs	r3, #4
 8001962:	e008      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001964:	2305      	movs	r3, #5
 8001966:	e006      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001968:	2303      	movs	r3, #3
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001974:	2300      	movs	r3, #0
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001986:	4937      	ldr	r1, [pc, #220]	; (8001a64 <HAL_GPIO_Init+0x2dc>)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019b8:	4a2f      	ldr	r2, [pc, #188]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019e2:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a0c:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f47f aea3 	bne.w	8001798 <HAL_GPIO_Init+0x10>
  }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	48000800 	.word	0x48000800
 8001a70:	48000c00 	.word	0x48000c00
 8001a74:	48001000 	.word	0x48001000
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e081      	b.n	8001bc2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff f84a 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2224      	movs	r2, #36	; 0x24
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001afc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	e006      	b.n	8001b34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d104      	bne.n	8001b46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69d9      	ldr	r1, [r3, #28]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1a      	ldr	r2, [r3, #32]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d138      	bne.n	8001c52 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e032      	b.n	8001c54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2224      	movs	r2, #36	; 0x24
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c1c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
  }
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d139      	bne.n	8001cea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e033      	b.n	8001cec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cb2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af06      	add	r7, sp, #24
 8001cfe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0c4      	b.n	8001e94 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff f892 	bl	8000e48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 f90f 	bl	8005f54 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e040      	b.n	8001dbe <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	3303      	adds	r3, #3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3338      	adds	r3, #56	; 0x38
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	333c      	adds	r3, #60	; 0x3c
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	3340      	adds	r3, #64	; 0x40
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3b9      	bcc.n	8001d3c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e044      	b.n	8001e58 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	3301      	adds	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3b5      	bcc.n	8001dce <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	687e      	ldr	r6, [r7, #4]
 8001e6a:	466d      	mov	r5, sp
 8001e6c:	f106 0410 	add.w	r4, r6, #16
 8001e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	602b      	str	r3, [r5, #0]
 8001e78:	1d33      	adds	r3, r6, #4
 8001e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7c:	6838      	ldr	r0, [r7, #0]
 8001e7e:	f004 f884 	bl	8005f8a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f001 b823 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 817d 	beq.w	80021d2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ed8:	4bbc      	ldr	r3, [pc, #752]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee4:	4bb9      	ldr	r3, [pc, #740]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d15c      	bne.n	8001faa <HAL_RCC_OscConfig+0x10e>
 8001ef0:	4bb6      	ldr	r3, [pc, #728]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d155      	bne.n	8001faa <HAL_RCC_OscConfig+0x10e>
 8001efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_OscConfig+0x94>
 8001f2a:	4ba8      	ldr	r3, [pc, #672]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	e015      	b.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f58:	4b9c      	ldr	r3, [pc, #624]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f68:	fa92 f2a2 	rbit	r2, r2
 8001f6c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f70:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f042 0220 	orr.w	r2, r2, #32
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f002 021f 	and.w	r2, r2, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 811f 	beq.w	80021d0 <HAL_RCC_OscConfig+0x334>
 8001f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8116 	bne.w	80021d0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f000 bfaf 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x12e>
 8001fbc:	4b83      	ldr	r3, [pc, #524]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a82      	ldr	r2, [pc, #520]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e036      	b.n	8002038 <HAL_RCC_OscConfig+0x19c>
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x158>
 8001fda:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7b      	ldr	r2, [pc, #492]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b79      	ldr	r3, [pc, #484]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a78      	ldr	r2, [pc, #480]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e021      	b.n	8002038 <HAL_RCC_OscConfig+0x19c>
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x184>
 8002006:	4b71      	ldr	r3, [pc, #452]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a70      	ldr	r2, [pc, #448]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6e      	ldr	r3, [pc, #440]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6d      	ldr	r2, [pc, #436]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x19c>
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a69      	ldr	r2, [pc, #420]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b67      	ldr	r3, [pc, #412]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a66      	ldr	r2, [pc, #408]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002036:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002038:	4b64      	ldr	r3, [pc, #400]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	f023 020f 	bic.w	r2, r3, #15
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	495f      	ldr	r1, [pc, #380]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 800204e:	4313      	orrs	r3, r2
 8002050:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d059      	beq.n	8002116 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7ff f905 	bl	8001270 <HAL_GetTick>
 8002066:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff f900 	bl	8001270 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b64      	cmp	r3, #100	; 0x64
 800207a:	d902      	bls.n	8002082 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	f000 bf43 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>
 8002082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002086:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002096:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x218>
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e015      	b.n	80020e0 <HAL_RCC_OscConfig+0x244>
 80020b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020cc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020e4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f002 021f 	and.w	r2, r2, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ab      	beq.n	800206c <HAL_RCC_OscConfig+0x1d0>
 8002114:	e05d      	b.n	80021d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7ff f8ab 	bl	8001270 <HAL_GetTick>
 800211a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff f8a6 	bl	8001270 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b64      	cmp	r3, #100	; 0x64
 800212e:	d902      	bls.n	8002136 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	f000 bee9 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>
 8002136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800214a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <HAL_RCC_OscConfig+0x2cc>
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	e015      	b.n	8002194 <HAL_RCC_OscConfig+0x2f8>
 8002168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800217c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002180:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002184:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_RCC_OscConfig+0x330>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002198:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800219c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021a0:	fa92 f2a2 	rbit	r2, r2
 80021a4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80021a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f042 0220 	orr.w	r2, r2, #32
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f002 021f 	and.w	r2, r2, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ab      	bne.n	8002120 <HAL_RCC_OscConfig+0x284>
 80021c8:	e003      	b.n	80021d2 <HAL_RCC_OscConfig+0x336>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 817d 	beq.w	80024e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021e8:	4ba6      	ldr	r3, [pc, #664]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021f4:	4ba3      	ldr	r3, [pc, #652]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d172      	bne.n	80022e6 <HAL_RCC_OscConfig+0x44a>
 8002200:	4ba0      	ldr	r3, [pc, #640]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d16c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x44a>
 800220c:	2302      	movs	r3, #2
 800220e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800221e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0x3a0>
 8002236:	4b93      	ldr	r3, [pc, #588]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e013      	b.n	8002264 <HAL_RCC_OscConfig+0x3c8>
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800224e:	2302      	movs	r3, #2
 8002250:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002254:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002260:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2202      	movs	r2, #2
 8002266:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800226a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800226e:	fa92 f2a2 	rbit	r2, r2
 8002272:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002276:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f042 0220 	orr.w	r2, r2, #32
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f002 021f 	and.w	r2, r2, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCC_OscConfig+0x410>
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f000 be2e 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b75      	ldr	r3, [pc, #468]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	21f8      	movs	r1, #248	; 0xf8
 80022c2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022ca:	fa91 f1a1 	rbit	r1, r1
 80022ce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022d2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022d6:	fab1 f181 	clz	r1, r1
 80022da:	b2c9      	uxtb	r1, r1
 80022dc:	408b      	lsls	r3, r1
 80022de:	4969      	ldr	r1, [pc, #420]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e4:	e0fd      	b.n	80024e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8088 	beq.w	8002408 <HAL_RCC_OscConfig+0x56c>
 80022f8:	2301      	movs	r3, #1
 80022fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800230a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	461a      	mov	r2, r3
 8002320:	2301      	movs	r3, #1
 8002322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe ffa4 	bl	8001270 <HAL_GetTick>
 8002328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232e:	f7fe ff9f 	bl	8001270 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d902      	bls.n	8002344 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	f000 bde2 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>
 8002344:	2302      	movs	r3, #2
 8002346:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002356:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_RCC_OscConfig+0x4d8>
 800236e:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	e013      	b.n	800239c <HAL_RCC_OscConfig+0x500>
 8002374:	2302      	movs	r3, #2
 8002376:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800238c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002398:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	2202      	movs	r2, #2
 800239e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80023a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023a6:	fa92 f2a2 	rbit	r2, r2
 80023aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80023ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023b2:	fab2 f282 	clz	r2, r2
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f042 0220 	orr.w	r2, r2, #32
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f002 021f 	and.w	r2, r2, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0af      	beq.n	800232e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	21f8      	movs	r1, #248	; 0xf8
 80023e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023ec:	fa91 f1a1 	rbit	r1, r1
 80023f0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023f8:	fab1 f181 	clz	r1, r1
 80023fc:	b2c9      	uxtb	r1, r1
 80023fe:	408b      	lsls	r3, r1
 8002400:	4920      	ldr	r1, [pc, #128]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
 8002406:	e06c      	b.n	80024e2 <HAL_RCC_OscConfig+0x646>
 8002408:	2301      	movs	r3, #1
 800240a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800241a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002428:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	461a      	mov	r2, r3
 8002430:	2300      	movs	r3, #0
 8002432:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe ff1c 	bl	8001270 <HAL_GetTick>
 8002438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe ff17 	bl	8001270 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d902      	bls.n	8002454 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	f000 bd5a 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>
 8002454:	2302      	movs	r3, #2
 8002456:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d104      	bne.n	8002488 <HAL_RCC_OscConfig+0x5ec>
 800247e:	4b01      	ldr	r3, [pc, #4]	; (8002484 <HAL_RCC_OscConfig+0x5e8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e015      	b.n	80024b0 <HAL_RCC_OscConfig+0x614>
 8002484:	40021000 	.word	0x40021000
 8002488:	2302      	movs	r3, #2
 800248a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024ac:	4bc8      	ldr	r3, [pc, #800]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	2202      	movs	r2, #2
 80024b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024ba:	fa92 f2a2 	rbit	r2, r2
 80024be:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024c6:	fab2 f282 	clz	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f042 0220 	orr.w	r2, r2, #32
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f002 021f 	and.w	r2, r2, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ad      	bne.n	800243e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8110 	beq.w	8002718 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d079      	beq.n	80025fc <HAL_RCC_OscConfig+0x760>
 8002508:	2301      	movs	r3, #1
 800250a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800251a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	4bab      	ldr	r3, [pc, #684]	; (80027d4 <HAL_RCC_OscConfig+0x938>)
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	461a      	mov	r2, r3
 800252e:	2301      	movs	r3, #1
 8002530:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe fe9d 	bl	8001270 <HAL_GetTick>
 8002536:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253c:	f7fe fe98 	bl	8001270 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d902      	bls.n	8002552 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	f000 bcdb 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ac:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 80025ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025b8:	2102      	movs	r1, #2
 80025ba:	6019      	str	r1, [r3, #0]
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	fa93 f1a3 	rbit	r1, r3
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025d2:	6019      	str	r1, [r3, #0]
  return result;
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0a0      	beq.n	800253c <HAL_RCC_OscConfig+0x6a0>
 80025fa:	e08d      	b.n	8002718 <HAL_RCC_OscConfig+0x87c>
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800261e:	601a      	str	r2, [r3, #0]
  return result;
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002628:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_OscConfig+0x938>)
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	461a      	mov	r2, r3
 800263a:	2300      	movs	r3, #0
 800263c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe fe17 	bl	8001270 <HAL_GetTick>
 8002642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002646:	e00a      	b.n	800265e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe fe12 	bl	8001270 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d902      	bls.n	800265e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	f000 bc55 	b.w	8002f08 <HAL_RCC_OscConfig+0x106c>
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002666:	2202      	movs	r2, #2
 8002668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026ae:	2202      	movs	r2, #2
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 80026cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026d6:	2102      	movs	r1, #2
 80026d8:	6019      	str	r1, [r3, #0]
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f1a3 	rbit	r1, r3
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026f0:	6019      	str	r1, [r3, #0]
  return result;
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d197      	bne.n	8002648 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 81a1 	beq.w	8002a70 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002734:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d116      	bne.n	800276e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274a:	61d3      	str	r3, [r2, #28]
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002766:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_RCC_OscConfig+0x93c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11a      	bne.n	80027b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_RCC_OscConfig+0x93c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_RCC_OscConfig+0x93c>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe fd73 	bl	8001270 <HAL_GetTick>
 800278a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	e009      	b.n	80027a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002790:	f7fe fd6e 	bl	8001270 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	; 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e3b1      	b.n	8002f08 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RCC_OscConfig+0x93c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ef      	beq.n	8002790 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10d      	bne.n	80027dc <HAL_RCC_OscConfig+0x940>
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a02      	ldr	r2, [pc, #8]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	e03c      	b.n	8002848 <HAL_RCC_OscConfig+0x9ac>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	10908120 	.word	0x10908120
 80027d8:	40007000 	.word	0x40007000
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10c      	bne.n	8002806 <HAL_RCC_OscConfig+0x96a>
 80027ec:	4bc1      	ldr	r3, [pc, #772]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4ac0      	ldr	r2, [pc, #768]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6213      	str	r3, [r2, #32]
 80027f8:	4bbe      	ldr	r3, [pc, #760]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4abd      	ldr	r2, [pc, #756]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 80027fe:	f023 0304 	bic.w	r3, r3, #4
 8002802:	6213      	str	r3, [r2, #32]
 8002804:	e020      	b.n	8002848 <HAL_RCC_OscConfig+0x9ac>
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x994>
 8002816:	4bb7      	ldr	r3, [pc, #732]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4ab6      	ldr	r2, [pc, #728]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	4bb4      	ldr	r3, [pc, #720]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4ab3      	ldr	r2, [pc, #716]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6213      	str	r3, [r2, #32]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0x9ac>
 8002830:	4bb0      	ldr	r3, [pc, #704]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4aaf      	ldr	r2, [pc, #700]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	4bad      	ldr	r3, [pc, #692]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4aac      	ldr	r2, [pc, #688]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8081 	beq.w	800295c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7fe fd09 	bl	8001270 <HAL_GetTick>
 800285e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe fd04 	bl	8001270 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e345      	b.n	8002f08 <HAL_RCC_OscConfig+0x106c>
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002884:	2202      	movs	r2, #2
 8002886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fa93 f2a3 	rbit	r2, r3
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028a8:	2202      	movs	r2, #2
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028c2:	601a      	str	r2, [r3, #0]
  return result;
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d102      	bne.n	80028e8 <HAL_RCC_OscConfig+0xa4c>
 80028e2:	4b84      	ldr	r3, [pc, #528]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	e013      	b.n	8002910 <HAL_RCC_OscConfig+0xa74>
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002914:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002918:	2102      	movs	r1, #2
 800291a:	6011      	str	r1, [r2, #0]
 800291c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002920:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	fa92 f1a2 	rbit	r1, r2
 800292a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800292e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002932:	6011      	str	r1, [r2, #0]
  return result;
 8002934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002938:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	fab2 f282 	clz	r2, r2
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	f002 021f 	and.w	r2, r2, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f202 	lsl.w	r2, r1, r2
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d084      	beq.n	8002864 <HAL_RCC_OscConfig+0x9c8>
 800295a:	e07f      	b.n	8002a5c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295c:	f7fe fc88 	bl	8001270 <HAL_GetTick>
 8002960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	e00b      	b.n	800297e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe fc83 	bl	8001270 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e2c4      	b.n	8002f08 <HAL_RCC_OscConfig+0x106c>
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002986:	2202      	movs	r2, #2
 8002988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029c4:	601a      	str	r2, [r3, #0]
  return result;
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_OscConfig+0xb4e>
 80029e4:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	e013      	b.n	8002a12 <HAL_RCC_OscConfig+0xb76>
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	6011      	str	r1, [r2, #0]
 8002a1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	fa92 f1a2 	rbit	r1, r2
 8002a2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a30:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a34:	6011      	str	r1, [r2, #0]
  return result;
 8002a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f002 021f 	and.w	r2, r2, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d184      	bne.n	8002966 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a5c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8242 	beq.w	8002f06 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_RCC_OscConfig+0xc58>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	f000 8213 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	f040 8162 	bne.w	8002d66 <HAL_RCC_OscConfig+0xeca>
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002aaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	fa93 f2a3 	rbit	r2, r3
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ac6:	601a      	str	r2, [r3, #0]
  return result;
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ad0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002adc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fbc2 	bl	8001270 <HAL_GetTick>
 8002aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af0:	e00c      	b.n	8002b0c <HAL_RCC_OscConfig+0xc70>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fbba 	bl	8001270 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1fd      	b.n	8002f08 <HAL_RCC_OscConfig+0x106c>
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fa93 f2a3 	rbit	r2, r3
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b30:	601a      	str	r2, [r3, #0]
  return result;
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d102      	bne.n	8002b56 <HAL_RCC_OscConfig+0xcba>
 8002b50:	4bb0      	ldr	r3, [pc, #704]	; (8002e14 <HAL_RCC_OscConfig+0xf78>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	e027      	b.n	8002ba6 <HAL_RCC_OscConfig+0xd0a>
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	fa93 f2a3 	rbit	r2, r3
 8002b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <HAL_RCC_OscConfig+0xf78>)
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002baa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002bae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bb2:	6011      	str	r1, [r2, #0]
 8002bb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	fa92 f1a2 	rbit	r1, r2
 8002bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bca:	6011      	str	r1, [r2, #0]
  return result;
 8002bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	fab2 f282 	clz	r2, r2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f042 0220 	orr.w	r2, r2, #32
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f002 021f 	and.w	r2, r2, #31
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d182      	bne.n	8002af8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_OscConfig+0xf78>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	497f      	ldr	r1, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0xf78>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c3e:	601a      	str	r2, [r3, #0]
  return result;
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c48:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fb06 	bl	8001270 <HAL_GetTick>
 8002c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c68:	e009      	b.n	8002c7e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe fb01 	bl	8001270 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e144      	b.n	8002f08 <HAL_RCC_OscConfig+0x106c>
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ca2:	601a      	str	r2, [r3, #0]
  return result;
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xe2c>
 8002cc2:	4b54      	ldr	r3, [pc, #336]	; (8002e14 <HAL_RCC_OscConfig+0xf78>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e027      	b.n	8002d18 <HAL_RCC_OscConfig+0xe7c>
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fa93 f2a3 	rbit	r2, r3
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCC_OscConfig+0xf78>)
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d24:	6011      	str	r1, [r2, #0]
 8002d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	fa92 f1a2 	rbit	r1, r2
 8002d34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d38:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d3c:	6011      	str	r1, [r2, #0]
  return result;
 8002d3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d42:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f002 021f 	and.w	r2, r2, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d082      	beq.n	8002c6a <HAL_RCC_OscConfig+0xdce>
 8002d64:	e0cf      	b.n	8002f06 <HAL_RCC_OscConfig+0x106a>
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002da0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	461a      	mov	r2, r3
 8002da8:	2300      	movs	r3, #0
 8002daa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fa60 	bl	8001270 <HAL_GetTick>
 8002db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	e009      	b.n	8002dca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe fa5b 	bl	8001270 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e09e      	b.n	8002f08 <HAL_RCC_OscConfig+0x106c>
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dee:	601a      	str	r2, [r3, #0]
  return result;
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d104      	bne.n	8002e18 <HAL_RCC_OscConfig+0xf7c>
 8002e0e:	4b01      	ldr	r3, [pc, #4]	; (8002e14 <HAL_RCC_OscConfig+0xf78>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	e029      	b.n	8002e68 <HAL_RCC_OscConfig+0xfcc>
 8002e14:	40021000 	.word	0x40021000
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0x1078>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e6c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	fa92 f1a2 	rbit	r1, r2
 8002e84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e88:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e8c:	6011      	str	r1, [r2, #0]
  return result;
 8002e8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e92:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	fab2 f282 	clz	r2, r2
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f042 0220 	orr.w	r2, r2, #32
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f002 021f 	and.w	r2, r2, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d180      	bne.n	8002db6 <HAL_RCC_OscConfig+0xf1a>
 8002eb4:	e027      	b.n	8002f06 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e01e      	b.n	8002f08 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_OscConfig+0x1078>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ed2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ed6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d10b      	bne.n	8002f02 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002eea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b09e      	sub	sp, #120	; 0x78
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e162      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b90      	ldr	r3, [pc, #576]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d910      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b8d      	ldr	r3, [pc, #564]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 0207 	bic.w	r2, r3, #7
 8002f46:	498b      	ldr	r1, [pc, #556]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b89      	ldr	r3, [pc, #548]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e14a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	497f      	ldr	r1, [pc, #508]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80dc 	beq.w	8003144 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d13c      	bne.n	800300e <HAL_RCC_ClockConfig+0xf6>
 8002f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xa6>
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e00f      	b.n	8002fde <HAL_RCC_ClockConfig+0xc6>
 8002fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	667b      	str	r3, [r7, #100]	; 0x64
 8002fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fda:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fe2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fe6:	fa92 f2a2 	rbit	r2, r2
 8002fea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fee:	fab2 f282 	clz	r2, r2
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f042 0220 	orr.w	r2, r2, #32
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f002 021f 	and.w	r2, r2, #31
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f202 	lsl.w	r2, r1, r2
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d17b      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0f3      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d13c      	bne.n	8003090 <HAL_RCC_ClockConfig+0x178>
 8003016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_RCC_ClockConfig+0x128>
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e00f      	b.n	8003060 <HAL_RCC_ClockConfig+0x148>
 8003040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003044:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
 800304e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003052:	643b      	str	r3, [r7, #64]	; 0x40
 8003054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003064:	63ba      	str	r2, [r7, #56]	; 0x38
 8003066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003068:	fa92 f2a2 	rbit	r2, r2
 800306c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800306e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f042 0220 	orr.w	r2, r2, #32
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	f002 021f 	and.w	r2, r2, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f202 	lsl.w	r2, r1, r2
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d13a      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b2      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
 8003090:	2302      	movs	r3, #2
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x1a0>
 80030b2:	4b31      	ldr	r3, [pc, #196]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e00d      	b.n	80030d4 <HAL_RCC_ClockConfig+0x1bc>
 80030b8:	2302      	movs	r3, #2
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	2302      	movs	r3, #2
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2202      	movs	r2, #2
 80030d6:	61ba      	str	r2, [r7, #24]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	fa92 f2a2 	rbit	r2, r2
 80030de:	617a      	str	r2, [r7, #20]
  return result;
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	fab2 f282 	clz	r2, r2
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f002 021f 	and.w	r2, r2, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e079      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	491a      	ldr	r1, [pc, #104]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7fe f8ac 	bl	8001270 <HAL_GetTick>
 8003118:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe f8a8 	bl	8001270 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e061      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_ClockConfig+0x260>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d214      	bcs.n	800317c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 0207 	bic.w	r2, r3, #7
 800315a:	4906      	ldr	r1, [pc, #24]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_ClockConfig+0x25c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e040      	b.n	80031f6 <HAL_RCC_ClockConfig+0x2de>
 8003174:	40022000 	.word	0x40022000
 8003178:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	491a      	ldr	r1, [pc, #104]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4912      	ldr	r1, [pc, #72]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031ba:	f000 f829 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80031be:	4601      	mov	r1, r0
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_RCC_ClockConfig+0x2e8>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c8:	22f0      	movs	r2, #240	; 0xf0
 80031ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	fa92 f2a2 	rbit	r2, r2
 80031d2:	60fa      	str	r2, [r7, #12]
  return result;
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	fab2 f282 	clz	r2, r2
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	40d3      	lsrs	r3, r2
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x2ec>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	fa21 f303 	lsr.w	r3, r1, r3
 80031e6:	4a08      	ldr	r2, [pc, #32]	; (8003208 <HAL_RCC_ClockConfig+0x2f0>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_RCC_ClockConfig+0x2f4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fe6e 	bl	8000ed0 <HAL_InitTick>
  
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3778      	adds	r7, #120	; 0x78
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	0800aeb4 	.word	0x0800aeb4
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004

08003210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b08b      	sub	sp, #44	; 0x2c
 8003214:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	2300      	movs	r3, #0
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b04      	cmp	r3, #4
 8003238:	d002      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x30>
 800323a:	2b08      	cmp	r3, #8
 800323c:	d003      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x36>
 800323e:	e03c      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003242:	623b      	str	r3, [r7, #32]
      break;
 8003244:	e03c      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800324c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003250:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	fa92 f2a2 	rbit	r2, r2
 8003258:	607a      	str	r2, [r7, #4]
  return result;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	fab2 f282 	clz	r2, r2
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	40d3      	lsrs	r3, r2
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800326a:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	220f      	movs	r2, #15
 8003274:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	60fa      	str	r2, [r7, #12]
  return result;
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	fab2 f282 	clz	r2, r2
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	40d3      	lsrs	r3, r2
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003298:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	e004      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	623b      	str	r3, [r7, #32]
      break;
 80032b8:	e002      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032bc:	623b      	str	r3, [r7, #32]
      break;
 80032be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c0:	6a3b      	ldr	r3, [r7, #32]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	372c      	adds	r7, #44	; 0x2c
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	007a1200 	.word	0x007a1200
 80032d8:	0800aecc 	.word	0x0800aecc
 80032dc:	0800aedc 	.word	0x0800aedc
 80032e0:	003d0900 	.word	0x003d0900

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003302:	f7ff ffef 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003306:	4601      	mov	r1, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003310:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003314:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	fa92 f2a2 	rbit	r2, r2
 800331c:	603a      	str	r2, [r7, #0]
  return result;
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	40d3      	lsrs	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_RCC_GetPCLK1Freq+0x40>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	0800aec4 	.word	0x0800aec4

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003346:	f7ff ffcd 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 800334a:	4601      	mov	r1, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003354:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003358:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	fa92 f2a2 	rbit	r2, r2
 8003360:	603a      	str	r2, [r7, #0]
  return result;
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	fab2 f282 	clz	r2, r2
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	40d3      	lsrs	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x40>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	0800aec4 	.word	0x0800aec4

08003384 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	220f      	movs	r2, #15
 8003392:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCC_GetClockConfig+0x5c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0203 	and.w	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_RCC_GetClockConfig+0x5c>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_RCC_GetClockConfig+0x5c>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_GetClockConfig+0x5c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	08db      	lsrs	r3, r3, #3
 80033be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RCC_GetClockConfig+0x60>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0207 	and.w	r2, r3, #7
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	601a      	str	r2, [r3, #0]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40022000 	.word	0x40022000

080033e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b092      	sub	sp, #72	; 0x48
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80d4 	beq.w	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340c:	4b4e      	ldr	r3, [pc, #312]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10e      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	4a4a      	ldr	r2, [pc, #296]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003422:	61d3      	str	r3, [r2, #28]
 8003424:	4b48      	ldr	r3, [pc, #288]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b45      	ldr	r3, [pc, #276]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b42      	ldr	r3, [pc, #264]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a41      	ldr	r2, [pc, #260]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7fd ff0f 	bl	8001270 <HAL_GetTick>
 8003452:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e008      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003456:	f7fd ff0b 	bl	8001270 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b64      	cmp	r3, #100	; 0x64
 8003462:	d901      	bls.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e169      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003474:	4b34      	ldr	r3, [pc, #208]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800347e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8084 	beq.w	800358e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003490:	429a      	cmp	r2, r3
 8003492:	d07c      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b26      	ldr	r3, [pc, #152]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	461a      	mov	r2, r3
 80034be:	2301      	movs	r3, #1
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	461a      	mov	r2, r3
 80034e2:	2300      	movs	r3, #0
 80034e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034e6:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d04b      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fd febb 	bl	8001270 <HAL_GetTick>
 80034fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	e00a      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fd feb7 	bl	8001270 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e113      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003514:	2302      	movs	r3, #2
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	2302      	movs	r3, #2
 8003522:	623b      	str	r3, [r7, #32]
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	61fb      	str	r3, [r7, #28]
  return result;
 800352c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d108      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003542:	4b01      	ldr	r3, [pc, #4]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	e00d      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
 8003550:	10908100 	.word	0x10908100
 8003554:	2302      	movs	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	4b78      	ldr	r3, [pc, #480]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2202      	movs	r2, #2
 8003566:	613a      	str	r2, [r7, #16]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	fa92 f2a2 	rbit	r2, r2
 800356e:	60fa      	str	r2, [r7, #12]
  return result;
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	fab2 f282 	clz	r2, r2
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f002 021f 	and.w	r2, r2, #31
 8003582:	2101      	movs	r1, #1
 8003584:	fa01 f202 	lsl.w	r2, r1, r2
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0b7      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800358e:	4b6d      	ldr	r3, [pc, #436]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	496a      	ldr	r1, [pc, #424]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4a65      	ldr	r2, [pc, #404]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035c0:	4b60      	ldr	r3, [pc, #384]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f023 0203 	bic.w	r2, r3, #3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	495d      	ldr	r1, [pc, #372]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035de:	4b59      	ldr	r3, [pc, #356]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4956      	ldr	r1, [pc, #344]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035fc:	4b51      	ldr	r3, [pc, #324]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	494e      	ldr	r1, [pc, #312]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360a:	4313      	orrs	r3, r2
 800360c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800361a:	4b4a      	ldr	r3, [pc, #296]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f023 0210 	bic.w	r2, r3, #16
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4947      	ldr	r1, [pc, #284]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003638:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	493f      	ldr	r1, [pc, #252]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f023 0220 	bic.w	r2, r3, #32
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4938      	ldr	r1, [pc, #224]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003664:	4313      	orrs	r3, r2
 8003666:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003674:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	4930      	ldr	r1, [pc, #192]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003692:	4b2c      	ldr	r3, [pc, #176]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	4929      	ldr	r1, [pc, #164]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036b0:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4921      	ldr	r1, [pc, #132]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	491a      	ldr	r1, [pc, #104]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80036ec:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	4912      	ldr	r1, [pc, #72]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	490b      	ldr	r1, [pc, #44]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003718:	4313      	orrs	r3, r2
 800371a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3748      	adds	r7, #72	; 0x48
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000

08003748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e09d      	b.n	8003896 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376a:	d009      	beq.n	8003780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
 8003772:	e005      	b.n	8003780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fa2a 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037c0:	d902      	bls.n	80037c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e002      	b.n	80037ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037d6:	d007      	beq.n	80037e8 <HAL_SPI_Init+0xa0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	ea42 0103 	orr.w	r1, r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	f003 0204 	and.w	r2, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003864:	ea42 0103 	orr.w	r1, r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003884:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e049      	b.n	8003944 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f841 	bl	800394c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f000 fc5d 	bl	800419c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d001      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e04a      	b.n	8003a0e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a21      	ldr	r2, [pc, #132]	; (8003a1c <HAL_TIM_Base_Start_IT+0xbc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <HAL_TIM_Base_Start_IT+0x6c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a2:	d013      	beq.n	80039cc <HAL_TIM_Base_Start_IT+0x6c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <HAL_TIM_Base_Start_IT+0xc0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_TIM_Base_Start_IT+0x6c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <HAL_TIM_Base_Start_IT+0xc4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_TIM_Base_Start_IT+0x6c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <HAL_TIM_Base_Start_IT+0xc8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_TIM_Base_Start_IT+0x6c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <HAL_TIM_Base_Start_IT+0xcc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d115      	bne.n	80039f8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <HAL_TIM_Base_Start_IT+0xd0>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d015      	beq.n	8003a0a <HAL_TIM_Base_Start_IT+0xaa>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d011      	beq.n	8003a0a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f6:	e008      	b.n	8003a0a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e000      	b.n	8003a0c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800
 8003a28:	40013400 	.word	0x40013400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	00010007 	.word	0x00010007

08003a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e049      	b.n	8003ada <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd f90c 	bl	8000c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 fb92 	bl	800419c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x24>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e03c      	b.n	8003b82 <HAL_TIM_PWM_Start+0x9e>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d109      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x3e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e02f      	b.n	8003b82 <HAL_TIM_PWM_Start+0x9e>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d109      	bne.n	8003b3c <HAL_TIM_PWM_Start+0x58>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e022      	b.n	8003b82 <HAL_TIM_PWM_Start+0x9e>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	d109      	bne.n	8003b56 <HAL_TIM_PWM_Start+0x72>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	bf14      	ite	ne
 8003b4e:	2301      	movne	r3, #1
 8003b50:	2300      	moveq	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	e015      	b.n	8003b82 <HAL_TIM_PWM_Start+0x9e>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d109      	bne.n	8003b70 <HAL_TIM_PWM_Start+0x8c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e008      	b.n	8003b82 <HAL_TIM_PWM_Start+0x9e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e097      	b.n	8003cba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0xb6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b98:	e023      	b.n	8003be2 <HAL_TIM_PWM_Start+0xfe>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d104      	bne.n	8003baa <HAL_TIM_PWM_Start+0xc6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba8:	e01b      	b.n	8003be2 <HAL_TIM_PWM_Start+0xfe>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d104      	bne.n	8003bba <HAL_TIM_PWM_Start+0xd6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb8:	e013      	b.n	8003be2 <HAL_TIM_PWM_Start+0xfe>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b0c      	cmp	r3, #12
 8003bbe:	d104      	bne.n	8003bca <HAL_TIM_PWM_Start+0xe6>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc8:	e00b      	b.n	8003be2 <HAL_TIM_PWM_Start+0xfe>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d104      	bne.n	8003bda <HAL_TIM_PWM_Start+0xf6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd8:	e003      	b.n	8003be2 <HAL_TIM_PWM_Start+0xfe>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	6839      	ldr	r1, [r7, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fe3c 	bl	8004868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a33      	ldr	r2, [pc, #204]	; (8003cc4 <HAL_TIM_PWM_Start+0x1e0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x13e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a32      	ldr	r2, [pc, #200]	; (8003cc8 <HAL_TIM_PWM_Start+0x1e4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00e      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x13e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a30      	ldr	r2, [pc, #192]	; (8003ccc <HAL_TIM_PWM_Start+0x1e8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d009      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x13e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2f      	ldr	r2, [pc, #188]	; (8003cd0 <HAL_TIM_PWM_Start+0x1ec>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d004      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x13e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <HAL_TIM_PWM_Start+0x1f0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_PWM_Start+0x142>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_TIM_PWM_Start+0x144>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <HAL_TIM_PWM_Start+0x1e0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d018      	beq.n	8003c78 <HAL_TIM_PWM_Start+0x194>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4e:	d013      	beq.n	8003c78 <HAL_TIM_PWM_Start+0x194>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a20      	ldr	r2, [pc, #128]	; (8003cd8 <HAL_TIM_PWM_Start+0x1f4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <HAL_TIM_PWM_Start+0x194>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_TIM_PWM_Start+0x1f8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d009      	beq.n	8003c78 <HAL_TIM_PWM_Start+0x194>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_TIM_PWM_Start+0x1e4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_TIM_PWM_Start+0x194>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_TIM_PWM_Start+0x1e8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d115      	bne.n	8003ca4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <HAL_TIM_PWM_Start+0x1fc>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d015      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0x1d2>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d011      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca2:	e008      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e000      	b.n	8003cb8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40013400 	.word	0x40013400
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40014400 	.word	0x40014400
 8003cd4:	40014800 	.word	0x40014800
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	00010007 	.word	0x00010007

08003ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d122      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d11b      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0202 	mvn.w	r2, #2
 8003d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa1a 	bl	8004160 <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa0c 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fa1d 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d122      	bne.n	8003d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d11b      	bne.n	8003d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0204 	mvn.w	r2, #4
 8003d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9f0 	bl	8004160 <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9e2 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f9f3 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d122      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d11b      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0208 	mvn.w	r2, #8
 8003db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9c6 	bl	8004160 <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f9b8 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f9c9 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d122      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d11b      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0210 	mvn.w	r2, #16
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2208      	movs	r2, #8
 8003e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f99c 	bl	8004160 <HAL_TIM_IC_CaptureCallback>
 8003e28:	e005      	b.n	8003e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f98e 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f99f 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d10e      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d107      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0201 	mvn.w	r2, #1
 8003e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc fe42 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e72:	2b80      	cmp	r3, #128	; 0x80
 8003e74:	d10e      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d107      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fd9a 	bl	80049c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b80      	cmp	r3, #128	; 0x80
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fd8d 	bl	80049dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d10e      	bne.n	8003eee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d107      	bne.n	8003eee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f94d 	bl	8004188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d10e      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0220 	mvn.w	r2, #32
 8003f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fd4d 	bl	80049b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0ff      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b14      	cmp	r3, #20
 8003f4e:	f200 80f0 	bhi.w	8004132 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003fad 	.word	0x08003fad
 8003f5c:	08004133 	.word	0x08004133
 8003f60:	08004133 	.word	0x08004133
 8003f64:	08004133 	.word	0x08004133
 8003f68:	08003fed 	.word	0x08003fed
 8003f6c:	08004133 	.word	0x08004133
 8003f70:	08004133 	.word	0x08004133
 8003f74:	08004133 	.word	0x08004133
 8003f78:	0800402f 	.word	0x0800402f
 8003f7c:	08004133 	.word	0x08004133
 8003f80:	08004133 	.word	0x08004133
 8003f84:	08004133 	.word	0x08004133
 8003f88:	0800406f 	.word	0x0800406f
 8003f8c:	08004133 	.word	0x08004133
 8003f90:	08004133 	.word	0x08004133
 8003f94:	08004133 	.word	0x08004133
 8003f98:	080040b1 	.word	0x080040b1
 8003f9c:	08004133 	.word	0x08004133
 8003fa0:	08004133 	.word	0x08004133
 8003fa4:	08004133 	.word	0x08004133
 8003fa8:	080040f1 	.word	0x080040f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f982 	bl	80042bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0208 	orr.w	r2, r2, #8
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	619a      	str	r2, [r3, #24]
      break;
 8003fea:	e0a5      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f9f2 	bl	80043dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6999      	ldr	r1, [r3, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	021a      	lsls	r2, r3, #8
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	619a      	str	r2, [r3, #24]
      break;
 800402c:	e084      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fa5b 	bl	80044f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0208 	orr.w	r2, r2, #8
 8004048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0204 	bic.w	r2, r2, #4
 8004058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	61da      	str	r2, [r3, #28]
      break;
 800406c:	e064      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fac3 	bl	8004600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69d9      	ldr	r1, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	021a      	lsls	r2, r3, #8
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	61da      	str	r2, [r3, #28]
      break;
 80040ae:	e043      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fb0c 	bl	80046d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0208 	orr.w	r2, r2, #8
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0204 	bic.w	r2, r2, #4
 80040da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ee:	e023      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fb50 	bl	800479c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	021a      	lsls	r2, r3, #8
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004130:	e002      	b.n	8004138 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
      break;
 8004136:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004140:	7dfb      	ldrb	r3, [r7, #23]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop

0800414c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a3c      	ldr	r2, [pc, #240]	; (80042a0 <TIM_Base_SetConfig+0x104>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00f      	beq.n	80041d4 <TIM_Base_SetConfig+0x38>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x38>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a39      	ldr	r2, [pc, #228]	; (80042a4 <TIM_Base_SetConfig+0x108>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x38>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <TIM_Base_SetConfig+0x10c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a37      	ldr	r2, [pc, #220]	; (80042ac <TIM_Base_SetConfig+0x110>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2d      	ldr	r2, [pc, #180]	; (80042a0 <TIM_Base_SetConfig+0x104>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01b      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f4:	d017      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <TIM_Base_SetConfig+0x108>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a29      	ldr	r2, [pc, #164]	; (80042a8 <TIM_Base_SetConfig+0x10c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00f      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a28      	ldr	r2, [pc, #160]	; (80042ac <TIM_Base_SetConfig+0x110>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00b      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <TIM_Base_SetConfig+0x114>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d007      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a26      	ldr	r2, [pc, #152]	; (80042b4 <TIM_Base_SetConfig+0x118>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d003      	beq.n	8004226 <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a25      	ldr	r2, [pc, #148]	; (80042b8 <TIM_Base_SetConfig+0x11c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <TIM_Base_SetConfig+0x104>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0xe8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a11      	ldr	r2, [pc, #68]	; (80042ac <TIM_Base_SetConfig+0x110>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0xe8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a10      	ldr	r2, [pc, #64]	; (80042b0 <TIM_Base_SetConfig+0x114>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0xe8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <TIM_Base_SetConfig+0x118>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0xe8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <TIM_Base_SetConfig+0x11c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40013400 	.word	0x40013400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800

080042bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 0302 	bic.w	r3, r3, #2
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <TIM_OC1_SetConfig+0x10c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00f      	beq.n	800433c <TIM_OC1_SetConfig+0x80>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a2b      	ldr	r2, [pc, #172]	; (80043cc <TIM_OC1_SetConfig+0x110>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00b      	beq.n	800433c <TIM_OC1_SetConfig+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <TIM_OC1_SetConfig+0x114>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d007      	beq.n	800433c <TIM_OC1_SetConfig+0x80>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <TIM_OC1_SetConfig+0x118>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d003      	beq.n	800433c <TIM_OC1_SetConfig+0x80>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <TIM_OC1_SetConfig+0x11c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10c      	bne.n	8004356 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 0308 	bic.w	r3, r3, #8
 8004342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 0304 	bic.w	r3, r3, #4
 8004354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <TIM_OC1_SetConfig+0x10c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_OC1_SetConfig+0xc2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <TIM_OC1_SetConfig+0x110>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_OC1_SetConfig+0xc2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <TIM_OC1_SetConfig+0x114>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_OC1_SetConfig+0xc2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <TIM_OC1_SetConfig+0x118>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_OC1_SetConfig+0xc2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <TIM_OC1_SetConfig+0x11c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d111      	bne.n	80043a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40013400 	.word	0x40013400
 80043d0:	40014000 	.word	0x40014000
 80043d4:	40014400 	.word	0x40014400
 80043d8:	40014800 	.word	0x40014800

080043dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0210 	bic.w	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0320 	bic.w	r3, r3, #32
 800442a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a28      	ldr	r2, [pc, #160]	; (80044dc <TIM_OC2_SetConfig+0x100>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC2_SetConfig+0x6c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <TIM_OC2_SetConfig+0x104>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10d      	bne.n	8004464 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <TIM_OC2_SetConfig+0x100>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00f      	beq.n	800448c <TIM_OC2_SetConfig+0xb0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <TIM_OC2_SetConfig+0x104>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00b      	beq.n	800448c <TIM_OC2_SetConfig+0xb0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <TIM_OC2_SetConfig+0x108>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_OC2_SetConfig+0xb0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a1a      	ldr	r2, [pc, #104]	; (80044e8 <TIM_OC2_SetConfig+0x10c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_OC2_SetConfig+0xb0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a19      	ldr	r2, [pc, #100]	; (80044ec <TIM_OC2_SetConfig+0x110>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d113      	bne.n	80044b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004492:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800449a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40013400 	.word	0x40013400
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40014400 	.word	0x40014400
 80044ec:	40014800 	.word	0x40014800

080044f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800453c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a27      	ldr	r2, [pc, #156]	; (80045ec <TIM_OC3_SetConfig+0xfc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_OC3_SetConfig+0x6a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a26      	ldr	r2, [pc, #152]	; (80045f0 <TIM_OC3_SetConfig+0x100>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10d      	bne.n	8004576 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004574:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <TIM_OC3_SetConfig+0xfc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00f      	beq.n	800459e <TIM_OC3_SetConfig+0xae>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <TIM_OC3_SetConfig+0x100>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00b      	beq.n	800459e <TIM_OC3_SetConfig+0xae>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <TIM_OC3_SetConfig+0x104>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d007      	beq.n	800459e <TIM_OC3_SetConfig+0xae>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <TIM_OC3_SetConfig+0x108>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_OC3_SetConfig+0xae>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a18      	ldr	r2, [pc, #96]	; (80045fc <TIM_OC3_SetConfig+0x10c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d113      	bne.n	80045c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800

08004600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800464e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	031b      	lsls	r3, r3, #12
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <TIM_OC4_SetConfig+0xc0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00f      	beq.n	8004684 <TIM_OC4_SetConfig+0x84>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <TIM_OC4_SetConfig+0xc4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_OC4_SetConfig+0x84>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <TIM_OC4_SetConfig+0xc8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <TIM_OC4_SetConfig+0x84>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <TIM_OC4_SetConfig+0xcc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC4_SetConfig+0x84>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <TIM_OC4_SetConfig+0xd0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d109      	bne.n	8004698 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800468a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400
 80046d0:	40014800 	.word	0x40014800

080046d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	041b      	lsls	r3, r3, #16
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a17      	ldr	r2, [pc, #92]	; (8004788 <TIM_OC5_SetConfig+0xb4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00f      	beq.n	800474e <TIM_OC5_SetConfig+0x7a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a16      	ldr	r2, [pc, #88]	; (800478c <TIM_OC5_SetConfig+0xb8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00b      	beq.n	800474e <TIM_OC5_SetConfig+0x7a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a15      	ldr	r2, [pc, #84]	; (8004790 <TIM_OC5_SetConfig+0xbc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <TIM_OC5_SetConfig+0x7a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <TIM_OC5_SetConfig+0xc0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <TIM_OC5_SetConfig+0x7a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a13      	ldr	r2, [pc, #76]	; (8004798 <TIM_OC5_SetConfig+0xc4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d109      	bne.n	8004762 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	621a      	str	r2, [r3, #32]
}
 800477c:	bf00      	nop
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40013400 	.word	0x40013400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	051b      	lsls	r3, r3, #20
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a18      	ldr	r2, [pc, #96]	; (8004854 <TIM_OC6_SetConfig+0xb8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00f      	beq.n	8004818 <TIM_OC6_SetConfig+0x7c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a17      	ldr	r2, [pc, #92]	; (8004858 <TIM_OC6_SetConfig+0xbc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00b      	beq.n	8004818 <TIM_OC6_SetConfig+0x7c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a16      	ldr	r2, [pc, #88]	; (800485c <TIM_OC6_SetConfig+0xc0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <TIM_OC6_SetConfig+0x7c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <TIM_OC6_SetConfig+0xc4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_OC6_SetConfig+0x7c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a14      	ldr	r2, [pc, #80]	; (8004864 <TIM_OC6_SetConfig+0xc8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d109      	bne.n	800482c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	029b      	lsls	r3, r3, #10
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	621a      	str	r2, [r3, #32]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40012c00 	.word	0x40012c00
 8004858:	40013400 	.word	0x40013400
 800485c:	40014000 	.word	0x40014000
 8004860:	40014400 	.word	0x40014400
 8004864:	40014800 	.word	0x40014800

08004868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2201      	movs	r2, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1a      	ldr	r2, [r3, #32]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	43db      	mvns	r3, r3
 800488a:	401a      	ands	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	431a      	orrs	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e063      	b.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2b      	ldr	r2, [pc, #172]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2a      	ldr	r2, [pc, #168]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d108      	bne.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d018      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d013      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00e      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a17      	ldr	r2, [pc, #92]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10c      	bne.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	4313      	orrs	r3, r2
 8004978:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40013400 	.word	0x40013400
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40014000 	.word	0x40014000

080049b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e040      	b.n	8004a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc f9a2 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2224      	movs	r2, #36	; 0x24
 8004a1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fc00 	bl	8005234 <UART_SetConfig>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e022      	b.n	8004a84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fdc8 	bl	80055dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fe4f 	bl	8005720 <UART_CheckIdleState>
 8004a82:	4603      	mov	r3, r0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d178      	bne.n	8004b96 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_UART_Transmit+0x24>
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e071      	b.n	8004b98 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2221      	movs	r2, #33	; 0x21
 8004ac0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac2:	f7fc fbd5 	bl	8001270 <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae0:	d108      	bne.n	8004af4 <HAL_UART_Transmit+0x68>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e003      	b.n	8004afc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004afc:	e030      	b.n	8004b60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2180      	movs	r1, #128	; 0x80
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 feb1 	bl	8005870 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e03c      	b.n	8004b98 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	881a      	ldrh	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b30:	b292      	uxth	r2, r2
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3302      	adds	r3, #2
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e008      	b.n	8004b4e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	b292      	uxth	r2, r2
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1c8      	bne.n	8004afe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	2140      	movs	r1, #64	; 0x40
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fe7a 	bl	8005870 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e005      	b.n	8004b98 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3720      	adds	r7, #32
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	; 0x28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d132      	bne.n	8004c1e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Receive_IT+0x24>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e02b      	b.n	8004c20 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d018      	beq.n	8004c0e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e6      	bne.n	8004bdc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fe93 	bl	8005940 <UART_Start_Receive_IT>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	e000      	b.n	8004c20 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	; 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b0ba      	sub	sp, #232	; 0xe8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c52:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c56:	4013      	ands	r3, r2
 8004c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d115      	bne.n	8004c90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00f      	beq.n	8004c90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 82ab 	beq.w	80051dc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
      }
      return;
 8004c8e:	e2a5      	b.n	80051dc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8117 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ca6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004caa:	4b85      	ldr	r3, [pc, #532]	; (8004ec0 <HAL_UART_IRQHandler+0x298>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 810a 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d011      	beq.n	8004ce4 <HAL_UART_IRQHandler+0xbc>
 8004cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d011      	beq.n	8004d14 <HAL_UART_IRQHandler+0xec>
 8004cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00b      	beq.n	8004d14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2202      	movs	r2, #2
 8004d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d011      	beq.n	8004d44 <HAL_UART_IRQHandler+0x11c>
 8004d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2204      	movs	r2, #4
 8004d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3a:	f043 0202 	orr.w	r2, r3, #2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d017      	beq.n	8004d80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d105      	bne.n	8004d68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d76:	f043 0208 	orr.w	r2, r3, #8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <HAL_UART_IRQHandler+0x18a>
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00c      	beq.n	8004db2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da8:	f043 0220 	orr.w	r2, r3, #32
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8211 	beq.w	80051e0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d005      	beq.n	8004e0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d04f      	beq.n	8004eaa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fe4c 	bl	8005aa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d141      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3308      	adds	r3, #8
 8004e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1d9      	bne.n	8004e1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d013      	beq.n	8004e9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_UART_IRQHandler+0x29c>)
 8004e78:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fc fb64 	bl	800154c <HAL_DMA_Abort_IT>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e94:	4610      	mov	r0, r2
 8004e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e00f      	b.n	8004eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9b4 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e00b      	b.n	8004eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9b0 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e007      	b.n	8004eba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9ac 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004eb8:	e192      	b.n	80051e0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eba:	bf00      	nop
    return;
 8004ebc:	e190      	b.n	80051e0 <HAL_UART_IRQHandler+0x5b8>
 8004ebe:	bf00      	nop
 8004ec0:	04000120 	.word	0x04000120
 8004ec4:	08005b71 	.word	0x08005b71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	f040 814b 	bne.w	8005168 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8144 	beq.w	8005168 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 813d 	beq.w	8005168 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	f040 80b5 	bne.w	8005070 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8164 	beq.w	80051e4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f26:	429a      	cmp	r2, r3
 8004f28:	f080 815c 	bcs.w	80051e4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	f000 8086 	beq.w	800504e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1da      	bne.n	8004f42 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e1      	bne.n	8004f8c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ff2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e3      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800501c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501e:	f023 0310 	bic.w	r3, r3, #16
 8005022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005030:	65bb      	str	r3, [r7, #88]	; 0x58
 8005032:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005036:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800503e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e4      	bne.n	800500e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005048:	4618      	mov	r0, r3
 800504a:	f7fc fa46 	bl	80014da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f8d7 	bl	800521c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800506e:	e0b9      	b.n	80051e4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800507c:	b29b      	uxth	r3, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80ab 	beq.w	80051e8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005092:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80a6 	beq.w	80051e8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050be:	647b      	str	r3, [r7, #68]	; 0x44
 80050c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e4      	bne.n	800509c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	623b      	str	r3, [r7, #32]
   return(result);
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050f6:	633a      	str	r2, [r7, #48]	; 0x30
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e3      	bne.n	80050d2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	60fb      	str	r3, [r7, #12]
   return(result);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0310 	bic.w	r3, r3, #16
 8005132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	617b      	str	r3, [r7, #20]
   return(result);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e4      	bne.n	800511e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800515a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f85b 	bl	800521c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005166:	e03f      	b.n	80051e8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <HAL_UART_IRQHandler+0x56a>
 8005174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005188:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fed8 	bl	8005f40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005190:	e02d      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800519e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01c      	beq.n	80051ec <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
    }
    return;
 80051ba:	e017      	b.n	80051ec <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d012      	beq.n	80051ee <HAL_UART_IRQHandler+0x5c6>
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00c      	beq.n	80051ee <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fce1 	bl	8005b9c <UART_EndTransmit_IT>
    return;
 80051da:	e008      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80051dc:	bf00      	nop
 80051de:	e006      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80051e0:	bf00      	nop
 80051e2:	e004      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80051e4:	bf00      	nop
 80051e6:	e002      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80051ec:	bf00      	nop
  }

}
 80051ee:	37e8      	adds	r7, #232	; 0xe8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005262:	f023 030c 	bic.w	r3, r3, #12
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	430b      	orrs	r3, r1
 800526e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4aa7      	ldr	r2, [pc, #668]	; (800554c <UART_SetConfig+0x318>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d120      	bne.n	80052f6 <UART_SetConfig+0xc2>
 80052b4:	4ba6      	ldr	r3, [pc, #664]	; (8005550 <UART_SetConfig+0x31c>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d817      	bhi.n	80052f0 <UART_SetConfig+0xbc>
 80052c0:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <UART_SetConfig+0x94>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052e5 	.word	0x080052e5
 80052d0:	080052eb 	.word	0x080052eb
 80052d4:	080052df 	.word	0x080052df
 80052d8:	2301      	movs	r3, #1
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e0b5      	b.n	800544a <UART_SetConfig+0x216>
 80052de:	2302      	movs	r3, #2
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e0b2      	b.n	800544a <UART_SetConfig+0x216>
 80052e4:	2304      	movs	r3, #4
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	e0af      	b.n	800544a <UART_SetConfig+0x216>
 80052ea:	2308      	movs	r3, #8
 80052ec:	77fb      	strb	r3, [r7, #31]
 80052ee:	e0ac      	b.n	800544a <UART_SetConfig+0x216>
 80052f0:	2310      	movs	r3, #16
 80052f2:	77fb      	strb	r3, [r7, #31]
 80052f4:	e0a9      	b.n	800544a <UART_SetConfig+0x216>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a96      	ldr	r2, [pc, #600]	; (8005554 <UART_SetConfig+0x320>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d124      	bne.n	800534a <UART_SetConfig+0x116>
 8005300:	4b93      	ldr	r3, [pc, #588]	; (8005550 <UART_SetConfig+0x31c>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800530c:	d011      	beq.n	8005332 <UART_SetConfig+0xfe>
 800530e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005312:	d817      	bhi.n	8005344 <UART_SetConfig+0x110>
 8005314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005318:	d011      	beq.n	800533e <UART_SetConfig+0x10a>
 800531a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800531e:	d811      	bhi.n	8005344 <UART_SetConfig+0x110>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <UART_SetConfig+0xf8>
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d006      	beq.n	8005338 <UART_SetConfig+0x104>
 800532a:	e00b      	b.n	8005344 <UART_SetConfig+0x110>
 800532c:	2300      	movs	r3, #0
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e08b      	b.n	800544a <UART_SetConfig+0x216>
 8005332:	2302      	movs	r3, #2
 8005334:	77fb      	strb	r3, [r7, #31]
 8005336:	e088      	b.n	800544a <UART_SetConfig+0x216>
 8005338:	2304      	movs	r3, #4
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	e085      	b.n	800544a <UART_SetConfig+0x216>
 800533e:	2308      	movs	r3, #8
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e082      	b.n	800544a <UART_SetConfig+0x216>
 8005344:	2310      	movs	r3, #16
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e07f      	b.n	800544a <UART_SetConfig+0x216>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a82      	ldr	r2, [pc, #520]	; (8005558 <UART_SetConfig+0x324>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d124      	bne.n	800539e <UART_SetConfig+0x16a>
 8005354:	4b7e      	ldr	r3, [pc, #504]	; (8005550 <UART_SetConfig+0x31c>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800535c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005360:	d011      	beq.n	8005386 <UART_SetConfig+0x152>
 8005362:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005366:	d817      	bhi.n	8005398 <UART_SetConfig+0x164>
 8005368:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800536c:	d011      	beq.n	8005392 <UART_SetConfig+0x15e>
 800536e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005372:	d811      	bhi.n	8005398 <UART_SetConfig+0x164>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <UART_SetConfig+0x14c>
 8005378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800537c:	d006      	beq.n	800538c <UART_SetConfig+0x158>
 800537e:	e00b      	b.n	8005398 <UART_SetConfig+0x164>
 8005380:	2300      	movs	r3, #0
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e061      	b.n	800544a <UART_SetConfig+0x216>
 8005386:	2302      	movs	r3, #2
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e05e      	b.n	800544a <UART_SetConfig+0x216>
 800538c:	2304      	movs	r3, #4
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e05b      	b.n	800544a <UART_SetConfig+0x216>
 8005392:	2308      	movs	r3, #8
 8005394:	77fb      	strb	r3, [r7, #31]
 8005396:	e058      	b.n	800544a <UART_SetConfig+0x216>
 8005398:	2310      	movs	r3, #16
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e055      	b.n	800544a <UART_SetConfig+0x216>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6e      	ldr	r2, [pc, #440]	; (800555c <UART_SetConfig+0x328>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d124      	bne.n	80053f2 <UART_SetConfig+0x1be>
 80053a8:	4b69      	ldr	r3, [pc, #420]	; (8005550 <UART_SetConfig+0x31c>)
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80053b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053b4:	d011      	beq.n	80053da <UART_SetConfig+0x1a6>
 80053b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053ba:	d817      	bhi.n	80053ec <UART_SetConfig+0x1b8>
 80053bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c0:	d011      	beq.n	80053e6 <UART_SetConfig+0x1b2>
 80053c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c6:	d811      	bhi.n	80053ec <UART_SetConfig+0x1b8>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <UART_SetConfig+0x1a0>
 80053cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d0:	d006      	beq.n	80053e0 <UART_SetConfig+0x1ac>
 80053d2:	e00b      	b.n	80053ec <UART_SetConfig+0x1b8>
 80053d4:	2300      	movs	r3, #0
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e037      	b.n	800544a <UART_SetConfig+0x216>
 80053da:	2302      	movs	r3, #2
 80053dc:	77fb      	strb	r3, [r7, #31]
 80053de:	e034      	b.n	800544a <UART_SetConfig+0x216>
 80053e0:	2304      	movs	r3, #4
 80053e2:	77fb      	strb	r3, [r7, #31]
 80053e4:	e031      	b.n	800544a <UART_SetConfig+0x216>
 80053e6:	2308      	movs	r3, #8
 80053e8:	77fb      	strb	r3, [r7, #31]
 80053ea:	e02e      	b.n	800544a <UART_SetConfig+0x216>
 80053ec:	2310      	movs	r3, #16
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e02b      	b.n	800544a <UART_SetConfig+0x216>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a5a      	ldr	r2, [pc, #360]	; (8005560 <UART_SetConfig+0x32c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d124      	bne.n	8005446 <UART_SetConfig+0x212>
 80053fc:	4b54      	ldr	r3, [pc, #336]	; (8005550 <UART_SetConfig+0x31c>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005404:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005408:	d011      	beq.n	800542e <UART_SetConfig+0x1fa>
 800540a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800540e:	d817      	bhi.n	8005440 <UART_SetConfig+0x20c>
 8005410:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005414:	d011      	beq.n	800543a <UART_SetConfig+0x206>
 8005416:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800541a:	d811      	bhi.n	8005440 <UART_SetConfig+0x20c>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <UART_SetConfig+0x1f4>
 8005420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005424:	d006      	beq.n	8005434 <UART_SetConfig+0x200>
 8005426:	e00b      	b.n	8005440 <UART_SetConfig+0x20c>
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e00d      	b.n	800544a <UART_SetConfig+0x216>
 800542e:	2302      	movs	r3, #2
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e00a      	b.n	800544a <UART_SetConfig+0x216>
 8005434:	2304      	movs	r3, #4
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e007      	b.n	800544a <UART_SetConfig+0x216>
 800543a:	2308      	movs	r3, #8
 800543c:	77fb      	strb	r3, [r7, #31]
 800543e:	e004      	b.n	800544a <UART_SetConfig+0x216>
 8005440:	2310      	movs	r3, #16
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	e001      	b.n	800544a <UART_SetConfig+0x216>
 8005446:	2310      	movs	r3, #16
 8005448:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d15b      	bne.n	800550c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005454:	7ffb      	ldrb	r3, [r7, #31]
 8005456:	2b08      	cmp	r3, #8
 8005458:	d827      	bhi.n	80054aa <UART_SetConfig+0x276>
 800545a:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0x22c>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005485 	.word	0x08005485
 8005464:	0800548d 	.word	0x0800548d
 8005468:	08005495 	.word	0x08005495
 800546c:	080054ab 	.word	0x080054ab
 8005470:	0800549b 	.word	0x0800549b
 8005474:	080054ab 	.word	0x080054ab
 8005478:	080054ab 	.word	0x080054ab
 800547c:	080054ab 	.word	0x080054ab
 8005480:	080054a3 	.word	0x080054a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005484:	f7fd ff3a 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005488:	61b8      	str	r0, [r7, #24]
        break;
 800548a:	e013      	b.n	80054b4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800548c:	f7fd ff58 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8005490:	61b8      	str	r0, [r7, #24]
        break;
 8005492:	e00f      	b.n	80054b4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005494:	4b33      	ldr	r3, [pc, #204]	; (8005564 <UART_SetConfig+0x330>)
 8005496:	61bb      	str	r3, [r7, #24]
        break;
 8005498:	e00c      	b.n	80054b4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549a:	f7fd feb9 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 800549e:	61b8      	str	r0, [r7, #24]
        break;
 80054a0:	e008      	b.n	80054b4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a6:	61bb      	str	r3, [r7, #24]
        break;
 80054a8:	e004      	b.n	80054b4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	77bb      	strb	r3, [r7, #30]
        break;
 80054b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 8082 	beq.w	80055c0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	005a      	lsls	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	441a      	add	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b0f      	cmp	r3, #15
 80054d6:	d916      	bls.n	8005506 <UART_SetConfig+0x2d2>
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054de:	d212      	bcs.n	8005506 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f023 030f 	bic.w	r3, r3, #15
 80054e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	89fb      	ldrh	r3, [r7, #14]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	89fa      	ldrh	r2, [r7, #14]
 8005502:	60da      	str	r2, [r3, #12]
 8005504:	e05c      	b.n	80055c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	77bb      	strb	r3, [r7, #30]
 800550a:	e059      	b.n	80055c0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800550c:	7ffb      	ldrb	r3, [r7, #31]
 800550e:	2b08      	cmp	r3, #8
 8005510:	d835      	bhi.n	800557e <UART_SetConfig+0x34a>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x2e4>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005545 	.word	0x08005545
 8005520:	08005569 	.word	0x08005569
 8005524:	0800557f 	.word	0x0800557f
 8005528:	0800556f 	.word	0x0800556f
 800552c:	0800557f 	.word	0x0800557f
 8005530:	0800557f 	.word	0x0800557f
 8005534:	0800557f 	.word	0x0800557f
 8005538:	08005577 	.word	0x08005577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fd fede 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005540:	61b8      	str	r0, [r7, #24]
        break;
 8005542:	e021      	b.n	8005588 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005544:	f7fd fefc 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8005548:	61b8      	str	r0, [r7, #24]
        break;
 800554a:	e01d      	b.n	8005588 <UART_SetConfig+0x354>
 800554c:	40013800 	.word	0x40013800
 8005550:	40021000 	.word	0x40021000
 8005554:	40004400 	.word	0x40004400
 8005558:	40004800 	.word	0x40004800
 800555c:	40004c00 	.word	0x40004c00
 8005560:	40005000 	.word	0x40005000
 8005564:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <UART_SetConfig+0x3a4>)
 800556a:	61bb      	str	r3, [r7, #24]
        break;
 800556c:	e00c      	b.n	8005588 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556e:	f7fd fe4f 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 8005572:	61b8      	str	r0, [r7, #24]
        break;
 8005574:	e008      	b.n	8005588 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557a:	61bb      	str	r3, [r7, #24]
        break;
 800557c:	e004      	b.n	8005588 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	77bb      	strb	r3, [r7, #30]
        break;
 8005586:	bf00      	nop
    }

    if (pclk != 0U)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d018      	beq.n	80055c0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	085a      	lsrs	r2, r3, #1
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	441a      	add	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	d909      	bls.n	80055bc <UART_SetConfig+0x388>
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	d205      	bcs.n	80055bc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	e001      	b.n	80055c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	007a1200 	.word	0x007a1200

080055dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01a      	beq.n	80056f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056da:	d10a      	bne.n	80056f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	605a      	str	r2, [r3, #4]
  }
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b098      	sub	sp, #96	; 0x60
 8005724:	af02      	add	r7, sp, #8
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005730:	f7fb fd9e 	bl	8001270 <HAL_GetTick>
 8005734:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b08      	cmp	r3, #8
 8005742:	d12e      	bne.n	80057a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800574c:	2200      	movs	r2, #0
 800574e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f88c 	bl	8005870 <UART_WaitOnFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d021      	beq.n	80057a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005772:	653b      	str	r3, [r7, #80]	; 0x50
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577c:	647b      	str	r3, [r7, #68]	; 0x44
 800577e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800578a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e6      	bne.n	800575e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e062      	b.n	8005868 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d149      	bne.n	8005844 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b8:	2200      	movs	r2, #0
 80057ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f856 	bl	8005870 <UART_WaitOnFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d03c      	beq.n	8005844 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	623b      	str	r3, [r7, #32]
   return(result);
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	633b      	str	r3, [r7, #48]	; 0x30
 80057ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e6      	bne.n	80057ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	60fb      	str	r3, [r7, #12]
   return(result);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	64bb      	str	r3, [r7, #72]	; 0x48
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800581c:	61fa      	str	r2, [r7, #28]
 800581e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	69b9      	ldr	r1, [r7, #24]
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	617b      	str	r3, [r7, #20]
   return(result);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e5      	bne.n	80057fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e011      	b.n	8005868 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3758      	adds	r7, #88	; 0x58
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005880:	e049      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005888:	d045      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588a:	f7fb fcf1 	bl	8001270 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e048      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d031      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d110      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2208      	movs	r2, #8
 80058c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f8ed 	bl	8005aa8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2208      	movs	r2, #8
 80058d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e029      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f0:	d111      	bne.n	8005916 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f8d3 	bl	8005aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00f      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d0a6      	beq.n	8005882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005940:	b480      	push	{r7}
 8005942:	b097      	sub	sp, #92	; 0x5c
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	d10e      	bne.n	8005992 <UART_Start_Receive_IT+0x52>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d105      	bne.n	8005988 <UART_Start_Receive_IT+0x48>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005986:	e01a      	b.n	80059be <UART_Start_Receive_IT+0x7e>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	22ff      	movs	r2, #255	; 0xff
 800598c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005990:	e015      	b.n	80059be <UART_Start_Receive_IT+0x7e>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10d      	bne.n	80059b6 <UART_Start_Receive_IT+0x76>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <UART_Start_Receive_IT+0x6c>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	22ff      	movs	r2, #255	; 0xff
 80059a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059aa:	e008      	b.n	80059be <UART_Start_Receive_IT+0x7e>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	227f      	movs	r2, #127	; 0x7f
 80059b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059b4:	e003      	b.n	80059be <UART_Start_Receive_IT+0x7e>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2222      	movs	r2, #34	; 0x22
 80059ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3308      	adds	r3, #8
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	657b      	str	r3, [r7, #84]	; 0x54
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3308      	adds	r3, #8
 80059ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80059f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e5      	bne.n	80059ce <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0a:	d107      	bne.n	8005a1c <UART_Start_Receive_IT+0xdc>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <UART_Start_Receive_IT+0x160>)
 8005a18:	669a      	str	r2, [r3, #104]	; 0x68
 8005a1a:	e002      	b.n	8005a22 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <UART_Start_Receive_IT+0x164>)
 8005a20:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d019      	beq.n	8005a5e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e6      	bne.n	8005a2a <UART_Start_Receive_IT+0xea>
 8005a5c:	e018      	b.n	8005a90 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f043 0320 	orr.w	r3, r3, #32
 8005a72:	653b      	str	r3, [r7, #80]	; 0x50
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7c:	623b      	str	r3, [r7, #32]
 8005a7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	69f9      	ldr	r1, [r7, #28]
 8005a82:	6a3a      	ldr	r2, [r7, #32]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e6      	bne.n	8005a5e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	375c      	adds	r7, #92	; 0x5c
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	08005d99 	.word	0x08005d99
 8005aa4:	08005bf1 	.word	0x08005bf1

08005aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b095      	sub	sp, #84	; 0x54
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ace:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ad4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e6      	bne.n	8005ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e5      	bne.n	8005ae2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d118      	bne.n	8005b50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f023 0310 	bic.w	r3, r3, #16
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e6      	bne.n	8005b1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b64:	bf00      	nop
 8005b66:	3754      	adds	r7, #84	; 0x54
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fb3a 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e6      	bne.n	8005ba4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fb06 	bl	80051f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be8:	bf00      	nop
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b09c      	sub	sp, #112	; 0x70
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bfe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c08:	2b22      	cmp	r3, #34	; 0x22
 8005c0a:	f040 80b9 	bne.w	8005d80 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c1c:	b2d9      	uxtb	r1, r3
 8005c1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c28:	400a      	ands	r2, r1
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f040 809c 	bne.w	8005d90 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e6      	bne.n	8005c58 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005caa:	647a      	str	r2, [r7, #68]	; 0x44
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e5      	bne.n	8005c8a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d018      	beq.n	8005d12 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	623b      	str	r3, [r7, #32]
   return(result);
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8005d00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e6      	bne.n	8005ce0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d12e      	bne.n	8005d78 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f023 0310 	bic.w	r3, r3, #16
 8005d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	69b9      	ldr	r1, [r7, #24]
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e6      	bne.n	8005d20 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d103      	bne.n	8005d68 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2210      	movs	r2, #16
 8005d66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fa53 	bl	800521c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d76:	e00b      	b.n	8005d90 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fa fa79 	bl	8000270 <HAL_UART_RxCpltCallback>
}
 8005d7e:	e007      	b.n	8005d90 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0208 	orr.w	r2, r2, #8
 8005d8e:	619a      	str	r2, [r3, #24]
}
 8005d90:	bf00      	nop
 8005d92:	3770      	adds	r7, #112	; 0x70
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b09c      	sub	sp, #112	; 0x70
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005da6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db0:	2b22      	cmp	r3, #34	; 0x22
 8005db2:	f040 80b9 	bne.w	8005f28 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005dbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005dc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005dca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005dce:	4013      	ands	r3, r2
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	1c9a      	adds	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 809c 	bne.w	8005f38 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e14:	667b      	str	r3, [r7, #100]	; 0x64
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e20:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e6      	bne.n	8005e00 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3308      	adds	r3, #8
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	663b      	str	r3, [r7, #96]	; 0x60
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3308      	adds	r3, #8
 8005e50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e52:	643a      	str	r2, [r7, #64]	; 0x40
 8005e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e5      	bne.n	8005e32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d018      	beq.n	8005eba <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e6      	bne.n	8005e88 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d12e      	bne.n	8005f20 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 0310 	bic.w	r3, r3, #16
 8005edc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6979      	ldr	r1, [r7, #20]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e6      	bne.n	8005ec8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	d103      	bne.n	8005f10 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff f97f 	bl	800521c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f1e:	e00b      	b.n	8005f38 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fa f9a5 	bl	8000270 <HAL_UART_RxCpltCallback>
}
 8005f26:	e007      	b.n	8005f38 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0208 	orr.w	r2, r2, #8
 8005f36:	619a      	str	r2, [r3, #24]
}
 8005f38:	bf00      	nop
 8005f3a:	3770      	adds	r7, #112	; 0x70
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f5c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005f60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	4013      	ands	r3, r2
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	f107 0014 	add.w	r0, r7, #20
 8005f98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	b004      	add	sp, #16
 8005fca:	4770      	bx	lr

08005fcc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd2:	f3ef 8305 	mrs	r3, IPSR
 8005fd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fde:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe2:	607b      	str	r3, [r7, #4]
  return(result);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <osKernelInitialize+0x32>
 8005fea:	4b11      	ldr	r3, [pc, #68]	; (8006030 <osKernelInitialize+0x64>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d109      	bne.n	8006006 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005ffe:	f06f 0305 	mvn.w	r3, #5
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e00c      	b.n	8006020 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <osKernelInitialize+0x64>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <osKernelInitialize+0x64>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e002      	b.n	8006020 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800601e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006020:	68fb      	ldr	r3, [r7, #12]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	2000064c 	.word	0x2000064c

08006034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800603a:	f3ef 8305 	mrs	r3, IPSR
 800603e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006040:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006046:	f3ef 8310 	mrs	r3, PRIMASK
 800604a:	607b      	str	r3, [r7, #4]
  return(result);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <osKernelStart+0x32>
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <osKernelStart+0x64>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d109      	bne.n	800606e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800605a:	f3ef 8311 	mrs	r3, BASEPRI
 800605e:	603b      	str	r3, [r7, #0]
  return(result);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006066:	f06f 0305 	mvn.w	r3, #5
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e00e      	b.n	800608c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800606e:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <osKernelStart+0x64>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d107      	bne.n	8006086 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <osKernelStart+0x64>)
 8006078:	2202      	movs	r2, #2
 800607a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800607c:	f001 fdea 	bl	8007c54 <vTaskStartScheduler>
      stat = osOK;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e002      	b.n	800608c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800608a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800608c:	68fb      	ldr	r3, [r7, #12]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	2000064c 	.word	0x2000064c

0800609c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b092      	sub	sp, #72	; 0x48
 80060a0:	af04      	add	r7, sp, #16
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ac:	f3ef 8305 	mrs	r3, IPSR
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 8094 	bne.w	80061e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ba:	f3ef 8310 	mrs	r3, PRIMASK
 80060be:	623b      	str	r3, [r7, #32]
  return(result);
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f040 808d 	bne.w	80061e2 <osThreadNew+0x146>
 80060c8:	4b48      	ldr	r3, [pc, #288]	; (80061ec <osThreadNew+0x150>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d106      	bne.n	80060de <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060d0:	f3ef 8311 	mrs	r3, BASEPRI
 80060d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 8082 	bne.w	80061e2 <osThreadNew+0x146>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d07e      	beq.n	80061e2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80060e8:	2318      	movs	r3, #24
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80060ec:	2300      	movs	r3, #0
 80060ee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80060f0:	f107 031b 	add.w	r3, r7, #27
 80060f4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80060f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d045      	beq.n	800618e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <osThreadNew+0x74>
        name = attr->name;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <osThreadNew+0x9a>
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	2b38      	cmp	r3, #56	; 0x38
 8006128:	d805      	bhi.n	8006136 <osThreadNew+0x9a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <osThreadNew+0x9e>
        return (NULL);
 8006136:	2300      	movs	r3, #0
 8006138:	e054      	b.n	80061e4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00e      	beq.n	8006170 <osThreadNew+0xd4>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	2b5b      	cmp	r3, #91	; 0x5b
 8006158:	d90a      	bls.n	8006170 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800615e:	2b00      	cmp	r3, #0
 8006160:	d006      	beq.n	8006170 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <osThreadNew+0xd4>
        mem = 1;
 800616a:	2301      	movs	r3, #1
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
 800616e:	e010      	b.n	8006192 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10c      	bne.n	8006192 <osThreadNew+0xf6>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d108      	bne.n	8006192 <osThreadNew+0xf6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <osThreadNew+0xf6>
          mem = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
 800618c:	e001      	b.n	8006192 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	2b01      	cmp	r3, #1
 8006196:	d110      	bne.n	80061ba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061a0:	9202      	str	r2, [sp, #8]
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 fb84 	bl	80078bc <xTaskCreateStatic>
 80061b4:	4603      	mov	r3, r0
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e013      	b.n	80061e2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d110      	bne.n	80061e2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f001 fbce 	bl	8007974 <xTaskCreate>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d001      	beq.n	80061e2 <osThreadNew+0x146>
          hTask = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061e2:	697b      	ldr	r3, [r7, #20]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3738      	adds	r7, #56	; 0x38
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	2000064c 	.word	0x2000064c

080061f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f8:	f3ef 8305 	mrs	r3, IPSR
 80061fc:	613b      	str	r3, [r7, #16]
  return(result);
 80061fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10f      	bne.n	8006224 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006204:	f3ef 8310 	mrs	r3, PRIMASK
 8006208:	60fb      	str	r3, [r7, #12]
  return(result);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <osDelay+0x34>
 8006210:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <osDelay+0x58>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d109      	bne.n	800622c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006218:	f3ef 8311 	mrs	r3, BASEPRI
 800621c:	60bb      	str	r3, [r7, #8]
  return(result);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <osDelay+0x3c>
    stat = osErrorISR;
 8006224:	f06f 0305 	mvn.w	r3, #5
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e007      	b.n	800623c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 fcd8 	bl	8007bec <vTaskDelay>
    }
  }

  return (stat);
 800623c:	697b      	ldr	r3, [r7, #20]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	2000064c 	.word	0x2000064c

0800624c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006258:	f3ef 8305 	mrs	r3, IPSR
 800625c:	613b      	str	r3, [r7, #16]
  return(result);
 800625e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 8085 	bne.w	8006370 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006266:	f3ef 8310 	mrs	r3, PRIMASK
 800626a:	60fb      	str	r3, [r7, #12]
  return(result);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d17e      	bne.n	8006370 <osMutexNew+0x124>
 8006272:	4b42      	ldr	r3, [pc, #264]	; (800637c <osMutexNew+0x130>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d105      	bne.n	8006286 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800627a:	f3ef 8311 	mrs	r3, BASEPRI
 800627e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d174      	bne.n	8006370 <osMutexNew+0x124>
    if (attr != NULL) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <osMutexNew+0x48>
      type = attr->attr_bits;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	623b      	str	r3, [r7, #32]
 8006292:	e001      	b.n	8006298 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <osMutexNew+0x5c>
      rmtx = 1U;
 80062a2:	2301      	movs	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	e001      	b.n	80062ac <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d15c      	bne.n	8006370 <osMutexNew+0x124>
      mem = -1;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ba:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d015      	beq.n	80062ee <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d006      	beq.n	80062d8 <osMutexNew+0x8c>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b4f      	cmp	r3, #79	; 0x4f
 80062d0:	d902      	bls.n	80062d8 <osMutexNew+0x8c>
          mem = 1;
 80062d2:	2301      	movs	r3, #1
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	e00c      	b.n	80062f2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d108      	bne.n	80062f2 <osMutexNew+0xa6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <osMutexNew+0xa6>
            mem = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e001      	b.n	80062f2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d112      	bne.n	800631e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	4619      	mov	r1, r3
 8006304:	2004      	movs	r0, #4
 8006306:	f000 fbef 	bl	8006ae8 <xQueueCreateMutexStatic>
 800630a:	6278      	str	r0, [r7, #36]	; 0x24
 800630c:	e016      	b.n	800633c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	4619      	mov	r1, r3
 8006314:	2001      	movs	r0, #1
 8006316:	f000 fbe7 	bl	8006ae8 <xQueueCreateMutexStatic>
 800631a:	6278      	str	r0, [r7, #36]	; 0x24
 800631c:	e00e      	b.n	800633c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800632a:	2004      	movs	r0, #4
 800632c:	f000 fbc4 	bl	8006ab8 <xQueueCreateMutex>
 8006330:	6278      	str	r0, [r7, #36]	; 0x24
 8006332:	e003      	b.n	800633c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006334:	2001      	movs	r0, #1
 8006336:	f000 fbbf 	bl	8006ab8 <xQueueCreateMutex>
 800633a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <osMutexNew+0x110>
        if (attr != NULL) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <osMutexNew+0x104>
          name = attr->name;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	e001      	b.n	8006354 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006354:	6979      	ldr	r1, [r7, #20]
 8006356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006358:	f001 fa28 	bl	80077ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d006      	beq.n	8006370 <osMutexNew+0x124>
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006372:	4618      	mov	r0, r3
 8006374:	3728      	adds	r7, #40	; 0x28
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	2000064c 	.word	0x2000064c

08006380 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b08c      	sub	sp, #48	; 0x30
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006390:	f3ef 8305 	mrs	r3, IPSR
 8006394:	61bb      	str	r3, [r7, #24]
  return(result);
 8006396:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006398:	2b00      	cmp	r3, #0
 800639a:	f040 8086 	bne.w	80064aa <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639e:	f3ef 8310 	mrs	r3, PRIMASK
 80063a2:	617b      	str	r3, [r7, #20]
  return(result);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d17f      	bne.n	80064aa <osSemaphoreNew+0x12a>
 80063aa:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <osSemaphoreNew+0x134>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d105      	bne.n	80063be <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063b2:	f3ef 8311 	mrs	r3, BASEPRI
 80063b6:	613b      	str	r3, [r7, #16]
  return(result);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d175      	bne.n	80064aa <osSemaphoreNew+0x12a>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d072      	beq.n	80064aa <osSemaphoreNew+0x12a>
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d86e      	bhi.n	80064aa <osSemaphoreNew+0x12a>
    mem = -1;
 80063cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d015      	beq.n	8006404 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d006      	beq.n	80063ee <osSemaphoreNew+0x6e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b4f      	cmp	r3, #79	; 0x4f
 80063e6:	d902      	bls.n	80063ee <osSemaphoreNew+0x6e>
        mem = 1;
 80063e8:	2301      	movs	r3, #1
 80063ea:	623b      	str	r3, [r7, #32]
 80063ec:	e00c      	b.n	8006408 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d108      	bne.n	8006408 <osSemaphoreNew+0x88>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <osSemaphoreNew+0x88>
          mem = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	623b      	str	r3, [r7, #32]
 8006402:	e001      	b.n	8006408 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640e:	d04c      	beq.n	80064aa <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d128      	bne.n	8006468 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d10a      	bne.n	8006432 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2203      	movs	r2, #3
 8006422:	9200      	str	r2, [sp, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	2100      	movs	r1, #0
 8006428:	2001      	movs	r0, #1
 800642a:	f000 fa53 	bl	80068d4 <xQueueGenericCreateStatic>
 800642e:	6278      	str	r0, [r7, #36]	; 0x24
 8006430:	e005      	b.n	800643e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006432:	2203      	movs	r2, #3
 8006434:	2100      	movs	r1, #0
 8006436:	2001      	movs	r0, #1
 8006438:	f000 fac3 	bl	80069c2 <xQueueGenericCreate>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d022      	beq.n	800648a <osSemaphoreNew+0x10a>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01f      	beq.n	800648a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800644a:	2300      	movs	r3, #0
 800644c:	2200      	movs	r2, #0
 800644e:	2100      	movs	r1, #0
 8006450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006452:	f000 fbcf 	bl	8006bf4 <xQueueGenericSend>
 8006456:	4603      	mov	r3, r0
 8006458:	2b01      	cmp	r3, #1
 800645a:	d016      	beq.n	800648a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800645c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800645e:	f001 f859 	bl	8007514 <vQueueDelete>
            hSemaphore = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
 8006466:	e010      	b.n	800648a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d108      	bne.n	8006480 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	461a      	mov	r2, r3
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fb51 	bl	8006b1e <xQueueCreateCountingSemaphoreStatic>
 800647c:	6278      	str	r0, [r7, #36]	; 0x24
 800647e:	e004      	b.n	800648a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fb82 	bl	8006b8c <xQueueCreateCountingSemaphore>
 8006488:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <osSemaphoreNew+0x11e>
          name = attr->name;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e001      	b.n	80064a2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80064a2:	69f9      	ldr	r1, [r7, #28]
 80064a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064a6:	f001 f981 	bl	80077ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3728      	adds	r7, #40	; 0x28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	2000064c 	.word	0x2000064c

080064b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80064d0:	f06f 0303 	mvn.w	r3, #3
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	e04b      	b.n	8006570 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064d8:	f3ef 8305 	mrs	r3, IPSR
 80064dc:	617b      	str	r3, [r7, #20]
  return(result);
 80064de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10f      	bne.n	8006504 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e4:	f3ef 8310 	mrs	r3, PRIMASK
 80064e8:	613b      	str	r3, [r7, #16]
  return(result);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <osSemaphoreAcquire+0x4c>
 80064f0:	4b22      	ldr	r3, [pc, #136]	; (800657c <osSemaphoreAcquire+0xc4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d128      	bne.n	800654a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064f8:	f3ef 8311 	mrs	r3, BASEPRI
 80064fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d022      	beq.n	800654a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800650a:	f06f 0303 	mvn.w	r3, #3
 800650e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006510:	e02d      	b.n	800656e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006516:	f107 0308 	add.w	r3, r7, #8
 800651a:	461a      	mov	r2, r3
 800651c:	2100      	movs	r1, #0
 800651e:	69b8      	ldr	r0, [r7, #24]
 8006520:	f000 ff78 	bl	8007414 <xQueueReceiveFromISR>
 8006524:	4603      	mov	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d003      	beq.n	8006532 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800652a:	f06f 0302 	mvn.w	r3, #2
 800652e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006530:	e01d      	b.n	800656e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01a      	beq.n	800656e <osSemaphoreAcquire+0xb6>
 8006538:	4b11      	ldr	r3, [pc, #68]	; (8006580 <osSemaphoreAcquire+0xc8>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006548:	e011      	b.n	800656e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	69b8      	ldr	r0, [r7, #24]
 800654e:	f000 fe55 	bl	80071fc <xQueueSemaphoreTake>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d00b      	beq.n	8006570 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800655e:	f06f 0301 	mvn.w	r3, #1
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	e004      	b.n	8006570 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006566:	f06f 0302 	mvn.w	r3, #2
 800656a:	61fb      	str	r3, [r7, #28]
 800656c:	e000      	b.n	8006570 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800656e:	bf00      	nop
      }
    }
  }

  return (stat);
 8006570:	69fb      	ldr	r3, [r7, #28]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	2000064c 	.word	0x2000064c
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006590:	2300      	movs	r3, #0
 8006592:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800659a:	f06f 0303 	mvn.w	r3, #3
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e03e      	b.n	8006620 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a2:	f3ef 8305 	mrs	r3, IPSR
 80065a6:	617b      	str	r3, [r7, #20]
  return(result);
 80065a8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10f      	bne.n	80065ce <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ae:	f3ef 8310 	mrs	r3, PRIMASK
 80065b2:	613b      	str	r3, [r7, #16]
  return(result);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <osSemaphoreRelease+0x4a>
 80065ba:	4b1c      	ldr	r3, [pc, #112]	; (800662c <osSemaphoreRelease+0xa8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d120      	bne.n	8006604 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065c2:	f3ef 8311 	mrs	r3, BASEPRI
 80065c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01a      	beq.n	8006604 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80065d2:	f107 0308 	add.w	r3, r7, #8
 80065d6:	4619      	mov	r1, r3
 80065d8:	69b8      	ldr	r0, [r7, #24]
 80065da:	f000 fca1 	bl	8006f20 <xQueueGiveFromISR>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d003      	beq.n	80065ec <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80065e4:	f06f 0302 	mvn.w	r3, #2
 80065e8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80065ea:	e018      	b.n	800661e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d015      	beq.n	800661e <osSemaphoreRelease+0x9a>
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <osSemaphoreRelease+0xac>)
 80065f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006602:	e00c      	b.n	800661e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006604:	2300      	movs	r3, #0
 8006606:	2200      	movs	r2, #0
 8006608:	2100      	movs	r1, #0
 800660a:	69b8      	ldr	r0, [r7, #24]
 800660c:	f000 faf2 	bl	8006bf4 <xQueueGenericSend>
 8006610:	4603      	mov	r3, r0
 8006612:	2b01      	cmp	r3, #1
 8006614:	d004      	beq.n	8006620 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006616:	f06f 0302 	mvn.w	r3, #2
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e000      	b.n	8006620 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800661e:	bf00      	nop
    }
  }

  return (stat);
 8006620:	69fb      	ldr	r3, [r7, #28]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	2000064c 	.word	0x2000064c
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a07      	ldr	r2, [pc, #28]	; (8006660 <vApplicationGetIdleTaskMemory+0x2c>)
 8006644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <vApplicationGetIdleTaskMemory+0x30>)
 800664a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2280      	movs	r2, #128	; 0x80
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20000650 	.word	0x20000650
 8006664:	200006ac 	.word	0x200006ac

08006668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a07      	ldr	r2, [pc, #28]	; (8006694 <vApplicationGetTimerTaskMemory+0x2c>)
 8006678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4a06      	ldr	r2, [pc, #24]	; (8006698 <vApplicationGetTimerTaskMemory+0x30>)
 800667e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006686:	601a      	str	r2, [r3, #0]
}
 8006688:	bf00      	nop
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	200008ac 	.word	0x200008ac
 8006698:	20000908 	.word	0x20000908

0800669c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f103 0208 	add.w	r2, r3, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f103 0208 	add.w	r2, r3, #8
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f103 0208 	add.w	r2, r3, #8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
}
 8006732:	bf00      	nop
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006754:	d103      	bne.n	800675e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e00c      	b.n	8006778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3308      	adds	r3, #8
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e002      	b.n	800676c <vListInsert+0x2e>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d2f6      	bcs.n	8006766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6892      	ldr	r2, [r2, #8]
 80067c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6852      	ldr	r2, [r2, #4]
 80067d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d103      	bne.n	80067e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	1e5a      	subs	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800682e:	f002 fc89 	bl	8009144 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	441a      	add	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	3b01      	subs	r3, #1
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	441a      	add	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	22ff      	movs	r2, #255	; 0xff
 8006872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	22ff      	movs	r2, #255	; 0xff
 800687a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d114      	bne.n	80068ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01a      	beq.n	80068c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3310      	adds	r3, #16
 8006890:	4618      	mov	r0, r3
 8006892:	f001 fc6d 	bl	8008170 <xTaskRemoveFromEventList>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d012      	beq.n	80068c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <xQueueGenericReset+0xcc>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	e009      	b.n	80068c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3310      	adds	r3, #16
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fef2 	bl	800669c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3324      	adds	r3, #36	; 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff feed 	bl	800669c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068c2:	f002 fc6f 	bl	80091a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068c6:	2301      	movs	r3, #1
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08e      	sub	sp, #56	; 0x38
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <xQueueGenericCreateStatic+0x52>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <xQueueGenericCreateStatic+0x56>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <xQueueGenericCreateStatic+0x58>
 800692a:	2300      	movs	r3, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	623b      	str	r3, [r7, #32]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <xQueueGenericCreateStatic+0x7e>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <xQueueGenericCreateStatic+0x82>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <xQueueGenericCreateStatic+0x84>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	61fb      	str	r3, [r7, #28]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006972:	2350      	movs	r3, #80	; 0x50
 8006974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b50      	cmp	r3, #80	; 0x50
 800697a:	d00a      	beq.n	8006992 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	61bb      	str	r3, [r7, #24]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00d      	beq.n	80069b8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f843 	bl	8006a3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3730      	adds	r7, #48	; 0x30
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b08a      	sub	sp, #40	; 0x28
 80069c6:	af02      	add	r7, sp, #8
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	4613      	mov	r3, r2
 80069ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <xQueueGenericCreate+0x2a>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	613b      	str	r3, [r7, #16]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	e004      	b.n	8006a02 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	fb02 f303 	mul.w	r3, r2, r3
 8006a00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	3350      	adds	r3, #80	; 0x50
 8006a06:	4618      	mov	r0, r3
 8006a08:	f002 fcbe 	bl	8009388 <pvPortMalloc>
 8006a0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00f      	beq.n	8006a34 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	3350      	adds	r3, #80	; 0x50
 8006a18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a22:	79fa      	ldrb	r2, [r7, #7]
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f805 	bl	8006a3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a34:	69bb      	ldr	r3, [r7, #24]
	}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e002      	b.n	8006a60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	69b8      	ldr	r0, [r7, #24]
 8006a70:	f7ff fec8 	bl	8006804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	78fa      	ldrb	r2, [r7, #3]
 8006a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00e      	beq.n	8006ab0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f8a2 	bl	8006bf4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6939      	ldr	r1, [r7, #16]
 8006ad0:	6978      	ldr	r0, [r7, #20]
 8006ad2:	f7ff ff76 	bl	80069c2 <xQueueGenericCreate>
 8006ad6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff ffd3 	bl	8006a84 <prvInitialiseMutex>

		return pxNewQueue;
 8006ade:	68fb      	ldr	r3, [r7, #12]
	}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	4603      	mov	r3, r0
 8006af0:	6039      	str	r1, [r7, #0]
 8006af2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	6939      	ldr	r1, [r7, #16]
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f7ff fee4 	bl	80068d4 <xQueueGenericCreateStatic>
 8006b0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff ffb8 	bl	8006a84 <prvInitialiseMutex>

		return pxNewQueue;
 8006b14:	68fb      	ldr	r3, [r7, #12]
	}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b08a      	sub	sp, #40	; 0x28
 8006b22:	af02      	add	r7, sp, #8
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	61bb      	str	r3, [r7, #24]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d90a      	bls.n	8006b64 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b64:	2302      	movs	r3, #2
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff feb0 	bl	80068d4 <xQueueGenericCreateStatic>
 8006b74:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b82:	69fb      	ldr	r3, [r7, #28]
	}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3720      	adds	r7, #32
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	613b      	str	r3, [r7, #16]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d90a      	bls.n	8006bd0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	60fb      	str	r3, [r7, #12]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff fef4 	bl	80069c2 <xQueueGenericCreate>
 8006bda:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006be8:	697b      	ldr	r3, [r7, #20]
	}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08e      	sub	sp, #56	; 0x38
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c02:	2300      	movs	r3, #0
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xQueueGenericSend+0x32>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <xQueueGenericSend+0x40>
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <xQueueGenericSend+0x44>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e000      	b.n	8006c3a <xQueueGenericSend+0x46>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <xQueueGenericSend+0x60>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d103      	bne.n	8006c62 <xQueueGenericSend+0x6e>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <xQueueGenericSend+0x72>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <xQueueGenericSend+0x74>
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <xQueueGenericSend+0x8e>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	623b      	str	r3, [r7, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c82:	f001 fc39 	bl	80084f8 <xTaskGetSchedulerState>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <xQueueGenericSend+0x9e>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <xQueueGenericSend+0xa2>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <xQueueGenericSend+0xa4>
 8006c96:	2300      	movs	r3, #0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	61fb      	str	r3, [r7, #28]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cb2:	f002 fa47 	bl	8009144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <xQueueGenericSend+0xd4>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d129      	bne.n	8006d1c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cce:	f000 fc5c 	bl	800758a <prvCopyDataToQueue>
 8006cd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d010      	beq.n	8006cfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	3324      	adds	r3, #36	; 0x24
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 fa45 	bl	8008170 <xTaskRemoveFromEventList>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d013      	beq.n	8006d14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cec:	4b3f      	ldr	r3, [pc, #252]	; (8006dec <xQueueGenericSend+0x1f8>)
 8006cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	e00a      	b.n	8006d14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d04:	4b39      	ldr	r3, [pc, #228]	; (8006dec <xQueueGenericSend+0x1f8>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d14:	f002 fa46 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e063      	b.n	8006de4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d22:	f002 fa3f 	bl	80091a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e05c      	b.n	8006de4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d30:	f107 0314 	add.w	r3, r7, #20
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 fa7f 	bl	8008238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d3e:	f002 fa31 	bl	80091a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d42:	f000 ffed 	bl	8007d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d46:	f002 f9fd 	bl	8009144 <vPortEnterCritical>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d50:	b25b      	sxtb	r3, r3
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d56:	d103      	bne.n	8006d60 <xQueueGenericSend+0x16c>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d6c:	d103      	bne.n	8006d76 <xQueueGenericSend+0x182>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d76:	f002 fa15 	bl	80091a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d7a:	1d3a      	adds	r2, r7, #4
 8006d7c:	f107 0314 	add.w	r3, r7, #20
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fa6e 	bl	8008264 <xTaskCheckForTimeOut>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d124      	bne.n	8006dd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d90:	f000 fcf3 	bl	800777a <prvIsQueueFull>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d018      	beq.n	8006dcc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	3310      	adds	r3, #16
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f994 	bl	80080d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006daa:	f000 fc7e 	bl	80076aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dae:	f000 ffc5 	bl	8007d3c <xTaskResumeAll>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f47f af7c 	bne.w	8006cb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <xQueueGenericSend+0x1f8>)
 8006dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	e772      	b.n	8006cb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dce:	f000 fc6c 	bl	80076aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd2:	f000 ffb3 	bl	8007d3c <xTaskResumeAll>
 8006dd6:	e76c      	b.n	8006cb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dda:	f000 fc66 	bl	80076aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dde:	f000 ffad 	bl	8007d3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006de2:	2300      	movs	r3, #0
		}
	}
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3738      	adds	r7, #56	; 0x38
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	e000ed04 	.word	0xe000ed04

08006df0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08e      	sub	sp, #56	; 0x38
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d103      	bne.n	8006e2c <xQueueGenericSendFromISR+0x3c>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <xQueueGenericSendFromISR+0x40>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <xQueueGenericSendFromISR+0x42>
 8006e30:	2300      	movs	r3, #0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	623b      	str	r3, [r7, #32]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d103      	bne.n	8006e5a <xQueueGenericSendFromISR+0x6a>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <xQueueGenericSendFromISR+0x6e>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <xQueueGenericSendFromISR+0x70>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	61fb      	str	r3, [r7, #28]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e7a:	f002 fa45 	bl	8009308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	61ba      	str	r2, [r7, #24]
 8006e94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d302      	bcc.n	8006eac <xQueueGenericSendFromISR+0xbc>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d12c      	bne.n	8006f06 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ebc:	f000 fb65 	bl	800758a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ec0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec8:	d112      	bne.n	8006ef0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d016      	beq.n	8006f00 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	3324      	adds	r3, #36	; 0x24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 f94a 	bl	8008170 <xTaskRemoveFromEventList>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00e      	beq.n	8006f00 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e007      	b.n	8006f00 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	b25a      	sxtb	r2, r3
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f00:	2301      	movs	r3, #1
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006f04:	e001      	b.n	8006f0a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3738      	adds	r7, #56	; 0x38
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08e      	sub	sp, #56	; 0x38
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	623b      	str	r3, [r7, #32]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	61fb      	str	r3, [r7, #28]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <xQueueGiveFromISR+0x58>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <xQueueGiveFromISR+0x5c>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <xQueueGiveFromISR+0x5e>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	61bb      	str	r3, [r7, #24]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f98:	f002 f9b6 	bl	8009308 <vPortValidateInterruptPriority>
	__asm volatile
 8006f9c:	f3ef 8211 	mrs	r2, BASEPRI
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	617a      	str	r2, [r7, #20]
 8006fb2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006fb4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d22b      	bcs.n	8007020 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe2:	d112      	bne.n	800700a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d016      	beq.n	800701a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	3324      	adds	r3, #36	; 0x24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 f8bd 	bl	8008170 <xTaskRemoveFromEventList>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00e      	beq.n	800701a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00b      	beq.n	800701a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2201      	movs	r2, #1
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	e007      	b.n	800701a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800700a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800700e:	3301      	adds	r3, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	b25a      	sxtb	r2, r3
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800701a:	2301      	movs	r3, #1
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
 800701e:	e001      	b.n	8007024 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007020:	2300      	movs	r3, #0
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007032:	4618      	mov	r0, r3
 8007034:	3738      	adds	r7, #56	; 0x38
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08c      	sub	sp, #48	; 0x30
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007048:	2300      	movs	r3, #0
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10a      	bne.n	800706c <xQueueReceive+0x30>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	623b      	str	r3, [r7, #32]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <xQueueReceive+0x3e>
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <xQueueReceive+0x42>
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <xQueueReceive+0x44>
 800707e:	2300      	movs	r3, #0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <xQueueReceive+0x5e>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	61fb      	str	r3, [r7, #28]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800709a:	f001 fa2d 	bl	80084f8 <xTaskGetSchedulerState>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <xQueueReceive+0x6e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <xQueueReceive+0x72>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <xQueueReceive+0x74>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <xQueueReceive+0x8e>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	61bb      	str	r3, [r7, #24]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80070ca:	f002 f83b 	bl	8009144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01f      	beq.n	800711a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070de:	f000 fabe 	bl	800765e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	1e5a      	subs	r2, r3, #1
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00f      	beq.n	8007112 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	3310      	adds	r3, #16
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 f83a 	bl	8008170 <xTaskRemoveFromEventList>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007102:	4b3d      	ldr	r3, [pc, #244]	; (80071f8 <xQueueReceive+0x1bc>)
 8007104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007112:	f002 f847 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 8007116:	2301      	movs	r3, #1
 8007118:	e069      	b.n	80071ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007120:	f002 f840 	bl	80091a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007124:	2300      	movs	r3, #0
 8007126:	e062      	b.n	80071ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800712e:	f107 0310 	add.w	r3, r7, #16
 8007132:	4618      	mov	r0, r3
 8007134:	f001 f880 	bl	8008238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007138:	2301      	movs	r3, #1
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800713c:	f002 f832 	bl	80091a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007140:	f000 fdee 	bl	8007d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007144:	f001 fffe 	bl	8009144 <vPortEnterCritical>
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800714e:	b25b      	sxtb	r3, r3
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007154:	d103      	bne.n	800715e <xQueueReceive+0x122>
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007164:	b25b      	sxtb	r3, r3
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800716a:	d103      	bne.n	8007174 <xQueueReceive+0x138>
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007174:	f002 f816 	bl	80091a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007178:	1d3a      	adds	r2, r7, #4
 800717a:	f107 0310 	add.w	r3, r7, #16
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f001 f86f 	bl	8008264 <xTaskCheckForTimeOut>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d123      	bne.n	80071d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800718c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718e:	f000 fade 	bl	800774e <prvIsQueueEmpty>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d017      	beq.n	80071c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	3324      	adds	r3, #36	; 0x24
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4611      	mov	r1, r2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 ff95 	bl	80080d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a8:	f000 fa7f 	bl	80076aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071ac:	f000 fdc6 	bl	8007d3c <xTaskResumeAll>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d189      	bne.n	80070ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <xQueueReceive+0x1bc>)
 80071b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	e780      	b.n	80070ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ca:	f000 fa6e 	bl	80076aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ce:	f000 fdb5 	bl	8007d3c <xTaskResumeAll>
 80071d2:	e77a      	b.n	80070ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d6:	f000 fa68 	bl	80076aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071da:	f000 fdaf 	bl	8007d3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e0:	f000 fab5 	bl	800774e <prvIsQueueEmpty>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f43f af6f 	beq.w	80070ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3730      	adds	r7, #48	; 0x30
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08e      	sub	sp, #56	; 0x38
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007206:	2300      	movs	r3, #0
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800720e:	2300      	movs	r3, #0
 8007210:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	623b      	str	r3, [r7, #32]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	61fb      	str	r3, [r7, #28]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800724c:	f001 f954 	bl	80084f8 <xTaskGetSchedulerState>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <xQueueSemaphoreTake+0x60>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <xQueueSemaphoreTake+0x64>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <xQueueSemaphoreTake+0x66>
 8007260:	2300      	movs	r3, #0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	61bb      	str	r3, [r7, #24]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800727c:	f001 ff62 	bl	8009144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	2b00      	cmp	r3, #0
 800728a:	d024      	beq.n	80072d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	1e5a      	subs	r2, r3, #1
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800729c:	f001 faac 	bl	80087f8 <pvTaskIncrementMutexHeldCount>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00f      	beq.n	80072ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	3310      	adds	r3, #16
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 ff5c 	bl	8008170 <xTaskRemoveFromEventList>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072be:	4b54      	ldr	r3, [pc, #336]	; (8007410 <xQueueSemaphoreTake+0x214>)
 80072c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072ce:	f001 ff69 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e097      	b.n	8007406 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d111      	bne.n	8007300 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	617b      	str	r3, [r7, #20]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072f8:	f001 ff54 	bl	80091a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e082      	b.n	8007406 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007306:	f107 030c 	add.w	r3, r7, #12
 800730a:	4618      	mov	r0, r3
 800730c:	f000 ff94 	bl	8008238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007310:	2301      	movs	r3, #1
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007314:	f001 ff46 	bl	80091a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007318:	f000 fd02 	bl	8007d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800731c:	f001 ff12 	bl	8009144 <vPortEnterCritical>
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007326:	b25b      	sxtb	r3, r3
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732c:	d103      	bne.n	8007336 <xQueueSemaphoreTake+0x13a>
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800733c:	b25b      	sxtb	r3, r3
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007342:	d103      	bne.n	800734c <xQueueSemaphoreTake+0x150>
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800734c:	f001 ff2a 	bl	80091a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007350:	463a      	mov	r2, r7
 8007352:	f107 030c 	add.w	r3, r7, #12
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f000 ff83 	bl	8008264 <xTaskCheckForTimeOut>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d132      	bne.n	80073ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007366:	f000 f9f2 	bl	800774e <prvIsQueueEmpty>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d026      	beq.n	80073be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007378:	f001 fee4 	bl	8009144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	f001 f8d7 	bl	8008534 <xTaskPriorityInherit>
 8007386:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007388:	f001 ff0c 	bl	80091a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	3324      	adds	r3, #36	; 0x24
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fe9b 	bl	80080d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800739a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800739c:	f000 f985 	bl	80076aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073a0:	f000 fccc 	bl	8007d3c <xTaskResumeAll>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f47f af68 	bne.w	800727c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80073ac:	4b18      	ldr	r3, [pc, #96]	; (8007410 <xQueueSemaphoreTake+0x214>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	e75e      	b.n	800727c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073c0:	f000 f973 	bl	80076aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073c4:	f000 fcba 	bl	8007d3c <xTaskResumeAll>
 80073c8:	e758      	b.n	800727c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073cc:	f000 f96d 	bl	80076aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073d0:	f000 fcb4 	bl	8007d3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d6:	f000 f9ba 	bl	800774e <prvIsQueueEmpty>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f43f af4d 	beq.w	800727c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00d      	beq.n	8007404 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80073e8:	f001 feac 	bl	8009144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ee:	f000 f8b4 	bl	800755a <prvGetDisinheritPriorityAfterTimeout>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 f976 	bl	80086ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007400:	f001 fed0 	bl	80091a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007404:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007406:	4618      	mov	r0, r3
 8007408:	3738      	adds	r7, #56	; 0x38
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	623b      	str	r3, [r7, #32]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <xQueueReceiveFromISR+0x3a>
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <xQueueReceiveFromISR+0x3e>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <xQueueReceiveFromISR+0x40>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	61fb      	str	r3, [r7, #28]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800746e:	f001 ff4b 	bl	8009308 <vPortValidateInterruptPriority>
	__asm volatile
 8007472:	f3ef 8211 	mrs	r2, BASEPRI
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	61ba      	str	r2, [r7, #24]
 8007488:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800748a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d02f      	beq.n	80074fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074a8:	f000 f8d9 	bl	800765e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	1e5a      	subs	r2, r3, #1
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074bc:	d112      	bne.n	80074e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d016      	beq.n	80074f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	3310      	adds	r3, #16
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fe50 	bl	8008170 <xTaskRemoveFromEventList>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00e      	beq.n	80074f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e007      	b.n	80074f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80074e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e8:	3301      	adds	r3, #1
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	b25a      	sxtb	r2, r3
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80074f4:	2301      	movs	r3, #1
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
 80074f8:	e001      	b.n	80074fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f383 8811 	msr	BASEPRI, r3
}
 8007508:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800750c:	4618      	mov	r0, r3
 800750e:	3738      	adds	r7, #56	; 0x38
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <vQueueDelete+0x28>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60bb      	str	r3, [r7, #8]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f95f 	bl	8007800 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f001 ffdf 	bl	8009510 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b00      	cmp	r3, #0
 8007568:	d006      	beq.n	8007578 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e001      	b.n	800757c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800757c:	68fb      	ldr	r3, [r7, #12]
	}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b086      	sub	sp, #24
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d14d      	bne.n	800764c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 f82b 	bl	8008610 <xTaskPriorityDisinherit>
 80075ba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	e043      	b.n	800764c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d119      	bne.n	80075fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6898      	ldr	r0, [r3, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	461a      	mov	r2, r3
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	f002 f8df 	bl	8009798 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	441a      	add	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d32b      	bcc.n	800764c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	609a      	str	r2, [r3, #8]
 80075fc:	e026      	b.n	800764c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68d8      	ldr	r0, [r3, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	461a      	mov	r2, r3
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	f002 f8c5 	bl	8009798 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	425b      	negs	r3, r3
 8007618:	441a      	add	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d207      	bcs.n	800763a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	425b      	negs	r3, r3
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d105      	bne.n	800764c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007654:	697b      	ldr	r3, [r7, #20]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	2b00      	cmp	r3, #0
 800766e:	d018      	beq.n	80076a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	441a      	add	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d303      	bcc.n	8007692 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68d9      	ldr	r1, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	461a      	mov	r2, r3
 800769c:	6838      	ldr	r0, [r7, #0]
 800769e:	f002 f87b 	bl	8009798 <memcpy>
	}
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076b2:	f001 fd47 	bl	8009144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076be:	e011      	b.n	80076e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d012      	beq.n	80076ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3324      	adds	r3, #36	; 0x24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fd4f 	bl	8008170 <xTaskRemoveFromEventList>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076d8:	f000 fe26 	bl	8008328 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	3b01      	subs	r3, #1
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dce9      	bgt.n	80076c0 <prvUnlockQueue+0x16>
 80076ec:	e000      	b.n	80076f0 <prvUnlockQueue+0x46>
					break;
 80076ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	22ff      	movs	r2, #255	; 0xff
 80076f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076f8:	f001 fd54 	bl	80091a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076fc:	f001 fd22 	bl	8009144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007706:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007708:	e011      	b.n	800772e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d012      	beq.n	8007738 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3310      	adds	r3, #16
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fd2a 	bl	8008170 <xTaskRemoveFromEventList>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007722:	f000 fe01 	bl	8008328 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	3b01      	subs	r3, #1
 800772a:	b2db      	uxtb	r3, r3
 800772c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800772e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007732:	2b00      	cmp	r3, #0
 8007734:	dce9      	bgt.n	800770a <prvUnlockQueue+0x60>
 8007736:	e000      	b.n	800773a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007738:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	22ff      	movs	r2, #255	; 0xff
 800773e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007742:	f001 fd2f 	bl	80091a4 <vPortExitCritical>
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007756:	f001 fcf5 	bl	8009144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007762:	2301      	movs	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	e001      	b.n	800776c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800776c:	f001 fd1a 	bl	80091a4 <vPortExitCritical>

	return xReturn;
 8007770:	68fb      	ldr	r3, [r7, #12]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007782:	f001 fcdf 	bl	8009144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	429a      	cmp	r2, r3
 8007790:	d102      	bne.n	8007798 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007792:	2301      	movs	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	e001      	b.n	800779c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800779c:	f001 fd02 	bl	80091a4 <vPortExitCritical>

	return xReturn;
 80077a0:	68fb      	ldr	r3, [r7, #12]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e014      	b.n	80077e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077bc:	4a0f      	ldr	r2, [pc, #60]	; (80077fc <vQueueAddToRegistry+0x50>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10b      	bne.n	80077e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077c8:	490c      	ldr	r1, [pc, #48]	; (80077fc <vQueueAddToRegistry+0x50>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077d2:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <vQueueAddToRegistry+0x50>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	4413      	add	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077de:	e006      	b.n	80077ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b07      	cmp	r3, #7
 80077ea:	d9e7      	bls.n	80077bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	20000d08 	.word	0x20000d08

08007800 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e016      	b.n	800783c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800780e:	4a10      	ldr	r2, [pc, #64]	; (8007850 <vQueueUnregisterQueue+0x50>)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4413      	add	r3, r2
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	429a      	cmp	r2, r3
 800781c:	d10b      	bne.n	8007836 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800781e:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <vQueueUnregisterQueue+0x50>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2100      	movs	r1, #0
 8007824:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <vQueueUnregisterQueue+0x50>)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	2200      	movs	r2, #0
 8007832:	605a      	str	r2, [r3, #4]
				break;
 8007834:	e006      	b.n	8007844 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3301      	adds	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b07      	cmp	r3, #7
 8007840:	d9e5      	bls.n	800780e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20000d08 	.word	0x20000d08

08007854 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007864:	f001 fc6e 	bl	8009144 <vPortEnterCritical>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800786e:	b25b      	sxtb	r3, r3
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007874:	d103      	bne.n	800787e <vQueueWaitForMessageRestricted+0x2a>
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007884:	b25b      	sxtb	r3, r3
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788a:	d103      	bne.n	8007894 <vQueueWaitForMessageRestricted+0x40>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007894:	f001 fc86 	bl	80091a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fc35 	bl	8008118 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7ff fefb 	bl	80076aa <prvUnlockQueue>
	}
 80078b4:	bf00      	nop
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af04      	add	r7, sp, #16
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	623b      	str	r3, [r7, #32]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <xTaskCreateStatic+0x46>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	61fb      	str	r3, [r7, #28]
}
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007902:	235c      	movs	r3, #92	; 0x5c
 8007904:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b5c      	cmp	r3, #92	; 0x5c
 800790a:	d00a      	beq.n	8007922 <xTaskCreateStatic+0x66>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	61bb      	str	r3, [r7, #24]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01e      	beq.n	8007966 <xTaskCreateStatic+0xaa>
 8007928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01b      	beq.n	8007966 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007936:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007940:	2300      	movs	r3, #0
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	9302      	str	r3, [sp, #8]
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f850 	bl	80079fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800795e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007960:	f000 f8d4 	bl	8007b0c <prvAddNewTaskToReadyList>
 8007964:	e001      	b.n	800796a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800796a:	697b      	ldr	r3, [r7, #20]
	}
 800796c:	4618      	mov	r0, r3
 800796e:	3728      	adds	r7, #40	; 0x28
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08c      	sub	sp, #48	; 0x30
 8007978:	af04      	add	r7, sp, #16
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	4613      	mov	r3, r2
 8007982:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4618      	mov	r0, r3
 800798a:	f001 fcfd 	bl	8009388 <pvPortMalloc>
 800798e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00e      	beq.n	80079b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007996:	205c      	movs	r0, #92	; 0x5c
 8007998:	f001 fcf6 	bl	8009388 <pvPortMalloc>
 800799c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	631a      	str	r2, [r3, #48]	; 0x30
 80079aa:	e005      	b.n	80079b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079ac:	6978      	ldr	r0, [r7, #20]
 80079ae:	f001 fdaf 	bl	8009510 <vPortFree>
 80079b2:	e001      	b.n	80079b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d017      	beq.n	80079ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	2300      	movs	r3, #0
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	9302      	str	r3, [sp, #8]
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f80e 	bl	80079fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079e2:	69f8      	ldr	r0, [r7, #28]
 80079e4:	f000 f892 	bl	8007b0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079e8:	2301      	movs	r3, #1
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	e002      	b.n	80079f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079f4:	69bb      	ldr	r3, [r7, #24]
	}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b088      	sub	sp, #32
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	461a      	mov	r2, r3
 8007a16:	21a5      	movs	r1, #165	; 0xa5
 8007a18:	f001 fecc 	bl	80097b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a26:	3b01      	subs	r3, #1
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	f023 0307 	bic.w	r3, r3, #7
 8007a34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	617b      	str	r3, [r7, #20]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	e012      	b.n	8007a82 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	4413      	add	r3, r2
 8007a62:	7819      	ldrb	r1, [r3, #0]
 8007a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	3334      	adds	r3, #52	; 0x34
 8007a6c:	460a      	mov	r2, r1
 8007a6e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	4413      	add	r3, r2
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	2b0f      	cmp	r3, #15
 8007a86:	d9e9      	bls.n	8007a5c <prvInitialiseNewTask+0x5e>
 8007a88:	e000      	b.n	8007a8c <prvInitialiseNewTask+0x8e>
		{
			break;
 8007a8a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	2b37      	cmp	r3, #55	; 0x37
 8007a98:	d901      	bls.n	8007a9e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a9a:	2337      	movs	r3, #55	; 0x37
 8007a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	2200      	movs	r2, #0
 8007aae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fe fe11 	bl	80066dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	3318      	adds	r3, #24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fe0c 	bl	80066dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	2200      	movs	r2, #0
 8007ade:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	69b8      	ldr	r0, [r7, #24]
 8007aee:	f001 f9fd 	bl	8008eec <pxPortInitialiseStack>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b04:	bf00      	nop
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b14:	f001 fb16 	bl	8009144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b18:	4b2d      	ldr	r3, [pc, #180]	; (8007bd0 <prvAddNewTaskToReadyList+0xc4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	4a2c      	ldr	r2, [pc, #176]	; (8007bd0 <prvAddNewTaskToReadyList+0xc4>)
 8007b20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b22:	4b2c      	ldr	r3, [pc, #176]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b2a:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b30:	4b27      	ldr	r3, [pc, #156]	; (8007bd0 <prvAddNewTaskToReadyList+0xc4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d110      	bne.n	8007b5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b38:	f000 fc1a 	bl	8008370 <prvInitialiseTaskLists>
 8007b3c:	e00d      	b.n	8007b5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b3e:	4b26      	ldr	r3, [pc, #152]	; (8007bd8 <prvAddNewTaskToReadyList+0xcc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d109      	bne.n	8007b5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b46:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d802      	bhi.n	8007b5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b54:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b5a:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <prvAddNewTaskToReadyList+0xd0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	4a1e      	ldr	r2, [pc, #120]	; (8007bdc <prvAddNewTaskToReadyList+0xd0>)
 8007b62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b64:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <prvAddNewTaskToReadyList+0xd0>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b70:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <prvAddNewTaskToReadyList+0xd4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d903      	bls.n	8007b80 <prvAddNewTaskToReadyList+0x74>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <prvAddNewTaskToReadyList+0xd4>)
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4a15      	ldr	r2, [pc, #84]	; (8007be4 <prvAddNewTaskToReadyList+0xd8>)
 8007b8e:	441a      	add	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f7fe fdad 	bl	80066f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b9c:	f001 fb02 	bl	80091a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ba0:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <prvAddNewTaskToReadyList+0xcc>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00e      	beq.n	8007bc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <prvAddNewTaskToReadyList+0xc8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d207      	bcs.n	8007bc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <prvAddNewTaskToReadyList+0xdc>)
 8007bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000121c 	.word	0x2000121c
 8007bd4:	20000d48 	.word	0x20000d48
 8007bd8:	20001228 	.word	0x20001228
 8007bdc:	20001238 	.word	0x20001238
 8007be0:	20001224 	.word	0x20001224
 8007be4:	20000d4c 	.word	0x20000d4c
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d017      	beq.n	8007c2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <vTaskDelay+0x60>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <vTaskDelay+0x30>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	60bb      	str	r3, [r7, #8]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c1c:	f000 f880 	bl	8007d20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fdfc 	bl	8008820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c28:	f000 f888 	bl	8007d3c <xTaskResumeAll>
 8007c2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d107      	bne.n	8007c44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <vTaskDelay+0x64>)
 8007c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20001244 	.word	0x20001244
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08a      	sub	sp, #40	; 0x28
 8007c58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c62:	463a      	mov	r2, r7
 8007c64:	1d39      	adds	r1, r7, #4
 8007c66:	f107 0308 	add.w	r3, r7, #8
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fce2 	bl	8006634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	9202      	str	r2, [sp, #8]
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	460a      	mov	r2, r1
 8007c82:	4921      	ldr	r1, [pc, #132]	; (8007d08 <vTaskStartScheduler+0xb4>)
 8007c84:	4821      	ldr	r0, [pc, #132]	; (8007d0c <vTaskStartScheduler+0xb8>)
 8007c86:	f7ff fe19 	bl	80078bc <xTaskCreateStatic>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4a20      	ldr	r2, [pc, #128]	; (8007d10 <vTaskStartScheduler+0xbc>)
 8007c8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c90:	4b1f      	ldr	r3, [pc, #124]	; (8007d10 <vTaskStartScheduler+0xbc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e001      	b.n	8007ca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d102      	bne.n	8007cae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ca8:	f000 fe0e 	bl	80088c8 <xTimerCreateTimerTask>
 8007cac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d116      	bne.n	8007ce2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	613b      	str	r3, [r7, #16]
}
 8007cc6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cc8:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <vTaskStartScheduler+0xc0>)
 8007cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cd0:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <vTaskStartScheduler+0xc4>)
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007cd6:	4b11      	ldr	r3, [pc, #68]	; (8007d1c <vTaskStartScheduler+0xc8>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cdc:	f001 f990 	bl	8009000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ce0:	e00e      	b.n	8007d00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce8:	d10a      	bne.n	8007d00 <vTaskStartScheduler+0xac>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	60fb      	str	r3, [r7, #12]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <vTaskStartScheduler+0xaa>
}
 8007d00:	bf00      	nop
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	0800ae24 	.word	0x0800ae24
 8007d0c:	08008341 	.word	0x08008341
 8007d10:	20001240 	.word	0x20001240
 8007d14:	2000123c 	.word	0x2000123c
 8007d18:	20001228 	.word	0x20001228
 8007d1c:	20001220 	.word	0x20001220

08007d20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d24:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <vTaskSuspendAll+0x18>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	4a03      	ldr	r2, [pc, #12]	; (8007d38 <vTaskSuspendAll+0x18>)
 8007d2c:	6013      	str	r3, [r2, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	20001244 	.word	0x20001244

08007d3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d4a:	4b42      	ldr	r3, [pc, #264]	; (8007e54 <xTaskResumeAll+0x118>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	603b      	str	r3, [r7, #0]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d68:	f001 f9ec 	bl	8009144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d6c:	4b39      	ldr	r3, [pc, #228]	; (8007e54 <xTaskResumeAll+0x118>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	4a38      	ldr	r2, [pc, #224]	; (8007e54 <xTaskResumeAll+0x118>)
 8007d74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d76:	4b37      	ldr	r3, [pc, #220]	; (8007e54 <xTaskResumeAll+0x118>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d162      	bne.n	8007e44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d7e:	4b36      	ldr	r3, [pc, #216]	; (8007e58 <xTaskResumeAll+0x11c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d05e      	beq.n	8007e44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d86:	e02f      	b.n	8007de8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d88:	4b34      	ldr	r3, [pc, #208]	; (8007e5c <xTaskResumeAll+0x120>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3318      	adds	r3, #24
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fd0b 	bl	80067b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe fd06 	bl	80067b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	4b2d      	ldr	r3, [pc, #180]	; (8007e60 <xTaskResumeAll+0x124>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d903      	bls.n	8007db8 <xTaskResumeAll+0x7c>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4a2a      	ldr	r2, [pc, #168]	; (8007e60 <xTaskResumeAll+0x124>)
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4a27      	ldr	r2, [pc, #156]	; (8007e64 <xTaskResumeAll+0x128>)
 8007dc6:	441a      	add	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7fe fc91 	bl	80066f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd8:	4b23      	ldr	r3, [pc, #140]	; (8007e68 <xTaskResumeAll+0x12c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d302      	bcc.n	8007de8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007de2:	4b22      	ldr	r3, [pc, #136]	; (8007e6c <xTaskResumeAll+0x130>)
 8007de4:	2201      	movs	r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007de8:	4b1c      	ldr	r3, [pc, #112]	; (8007e5c <xTaskResumeAll+0x120>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1cb      	bne.n	8007d88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007df6:	f000 fb59 	bl	80084ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007dfa:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <xTaskResumeAll+0x134>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d010      	beq.n	8007e28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e06:	f000 f847 	bl	8007e98 <xTaskIncrementTick>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e10:	4b16      	ldr	r3, [pc, #88]	; (8007e6c <xTaskResumeAll+0x130>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f1      	bne.n	8007e06 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007e22:	4b13      	ldr	r3, [pc, #76]	; (8007e70 <xTaskResumeAll+0x134>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e28:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <xTaskResumeAll+0x130>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d009      	beq.n	8007e44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e34:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <xTaskResumeAll+0x138>)
 8007e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e44:	f001 f9ae 	bl	80091a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007e48:	68bb      	ldr	r3, [r7, #8]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20001244 	.word	0x20001244
 8007e58:	2000121c 	.word	0x2000121c
 8007e5c:	200011dc 	.word	0x200011dc
 8007e60:	20001224 	.word	0x20001224
 8007e64:	20000d4c 	.word	0x20000d4c
 8007e68:	20000d48 	.word	0x20000d48
 8007e6c:	20001230 	.word	0x20001230
 8007e70:	2000122c 	.word	0x2000122c
 8007e74:	e000ed04 	.word	0xe000ed04

08007e78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <xTaskGetTickCount+0x1c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e84:	687b      	ldr	r3, [r7, #4]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20001220 	.word	0x20001220

08007e98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ea2:	4b51      	ldr	r3, [pc, #324]	; (8007fe8 <xTaskIncrementTick+0x150>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f040 808e 	bne.w	8007fc8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007eac:	4b4f      	ldr	r3, [pc, #316]	; (8007fec <xTaskIncrementTick+0x154>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007eb4:	4a4d      	ldr	r2, [pc, #308]	; (8007fec <xTaskIncrementTick+0x154>)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d120      	bne.n	8007f02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ec0:	4b4b      	ldr	r3, [pc, #300]	; (8007ff0 <xTaskIncrementTick+0x158>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	603b      	str	r3, [r7, #0]
}
 8007edc:	bf00      	nop
 8007ede:	e7fe      	b.n	8007ede <xTaskIncrementTick+0x46>
 8007ee0:	4b43      	ldr	r3, [pc, #268]	; (8007ff0 <xTaskIncrementTick+0x158>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	4b43      	ldr	r3, [pc, #268]	; (8007ff4 <xTaskIncrementTick+0x15c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a41      	ldr	r2, [pc, #260]	; (8007ff0 <xTaskIncrementTick+0x158>)
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	4a41      	ldr	r2, [pc, #260]	; (8007ff4 <xTaskIncrementTick+0x15c>)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	4b40      	ldr	r3, [pc, #256]	; (8007ff8 <xTaskIncrementTick+0x160>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	4a3f      	ldr	r2, [pc, #252]	; (8007ff8 <xTaskIncrementTick+0x160>)
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	f000 fad5 	bl	80084ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f02:	4b3e      	ldr	r3, [pc, #248]	; (8007ffc <xTaskIncrementTick+0x164>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d34e      	bcc.n	8007faa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f0c:	4b38      	ldr	r3, [pc, #224]	; (8007ff0 <xTaskIncrementTick+0x158>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <xTaskIncrementTick+0x82>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xTaskIncrementTick+0x84>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f20:	4b36      	ldr	r3, [pc, #216]	; (8007ffc <xTaskIncrementTick+0x164>)
 8007f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f26:	601a      	str	r2, [r3, #0]
					break;
 8007f28:	e03f      	b.n	8007faa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f2a:	4b31      	ldr	r3, [pc, #196]	; (8007ff0 <xTaskIncrementTick+0x158>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d203      	bcs.n	8007f4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f42:	4a2e      	ldr	r2, [pc, #184]	; (8007ffc <xTaskIncrementTick+0x164>)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6013      	str	r3, [r2, #0]
						break;
 8007f48:	e02f      	b.n	8007faa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fc2e 	bl	80067b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	3318      	adds	r3, #24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fe fc25 	bl	80067b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6a:	4b25      	ldr	r3, [pc, #148]	; (8008000 <xTaskIncrementTick+0x168>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d903      	bls.n	8007f7a <xTaskIncrementTick+0xe2>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	4a22      	ldr	r2, [pc, #136]	; (8008000 <xTaskIncrementTick+0x168>)
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4a1f      	ldr	r2, [pc, #124]	; (8008004 <xTaskIncrementTick+0x16c>)
 8007f88:	441a      	add	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f7fe fbb0 	bl	80066f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9a:	4b1b      	ldr	r3, [pc, #108]	; (8008008 <xTaskIncrementTick+0x170>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d3b3      	bcc.n	8007f0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fa8:	e7b0      	b.n	8007f0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007faa:	4b17      	ldr	r3, [pc, #92]	; (8008008 <xTaskIncrementTick+0x170>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4914      	ldr	r1, [pc, #80]	; (8008004 <xTaskIncrementTick+0x16c>)
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d907      	bls.n	8007fd2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	e004      	b.n	8007fd2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <xTaskIncrementTick+0x174>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	4a0f      	ldr	r2, [pc, #60]	; (800800c <xTaskIncrementTick+0x174>)
 8007fd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007fd2:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <xTaskIncrementTick+0x178>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007fde:	697b      	ldr	r3, [r7, #20]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20001244 	.word	0x20001244
 8007fec:	20001220 	.word	0x20001220
 8007ff0:	200011d4 	.word	0x200011d4
 8007ff4:	200011d8 	.word	0x200011d8
 8007ff8:	20001234 	.word	0x20001234
 8007ffc:	2000123c 	.word	0x2000123c
 8008000:	20001224 	.word	0x20001224
 8008004:	20000d4c 	.word	0x20000d4c
 8008008:	20000d48 	.word	0x20000d48
 800800c:	2000122c 	.word	0x2000122c
 8008010:	20001230 	.word	0x20001230

08008014 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800801a:	4b28      	ldr	r3, [pc, #160]	; (80080bc <vTaskSwitchContext+0xa8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008022:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <vTaskSwitchContext+0xac>)
 8008024:	2201      	movs	r2, #1
 8008026:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008028:	e041      	b.n	80080ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800802a:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <vTaskSwitchContext+0xac>)
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008030:	4b24      	ldr	r3, [pc, #144]	; (80080c4 <vTaskSwitchContext+0xb0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	e010      	b.n	800805a <vTaskSwitchContext+0x46>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <vTaskSwitchContext+0x40>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	607b      	str	r3, [r7, #4]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <vTaskSwitchContext+0x3e>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3b01      	subs	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	491b      	ldr	r1, [pc, #108]	; (80080c8 <vTaskSwitchContext+0xb4>)
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	440b      	add	r3, r1
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0e4      	beq.n	8008038 <vTaskSwitchContext+0x24>
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4a13      	ldr	r2, [pc, #76]	; (80080c8 <vTaskSwitchContext+0xb4>)
 800807a:	4413      	add	r3, r2
 800807c:	60bb      	str	r3, [r7, #8]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	605a      	str	r2, [r3, #4]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	3308      	adds	r3, #8
 8008090:	429a      	cmp	r2, r3
 8008092:	d104      	bne.n	800809e <vTaskSwitchContext+0x8a>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	4a09      	ldr	r2, [pc, #36]	; (80080cc <vTaskSwitchContext+0xb8>)
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	4a06      	ldr	r2, [pc, #24]	; (80080c4 <vTaskSwitchContext+0xb0>)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6013      	str	r3, [r2, #0]
}
 80080ae:	bf00      	nop
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20001244 	.word	0x20001244
 80080c0:	20001230 	.word	0x20001230
 80080c4:	20001224 	.word	0x20001224
 80080c8:	20000d4c 	.word	0x20000d4c
 80080cc:	20000d48 	.word	0x20000d48

080080d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10a      	bne.n	80080f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080f6:	4b07      	ldr	r3, [pc, #28]	; (8008114 <vTaskPlaceOnEventList+0x44>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3318      	adds	r3, #24
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fe fb1d 	bl	800673e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008104:	2101      	movs	r1, #1
 8008106:	6838      	ldr	r0, [r7, #0]
 8008108:	f000 fb8a 	bl	8008820 <prvAddCurrentTaskToDelayedList>
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	20000d48 	.word	0x20000d48

08008118 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10a      	bne.n	8008140 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	617b      	str	r3, [r7, #20]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <vTaskPlaceOnEventListRestricted+0x54>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3318      	adds	r3, #24
 8008146:	4619      	mov	r1, r3
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7fe fad4 	bl	80066f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008158:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	68b8      	ldr	r0, [r7, #8]
 800815e:	f000 fb5f 	bl	8008820 <prvAddCurrentTaskToDelayedList>
	}
 8008162:	bf00      	nop
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000d48 	.word	0x20000d48

08008170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	60fb      	str	r3, [r7, #12]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	3318      	adds	r3, #24
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fb05 	bl	80067b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a6:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <xTaskRemoveFromEventList+0xb0>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d11d      	bne.n	80081ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fafc 	bl	80067b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081bc:	4b19      	ldr	r3, [pc, #100]	; (8008224 <xTaskRemoveFromEventList+0xb4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d903      	bls.n	80081cc <xTaskRemoveFromEventList+0x5c>
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	4a16      	ldr	r2, [pc, #88]	; (8008224 <xTaskRemoveFromEventList+0xb4>)
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a13      	ldr	r2, [pc, #76]	; (8008228 <xTaskRemoveFromEventList+0xb8>)
 80081da:	441a      	add	r2, r3
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe fa87 	bl	80066f6 <vListInsertEnd>
 80081e8:	e005      	b.n	80081f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3318      	adds	r3, #24
 80081ee:	4619      	mov	r1, r3
 80081f0:	480e      	ldr	r0, [pc, #56]	; (800822c <xTaskRemoveFromEventList+0xbc>)
 80081f2:	f7fe fa80 	bl	80066f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fa:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <xTaskRemoveFromEventList+0xc0>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	429a      	cmp	r2, r3
 8008202:	d905      	bls.n	8008210 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008204:	2301      	movs	r3, #1
 8008206:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008208:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <xTaskRemoveFromEventList+0xc4>)
 800820a:	2201      	movs	r2, #1
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e001      	b.n	8008214 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008214:	697b      	ldr	r3, [r7, #20]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20001244 	.word	0x20001244
 8008224:	20001224 	.word	0x20001224
 8008228:	20000d4c 	.word	0x20000d4c
 800822c:	200011dc 	.word	0x200011dc
 8008230:	20000d48 	.word	0x20000d48
 8008234:	20001230 	.word	0x20001230

08008238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008240:	4b06      	ldr	r3, [pc, #24]	; (800825c <vTaskInternalSetTimeOutState+0x24>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008248:	4b05      	ldr	r3, [pc, #20]	; (8008260 <vTaskInternalSetTimeOutState+0x28>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	605a      	str	r2, [r3, #4]
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20001234 	.word	0x20001234
 8008260:	20001220 	.word	0x20001220

08008264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	613b      	str	r3, [r7, #16]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	60fb      	str	r3, [r7, #12]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082a6:	f000 ff4d 	bl	8009144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082aa:	4b1d      	ldr	r3, [pc, #116]	; (8008320 <xTaskCheckForTimeOut+0xbc>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c2:	d102      	bne.n	80082ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	e023      	b.n	8008312 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b15      	ldr	r3, [pc, #84]	; (8008324 <xTaskCheckForTimeOut+0xc0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d007      	beq.n	80082e6 <xTaskCheckForTimeOut+0x82>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d302      	bcc.n	80082e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082e0:	2301      	movs	r3, #1
 80082e2:	61fb      	str	r3, [r7, #28]
 80082e4:	e015      	b.n	8008312 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d20b      	bcs.n	8008308 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff ff9b 	bl	8008238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	e004      	b.n	8008312 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800830e:	2301      	movs	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008312:	f000 ff47 	bl	80091a4 <vPortExitCritical>

	return xReturn;
 8008316:	69fb      	ldr	r3, [r7, #28]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3720      	adds	r7, #32
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20001220 	.word	0x20001220
 8008324:	20001234 	.word	0x20001234

08008328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800832c:	4b03      	ldr	r3, [pc, #12]	; (800833c <vTaskMissedYield+0x14>)
 800832e:	2201      	movs	r2, #1
 8008330:	601a      	str	r2, [r3, #0]
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20001230 	.word	0x20001230

08008340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008348:	f000 f852 	bl	80083f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800834c:	4b06      	ldr	r3, [pc, #24]	; (8008368 <prvIdleTask+0x28>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d9f9      	bls.n	8008348 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <prvIdleTask+0x2c>)
 8008356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008364:	e7f0      	b.n	8008348 <prvIdleTask+0x8>
 8008366:	bf00      	nop
 8008368:	20000d4c 	.word	0x20000d4c
 800836c:	e000ed04 	.word	0xe000ed04

08008370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008376:	2300      	movs	r3, #0
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	e00c      	b.n	8008396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	4613      	mov	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4a12      	ldr	r2, [pc, #72]	; (80083d0 <prvInitialiseTaskLists+0x60>)
 8008388:	4413      	add	r3, r2
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe f986 	bl	800669c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3301      	adds	r3, #1
 8008394:	607b      	str	r3, [r7, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b37      	cmp	r3, #55	; 0x37
 800839a:	d9ef      	bls.n	800837c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800839c:	480d      	ldr	r0, [pc, #52]	; (80083d4 <prvInitialiseTaskLists+0x64>)
 800839e:	f7fe f97d 	bl	800669c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083a2:	480d      	ldr	r0, [pc, #52]	; (80083d8 <prvInitialiseTaskLists+0x68>)
 80083a4:	f7fe f97a 	bl	800669c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083a8:	480c      	ldr	r0, [pc, #48]	; (80083dc <prvInitialiseTaskLists+0x6c>)
 80083aa:	f7fe f977 	bl	800669c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083ae:	480c      	ldr	r0, [pc, #48]	; (80083e0 <prvInitialiseTaskLists+0x70>)
 80083b0:	f7fe f974 	bl	800669c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083b4:	480b      	ldr	r0, [pc, #44]	; (80083e4 <prvInitialiseTaskLists+0x74>)
 80083b6:	f7fe f971 	bl	800669c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <prvInitialiseTaskLists+0x78>)
 80083bc:	4a05      	ldr	r2, [pc, #20]	; (80083d4 <prvInitialiseTaskLists+0x64>)
 80083be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083c0:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <prvInitialiseTaskLists+0x7c>)
 80083c2:	4a05      	ldr	r2, [pc, #20]	; (80083d8 <prvInitialiseTaskLists+0x68>)
 80083c4:	601a      	str	r2, [r3, #0]
}
 80083c6:	bf00      	nop
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000d4c 	.word	0x20000d4c
 80083d4:	200011ac 	.word	0x200011ac
 80083d8:	200011c0 	.word	0x200011c0
 80083dc:	200011dc 	.word	0x200011dc
 80083e0:	200011f0 	.word	0x200011f0
 80083e4:	20001208 	.word	0x20001208
 80083e8:	200011d4 	.word	0x200011d4
 80083ec:	200011d8 	.word	0x200011d8

080083f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083f6:	e019      	b.n	800842c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083f8:	f000 fea4 	bl	8009144 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80083fc:	4b10      	ldr	r3, [pc, #64]	; (8008440 <prvCheckTasksWaitingTermination+0x50>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3304      	adds	r3, #4
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe f9d1 	bl	80067b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <prvCheckTasksWaitingTermination+0x54>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3b01      	subs	r3, #1
 8008414:	4a0b      	ldr	r2, [pc, #44]	; (8008444 <prvCheckTasksWaitingTermination+0x54>)
 8008416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008418:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <prvCheckTasksWaitingTermination+0x58>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3b01      	subs	r3, #1
 800841e:	4a0a      	ldr	r2, [pc, #40]	; (8008448 <prvCheckTasksWaitingTermination+0x58>)
 8008420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008422:	f000 febf 	bl	80091a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f810 	bl	800844c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800842c:	4b06      	ldr	r3, [pc, #24]	; (8008448 <prvCheckTasksWaitingTermination+0x58>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e1      	bne.n	80083f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	200011f0 	.word	0x200011f0
 8008444:	2000121c 	.word	0x2000121c
 8008448:	20001204 	.word	0x20001204

0800844c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800845a:	2b00      	cmp	r3, #0
 800845c:	d108      	bne.n	8008470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	4618      	mov	r0, r3
 8008464:	f001 f854 	bl	8009510 <vPortFree>
				vPortFree( pxTCB );
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 f851 	bl	8009510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800846e:	e018      	b.n	80084a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008476:	2b01      	cmp	r3, #1
 8008478:	d103      	bne.n	8008482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 f848 	bl	8009510 <vPortFree>
	}
 8008480:	e00f      	b.n	80084a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008488:	2b02      	cmp	r3, #2
 800848a:	d00a      	beq.n	80084a2 <prvDeleteTCB+0x56>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	60fb      	str	r3, [r7, #12]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <prvDeleteTCB+0x54>
	}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084b2:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <prvResetNextTaskUnblockTime+0x44>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <prvResetNextTaskUnblockTime+0x14>
 80084bc:	2301      	movs	r3, #1
 80084be:	e000      	b.n	80084c2 <prvResetNextTaskUnblockTime+0x16>
 80084c0:	2300      	movs	r3, #0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <prvResetNextTaskUnblockTime+0x48>)
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084ce:	e008      	b.n	80084e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084d0:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <prvResetNextTaskUnblockTime+0x44>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	4a05      	ldr	r2, [pc, #20]	; (80084f4 <prvResetNextTaskUnblockTime+0x48>)
 80084e0:	6013      	str	r3, [r2, #0]
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	200011d4 	.word	0x200011d4
 80084f4:	2000123c 	.word	0x2000123c

080084f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <xTaskGetSchedulerState+0x34>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008506:	2301      	movs	r3, #1
 8008508:	607b      	str	r3, [r7, #4]
 800850a:	e008      	b.n	800851e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800850c:	4b08      	ldr	r3, [pc, #32]	; (8008530 <xTaskGetSchedulerState+0x38>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008514:	2302      	movs	r3, #2
 8008516:	607b      	str	r3, [r7, #4]
 8008518:	e001      	b.n	800851e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800851a:	2300      	movs	r3, #0
 800851c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800851e:	687b      	ldr	r3, [r7, #4]
	}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	20001228 	.word	0x20001228
 8008530:	20001244 	.word	0x20001244

08008534 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d056      	beq.n	80085f8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854e:	4b2d      	ldr	r3, [pc, #180]	; (8008604 <xTaskPriorityInherit+0xd0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	429a      	cmp	r2, r3
 8008556:	d246      	bcs.n	80085e6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	db06      	blt.n	800856e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008560:	4b28      	ldr	r3, [pc, #160]	; (8008604 <xTaskPriorityInherit+0xd0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6959      	ldr	r1, [r3, #20]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4a22      	ldr	r2, [pc, #136]	; (8008608 <xTaskPriorityInherit+0xd4>)
 8008580:	4413      	add	r3, r2
 8008582:	4299      	cmp	r1, r3
 8008584:	d101      	bne.n	800858a <xTaskPriorityInherit+0x56>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <xTaskPriorityInherit+0x58>
 800858a:	2300      	movs	r3, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d022      	beq.n	80085d6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe f90b 	bl	80067b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800859a:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <xTaskPriorityInherit+0xd0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	4b18      	ldr	r3, [pc, #96]	; (800860c <xTaskPriorityInherit+0xd8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d903      	bls.n	80085b8 <xTaskPriorityInherit+0x84>
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	4a15      	ldr	r2, [pc, #84]	; (800860c <xTaskPriorityInherit+0xd8>)
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4a10      	ldr	r2, [pc, #64]	; (8008608 <xTaskPriorityInherit+0xd4>)
 80085c6:	441a      	add	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7fe f891 	bl	80066f6 <vListInsertEnd>
 80085d4:	e004      	b.n	80085e0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <xTaskPriorityInherit+0xd0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085e0:	2301      	movs	r3, #1
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	e008      	b.n	80085f8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <xTaskPriorityInherit+0xd0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d201      	bcs.n	80085f8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085f8:	68fb      	ldr	r3, [r7, #12]
	}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000d48 	.word	0x20000d48
 8008608:	20000d4c 	.word	0x20000d4c
 800860c:	20001224 	.word	0x20001224

08008610 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d056      	beq.n	80086d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008626:	4b2e      	ldr	r3, [pc, #184]	; (80086e0 <xTaskPriorityDisinherit+0xd0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	429a      	cmp	r2, r3
 800862e:	d00a      	beq.n	8008646 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	60bb      	str	r3, [r7, #8]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008668:	1e5a      	subs	r2, r3, #1
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008676:	429a      	cmp	r2, r3
 8008678:	d02c      	beq.n	80086d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867e:	2b00      	cmp	r3, #0
 8008680:	d128      	bne.n	80086d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	3304      	adds	r3, #4
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe f892 	bl	80067b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a4:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <xTaskPriorityDisinherit+0xd4>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d903      	bls.n	80086b4 <xTaskPriorityDisinherit+0xa4>
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	4a0c      	ldr	r2, [pc, #48]	; (80086e4 <xTaskPriorityDisinherit+0xd4>)
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4a09      	ldr	r2, [pc, #36]	; (80086e8 <xTaskPriorityDisinherit+0xd8>)
 80086c2:	441a      	add	r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	3304      	adds	r3, #4
 80086c8:	4619      	mov	r1, r3
 80086ca:	4610      	mov	r0, r2
 80086cc:	f7fe f813 	bl	80066f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086d4:	697b      	ldr	r3, [r7, #20]
	}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20000d48 	.word	0x20000d48
 80086e4:	20001224 	.word	0x20001224
 80086e8:	20000d4c 	.word	0x20000d4c

080086ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086fa:	2301      	movs	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d06f      	beq.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10a      	bne.n	8008722 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	60fb      	str	r3, [r7, #12]
}
 800871e:	bf00      	nop
 8008720:	e7fe      	b.n	8008720 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	429a      	cmp	r2, r3
 800872a:	d902      	bls.n	8008732 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	61fb      	str	r3, [r7, #28]
 8008730:	e002      	b.n	8008738 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008736:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	429a      	cmp	r2, r3
 8008740:	d050      	beq.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	429a      	cmp	r2, r3
 800874a:	d14b      	bne.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800874c:	4b27      	ldr	r3, [pc, #156]	; (80087ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	429a      	cmp	r2, r3
 8008754:	d10a      	bne.n	800876c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60bb      	str	r3, [r7, #8]
}
 8008768:	bf00      	nop
 800876a:	e7fe      	b.n	800876a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	db04      	blt.n	800878a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	6959      	ldr	r1, [r3, #20]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4a15      	ldr	r2, [pc, #84]	; (80087f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800879a:	4413      	add	r3, r2
 800879c:	4299      	cmp	r1, r3
 800879e:	d101      	bne.n	80087a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e000      	b.n	80087a6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80087a4:	2300      	movs	r3, #0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d01c      	beq.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fd fffe 	bl	80067b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4b0e      	ldr	r3, [pc, #56]	; (80087f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d903      	bls.n	80087c8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80087d6:	441a      	add	r2, r3
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	3304      	adds	r3, #4
 80087dc:	4619      	mov	r1, r3
 80087de:	4610      	mov	r0, r2
 80087e0:	f7fd ff89 	bl	80066f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087e4:	bf00      	nop
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20000d48 	.word	0x20000d48
 80087f0:	20000d4c 	.word	0x20000d4c
 80087f4:	20001224 	.word	0x20001224

080087f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <pvTaskIncrementMutexHeldCount+0x24>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <pvTaskIncrementMutexHeldCount+0x24>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800880a:	3201      	adds	r2, #1
 800880c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800880e:	4b03      	ldr	r3, [pc, #12]	; (800881c <pvTaskIncrementMutexHeldCount+0x24>)
 8008810:	681b      	ldr	r3, [r3, #0]
	}
 8008812:	4618      	mov	r0, r3
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	20000d48 	.word	0x20000d48

08008820 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800882a:	4b21      	ldr	r3, [pc, #132]	; (80088b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008830:	4b20      	ldr	r3, [pc, #128]	; (80088b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3304      	adds	r3, #4
 8008836:	4618      	mov	r0, r3
 8008838:	f7fd ffba 	bl	80067b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008842:	d10a      	bne.n	800885a <prvAddCurrentTaskToDelayedList+0x3a>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d007      	beq.n	800885a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800884a:	4b1a      	ldr	r3, [pc, #104]	; (80088b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3304      	adds	r3, #4
 8008850:	4619      	mov	r1, r3
 8008852:	4819      	ldr	r0, [pc, #100]	; (80088b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008854:	f7fd ff4f 	bl	80066f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008858:	e026      	b.n	80088a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4413      	add	r3, r2
 8008860:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008862:	4b14      	ldr	r3, [pc, #80]	; (80088b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	429a      	cmp	r2, r3
 8008870:	d209      	bcs.n	8008886 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3304      	adds	r3, #4
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7fd ff5d 	bl	800673e <vListInsert>
}
 8008884:	e010      	b.n	80088a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008886:	4b0e      	ldr	r3, [pc, #56]	; (80088c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3304      	adds	r3, #4
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	f7fd ff53 	bl	800673e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008898:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d202      	bcs.n	80088a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088a2:	4a08      	ldr	r2, [pc, #32]	; (80088c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6013      	str	r3, [r2, #0]
}
 80088a8:	bf00      	nop
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	20001220 	.word	0x20001220
 80088b4:	20000d48 	.word	0x20000d48
 80088b8:	20001208 	.word	0x20001208
 80088bc:	200011d8 	.word	0x200011d8
 80088c0:	200011d4 	.word	0x200011d4
 80088c4:	2000123c 	.word	0x2000123c

080088c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08a      	sub	sp, #40	; 0x28
 80088cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088d2:	f000 facb 	bl	8008e6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088d6:	4b1c      	ldr	r3, [pc, #112]	; (8008948 <xTimerCreateTimerTask+0x80>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d021      	beq.n	8008922 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088e6:	1d3a      	adds	r2, r7, #4
 80088e8:	f107 0108 	add.w	r1, r7, #8
 80088ec:	f107 030c 	add.w	r3, r7, #12
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fd feb9 	bl	8006668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	9202      	str	r2, [sp, #8]
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	2302      	movs	r3, #2
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	460a      	mov	r2, r1
 8008908:	4910      	ldr	r1, [pc, #64]	; (800894c <xTimerCreateTimerTask+0x84>)
 800890a:	4811      	ldr	r0, [pc, #68]	; (8008950 <xTimerCreateTimerTask+0x88>)
 800890c:	f7fe ffd6 	bl	80078bc <xTaskCreateStatic>
 8008910:	4603      	mov	r3, r0
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <xTimerCreateTimerTask+0x8c>)
 8008914:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008916:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <xTimerCreateTimerTask+0x8c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800891e:	2301      	movs	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	613b      	str	r3, [r7, #16]
}
 800893a:	bf00      	nop
 800893c:	e7fe      	b.n	800893c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800893e:	697b      	ldr	r3, [r7, #20]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20001278 	.word	0x20001278
 800894c:	0800ae2c 	.word	0x0800ae2c
 8008950:	08008a75 	.word	0x08008a75
 8008954:	2000127c 	.word	0x2000127c

08008958 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08a      	sub	sp, #40	; 0x28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008966:	2300      	movs	r3, #0
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	623b      	str	r3, [r7, #32]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008986:	4b1a      	ldr	r3, [pc, #104]	; (80089f0 <xTimerGenericCommand+0x98>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d02a      	beq.n	80089e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b05      	cmp	r3, #5
 800899e:	dc18      	bgt.n	80089d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089a0:	f7ff fdaa 	bl	80084f8 <xTaskGetSchedulerState>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d109      	bne.n	80089be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089aa:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <xTimerGenericCommand+0x98>)
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	f107 0110 	add.w	r1, r7, #16
 80089b2:	2300      	movs	r3, #0
 80089b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b6:	f7fe f91d 	bl	8006bf4 <xQueueGenericSend>
 80089ba:	6278      	str	r0, [r7, #36]	; 0x24
 80089bc:	e012      	b.n	80089e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <xTimerGenericCommand+0x98>)
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f107 0110 	add.w	r1, r7, #16
 80089c6:	2300      	movs	r3, #0
 80089c8:	2200      	movs	r2, #0
 80089ca:	f7fe f913 	bl	8006bf4 <xQueueGenericSend>
 80089ce:	6278      	str	r0, [r7, #36]	; 0x24
 80089d0:	e008      	b.n	80089e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <xTimerGenericCommand+0x98>)
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	f107 0110 	add.w	r1, r7, #16
 80089da:	2300      	movs	r3, #0
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	f7fe fa07 	bl	8006df0 <xQueueGenericSendFromISR>
 80089e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3728      	adds	r7, #40	; 0x28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20001278 	.word	0x20001278

080089f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af02      	add	r7, sp, #8
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089fe:	4b1c      	ldr	r3, [pc, #112]	; (8008a70 <prvProcessExpiredTimer+0x7c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fd fecf 	bl	80067b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d122      	bne.n	8008a60 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	18d1      	adds	r1, r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	6978      	ldr	r0, [r7, #20]
 8008a28:	f000 f8c8 	bl	8008bbc <prvInsertTimerInActiveList>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d016      	beq.n	8008a60 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a32:	2300      	movs	r3, #0
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	6978      	ldr	r0, [r7, #20]
 8008a3e:	f7ff ff8b 	bl	8008958 <xTimerGenericCommand>
 8008a42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	60fb      	str	r3, [r7, #12]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	6978      	ldr	r0, [r7, #20]
 8008a66:	4798      	blx	r3
}
 8008a68:	bf00      	nop
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20001270 	.word	0x20001270

08008a74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a7c:	f107 0308 	add.w	r3, r7, #8
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 f857 	bl	8008b34 <prvGetNextExpireTime>
 8008a86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 f803 	bl	8008a98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a92:	f000 f8d5 	bl	8008c40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a96:	e7f1      	b.n	8008a7c <prvTimerTask+0x8>

08008a98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008aa2:	f7ff f93d 	bl	8007d20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f866 	bl	8008b7c <prvSampleTimeNow>
 8008ab0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d130      	bne.n	8008b1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <prvProcessTimerOrBlockTask+0x3c>
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d806      	bhi.n	8008ad4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ac6:	f7ff f939 	bl	8007d3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008aca:	68f9      	ldr	r1, [r7, #12]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff ff91 	bl	80089f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ad2:	e024      	b.n	8008b1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ada:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <prvProcessTimerOrBlockTask+0x90>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2301      	moveq	r3, #1
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <prvProcessTimerOrBlockTask+0x94>)
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4619      	mov	r1, r3
 8008afa:	f7fe feab 	bl	8007854 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008afe:	f7ff f91d 	bl	8007d3c <xTaskResumeAll>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b08:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <prvProcessTimerOrBlockTask+0x98>)
 8008b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	f3bf 8f6f 	isb	sy
}
 8008b18:	e001      	b.n	8008b1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b1a:	f7ff f90f 	bl	8007d3c <xTaskResumeAll>
}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20001274 	.word	0x20001274
 8008b2c:	20001278 	.word	0x20001278
 8008b30:	e000ed04 	.word	0xe000ed04

08008b34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <prvGetNextExpireTime+0x44>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bf0c      	ite	eq
 8008b46:	2301      	moveq	r3, #1
 8008b48:	2300      	movne	r3, #0
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d105      	bne.n	8008b66 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <prvGetNextExpireTime+0x44>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e001      	b.n	8008b6a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	20001270 	.word	0x20001270

08008b7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b84:	f7ff f978 	bl	8007e78 <xTaskGetTickCount>
 8008b88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <prvSampleTimeNow+0x3c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d205      	bcs.n	8008ba0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b94:	f000 f908 	bl	8008da8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ba6:	4a04      	ldr	r2, [pc, #16]	; (8008bb8 <prvSampleTimeNow+0x3c>)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bac:	68fb      	ldr	r3, [r7, #12]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20001280 	.word	0x20001280

08008bbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d812      	bhi.n	8008c08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	e01b      	b.n	8008c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008bf6:	4b10      	ldr	r3, [pc, #64]	; (8008c38 <prvInsertTimerInActiveList+0x7c>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7fd fd9c 	bl	800673e <vListInsert>
 8008c06:	e012      	b.n	8008c2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d206      	bcs.n	8008c1e <prvInsertTimerInActiveList+0x62>
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d302      	bcc.n	8008c1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e007      	b.n	8008c2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c1e:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <prvInsertTimerInActiveList+0x80>)
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f7fd fd88 	bl	800673e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c2e:	697b      	ldr	r3, [r7, #20]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20001274 	.word	0x20001274
 8008c3c:	20001270 	.word	0x20001270

08008c40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08e      	sub	sp, #56	; 0x38
 8008c44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c46:	e09d      	b.n	8008d84 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	da18      	bge.n	8008c80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c4e:	1d3b      	adds	r3, r7, #4
 8008c50:	3304      	adds	r3, #4
 8008c52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10a      	bne.n	8008c70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	61fb      	str	r3, [r7, #28]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c76:	6850      	ldr	r0, [r2, #4]
 8008c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c7a:	6892      	ldr	r2, [r2, #8]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	db7d      	blt.n	8008d82 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d004      	beq.n	8008c9c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	3304      	adds	r3, #4
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fd fd8a 	bl	80067b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff ff6c 	bl	8008b7c <prvSampleTimeNow>
 8008ca4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b09      	cmp	r3, #9
 8008caa:	d86b      	bhi.n	8008d84 <prvProcessReceivedCommands+0x144>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <prvProcessReceivedCommands+0x74>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008cdd 	.word	0x08008cdd
 8008cb8:	08008cdd 	.word	0x08008cdd
 8008cbc:	08008cdd 	.word	0x08008cdd
 8008cc0:	08008d85 	.word	0x08008d85
 8008cc4:	08008d39 	.word	0x08008d39
 8008cc8:	08008d71 	.word	0x08008d71
 8008ccc:	08008cdd 	.word	0x08008cdd
 8008cd0:	08008cdd 	.word	0x08008cdd
 8008cd4:	08008d85 	.word	0x08008d85
 8008cd8:	08008d39 	.word	0x08008d39
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	18d1      	adds	r1, r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cea:	f7ff ff67 	bl	8008bbc <prvInsertTimerInActiveList>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d047      	beq.n	8008d84 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d13f      	bne.n	8008d84 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	441a      	add	r2, r3
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2300      	movs	r3, #0
 8008d12:	2100      	movs	r1, #0
 8008d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d16:	f7ff fe1f 	bl	8008958 <xTimerGenericCommand>
 8008d1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d130      	bne.n	8008d84 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	61bb      	str	r3, [r7, #24]
}
 8008d34:	bf00      	nop
 8008d36:	e7fe      	b.n	8008d36 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	617b      	str	r3, [r7, #20]
}
 8008d58:	bf00      	nop
 8008d5a:	e7fe      	b.n	8008d5a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	699a      	ldr	r2, [r3, #24]
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	18d1      	adds	r1, r2, r3
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d6a:	f7ff ff27 	bl	8008bbc <prvInsertTimerInActiveList>
					break;
 8008d6e:	e009      	b.n	8008d84 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d104      	bne.n	8008d84 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d7c:	f000 fbc8 	bl	8009510 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d80:	e000      	b.n	8008d84 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d82:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d84:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <prvProcessReceivedCommands+0x164>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	1d39      	adds	r1, r7, #4
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fe f955 	bl	800703c <xQueueReceive>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f47f af57 	bne.w	8008c48 <prvProcessReceivedCommands+0x8>
	}
}
 8008d9a:	bf00      	nop
 8008d9c:	bf00      	nop
 8008d9e:	3730      	adds	r7, #48	; 0x30
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20001278 	.word	0x20001278

08008da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dae:	e045      	b.n	8008e3c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008db0:	4b2c      	ldr	r3, [pc, #176]	; (8008e64 <prvSwitchTimerLists+0xbc>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dba:	4b2a      	ldr	r3, [pc, #168]	; (8008e64 <prvSwitchTimerLists+0xbc>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fd fcf1 	bl	80067b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d12e      	bne.n	8008e3c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	4413      	add	r3, r2
 8008de6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d90e      	bls.n	8008e0e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dfc:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <prvSwitchTimerLists+0xbc>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f7fd fc99 	bl	800673e <vListInsert>
 8008e0c:	e016      	b.n	8008e3c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	2300      	movs	r3, #0
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	2100      	movs	r1, #0
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff fd9d 	bl	8008958 <xTimerGenericCommand>
 8008e1e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	603b      	str	r3, [r7, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	e7fe      	b.n	8008e3a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e3c:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <prvSwitchTimerLists+0xbc>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1b4      	bne.n	8008db0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e46:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <prvSwitchTimerLists+0xbc>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <prvSwitchTimerLists+0xc0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a04      	ldr	r2, [pc, #16]	; (8008e64 <prvSwitchTimerLists+0xbc>)
 8008e52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e54:	4a04      	ldr	r2, [pc, #16]	; (8008e68 <prvSwitchTimerLists+0xc0>)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	6013      	str	r3, [r2, #0]
}
 8008e5a:	bf00      	nop
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20001270 	.word	0x20001270
 8008e68:	20001274 	.word	0x20001274

08008e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e72:	f000 f967 	bl	8009144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e76:	4b15      	ldr	r3, [pc, #84]	; (8008ecc <prvCheckForValidListAndQueue+0x60>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d120      	bne.n	8008ec0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e7e:	4814      	ldr	r0, [pc, #80]	; (8008ed0 <prvCheckForValidListAndQueue+0x64>)
 8008e80:	f7fd fc0c 	bl	800669c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e84:	4813      	ldr	r0, [pc, #76]	; (8008ed4 <prvCheckForValidListAndQueue+0x68>)
 8008e86:	f7fd fc09 	bl	800669c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e8a:	4b13      	ldr	r3, [pc, #76]	; (8008ed8 <prvCheckForValidListAndQueue+0x6c>)
 8008e8c:	4a10      	ldr	r2, [pc, #64]	; (8008ed0 <prvCheckForValidListAndQueue+0x64>)
 8008e8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e90:	4b12      	ldr	r3, [pc, #72]	; (8008edc <prvCheckForValidListAndQueue+0x70>)
 8008e92:	4a10      	ldr	r2, [pc, #64]	; (8008ed4 <prvCheckForValidListAndQueue+0x68>)
 8008e94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e96:	2300      	movs	r3, #0
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <prvCheckForValidListAndQueue+0x74>)
 8008e9c:	4a11      	ldr	r2, [pc, #68]	; (8008ee4 <prvCheckForValidListAndQueue+0x78>)
 8008e9e:	2110      	movs	r1, #16
 8008ea0:	200a      	movs	r0, #10
 8008ea2:	f7fd fd17 	bl	80068d4 <xQueueGenericCreateStatic>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4a08      	ldr	r2, [pc, #32]	; (8008ecc <prvCheckForValidListAndQueue+0x60>)
 8008eaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008eac:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <prvCheckForValidListAndQueue+0x60>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <prvCheckForValidListAndQueue+0x60>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	490b      	ldr	r1, [pc, #44]	; (8008ee8 <prvCheckForValidListAndQueue+0x7c>)
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fc76 	bl	80077ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ec0:	f000 f970 	bl	80091a4 <vPortExitCritical>
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20001278 	.word	0x20001278
 8008ed0:	20001248 	.word	0x20001248
 8008ed4:	2000125c 	.word	0x2000125c
 8008ed8:	20001270 	.word	0x20001270
 8008edc:	20001274 	.word	0x20001274
 8008ee0:	20001324 	.word	0x20001324
 8008ee4:	20001284 	.word	0x20001284
 8008ee8:	0800ae34 	.word	0x0800ae34

08008eec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3b04      	subs	r3, #4
 8008efc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3b04      	subs	r3, #4
 8008f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f023 0201 	bic.w	r2, r3, #1
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3b04      	subs	r3, #4
 8008f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f1c:	4a0c      	ldr	r2, [pc, #48]	; (8008f50 <pxPortInitialiseStack+0x64>)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3b14      	subs	r3, #20
 8008f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3b04      	subs	r3, #4
 8008f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f06f 0202 	mvn.w	r2, #2
 8008f3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3b20      	subs	r3, #32
 8008f40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f42:	68fb      	ldr	r3, [r7, #12]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	08008f55 	.word	0x08008f55

08008f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f5e:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <prvTaskExitError+0x54>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f66:	d00a      	beq.n	8008f7e <prvTaskExitError+0x2a>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60fb      	str	r3, [r7, #12]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <prvTaskExitError+0x28>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	60bb      	str	r3, [r7, #8]
}
 8008f90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f92:	bf00      	nop
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0fc      	beq.n	8008f94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	2000000c 	.word	0x2000000c
 8008fac:	00000000 	.word	0x00000000

08008fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <pxCurrentTCBConst2>)
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	6808      	ldr	r0, [r1, #0]
 8008fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	f380 8809 	msr	PSP, r0
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f04f 0000 	mov.w	r0, #0
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	4770      	bx	lr
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst2>:
 8008fd0:	20000d48 	.word	0x20000d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fd8:	4808      	ldr	r0, [pc, #32]	; (8008ffc <prvPortStartFirstTask+0x24>)
 8008fda:	6800      	ldr	r0, [r0, #0]
 8008fdc:	6800      	ldr	r0, [r0, #0]
 8008fde:	f380 8808 	msr	MSP, r0
 8008fe2:	f04f 0000 	mov.w	r0, #0
 8008fe6:	f380 8814 	msr	CONTROL, r0
 8008fea:	b662      	cpsie	i
 8008fec:	b661      	cpsie	f
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	df00      	svc	0
 8008ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ffa:	bf00      	nop
 8008ffc:	e000ed08 	.word	0xe000ed08

08009000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009006:	4b46      	ldr	r3, [pc, #280]	; (8009120 <xPortStartScheduler+0x120>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a46      	ldr	r2, [pc, #280]	; (8009124 <xPortStartScheduler+0x124>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d10a      	bne.n	8009026 <xPortStartScheduler+0x26>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	613b      	str	r3, [r7, #16]
}
 8009022:	bf00      	nop
 8009024:	e7fe      	b.n	8009024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009026:	4b3e      	ldr	r3, [pc, #248]	; (8009120 <xPortStartScheduler+0x120>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a3f      	ldr	r2, [pc, #252]	; (8009128 <xPortStartScheduler+0x128>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d10a      	bne.n	8009046 <xPortStartScheduler+0x46>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60fb      	str	r3, [r7, #12]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009046:	4b39      	ldr	r3, [pc, #228]	; (800912c <xPortStartScheduler+0x12c>)
 8009048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	b2db      	uxtb	r3, r3
 8009050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4b31      	ldr	r3, [pc, #196]	; (8009130 <xPortStartScheduler+0x130>)
 800906c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800906e:	4b31      	ldr	r3, [pc, #196]	; (8009134 <xPortStartScheduler+0x134>)
 8009070:	2207      	movs	r2, #7
 8009072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009074:	e009      	b.n	800908a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009076:	4b2f      	ldr	r3, [pc, #188]	; (8009134 <xPortStartScheduler+0x134>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3b01      	subs	r3, #1
 800907c:	4a2d      	ldr	r2, [pc, #180]	; (8009134 <xPortStartScheduler+0x134>)
 800907e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	b2db      	uxtb	r3, r3
 8009088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009092:	2b80      	cmp	r3, #128	; 0x80
 8009094:	d0ef      	beq.n	8009076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009096:	4b27      	ldr	r3, [pc, #156]	; (8009134 <xPortStartScheduler+0x134>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1c3 0307 	rsb	r3, r3, #7
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d00a      	beq.n	80090b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	60bb      	str	r3, [r7, #8]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090b8:	4b1e      	ldr	r3, [pc, #120]	; (8009134 <xPortStartScheduler+0x134>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <xPortStartScheduler+0x134>)
 80090c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <xPortStartScheduler+0x134>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090ca:	4a1a      	ldr	r2, [pc, #104]	; (8009134 <xPortStartScheduler+0x134>)
 80090cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090d6:	4b18      	ldr	r3, [pc, #96]	; (8009138 <xPortStartScheduler+0x138>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a17      	ldr	r2, [pc, #92]	; (8009138 <xPortStartScheduler+0x138>)
 80090dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <xPortStartScheduler+0x138>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a14      	ldr	r2, [pc, #80]	; (8009138 <xPortStartScheduler+0x138>)
 80090e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090ee:	f000 f8dd 	bl	80092ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090f2:	4b12      	ldr	r3, [pc, #72]	; (800913c <xPortStartScheduler+0x13c>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090f8:	f000 f8fc 	bl	80092f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090fc:	4b10      	ldr	r3, [pc, #64]	; (8009140 <xPortStartScheduler+0x140>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a0f      	ldr	r2, [pc, #60]	; (8009140 <xPortStartScheduler+0x140>)
 8009102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009108:	f7ff ff66 	bl	8008fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800910c:	f7fe ff82 	bl	8008014 <vTaskSwitchContext>
	prvTaskExitError();
 8009110:	f7ff ff20 	bl	8008f54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	e000ed00 	.word	0xe000ed00
 8009124:	410fc271 	.word	0x410fc271
 8009128:	410fc270 	.word	0x410fc270
 800912c:	e000e400 	.word	0xe000e400
 8009130:	20001374 	.word	0x20001374
 8009134:	20001378 	.word	0x20001378
 8009138:	e000ed20 	.word	0xe000ed20
 800913c:	2000000c 	.word	0x2000000c
 8009140:	e000ef34 	.word	0xe000ef34

08009144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	607b      	str	r3, [r7, #4]
}
 800915c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800915e:	4b0f      	ldr	r3, [pc, #60]	; (800919c <vPortEnterCritical+0x58>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	4a0d      	ldr	r2, [pc, #52]	; (800919c <vPortEnterCritical+0x58>)
 8009166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <vPortEnterCritical+0x58>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d10f      	bne.n	8009190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <vPortEnterCritical+0x5c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <vPortEnterCritical+0x4c>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	603b      	str	r3, [r7, #0]
}
 800918c:	bf00      	nop
 800918e:	e7fe      	b.n	800918e <vPortEnterCritical+0x4a>
	}
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	2000000c 	.word	0x2000000c
 80091a0:	e000ed04 	.word	0xe000ed04

080091a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091aa:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <vPortExitCritical+0x50>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <vPortExitCritical+0x24>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	607b      	str	r3, [r7, #4]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <vPortExitCritical+0x50>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	4a09      	ldr	r2, [pc, #36]	; (80091f4 <vPortExitCritical+0x50>)
 80091d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091d2:	4b08      	ldr	r3, [pc, #32]	; (80091f4 <vPortExitCritical+0x50>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d105      	bne.n	80091e6 <vPortExitCritical+0x42>
 80091da:	2300      	movs	r3, #0
 80091dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	f383 8811 	msr	BASEPRI, r3
}
 80091e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	2000000c 	.word	0x2000000c
	...

08009200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009200:	f3ef 8009 	mrs	r0, PSP
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4b15      	ldr	r3, [pc, #84]	; (8009260 <pxCurrentTCBConst>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	f01e 0f10 	tst.w	lr, #16
 8009210:	bf08      	it	eq
 8009212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	6010      	str	r0, [r2, #0]
 800921c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009224:	f380 8811 	msr	BASEPRI, r0
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f7fe fef0 	bl	8008014 <vTaskSwitchContext>
 8009234:	f04f 0000 	mov.w	r0, #0
 8009238:	f380 8811 	msr	BASEPRI, r0
 800923c:	bc09      	pop	{r0, r3}
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	6808      	ldr	r0, [r1, #0]
 8009242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009246:	f01e 0f10 	tst.w	lr, #16
 800924a:	bf08      	it	eq
 800924c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009250:	f380 8809 	msr	PSP, r0
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	f3af 8000 	nop.w

08009260 <pxCurrentTCBConst>:
 8009260:	20000d48 	.word	0x20000d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop

08009268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	607b      	str	r3, [r7, #4]
}
 8009280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009282:	f7fe fe09 	bl	8007e98 <xTaskIncrementTick>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800928c:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <SysTick_Handler+0x40>)
 800928e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	2300      	movs	r3, #0
 8009296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f383 8811 	msr	BASEPRI, r3
}
 800929e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	e000ed04 	.word	0xe000ed04

080092ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092b0:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <vPortSetupTimerInterrupt+0x34>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092b6:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <vPortSetupTimerInterrupt+0x38>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <vPortSetupTimerInterrupt+0x3c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <vPortSetupTimerInterrupt+0x40>)
 80092c2:	fba2 2303 	umull	r2, r3, r2, r3
 80092c6:	099b      	lsrs	r3, r3, #6
 80092c8:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <vPortSetupTimerInterrupt+0x44>)
 80092ca:	3b01      	subs	r3, #1
 80092cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092ce:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <vPortSetupTimerInterrupt+0x34>)
 80092d0:	2207      	movs	r2, #7
 80092d2:	601a      	str	r2, [r3, #0]
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	e000e010 	.word	0xe000e010
 80092e4:	e000e018 	.word	0xe000e018
 80092e8:	20000000 	.word	0x20000000
 80092ec:	10624dd3 	.word	0x10624dd3
 80092f0:	e000e014 	.word	0xe000e014

080092f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009304 <vPortEnableVFP+0x10>
 80092f8:	6801      	ldr	r1, [r0, #0]
 80092fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092fe:	6001      	str	r1, [r0, #0]
 8009300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009302:	bf00      	nop
 8009304:	e000ed88 	.word	0xe000ed88

08009308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800930e:	f3ef 8305 	mrs	r3, IPSR
 8009312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b0f      	cmp	r3, #15
 8009318:	d914      	bls.n	8009344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800931a:	4a17      	ldr	r2, [pc, #92]	; (8009378 <vPortValidateInterruptPriority+0x70>)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4413      	add	r3, r2
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009324:	4b15      	ldr	r3, [pc, #84]	; (800937c <vPortValidateInterruptPriority+0x74>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	7afa      	ldrb	r2, [r7, #11]
 800932a:	429a      	cmp	r2, r3
 800932c:	d20a      	bcs.n	8009344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	607b      	str	r3, [r7, #4]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009344:	4b0e      	ldr	r3, [pc, #56]	; (8009380 <vPortValidateInterruptPriority+0x78>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800934c:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <vPortValidateInterruptPriority+0x7c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d90a      	bls.n	800936a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	603b      	str	r3, [r7, #0]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <vPortValidateInterruptPriority+0x60>
	}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	e000e3f0 	.word	0xe000e3f0
 800937c:	20001374 	.word	0x20001374
 8009380:	e000ed0c 	.word	0xe000ed0c
 8009384:	20001378 	.word	0x20001378

08009388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08a      	sub	sp, #40	; 0x28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009394:	f7fe fcc4 	bl	8007d20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009398:	4b58      	ldr	r3, [pc, #352]	; (80094fc <pvPortMalloc+0x174>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093a0:	f000 f910 	bl	80095c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093a4:	4b56      	ldr	r3, [pc, #344]	; (8009500 <pvPortMalloc+0x178>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4013      	ands	r3, r2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f040 808e 	bne.w	80094ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01d      	beq.n	80093f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80093b8:	2208      	movs	r2, #8
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4413      	add	r3, r2
 80093be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f003 0307 	and.w	r3, r3, #7
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d014      	beq.n	80093f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f023 0307 	bic.w	r3, r3, #7
 80093d0:	3308      	adds	r3, #8
 80093d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <pvPortMalloc+0x6c>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	617b      	str	r3, [r7, #20]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d069      	beq.n	80094ce <pvPortMalloc+0x146>
 80093fa:	4b42      	ldr	r3, [pc, #264]	; (8009504 <pvPortMalloc+0x17c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d864      	bhi.n	80094ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009404:	4b40      	ldr	r3, [pc, #256]	; (8009508 <pvPortMalloc+0x180>)
 8009406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009408:	4b3f      	ldr	r3, [pc, #252]	; (8009508 <pvPortMalloc+0x180>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800940e:	e004      	b.n	800941a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	429a      	cmp	r2, r3
 8009422:	d903      	bls.n	800942c <pvPortMalloc+0xa4>
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1f1      	bne.n	8009410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800942c:	4b33      	ldr	r3, [pc, #204]	; (80094fc <pvPortMalloc+0x174>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009432:	429a      	cmp	r2, r3
 8009434:	d04b      	beq.n	80094ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2208      	movs	r2, #8
 800943c:	4413      	add	r3, r2
 800943e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	2308      	movs	r3, #8
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	429a      	cmp	r2, r3
 8009456:	d91f      	bls.n	8009498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4413      	add	r3, r2
 800945e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00a      	beq.n	8009480 <pvPortMalloc+0xf8>
	__asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	613b      	str	r3, [r7, #16]
}
 800947c:	bf00      	nop
 800947e:	e7fe      	b.n	800947e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	1ad2      	subs	r2, r2, r3
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009492:	69b8      	ldr	r0, [r7, #24]
 8009494:	f000 f8f8 	bl	8009688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <pvPortMalloc+0x17c>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	4a18      	ldr	r2, [pc, #96]	; (8009504 <pvPortMalloc+0x17c>)
 80094a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094a6:	4b17      	ldr	r3, [pc, #92]	; (8009504 <pvPortMalloc+0x17c>)
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b18      	ldr	r3, [pc, #96]	; (800950c <pvPortMalloc+0x184>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d203      	bcs.n	80094ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094b2:	4b14      	ldr	r3, [pc, #80]	; (8009504 <pvPortMalloc+0x17c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a15      	ldr	r2, [pc, #84]	; (800950c <pvPortMalloc+0x184>)
 80094b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	4b10      	ldr	r3, [pc, #64]	; (8009500 <pvPortMalloc+0x178>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094ce:	f7fe fc35 	bl	8007d3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	f003 0307 	and.w	r3, r3, #7
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00a      	beq.n	80094f2 <pvPortMalloc+0x16a>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	60fb      	str	r3, [r7, #12]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <pvPortMalloc+0x168>
	return pvReturn;
 80094f2:	69fb      	ldr	r3, [r7, #28]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3728      	adds	r7, #40	; 0x28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20001f84 	.word	0x20001f84
 8009500:	20001f90 	.word	0x20001f90
 8009504:	20001f88 	.word	0x20001f88
 8009508:	20001f7c 	.word	0x20001f7c
 800950c:	20001f8c 	.word	0x20001f8c

08009510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d048      	beq.n	80095b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009522:	2308      	movs	r3, #8
 8009524:	425b      	negs	r3, r3
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4413      	add	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	4b21      	ldr	r3, [pc, #132]	; (80095bc <vPortFree+0xac>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4013      	ands	r3, r2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <vPortFree+0x44>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	60fb      	str	r3, [r7, #12]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <vPortFree+0x62>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	60bb      	str	r3, [r7, #8]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	4b11      	ldr	r3, [pc, #68]	; (80095bc <vPortFree+0xac>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d019      	beq.n	80095b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d115      	bne.n	80095b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <vPortFree+0xac>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	43db      	mvns	r3, r3
 8009592:	401a      	ands	r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009598:	f7fe fbc2 	bl	8007d20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <vPortFree+0xb0>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4413      	add	r3, r2
 80095a6:	4a06      	ldr	r2, [pc, #24]	; (80095c0 <vPortFree+0xb0>)
 80095a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095aa:	6938      	ldr	r0, [r7, #16]
 80095ac:	f000 f86c 	bl	8009688 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80095b0:	f7fe fbc4 	bl	8007d3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095b4:	bf00      	nop
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20001f90 	.word	0x20001f90
 80095c0:	20001f88 	.word	0x20001f88

080095c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80095ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095d0:	4b27      	ldr	r3, [pc, #156]	; (8009670 <prvHeapInit+0xac>)
 80095d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00c      	beq.n	80095f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3307      	adds	r3, #7
 80095e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0307 	bic.w	r3, r3, #7
 80095ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	4a1f      	ldr	r2, [pc, #124]	; (8009670 <prvHeapInit+0xac>)
 80095f4:	4413      	add	r3, r2
 80095f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095fc:	4a1d      	ldr	r2, [pc, #116]	; (8009674 <prvHeapInit+0xb0>)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009602:	4b1c      	ldr	r3, [pc, #112]	; (8009674 <prvHeapInit+0xb0>)
 8009604:	2200      	movs	r2, #0
 8009606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	4413      	add	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009610:	2208      	movs	r2, #8
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0307 	bic.w	r3, r3, #7
 800961e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4a15      	ldr	r2, [pc, #84]	; (8009678 <prvHeapInit+0xb4>)
 8009624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009626:	4b14      	ldr	r3, [pc, #80]	; (8009678 <prvHeapInit+0xb4>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2200      	movs	r2, #0
 800962c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800962e:	4b12      	ldr	r3, [pc, #72]	; (8009678 <prvHeapInit+0xb4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	1ad2      	subs	r2, r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009644:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <prvHeapInit+0xb4>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4a0a      	ldr	r2, [pc, #40]	; (800967c <prvHeapInit+0xb8>)
 8009652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	4a09      	ldr	r2, [pc, #36]	; (8009680 <prvHeapInit+0xbc>)
 800965a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800965c:	4b09      	ldr	r3, [pc, #36]	; (8009684 <prvHeapInit+0xc0>)
 800965e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009662:	601a      	str	r2, [r3, #0]
}
 8009664:	bf00      	nop
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	2000137c 	.word	0x2000137c
 8009674:	20001f7c 	.word	0x20001f7c
 8009678:	20001f84 	.word	0x20001f84
 800967c:	20001f8c 	.word	0x20001f8c
 8009680:	20001f88 	.word	0x20001f88
 8009684:	20001f90 	.word	0x20001f90

08009688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009690:	4b28      	ldr	r3, [pc, #160]	; (8009734 <prvInsertBlockIntoFreeList+0xac>)
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	e002      	b.n	800969c <prvInsertBlockIntoFreeList+0x14>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60fb      	str	r3, [r7, #12]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d8f7      	bhi.n	8009696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	4413      	add	r3, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d108      	bne.n	80096ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	441a      	add	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	441a      	add	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d118      	bne.n	8009710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	4b15      	ldr	r3, [pc, #84]	; (8009738 <prvInsertBlockIntoFreeList+0xb0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d00d      	beq.n	8009706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	441a      	add	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	e008      	b.n	8009718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009706:	4b0c      	ldr	r3, [pc, #48]	; (8009738 <prvInsertBlockIntoFreeList+0xb0>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	e003      	b.n	8009718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	429a      	cmp	r2, r3
 800971e:	d002      	beq.n	8009726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	20001f7c 	.word	0x20001f7c
 8009738:	20001f84 	.word	0x20001f84

0800973c <atoi>:
 800973c:	220a      	movs	r2, #10
 800973e:	2100      	movs	r1, #0
 8009740:	f000 b970 	b.w	8009a24 <strtol>

08009744 <__errno>:
 8009744:	4b01      	ldr	r3, [pc, #4]	; (800974c <__errno+0x8>)
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	20000010 	.word	0x20000010

08009750 <__libc_init_array>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	4d0d      	ldr	r5, [pc, #52]	; (8009788 <__libc_init_array+0x38>)
 8009754:	4c0d      	ldr	r4, [pc, #52]	; (800978c <__libc_init_array+0x3c>)
 8009756:	1b64      	subs	r4, r4, r5
 8009758:	10a4      	asrs	r4, r4, #2
 800975a:	2600      	movs	r6, #0
 800975c:	42a6      	cmp	r6, r4
 800975e:	d109      	bne.n	8009774 <__libc_init_array+0x24>
 8009760:	4d0b      	ldr	r5, [pc, #44]	; (8009790 <__libc_init_array+0x40>)
 8009762:	4c0c      	ldr	r4, [pc, #48]	; (8009794 <__libc_init_array+0x44>)
 8009764:	f001 fb10 	bl	800ad88 <_init>
 8009768:	1b64      	subs	r4, r4, r5
 800976a:	10a4      	asrs	r4, r4, #2
 800976c:	2600      	movs	r6, #0
 800976e:	42a6      	cmp	r6, r4
 8009770:	d105      	bne.n	800977e <__libc_init_array+0x2e>
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	f855 3b04 	ldr.w	r3, [r5], #4
 8009778:	4798      	blx	r3
 800977a:	3601      	adds	r6, #1
 800977c:	e7ee      	b.n	800975c <__libc_init_array+0xc>
 800977e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009782:	4798      	blx	r3
 8009784:	3601      	adds	r6, #1
 8009786:	e7f2      	b.n	800976e <__libc_init_array+0x1e>
 8009788:	0800b134 	.word	0x0800b134
 800978c:	0800b134 	.word	0x0800b134
 8009790:	0800b134 	.word	0x0800b134
 8009794:	0800b138 	.word	0x0800b138

08009798 <memcpy>:
 8009798:	440a      	add	r2, r1
 800979a:	4291      	cmp	r1, r2
 800979c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80097a0:	d100      	bne.n	80097a4 <memcpy+0xc>
 80097a2:	4770      	bx	lr
 80097a4:	b510      	push	{r4, lr}
 80097a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ae:	4291      	cmp	r1, r2
 80097b0:	d1f9      	bne.n	80097a6 <memcpy+0xe>
 80097b2:	bd10      	pop	{r4, pc}

080097b4 <memset>:
 80097b4:	4402      	add	r2, r0
 80097b6:	4603      	mov	r3, r0
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d100      	bne.n	80097be <memset+0xa>
 80097bc:	4770      	bx	lr
 80097be:	f803 1b01 	strb.w	r1, [r3], #1
 80097c2:	e7f9      	b.n	80097b8 <memset+0x4>

080097c4 <siprintf>:
 80097c4:	b40e      	push	{r1, r2, r3}
 80097c6:	b500      	push	{lr}
 80097c8:	b09c      	sub	sp, #112	; 0x70
 80097ca:	ab1d      	add	r3, sp, #116	; 0x74
 80097cc:	9002      	str	r0, [sp, #8]
 80097ce:	9006      	str	r0, [sp, #24]
 80097d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097d4:	4809      	ldr	r0, [pc, #36]	; (80097fc <siprintf+0x38>)
 80097d6:	9107      	str	r1, [sp, #28]
 80097d8:	9104      	str	r1, [sp, #16]
 80097da:	4909      	ldr	r1, [pc, #36]	; (8009800 <siprintf+0x3c>)
 80097dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e0:	9105      	str	r1, [sp, #20]
 80097e2:	6800      	ldr	r0, [r0, #0]
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	a902      	add	r1, sp, #8
 80097e8:	f000 fa9a 	bl	8009d20 <_svfiprintf_r>
 80097ec:	9b02      	ldr	r3, [sp, #8]
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
 80097f2:	b01c      	add	sp, #112	; 0x70
 80097f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f8:	b003      	add	sp, #12
 80097fa:	4770      	bx	lr
 80097fc:	20000010 	.word	0x20000010
 8009800:	ffff0208 	.word	0xffff0208

08009804 <strcpy>:
 8009804:	4603      	mov	r3, r0
 8009806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800980a:	f803 2b01 	strb.w	r2, [r3], #1
 800980e:	2a00      	cmp	r2, #0
 8009810:	d1f9      	bne.n	8009806 <strcpy+0x2>
 8009812:	4770      	bx	lr

08009814 <strncmp>:
 8009814:	b510      	push	{r4, lr}
 8009816:	b17a      	cbz	r2, 8009838 <strncmp+0x24>
 8009818:	4603      	mov	r3, r0
 800981a:	3901      	subs	r1, #1
 800981c:	1884      	adds	r4, r0, r2
 800981e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009822:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009826:	4290      	cmp	r0, r2
 8009828:	d101      	bne.n	800982e <strncmp+0x1a>
 800982a:	42a3      	cmp	r3, r4
 800982c:	d101      	bne.n	8009832 <strncmp+0x1e>
 800982e:	1a80      	subs	r0, r0, r2
 8009830:	bd10      	pop	{r4, pc}
 8009832:	2800      	cmp	r0, #0
 8009834:	d1f3      	bne.n	800981e <strncmp+0xa>
 8009836:	e7fa      	b.n	800982e <strncmp+0x1a>
 8009838:	4610      	mov	r0, r2
 800983a:	e7f9      	b.n	8009830 <strncmp+0x1c>

0800983c <strstr>:
 800983c:	780a      	ldrb	r2, [r1, #0]
 800983e:	b570      	push	{r4, r5, r6, lr}
 8009840:	b96a      	cbnz	r2, 800985e <strstr+0x22>
 8009842:	bd70      	pop	{r4, r5, r6, pc}
 8009844:	429a      	cmp	r2, r3
 8009846:	d109      	bne.n	800985c <strstr+0x20>
 8009848:	460c      	mov	r4, r1
 800984a:	4605      	mov	r5, r0
 800984c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0f6      	beq.n	8009842 <strstr+0x6>
 8009854:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009858:	429e      	cmp	r6, r3
 800985a:	d0f7      	beq.n	800984c <strstr+0x10>
 800985c:	3001      	adds	r0, #1
 800985e:	7803      	ldrb	r3, [r0, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1ef      	bne.n	8009844 <strstr+0x8>
 8009864:	4618      	mov	r0, r3
 8009866:	e7ec      	b.n	8009842 <strstr+0x6>

08009868 <strtok>:
 8009868:	4b16      	ldr	r3, [pc, #88]	; (80098c4 <strtok+0x5c>)
 800986a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800986c:	681e      	ldr	r6, [r3, #0]
 800986e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009870:	4605      	mov	r5, r0
 8009872:	b9fc      	cbnz	r4, 80098b4 <strtok+0x4c>
 8009874:	2050      	movs	r0, #80	; 0x50
 8009876:	9101      	str	r1, [sp, #4]
 8009878:	f000 f90e 	bl	8009a98 <malloc>
 800987c:	9901      	ldr	r1, [sp, #4]
 800987e:	65b0      	str	r0, [r6, #88]	; 0x58
 8009880:	4602      	mov	r2, r0
 8009882:	b920      	cbnz	r0, 800988e <strtok+0x26>
 8009884:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <strtok+0x60>)
 8009886:	4811      	ldr	r0, [pc, #68]	; (80098cc <strtok+0x64>)
 8009888:	2157      	movs	r1, #87	; 0x57
 800988a:	f000 f8d5 	bl	8009a38 <__assert_func>
 800988e:	e9c0 4400 	strd	r4, r4, [r0]
 8009892:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009896:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800989a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800989e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80098a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80098a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80098aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80098ae:	6184      	str	r4, [r0, #24]
 80098b0:	7704      	strb	r4, [r0, #28]
 80098b2:	6244      	str	r4, [r0, #36]	; 0x24
 80098b4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80098b6:	2301      	movs	r3, #1
 80098b8:	4628      	mov	r0, r5
 80098ba:	b002      	add	sp, #8
 80098bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098c0:	f000 b806 	b.w	80098d0 <__strtok_r>
 80098c4:	20000010 	.word	0x20000010
 80098c8:	0800aef0 	.word	0x0800aef0
 80098cc:	0800af07 	.word	0x0800af07

080098d0 <__strtok_r>:
 80098d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d2:	b908      	cbnz	r0, 80098d8 <__strtok_r+0x8>
 80098d4:	6810      	ldr	r0, [r2, #0]
 80098d6:	b188      	cbz	r0, 80098fc <__strtok_r+0x2c>
 80098d8:	4604      	mov	r4, r0
 80098da:	4620      	mov	r0, r4
 80098dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80098e0:	460f      	mov	r7, r1
 80098e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80098e6:	b91e      	cbnz	r6, 80098f0 <__strtok_r+0x20>
 80098e8:	b965      	cbnz	r5, 8009904 <__strtok_r+0x34>
 80098ea:	6015      	str	r5, [r2, #0]
 80098ec:	4628      	mov	r0, r5
 80098ee:	e005      	b.n	80098fc <__strtok_r+0x2c>
 80098f0:	42b5      	cmp	r5, r6
 80098f2:	d1f6      	bne.n	80098e2 <__strtok_r+0x12>
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1f0      	bne.n	80098da <__strtok_r+0xa>
 80098f8:	6014      	str	r4, [r2, #0]
 80098fa:	7003      	strb	r3, [r0, #0]
 80098fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098fe:	461c      	mov	r4, r3
 8009900:	e00c      	b.n	800991c <__strtok_r+0x4c>
 8009902:	b915      	cbnz	r5, 800990a <__strtok_r+0x3a>
 8009904:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009908:	460e      	mov	r6, r1
 800990a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800990e:	42ab      	cmp	r3, r5
 8009910:	d1f7      	bne.n	8009902 <__strtok_r+0x32>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f3      	beq.n	80098fe <__strtok_r+0x2e>
 8009916:	2300      	movs	r3, #0
 8009918:	f804 3c01 	strb.w	r3, [r4, #-1]
 800991c:	6014      	str	r4, [r2, #0]
 800991e:	e7ed      	b.n	80098fc <__strtok_r+0x2c>

08009920 <_strtol_l.constprop.0>:
 8009920:	2b01      	cmp	r3, #1
 8009922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009926:	d001      	beq.n	800992c <_strtol_l.constprop.0+0xc>
 8009928:	2b24      	cmp	r3, #36	; 0x24
 800992a:	d906      	bls.n	800993a <_strtol_l.constprop.0+0x1a>
 800992c:	f7ff ff0a 	bl	8009744 <__errno>
 8009930:	2316      	movs	r3, #22
 8009932:	6003      	str	r3, [r0, #0]
 8009934:	2000      	movs	r0, #0
 8009936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800993a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009a20 <_strtol_l.constprop.0+0x100>
 800993e:	460d      	mov	r5, r1
 8009940:	462e      	mov	r6, r5
 8009942:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009946:	f814 700c 	ldrb.w	r7, [r4, ip]
 800994a:	f017 0708 	ands.w	r7, r7, #8
 800994e:	d1f7      	bne.n	8009940 <_strtol_l.constprop.0+0x20>
 8009950:	2c2d      	cmp	r4, #45	; 0x2d
 8009952:	d132      	bne.n	80099ba <_strtol_l.constprop.0+0x9a>
 8009954:	782c      	ldrb	r4, [r5, #0]
 8009956:	2701      	movs	r7, #1
 8009958:	1cb5      	adds	r5, r6, #2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d05b      	beq.n	8009a16 <_strtol_l.constprop.0+0xf6>
 800995e:	2b10      	cmp	r3, #16
 8009960:	d109      	bne.n	8009976 <_strtol_l.constprop.0+0x56>
 8009962:	2c30      	cmp	r4, #48	; 0x30
 8009964:	d107      	bne.n	8009976 <_strtol_l.constprop.0+0x56>
 8009966:	782c      	ldrb	r4, [r5, #0]
 8009968:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800996c:	2c58      	cmp	r4, #88	; 0x58
 800996e:	d14d      	bne.n	8009a0c <_strtol_l.constprop.0+0xec>
 8009970:	786c      	ldrb	r4, [r5, #1]
 8009972:	2310      	movs	r3, #16
 8009974:	3502      	adds	r5, #2
 8009976:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800997a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800997e:	f04f 0c00 	mov.w	ip, #0
 8009982:	fbb8 f9f3 	udiv	r9, r8, r3
 8009986:	4666      	mov	r6, ip
 8009988:	fb03 8a19 	mls	sl, r3, r9, r8
 800998c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009990:	f1be 0f09 	cmp.w	lr, #9
 8009994:	d816      	bhi.n	80099c4 <_strtol_l.constprop.0+0xa4>
 8009996:	4674      	mov	r4, lr
 8009998:	42a3      	cmp	r3, r4
 800999a:	dd24      	ble.n	80099e6 <_strtol_l.constprop.0+0xc6>
 800999c:	f1bc 0f00 	cmp.w	ip, #0
 80099a0:	db1e      	blt.n	80099e0 <_strtol_l.constprop.0+0xc0>
 80099a2:	45b1      	cmp	r9, r6
 80099a4:	d31c      	bcc.n	80099e0 <_strtol_l.constprop.0+0xc0>
 80099a6:	d101      	bne.n	80099ac <_strtol_l.constprop.0+0x8c>
 80099a8:	45a2      	cmp	sl, r4
 80099aa:	db19      	blt.n	80099e0 <_strtol_l.constprop.0+0xc0>
 80099ac:	fb06 4603 	mla	r6, r6, r3, r4
 80099b0:	f04f 0c01 	mov.w	ip, #1
 80099b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099b8:	e7e8      	b.n	800998c <_strtol_l.constprop.0+0x6c>
 80099ba:	2c2b      	cmp	r4, #43	; 0x2b
 80099bc:	bf04      	itt	eq
 80099be:	782c      	ldrbeq	r4, [r5, #0]
 80099c0:	1cb5      	addeq	r5, r6, #2
 80099c2:	e7ca      	b.n	800995a <_strtol_l.constprop.0+0x3a>
 80099c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80099c8:	f1be 0f19 	cmp.w	lr, #25
 80099cc:	d801      	bhi.n	80099d2 <_strtol_l.constprop.0+0xb2>
 80099ce:	3c37      	subs	r4, #55	; 0x37
 80099d0:	e7e2      	b.n	8009998 <_strtol_l.constprop.0+0x78>
 80099d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80099d6:	f1be 0f19 	cmp.w	lr, #25
 80099da:	d804      	bhi.n	80099e6 <_strtol_l.constprop.0+0xc6>
 80099dc:	3c57      	subs	r4, #87	; 0x57
 80099de:	e7db      	b.n	8009998 <_strtol_l.constprop.0+0x78>
 80099e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80099e4:	e7e6      	b.n	80099b4 <_strtol_l.constprop.0+0x94>
 80099e6:	f1bc 0f00 	cmp.w	ip, #0
 80099ea:	da05      	bge.n	80099f8 <_strtol_l.constprop.0+0xd8>
 80099ec:	2322      	movs	r3, #34	; 0x22
 80099ee:	6003      	str	r3, [r0, #0]
 80099f0:	4646      	mov	r6, r8
 80099f2:	b942      	cbnz	r2, 8009a06 <_strtol_l.constprop.0+0xe6>
 80099f4:	4630      	mov	r0, r6
 80099f6:	e79e      	b.n	8009936 <_strtol_l.constprop.0+0x16>
 80099f8:	b107      	cbz	r7, 80099fc <_strtol_l.constprop.0+0xdc>
 80099fa:	4276      	negs	r6, r6
 80099fc:	2a00      	cmp	r2, #0
 80099fe:	d0f9      	beq.n	80099f4 <_strtol_l.constprop.0+0xd4>
 8009a00:	f1bc 0f00 	cmp.w	ip, #0
 8009a04:	d000      	beq.n	8009a08 <_strtol_l.constprop.0+0xe8>
 8009a06:	1e69      	subs	r1, r5, #1
 8009a08:	6011      	str	r1, [r2, #0]
 8009a0a:	e7f3      	b.n	80099f4 <_strtol_l.constprop.0+0xd4>
 8009a0c:	2430      	movs	r4, #48	; 0x30
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1b1      	bne.n	8009976 <_strtol_l.constprop.0+0x56>
 8009a12:	2308      	movs	r3, #8
 8009a14:	e7af      	b.n	8009976 <_strtol_l.constprop.0+0x56>
 8009a16:	2c30      	cmp	r4, #48	; 0x30
 8009a18:	d0a5      	beq.n	8009966 <_strtol_l.constprop.0+0x46>
 8009a1a:	230a      	movs	r3, #10
 8009a1c:	e7ab      	b.n	8009976 <_strtol_l.constprop.0+0x56>
 8009a1e:	bf00      	nop
 8009a20:	0800afa1 	.word	0x0800afa1

08009a24 <strtol>:
 8009a24:	4613      	mov	r3, r2
 8009a26:	460a      	mov	r2, r1
 8009a28:	4601      	mov	r1, r0
 8009a2a:	4802      	ldr	r0, [pc, #8]	; (8009a34 <strtol+0x10>)
 8009a2c:	6800      	ldr	r0, [r0, #0]
 8009a2e:	f7ff bf77 	b.w	8009920 <_strtol_l.constprop.0>
 8009a32:	bf00      	nop
 8009a34:	20000010 	.word	0x20000010

08009a38 <__assert_func>:
 8009a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <__assert_func+0x2c>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4605      	mov	r5, r0
 8009a44:	68d8      	ldr	r0, [r3, #12]
 8009a46:	b14c      	cbz	r4, 8009a5c <__assert_func+0x24>
 8009a48:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <__assert_func+0x30>)
 8009a4a:	9100      	str	r1, [sp, #0]
 8009a4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a50:	4906      	ldr	r1, [pc, #24]	; (8009a6c <__assert_func+0x34>)
 8009a52:	462b      	mov	r3, r5
 8009a54:	f000 f80e 	bl	8009a74 <fiprintf>
 8009a58:	f000 fe20 	bl	800a69c <abort>
 8009a5c:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <__assert_func+0x38>)
 8009a5e:	461c      	mov	r4, r3
 8009a60:	e7f3      	b.n	8009a4a <__assert_func+0x12>
 8009a62:	bf00      	nop
 8009a64:	20000010 	.word	0x20000010
 8009a68:	0800af64 	.word	0x0800af64
 8009a6c:	0800af71 	.word	0x0800af71
 8009a70:	0800af9f 	.word	0x0800af9f

08009a74 <fiprintf>:
 8009a74:	b40e      	push	{r1, r2, r3}
 8009a76:	b503      	push	{r0, r1, lr}
 8009a78:	4601      	mov	r1, r0
 8009a7a:	ab03      	add	r3, sp, #12
 8009a7c:	4805      	ldr	r0, [pc, #20]	; (8009a94 <fiprintf+0x20>)
 8009a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a82:	6800      	ldr	r0, [r0, #0]
 8009a84:	9301      	str	r3, [sp, #4]
 8009a86:	f000 fa75 	bl	8009f74 <_vfiprintf_r>
 8009a8a:	b002      	add	sp, #8
 8009a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a90:	b003      	add	sp, #12
 8009a92:	4770      	bx	lr
 8009a94:	20000010 	.word	0x20000010

08009a98 <malloc>:
 8009a98:	4b02      	ldr	r3, [pc, #8]	; (8009aa4 <malloc+0xc>)
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	f000 b86f 	b.w	8009b80 <_malloc_r>
 8009aa2:	bf00      	nop
 8009aa4:	20000010 	.word	0x20000010

08009aa8 <_free_r>:
 8009aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	d044      	beq.n	8009b38 <_free_r+0x90>
 8009aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab2:	9001      	str	r0, [sp, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8009aba:	bfb8      	it	lt
 8009abc:	18e4      	addlt	r4, r4, r3
 8009abe:	f001 f82f 	bl	800ab20 <__malloc_lock>
 8009ac2:	4a1e      	ldr	r2, [pc, #120]	; (8009b3c <_free_r+0x94>)
 8009ac4:	9801      	ldr	r0, [sp, #4]
 8009ac6:	6813      	ldr	r3, [r2, #0]
 8009ac8:	b933      	cbnz	r3, 8009ad8 <_free_r+0x30>
 8009aca:	6063      	str	r3, [r4, #4]
 8009acc:	6014      	str	r4, [r2, #0]
 8009ace:	b003      	add	sp, #12
 8009ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ad4:	f001 b82a 	b.w	800ab2c <__malloc_unlock>
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	d908      	bls.n	8009aee <_free_r+0x46>
 8009adc:	6825      	ldr	r5, [r4, #0]
 8009ade:	1961      	adds	r1, r4, r5
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	bf01      	itttt	eq
 8009ae4:	6819      	ldreq	r1, [r3, #0]
 8009ae6:	685b      	ldreq	r3, [r3, #4]
 8009ae8:	1949      	addeq	r1, r1, r5
 8009aea:	6021      	streq	r1, [r4, #0]
 8009aec:	e7ed      	b.n	8009aca <_free_r+0x22>
 8009aee:	461a      	mov	r2, r3
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	b10b      	cbz	r3, 8009af8 <_free_r+0x50>
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d9fa      	bls.n	8009aee <_free_r+0x46>
 8009af8:	6811      	ldr	r1, [r2, #0]
 8009afa:	1855      	adds	r5, r2, r1
 8009afc:	42a5      	cmp	r5, r4
 8009afe:	d10b      	bne.n	8009b18 <_free_r+0x70>
 8009b00:	6824      	ldr	r4, [r4, #0]
 8009b02:	4421      	add	r1, r4
 8009b04:	1854      	adds	r4, r2, r1
 8009b06:	42a3      	cmp	r3, r4
 8009b08:	6011      	str	r1, [r2, #0]
 8009b0a:	d1e0      	bne.n	8009ace <_free_r+0x26>
 8009b0c:	681c      	ldr	r4, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	6053      	str	r3, [r2, #4]
 8009b12:	4421      	add	r1, r4
 8009b14:	6011      	str	r1, [r2, #0]
 8009b16:	e7da      	b.n	8009ace <_free_r+0x26>
 8009b18:	d902      	bls.n	8009b20 <_free_r+0x78>
 8009b1a:	230c      	movs	r3, #12
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	e7d6      	b.n	8009ace <_free_r+0x26>
 8009b20:	6825      	ldr	r5, [r4, #0]
 8009b22:	1961      	adds	r1, r4, r5
 8009b24:	428b      	cmp	r3, r1
 8009b26:	bf04      	itt	eq
 8009b28:	6819      	ldreq	r1, [r3, #0]
 8009b2a:	685b      	ldreq	r3, [r3, #4]
 8009b2c:	6063      	str	r3, [r4, #4]
 8009b2e:	bf04      	itt	eq
 8009b30:	1949      	addeq	r1, r1, r5
 8009b32:	6021      	streq	r1, [r4, #0]
 8009b34:	6054      	str	r4, [r2, #4]
 8009b36:	e7ca      	b.n	8009ace <_free_r+0x26>
 8009b38:	b003      	add	sp, #12
 8009b3a:	bd30      	pop	{r4, r5, pc}
 8009b3c:	20001f94 	.word	0x20001f94

08009b40 <sbrk_aligned>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	4e0e      	ldr	r6, [pc, #56]	; (8009b7c <sbrk_aligned+0x3c>)
 8009b44:	460c      	mov	r4, r1
 8009b46:	6831      	ldr	r1, [r6, #0]
 8009b48:	4605      	mov	r5, r0
 8009b4a:	b911      	cbnz	r1, 8009b52 <sbrk_aligned+0x12>
 8009b4c:	f000 fcd6 	bl	800a4fc <_sbrk_r>
 8009b50:	6030      	str	r0, [r6, #0]
 8009b52:	4621      	mov	r1, r4
 8009b54:	4628      	mov	r0, r5
 8009b56:	f000 fcd1 	bl	800a4fc <_sbrk_r>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	d00a      	beq.n	8009b74 <sbrk_aligned+0x34>
 8009b5e:	1cc4      	adds	r4, r0, #3
 8009b60:	f024 0403 	bic.w	r4, r4, #3
 8009b64:	42a0      	cmp	r0, r4
 8009b66:	d007      	beq.n	8009b78 <sbrk_aligned+0x38>
 8009b68:	1a21      	subs	r1, r4, r0
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 fcc6 	bl	800a4fc <_sbrk_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	d101      	bne.n	8009b78 <sbrk_aligned+0x38>
 8009b74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b78:	4620      	mov	r0, r4
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	20001f98 	.word	0x20001f98

08009b80 <_malloc_r>:
 8009b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b84:	1ccd      	adds	r5, r1, #3
 8009b86:	f025 0503 	bic.w	r5, r5, #3
 8009b8a:	3508      	adds	r5, #8
 8009b8c:	2d0c      	cmp	r5, #12
 8009b8e:	bf38      	it	cc
 8009b90:	250c      	movcc	r5, #12
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	4607      	mov	r7, r0
 8009b96:	db01      	blt.n	8009b9c <_malloc_r+0x1c>
 8009b98:	42a9      	cmp	r1, r5
 8009b9a:	d905      	bls.n	8009ba8 <_malloc_r+0x28>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	2600      	movs	r6, #0
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba8:	4e2e      	ldr	r6, [pc, #184]	; (8009c64 <_malloc_r+0xe4>)
 8009baa:	f000 ffb9 	bl	800ab20 <__malloc_lock>
 8009bae:	6833      	ldr	r3, [r6, #0]
 8009bb0:	461c      	mov	r4, r3
 8009bb2:	bb34      	cbnz	r4, 8009c02 <_malloc_r+0x82>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	f7ff ffc2 	bl	8009b40 <sbrk_aligned>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	d14d      	bne.n	8009c5e <_malloc_r+0xde>
 8009bc2:	6834      	ldr	r4, [r6, #0]
 8009bc4:	4626      	mov	r6, r4
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	d140      	bne.n	8009c4c <_malloc_r+0xcc>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	4631      	mov	r1, r6
 8009bce:	4638      	mov	r0, r7
 8009bd0:	eb04 0803 	add.w	r8, r4, r3
 8009bd4:	f000 fc92 	bl	800a4fc <_sbrk_r>
 8009bd8:	4580      	cmp	r8, r0
 8009bda:	d13a      	bne.n	8009c52 <_malloc_r+0xd2>
 8009bdc:	6821      	ldr	r1, [r4, #0]
 8009bde:	3503      	adds	r5, #3
 8009be0:	1a6d      	subs	r5, r5, r1
 8009be2:	f025 0503 	bic.w	r5, r5, #3
 8009be6:	3508      	adds	r5, #8
 8009be8:	2d0c      	cmp	r5, #12
 8009bea:	bf38      	it	cc
 8009bec:	250c      	movcc	r5, #12
 8009bee:	4629      	mov	r1, r5
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f7ff ffa5 	bl	8009b40 <sbrk_aligned>
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	d02b      	beq.n	8009c52 <_malloc_r+0xd2>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	442b      	add	r3, r5
 8009bfe:	6023      	str	r3, [r4, #0]
 8009c00:	e00e      	b.n	8009c20 <_malloc_r+0xa0>
 8009c02:	6822      	ldr	r2, [r4, #0]
 8009c04:	1b52      	subs	r2, r2, r5
 8009c06:	d41e      	bmi.n	8009c46 <_malloc_r+0xc6>
 8009c08:	2a0b      	cmp	r2, #11
 8009c0a:	d916      	bls.n	8009c3a <_malloc_r+0xba>
 8009c0c:	1961      	adds	r1, r4, r5
 8009c0e:	42a3      	cmp	r3, r4
 8009c10:	6025      	str	r5, [r4, #0]
 8009c12:	bf18      	it	ne
 8009c14:	6059      	strne	r1, [r3, #4]
 8009c16:	6863      	ldr	r3, [r4, #4]
 8009c18:	bf08      	it	eq
 8009c1a:	6031      	streq	r1, [r6, #0]
 8009c1c:	5162      	str	r2, [r4, r5]
 8009c1e:	604b      	str	r3, [r1, #4]
 8009c20:	4638      	mov	r0, r7
 8009c22:	f104 060b 	add.w	r6, r4, #11
 8009c26:	f000 ff81 	bl	800ab2c <__malloc_unlock>
 8009c2a:	f026 0607 	bic.w	r6, r6, #7
 8009c2e:	1d23      	adds	r3, r4, #4
 8009c30:	1af2      	subs	r2, r6, r3
 8009c32:	d0b6      	beq.n	8009ba2 <_malloc_r+0x22>
 8009c34:	1b9b      	subs	r3, r3, r6
 8009c36:	50a3      	str	r3, [r4, r2]
 8009c38:	e7b3      	b.n	8009ba2 <_malloc_r+0x22>
 8009c3a:	6862      	ldr	r2, [r4, #4]
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	bf0c      	ite	eq
 8009c40:	6032      	streq	r2, [r6, #0]
 8009c42:	605a      	strne	r2, [r3, #4]
 8009c44:	e7ec      	b.n	8009c20 <_malloc_r+0xa0>
 8009c46:	4623      	mov	r3, r4
 8009c48:	6864      	ldr	r4, [r4, #4]
 8009c4a:	e7b2      	b.n	8009bb2 <_malloc_r+0x32>
 8009c4c:	4634      	mov	r4, r6
 8009c4e:	6876      	ldr	r6, [r6, #4]
 8009c50:	e7b9      	b.n	8009bc6 <_malloc_r+0x46>
 8009c52:	230c      	movs	r3, #12
 8009c54:	603b      	str	r3, [r7, #0]
 8009c56:	4638      	mov	r0, r7
 8009c58:	f000 ff68 	bl	800ab2c <__malloc_unlock>
 8009c5c:	e7a1      	b.n	8009ba2 <_malloc_r+0x22>
 8009c5e:	6025      	str	r5, [r4, #0]
 8009c60:	e7de      	b.n	8009c20 <_malloc_r+0xa0>
 8009c62:	bf00      	nop
 8009c64:	20001f94 	.word	0x20001f94

08009c68 <__ssputs_r>:
 8009c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c6c:	688e      	ldr	r6, [r1, #8]
 8009c6e:	429e      	cmp	r6, r3
 8009c70:	4682      	mov	sl, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	4690      	mov	r8, r2
 8009c76:	461f      	mov	r7, r3
 8009c78:	d838      	bhi.n	8009cec <__ssputs_r+0x84>
 8009c7a:	898a      	ldrh	r2, [r1, #12]
 8009c7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c80:	d032      	beq.n	8009ce8 <__ssputs_r+0x80>
 8009c82:	6825      	ldr	r5, [r4, #0]
 8009c84:	6909      	ldr	r1, [r1, #16]
 8009c86:	eba5 0901 	sub.w	r9, r5, r1
 8009c8a:	6965      	ldr	r5, [r4, #20]
 8009c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c94:	3301      	adds	r3, #1
 8009c96:	444b      	add	r3, r9
 8009c98:	106d      	asrs	r5, r5, #1
 8009c9a:	429d      	cmp	r5, r3
 8009c9c:	bf38      	it	cc
 8009c9e:	461d      	movcc	r5, r3
 8009ca0:	0553      	lsls	r3, r2, #21
 8009ca2:	d531      	bpl.n	8009d08 <__ssputs_r+0xa0>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7ff ff6b 	bl	8009b80 <_malloc_r>
 8009caa:	4606      	mov	r6, r0
 8009cac:	b950      	cbnz	r0, 8009cc4 <__ssputs_r+0x5c>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	f8ca 3000 	str.w	r3, [sl]
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc4:	6921      	ldr	r1, [r4, #16]
 8009cc6:	464a      	mov	r2, r9
 8009cc8:	f7ff fd66 	bl	8009798 <memcpy>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	6126      	str	r6, [r4, #16]
 8009cda:	6165      	str	r5, [r4, #20]
 8009cdc:	444e      	add	r6, r9
 8009cde:	eba5 0509 	sub.w	r5, r5, r9
 8009ce2:	6026      	str	r6, [r4, #0]
 8009ce4:	60a5      	str	r5, [r4, #8]
 8009ce6:	463e      	mov	r6, r7
 8009ce8:	42be      	cmp	r6, r7
 8009cea:	d900      	bls.n	8009cee <__ssputs_r+0x86>
 8009cec:	463e      	mov	r6, r7
 8009cee:	6820      	ldr	r0, [r4, #0]
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	4641      	mov	r1, r8
 8009cf4:	f000 fefa 	bl	800aaec <memmove>
 8009cf8:	68a3      	ldr	r3, [r4, #8]
 8009cfa:	1b9b      	subs	r3, r3, r6
 8009cfc:	60a3      	str	r3, [r4, #8]
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	4433      	add	r3, r6
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	2000      	movs	r0, #0
 8009d06:	e7db      	b.n	8009cc0 <__ssputs_r+0x58>
 8009d08:	462a      	mov	r2, r5
 8009d0a:	f000 ff15 	bl	800ab38 <_realloc_r>
 8009d0e:	4606      	mov	r6, r0
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d1e1      	bne.n	8009cd8 <__ssputs_r+0x70>
 8009d14:	6921      	ldr	r1, [r4, #16]
 8009d16:	4650      	mov	r0, sl
 8009d18:	f7ff fec6 	bl	8009aa8 <_free_r>
 8009d1c:	e7c7      	b.n	8009cae <__ssputs_r+0x46>
	...

08009d20 <_svfiprintf_r>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	4698      	mov	r8, r3
 8009d26:	898b      	ldrh	r3, [r1, #12]
 8009d28:	061b      	lsls	r3, r3, #24
 8009d2a:	b09d      	sub	sp, #116	; 0x74
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	460d      	mov	r5, r1
 8009d30:	4614      	mov	r4, r2
 8009d32:	d50e      	bpl.n	8009d52 <_svfiprintf_r+0x32>
 8009d34:	690b      	ldr	r3, [r1, #16]
 8009d36:	b963      	cbnz	r3, 8009d52 <_svfiprintf_r+0x32>
 8009d38:	2140      	movs	r1, #64	; 0x40
 8009d3a:	f7ff ff21 	bl	8009b80 <_malloc_r>
 8009d3e:	6028      	str	r0, [r5, #0]
 8009d40:	6128      	str	r0, [r5, #16]
 8009d42:	b920      	cbnz	r0, 8009d4e <_svfiprintf_r+0x2e>
 8009d44:	230c      	movs	r3, #12
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d4c:	e0d1      	b.n	8009ef2 <_svfiprintf_r+0x1d2>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	616b      	str	r3, [r5, #20]
 8009d52:	2300      	movs	r3, #0
 8009d54:	9309      	str	r3, [sp, #36]	; 0x24
 8009d56:	2320      	movs	r3, #32
 8009d58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d60:	2330      	movs	r3, #48	; 0x30
 8009d62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f0c <_svfiprintf_r+0x1ec>
 8009d66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d6a:	f04f 0901 	mov.w	r9, #1
 8009d6e:	4623      	mov	r3, r4
 8009d70:	469a      	mov	sl, r3
 8009d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d76:	b10a      	cbz	r2, 8009d7c <_svfiprintf_r+0x5c>
 8009d78:	2a25      	cmp	r2, #37	; 0x25
 8009d7a:	d1f9      	bne.n	8009d70 <_svfiprintf_r+0x50>
 8009d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d80:	d00b      	beq.n	8009d9a <_svfiprintf_r+0x7a>
 8009d82:	465b      	mov	r3, fp
 8009d84:	4622      	mov	r2, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f7ff ff6d 	bl	8009c68 <__ssputs_r>
 8009d8e:	3001      	adds	r0, #1
 8009d90:	f000 80aa 	beq.w	8009ee8 <_svfiprintf_r+0x1c8>
 8009d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d96:	445a      	add	r2, fp
 8009d98:	9209      	str	r2, [sp, #36]	; 0x24
 8009d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f000 80a2 	beq.w	8009ee8 <_svfiprintf_r+0x1c8>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dae:	f10a 0a01 	add.w	sl, sl, #1
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	9307      	str	r3, [sp, #28]
 8009db6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dba:	931a      	str	r3, [sp, #104]	; 0x68
 8009dbc:	4654      	mov	r4, sl
 8009dbe:	2205      	movs	r2, #5
 8009dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc4:	4851      	ldr	r0, [pc, #324]	; (8009f0c <_svfiprintf_r+0x1ec>)
 8009dc6:	f7f6 fa03 	bl	80001d0 <memchr>
 8009dca:	9a04      	ldr	r2, [sp, #16]
 8009dcc:	b9d8      	cbnz	r0, 8009e06 <_svfiprintf_r+0xe6>
 8009dce:	06d0      	lsls	r0, r2, #27
 8009dd0:	bf44      	itt	mi
 8009dd2:	2320      	movmi	r3, #32
 8009dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd8:	0711      	lsls	r1, r2, #28
 8009dda:	bf44      	itt	mi
 8009ddc:	232b      	movmi	r3, #43	; 0x2b
 8009dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de2:	f89a 3000 	ldrb.w	r3, [sl]
 8009de6:	2b2a      	cmp	r3, #42	; 0x2a
 8009de8:	d015      	beq.n	8009e16 <_svfiprintf_r+0xf6>
 8009dea:	9a07      	ldr	r2, [sp, #28]
 8009dec:	4654      	mov	r4, sl
 8009dee:	2000      	movs	r0, #0
 8009df0:	f04f 0c0a 	mov.w	ip, #10
 8009df4:	4621      	mov	r1, r4
 8009df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dfa:	3b30      	subs	r3, #48	; 0x30
 8009dfc:	2b09      	cmp	r3, #9
 8009dfe:	d94e      	bls.n	8009e9e <_svfiprintf_r+0x17e>
 8009e00:	b1b0      	cbz	r0, 8009e30 <_svfiprintf_r+0x110>
 8009e02:	9207      	str	r2, [sp, #28]
 8009e04:	e014      	b.n	8009e30 <_svfiprintf_r+0x110>
 8009e06:	eba0 0308 	sub.w	r3, r0, r8
 8009e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	46a2      	mov	sl, r4
 8009e14:	e7d2      	b.n	8009dbc <_svfiprintf_r+0x9c>
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	1d19      	adds	r1, r3, #4
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	9103      	str	r1, [sp, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bfbb      	ittet	lt
 8009e22:	425b      	neglt	r3, r3
 8009e24:	f042 0202 	orrlt.w	r2, r2, #2
 8009e28:	9307      	strge	r3, [sp, #28]
 8009e2a:	9307      	strlt	r3, [sp, #28]
 8009e2c:	bfb8      	it	lt
 8009e2e:	9204      	strlt	r2, [sp, #16]
 8009e30:	7823      	ldrb	r3, [r4, #0]
 8009e32:	2b2e      	cmp	r3, #46	; 0x2e
 8009e34:	d10c      	bne.n	8009e50 <_svfiprintf_r+0x130>
 8009e36:	7863      	ldrb	r3, [r4, #1]
 8009e38:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3a:	d135      	bne.n	8009ea8 <_svfiprintf_r+0x188>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	9203      	str	r2, [sp, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bfb8      	it	lt
 8009e48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e4c:	3402      	adds	r4, #2
 8009e4e:	9305      	str	r3, [sp, #20]
 8009e50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f1c <_svfiprintf_r+0x1fc>
 8009e54:	7821      	ldrb	r1, [r4, #0]
 8009e56:	2203      	movs	r2, #3
 8009e58:	4650      	mov	r0, sl
 8009e5a:	f7f6 f9b9 	bl	80001d0 <memchr>
 8009e5e:	b140      	cbz	r0, 8009e72 <_svfiprintf_r+0x152>
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	eba0 000a 	sub.w	r0, r0, sl
 8009e66:	fa03 f000 	lsl.w	r0, r3, r0
 8009e6a:	9b04      	ldr	r3, [sp, #16]
 8009e6c:	4303      	orrs	r3, r0
 8009e6e:	3401      	adds	r4, #1
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e76:	4826      	ldr	r0, [pc, #152]	; (8009f10 <_svfiprintf_r+0x1f0>)
 8009e78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e7c:	2206      	movs	r2, #6
 8009e7e:	f7f6 f9a7 	bl	80001d0 <memchr>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d038      	beq.n	8009ef8 <_svfiprintf_r+0x1d8>
 8009e86:	4b23      	ldr	r3, [pc, #140]	; (8009f14 <_svfiprintf_r+0x1f4>)
 8009e88:	bb1b      	cbnz	r3, 8009ed2 <_svfiprintf_r+0x1b2>
 8009e8a:	9b03      	ldr	r3, [sp, #12]
 8009e8c:	3307      	adds	r3, #7
 8009e8e:	f023 0307 	bic.w	r3, r3, #7
 8009e92:	3308      	adds	r3, #8
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e98:	4433      	add	r3, r6
 8009e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9c:	e767      	b.n	8009d6e <_svfiprintf_r+0x4e>
 8009e9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	e7a5      	b.n	8009df4 <_svfiprintf_r+0xd4>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	3401      	adds	r4, #1
 8009eac:	9305      	str	r3, [sp, #20]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	f04f 0c0a 	mov.w	ip, #10
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eba:	3a30      	subs	r2, #48	; 0x30
 8009ebc:	2a09      	cmp	r2, #9
 8009ebe:	d903      	bls.n	8009ec8 <_svfiprintf_r+0x1a8>
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0c5      	beq.n	8009e50 <_svfiprintf_r+0x130>
 8009ec4:	9105      	str	r1, [sp, #20]
 8009ec6:	e7c3      	b.n	8009e50 <_svfiprintf_r+0x130>
 8009ec8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ecc:	4604      	mov	r4, r0
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e7f0      	b.n	8009eb4 <_svfiprintf_r+0x194>
 8009ed2:	ab03      	add	r3, sp, #12
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	4b0f      	ldr	r3, [pc, #60]	; (8009f18 <_svfiprintf_r+0x1f8>)
 8009eda:	a904      	add	r1, sp, #16
 8009edc:	4638      	mov	r0, r7
 8009ede:	f3af 8000 	nop.w
 8009ee2:	1c42      	adds	r2, r0, #1
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	d1d6      	bne.n	8009e96 <_svfiprintf_r+0x176>
 8009ee8:	89ab      	ldrh	r3, [r5, #12]
 8009eea:	065b      	lsls	r3, r3, #25
 8009eec:	f53f af2c 	bmi.w	8009d48 <_svfiprintf_r+0x28>
 8009ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef2:	b01d      	add	sp, #116	; 0x74
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef8:	ab03      	add	r3, sp, #12
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	462a      	mov	r2, r5
 8009efe:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <_svfiprintf_r+0x1f8>)
 8009f00:	a904      	add	r1, sp, #16
 8009f02:	4638      	mov	r0, r7
 8009f04:	f000 f9d4 	bl	800a2b0 <_printf_i>
 8009f08:	e7eb      	b.n	8009ee2 <_svfiprintf_r+0x1c2>
 8009f0a:	bf00      	nop
 8009f0c:	0800b0a1 	.word	0x0800b0a1
 8009f10:	0800b0ab 	.word	0x0800b0ab
 8009f14:	00000000 	.word	0x00000000
 8009f18:	08009c69 	.word	0x08009c69
 8009f1c:	0800b0a7 	.word	0x0800b0a7

08009f20 <__sfputc_r>:
 8009f20:	6893      	ldr	r3, [r2, #8]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	b410      	push	{r4}
 8009f28:	6093      	str	r3, [r2, #8]
 8009f2a:	da08      	bge.n	8009f3e <__sfputc_r+0x1e>
 8009f2c:	6994      	ldr	r4, [r2, #24]
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	db01      	blt.n	8009f36 <__sfputc_r+0x16>
 8009f32:	290a      	cmp	r1, #10
 8009f34:	d103      	bne.n	8009f3e <__sfputc_r+0x1e>
 8009f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f3a:	f000 baef 	b.w	800a51c <__swbuf_r>
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	1c58      	adds	r0, r3, #1
 8009f42:	6010      	str	r0, [r2, #0]
 8009f44:	7019      	strb	r1, [r3, #0]
 8009f46:	4608      	mov	r0, r1
 8009f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <__sfputs_r>:
 8009f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f50:	4606      	mov	r6, r0
 8009f52:	460f      	mov	r7, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	18d5      	adds	r5, r2, r3
 8009f58:	42ac      	cmp	r4, r5
 8009f5a:	d101      	bne.n	8009f60 <__sfputs_r+0x12>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e007      	b.n	8009f70 <__sfputs_r+0x22>
 8009f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f64:	463a      	mov	r2, r7
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ffda 	bl	8009f20 <__sfputc_r>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d1f3      	bne.n	8009f58 <__sfputs_r+0xa>
 8009f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f74 <_vfiprintf_r>:
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	460d      	mov	r5, r1
 8009f7a:	b09d      	sub	sp, #116	; 0x74
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	4698      	mov	r8, r3
 8009f80:	4606      	mov	r6, r0
 8009f82:	b118      	cbz	r0, 8009f8c <_vfiprintf_r+0x18>
 8009f84:	6983      	ldr	r3, [r0, #24]
 8009f86:	b90b      	cbnz	r3, 8009f8c <_vfiprintf_r+0x18>
 8009f88:	f000 fcaa 	bl	800a8e0 <__sinit>
 8009f8c:	4b89      	ldr	r3, [pc, #548]	; (800a1b4 <_vfiprintf_r+0x240>)
 8009f8e:	429d      	cmp	r5, r3
 8009f90:	d11b      	bne.n	8009fca <_vfiprintf_r+0x56>
 8009f92:	6875      	ldr	r5, [r6, #4]
 8009f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f96:	07d9      	lsls	r1, r3, #31
 8009f98:	d405      	bmi.n	8009fa6 <_vfiprintf_r+0x32>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	059a      	lsls	r2, r3, #22
 8009f9e:	d402      	bmi.n	8009fa6 <_vfiprintf_r+0x32>
 8009fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa2:	f000 fd3b 	bl	800aa1c <__retarget_lock_acquire_recursive>
 8009fa6:	89ab      	ldrh	r3, [r5, #12]
 8009fa8:	071b      	lsls	r3, r3, #28
 8009faa:	d501      	bpl.n	8009fb0 <_vfiprintf_r+0x3c>
 8009fac:	692b      	ldr	r3, [r5, #16]
 8009fae:	b9eb      	cbnz	r3, 8009fec <_vfiprintf_r+0x78>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f000 fb04 	bl	800a5c0 <__swsetup_r>
 8009fb8:	b1c0      	cbz	r0, 8009fec <_vfiprintf_r+0x78>
 8009fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fbc:	07dc      	lsls	r4, r3, #31
 8009fbe:	d50e      	bpl.n	8009fde <_vfiprintf_r+0x6a>
 8009fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fc4:	b01d      	add	sp, #116	; 0x74
 8009fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fca:	4b7b      	ldr	r3, [pc, #492]	; (800a1b8 <_vfiprintf_r+0x244>)
 8009fcc:	429d      	cmp	r5, r3
 8009fce:	d101      	bne.n	8009fd4 <_vfiprintf_r+0x60>
 8009fd0:	68b5      	ldr	r5, [r6, #8]
 8009fd2:	e7df      	b.n	8009f94 <_vfiprintf_r+0x20>
 8009fd4:	4b79      	ldr	r3, [pc, #484]	; (800a1bc <_vfiprintf_r+0x248>)
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	bf08      	it	eq
 8009fda:	68f5      	ldreq	r5, [r6, #12]
 8009fdc:	e7da      	b.n	8009f94 <_vfiprintf_r+0x20>
 8009fde:	89ab      	ldrh	r3, [r5, #12]
 8009fe0:	0598      	lsls	r0, r3, #22
 8009fe2:	d4ed      	bmi.n	8009fc0 <_vfiprintf_r+0x4c>
 8009fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fe6:	f000 fd1a 	bl	800aa1e <__retarget_lock_release_recursive>
 8009fea:	e7e9      	b.n	8009fc0 <_vfiprintf_r+0x4c>
 8009fec:	2300      	movs	r3, #0
 8009fee:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff0:	2320      	movs	r3, #32
 8009ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ffa:	2330      	movs	r3, #48	; 0x30
 8009ffc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1c0 <_vfiprintf_r+0x24c>
 800a000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a004:	f04f 0901 	mov.w	r9, #1
 800a008:	4623      	mov	r3, r4
 800a00a:	469a      	mov	sl, r3
 800a00c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a010:	b10a      	cbz	r2, 800a016 <_vfiprintf_r+0xa2>
 800a012:	2a25      	cmp	r2, #37	; 0x25
 800a014:	d1f9      	bne.n	800a00a <_vfiprintf_r+0x96>
 800a016:	ebba 0b04 	subs.w	fp, sl, r4
 800a01a:	d00b      	beq.n	800a034 <_vfiprintf_r+0xc0>
 800a01c:	465b      	mov	r3, fp
 800a01e:	4622      	mov	r2, r4
 800a020:	4629      	mov	r1, r5
 800a022:	4630      	mov	r0, r6
 800a024:	f7ff ff93 	bl	8009f4e <__sfputs_r>
 800a028:	3001      	adds	r0, #1
 800a02a:	f000 80aa 	beq.w	800a182 <_vfiprintf_r+0x20e>
 800a02e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a030:	445a      	add	r2, fp
 800a032:	9209      	str	r2, [sp, #36]	; 0x24
 800a034:	f89a 3000 	ldrb.w	r3, [sl]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 80a2 	beq.w	800a182 <_vfiprintf_r+0x20e>
 800a03e:	2300      	movs	r3, #0
 800a040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a048:	f10a 0a01 	add.w	sl, sl, #1
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	9307      	str	r3, [sp, #28]
 800a050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a054:	931a      	str	r3, [sp, #104]	; 0x68
 800a056:	4654      	mov	r4, sl
 800a058:	2205      	movs	r2, #5
 800a05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05e:	4858      	ldr	r0, [pc, #352]	; (800a1c0 <_vfiprintf_r+0x24c>)
 800a060:	f7f6 f8b6 	bl	80001d0 <memchr>
 800a064:	9a04      	ldr	r2, [sp, #16]
 800a066:	b9d8      	cbnz	r0, 800a0a0 <_vfiprintf_r+0x12c>
 800a068:	06d1      	lsls	r1, r2, #27
 800a06a:	bf44      	itt	mi
 800a06c:	2320      	movmi	r3, #32
 800a06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a072:	0713      	lsls	r3, r2, #28
 800a074:	bf44      	itt	mi
 800a076:	232b      	movmi	r3, #43	; 0x2b
 800a078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a07c:	f89a 3000 	ldrb.w	r3, [sl]
 800a080:	2b2a      	cmp	r3, #42	; 0x2a
 800a082:	d015      	beq.n	800a0b0 <_vfiprintf_r+0x13c>
 800a084:	9a07      	ldr	r2, [sp, #28]
 800a086:	4654      	mov	r4, sl
 800a088:	2000      	movs	r0, #0
 800a08a:	f04f 0c0a 	mov.w	ip, #10
 800a08e:	4621      	mov	r1, r4
 800a090:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a094:	3b30      	subs	r3, #48	; 0x30
 800a096:	2b09      	cmp	r3, #9
 800a098:	d94e      	bls.n	800a138 <_vfiprintf_r+0x1c4>
 800a09a:	b1b0      	cbz	r0, 800a0ca <_vfiprintf_r+0x156>
 800a09c:	9207      	str	r2, [sp, #28]
 800a09e:	e014      	b.n	800a0ca <_vfiprintf_r+0x156>
 800a0a0:	eba0 0308 	sub.w	r3, r0, r8
 800a0a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	9304      	str	r3, [sp, #16]
 800a0ac:	46a2      	mov	sl, r4
 800a0ae:	e7d2      	b.n	800a056 <_vfiprintf_r+0xe2>
 800a0b0:	9b03      	ldr	r3, [sp, #12]
 800a0b2:	1d19      	adds	r1, r3, #4
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	9103      	str	r1, [sp, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	bfbb      	ittet	lt
 800a0bc:	425b      	neglt	r3, r3
 800a0be:	f042 0202 	orrlt.w	r2, r2, #2
 800a0c2:	9307      	strge	r3, [sp, #28]
 800a0c4:	9307      	strlt	r3, [sp, #28]
 800a0c6:	bfb8      	it	lt
 800a0c8:	9204      	strlt	r2, [sp, #16]
 800a0ca:	7823      	ldrb	r3, [r4, #0]
 800a0cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ce:	d10c      	bne.n	800a0ea <_vfiprintf_r+0x176>
 800a0d0:	7863      	ldrb	r3, [r4, #1]
 800a0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d4:	d135      	bne.n	800a142 <_vfiprintf_r+0x1ce>
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	1d1a      	adds	r2, r3, #4
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	9203      	str	r2, [sp, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	bfb8      	it	lt
 800a0e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0e6:	3402      	adds	r4, #2
 800a0e8:	9305      	str	r3, [sp, #20]
 800a0ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1d0 <_vfiprintf_r+0x25c>
 800a0ee:	7821      	ldrb	r1, [r4, #0]
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	4650      	mov	r0, sl
 800a0f4:	f7f6 f86c 	bl	80001d0 <memchr>
 800a0f8:	b140      	cbz	r0, 800a10c <_vfiprintf_r+0x198>
 800a0fa:	2340      	movs	r3, #64	; 0x40
 800a0fc:	eba0 000a 	sub.w	r0, r0, sl
 800a100:	fa03 f000 	lsl.w	r0, r3, r0
 800a104:	9b04      	ldr	r3, [sp, #16]
 800a106:	4303      	orrs	r3, r0
 800a108:	3401      	adds	r4, #1
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a110:	482c      	ldr	r0, [pc, #176]	; (800a1c4 <_vfiprintf_r+0x250>)
 800a112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a116:	2206      	movs	r2, #6
 800a118:	f7f6 f85a 	bl	80001d0 <memchr>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d03f      	beq.n	800a1a0 <_vfiprintf_r+0x22c>
 800a120:	4b29      	ldr	r3, [pc, #164]	; (800a1c8 <_vfiprintf_r+0x254>)
 800a122:	bb1b      	cbnz	r3, 800a16c <_vfiprintf_r+0x1f8>
 800a124:	9b03      	ldr	r3, [sp, #12]
 800a126:	3307      	adds	r3, #7
 800a128:	f023 0307 	bic.w	r3, r3, #7
 800a12c:	3308      	adds	r3, #8
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a132:	443b      	add	r3, r7
 800a134:	9309      	str	r3, [sp, #36]	; 0x24
 800a136:	e767      	b.n	800a008 <_vfiprintf_r+0x94>
 800a138:	fb0c 3202 	mla	r2, ip, r2, r3
 800a13c:	460c      	mov	r4, r1
 800a13e:	2001      	movs	r0, #1
 800a140:	e7a5      	b.n	800a08e <_vfiprintf_r+0x11a>
 800a142:	2300      	movs	r3, #0
 800a144:	3401      	adds	r4, #1
 800a146:	9305      	str	r3, [sp, #20]
 800a148:	4619      	mov	r1, r3
 800a14a:	f04f 0c0a 	mov.w	ip, #10
 800a14e:	4620      	mov	r0, r4
 800a150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a154:	3a30      	subs	r2, #48	; 0x30
 800a156:	2a09      	cmp	r2, #9
 800a158:	d903      	bls.n	800a162 <_vfiprintf_r+0x1ee>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0c5      	beq.n	800a0ea <_vfiprintf_r+0x176>
 800a15e:	9105      	str	r1, [sp, #20]
 800a160:	e7c3      	b.n	800a0ea <_vfiprintf_r+0x176>
 800a162:	fb0c 2101 	mla	r1, ip, r1, r2
 800a166:	4604      	mov	r4, r0
 800a168:	2301      	movs	r3, #1
 800a16a:	e7f0      	b.n	800a14e <_vfiprintf_r+0x1da>
 800a16c:	ab03      	add	r3, sp, #12
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	462a      	mov	r2, r5
 800a172:	4b16      	ldr	r3, [pc, #88]	; (800a1cc <_vfiprintf_r+0x258>)
 800a174:	a904      	add	r1, sp, #16
 800a176:	4630      	mov	r0, r6
 800a178:	f3af 8000 	nop.w
 800a17c:	4607      	mov	r7, r0
 800a17e:	1c78      	adds	r0, r7, #1
 800a180:	d1d6      	bne.n	800a130 <_vfiprintf_r+0x1bc>
 800a182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a184:	07d9      	lsls	r1, r3, #31
 800a186:	d405      	bmi.n	800a194 <_vfiprintf_r+0x220>
 800a188:	89ab      	ldrh	r3, [r5, #12]
 800a18a:	059a      	lsls	r2, r3, #22
 800a18c:	d402      	bmi.n	800a194 <_vfiprintf_r+0x220>
 800a18e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a190:	f000 fc45 	bl	800aa1e <__retarget_lock_release_recursive>
 800a194:	89ab      	ldrh	r3, [r5, #12]
 800a196:	065b      	lsls	r3, r3, #25
 800a198:	f53f af12 	bmi.w	8009fc0 <_vfiprintf_r+0x4c>
 800a19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a19e:	e711      	b.n	8009fc4 <_vfiprintf_r+0x50>
 800a1a0:	ab03      	add	r3, sp, #12
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	462a      	mov	r2, r5
 800a1a6:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <_vfiprintf_r+0x258>)
 800a1a8:	a904      	add	r1, sp, #16
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f000 f880 	bl	800a2b0 <_printf_i>
 800a1b0:	e7e4      	b.n	800a17c <_vfiprintf_r+0x208>
 800a1b2:	bf00      	nop
 800a1b4:	0800b0f4 	.word	0x0800b0f4
 800a1b8:	0800b114 	.word	0x0800b114
 800a1bc:	0800b0d4 	.word	0x0800b0d4
 800a1c0:	0800b0a1 	.word	0x0800b0a1
 800a1c4:	0800b0ab 	.word	0x0800b0ab
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	08009f4f 	.word	0x08009f4f
 800a1d0:	0800b0a7 	.word	0x0800b0a7

0800a1d4 <_printf_common>:
 800a1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d8:	4616      	mov	r6, r2
 800a1da:	4699      	mov	r9, r3
 800a1dc:	688a      	ldr	r2, [r1, #8]
 800a1de:	690b      	ldr	r3, [r1, #16]
 800a1e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	bfb8      	it	lt
 800a1e8:	4613      	movlt	r3, r2
 800a1ea:	6033      	str	r3, [r6, #0]
 800a1ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	b10a      	cbz	r2, 800a1fa <_printf_common+0x26>
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	6033      	str	r3, [r6, #0]
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	0699      	lsls	r1, r3, #26
 800a1fe:	bf42      	ittt	mi
 800a200:	6833      	ldrmi	r3, [r6, #0]
 800a202:	3302      	addmi	r3, #2
 800a204:	6033      	strmi	r3, [r6, #0]
 800a206:	6825      	ldr	r5, [r4, #0]
 800a208:	f015 0506 	ands.w	r5, r5, #6
 800a20c:	d106      	bne.n	800a21c <_printf_common+0x48>
 800a20e:	f104 0a19 	add.w	sl, r4, #25
 800a212:	68e3      	ldr	r3, [r4, #12]
 800a214:	6832      	ldr	r2, [r6, #0]
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	42ab      	cmp	r3, r5
 800a21a:	dc26      	bgt.n	800a26a <_printf_common+0x96>
 800a21c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a220:	1e13      	subs	r3, r2, #0
 800a222:	6822      	ldr	r2, [r4, #0]
 800a224:	bf18      	it	ne
 800a226:	2301      	movne	r3, #1
 800a228:	0692      	lsls	r2, r2, #26
 800a22a:	d42b      	bmi.n	800a284 <_printf_common+0xb0>
 800a22c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a230:	4649      	mov	r1, r9
 800a232:	4638      	mov	r0, r7
 800a234:	47c0      	blx	r8
 800a236:	3001      	adds	r0, #1
 800a238:	d01e      	beq.n	800a278 <_printf_common+0xa4>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	68e5      	ldr	r5, [r4, #12]
 800a23e:	6832      	ldr	r2, [r6, #0]
 800a240:	f003 0306 	and.w	r3, r3, #6
 800a244:	2b04      	cmp	r3, #4
 800a246:	bf08      	it	eq
 800a248:	1aad      	subeq	r5, r5, r2
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	6922      	ldr	r2, [r4, #16]
 800a24e:	bf0c      	ite	eq
 800a250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a254:	2500      	movne	r5, #0
 800a256:	4293      	cmp	r3, r2
 800a258:	bfc4      	itt	gt
 800a25a:	1a9b      	subgt	r3, r3, r2
 800a25c:	18ed      	addgt	r5, r5, r3
 800a25e:	2600      	movs	r6, #0
 800a260:	341a      	adds	r4, #26
 800a262:	42b5      	cmp	r5, r6
 800a264:	d11a      	bne.n	800a29c <_printf_common+0xc8>
 800a266:	2000      	movs	r0, #0
 800a268:	e008      	b.n	800a27c <_printf_common+0xa8>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4652      	mov	r2, sl
 800a26e:	4649      	mov	r1, r9
 800a270:	4638      	mov	r0, r7
 800a272:	47c0      	blx	r8
 800a274:	3001      	adds	r0, #1
 800a276:	d103      	bne.n	800a280 <_printf_common+0xac>
 800a278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a280:	3501      	adds	r5, #1
 800a282:	e7c6      	b.n	800a212 <_printf_common+0x3e>
 800a284:	18e1      	adds	r1, r4, r3
 800a286:	1c5a      	adds	r2, r3, #1
 800a288:	2030      	movs	r0, #48	; 0x30
 800a28a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a28e:	4422      	add	r2, r4
 800a290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a298:	3302      	adds	r3, #2
 800a29a:	e7c7      	b.n	800a22c <_printf_common+0x58>
 800a29c:	2301      	movs	r3, #1
 800a29e:	4622      	mov	r2, r4
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	47c0      	blx	r8
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d0e6      	beq.n	800a278 <_printf_common+0xa4>
 800a2aa:	3601      	adds	r6, #1
 800a2ac:	e7d9      	b.n	800a262 <_printf_common+0x8e>
	...

0800a2b0 <_printf_i>:
 800a2b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b4:	7e0f      	ldrb	r7, [r1, #24]
 800a2b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2b8:	2f78      	cmp	r7, #120	; 0x78
 800a2ba:	4691      	mov	r9, r2
 800a2bc:	4680      	mov	r8, r0
 800a2be:	460c      	mov	r4, r1
 800a2c0:	469a      	mov	sl, r3
 800a2c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2c6:	d807      	bhi.n	800a2d8 <_printf_i+0x28>
 800a2c8:	2f62      	cmp	r7, #98	; 0x62
 800a2ca:	d80a      	bhi.n	800a2e2 <_printf_i+0x32>
 800a2cc:	2f00      	cmp	r7, #0
 800a2ce:	f000 80d8 	beq.w	800a482 <_printf_i+0x1d2>
 800a2d2:	2f58      	cmp	r7, #88	; 0x58
 800a2d4:	f000 80a3 	beq.w	800a41e <_printf_i+0x16e>
 800a2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2e0:	e03a      	b.n	800a358 <_printf_i+0xa8>
 800a2e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2e6:	2b15      	cmp	r3, #21
 800a2e8:	d8f6      	bhi.n	800a2d8 <_printf_i+0x28>
 800a2ea:	a101      	add	r1, pc, #4	; (adr r1, 800a2f0 <_printf_i+0x40>)
 800a2ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2f0:	0800a349 	.word	0x0800a349
 800a2f4:	0800a35d 	.word	0x0800a35d
 800a2f8:	0800a2d9 	.word	0x0800a2d9
 800a2fc:	0800a2d9 	.word	0x0800a2d9
 800a300:	0800a2d9 	.word	0x0800a2d9
 800a304:	0800a2d9 	.word	0x0800a2d9
 800a308:	0800a35d 	.word	0x0800a35d
 800a30c:	0800a2d9 	.word	0x0800a2d9
 800a310:	0800a2d9 	.word	0x0800a2d9
 800a314:	0800a2d9 	.word	0x0800a2d9
 800a318:	0800a2d9 	.word	0x0800a2d9
 800a31c:	0800a469 	.word	0x0800a469
 800a320:	0800a38d 	.word	0x0800a38d
 800a324:	0800a44b 	.word	0x0800a44b
 800a328:	0800a2d9 	.word	0x0800a2d9
 800a32c:	0800a2d9 	.word	0x0800a2d9
 800a330:	0800a48b 	.word	0x0800a48b
 800a334:	0800a2d9 	.word	0x0800a2d9
 800a338:	0800a38d 	.word	0x0800a38d
 800a33c:	0800a2d9 	.word	0x0800a2d9
 800a340:	0800a2d9 	.word	0x0800a2d9
 800a344:	0800a453 	.word	0x0800a453
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	1d1a      	adds	r2, r3, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	602a      	str	r2, [r5, #0]
 800a350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a358:	2301      	movs	r3, #1
 800a35a:	e0a3      	b.n	800a4a4 <_printf_i+0x1f4>
 800a35c:	6820      	ldr	r0, [r4, #0]
 800a35e:	6829      	ldr	r1, [r5, #0]
 800a360:	0606      	lsls	r6, r0, #24
 800a362:	f101 0304 	add.w	r3, r1, #4
 800a366:	d50a      	bpl.n	800a37e <_printf_i+0xce>
 800a368:	680e      	ldr	r6, [r1, #0]
 800a36a:	602b      	str	r3, [r5, #0]
 800a36c:	2e00      	cmp	r6, #0
 800a36e:	da03      	bge.n	800a378 <_printf_i+0xc8>
 800a370:	232d      	movs	r3, #45	; 0x2d
 800a372:	4276      	negs	r6, r6
 800a374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a378:	485e      	ldr	r0, [pc, #376]	; (800a4f4 <_printf_i+0x244>)
 800a37a:	230a      	movs	r3, #10
 800a37c:	e019      	b.n	800a3b2 <_printf_i+0x102>
 800a37e:	680e      	ldr	r6, [r1, #0]
 800a380:	602b      	str	r3, [r5, #0]
 800a382:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a386:	bf18      	it	ne
 800a388:	b236      	sxthne	r6, r6
 800a38a:	e7ef      	b.n	800a36c <_printf_i+0xbc>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	6820      	ldr	r0, [r4, #0]
 800a390:	1d19      	adds	r1, r3, #4
 800a392:	6029      	str	r1, [r5, #0]
 800a394:	0601      	lsls	r1, r0, #24
 800a396:	d501      	bpl.n	800a39c <_printf_i+0xec>
 800a398:	681e      	ldr	r6, [r3, #0]
 800a39a:	e002      	b.n	800a3a2 <_printf_i+0xf2>
 800a39c:	0646      	lsls	r6, r0, #25
 800a39e:	d5fb      	bpl.n	800a398 <_printf_i+0xe8>
 800a3a0:	881e      	ldrh	r6, [r3, #0]
 800a3a2:	4854      	ldr	r0, [pc, #336]	; (800a4f4 <_printf_i+0x244>)
 800a3a4:	2f6f      	cmp	r7, #111	; 0x6f
 800a3a6:	bf0c      	ite	eq
 800a3a8:	2308      	moveq	r3, #8
 800a3aa:	230a      	movne	r3, #10
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3b2:	6865      	ldr	r5, [r4, #4]
 800a3b4:	60a5      	str	r5, [r4, #8]
 800a3b6:	2d00      	cmp	r5, #0
 800a3b8:	bfa2      	ittt	ge
 800a3ba:	6821      	ldrge	r1, [r4, #0]
 800a3bc:	f021 0104 	bicge.w	r1, r1, #4
 800a3c0:	6021      	strge	r1, [r4, #0]
 800a3c2:	b90e      	cbnz	r6, 800a3c8 <_printf_i+0x118>
 800a3c4:	2d00      	cmp	r5, #0
 800a3c6:	d04d      	beq.n	800a464 <_printf_i+0x1b4>
 800a3c8:	4615      	mov	r5, r2
 800a3ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3ce:	fb03 6711 	mls	r7, r3, r1, r6
 800a3d2:	5dc7      	ldrb	r7, [r0, r7]
 800a3d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3d8:	4637      	mov	r7, r6
 800a3da:	42bb      	cmp	r3, r7
 800a3dc:	460e      	mov	r6, r1
 800a3de:	d9f4      	bls.n	800a3ca <_printf_i+0x11a>
 800a3e0:	2b08      	cmp	r3, #8
 800a3e2:	d10b      	bne.n	800a3fc <_printf_i+0x14c>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	07de      	lsls	r6, r3, #31
 800a3e8:	d508      	bpl.n	800a3fc <_printf_i+0x14c>
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	6861      	ldr	r1, [r4, #4]
 800a3ee:	4299      	cmp	r1, r3
 800a3f0:	bfde      	ittt	le
 800a3f2:	2330      	movle	r3, #48	; 0x30
 800a3f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a3fc:	1b52      	subs	r2, r2, r5
 800a3fe:	6122      	str	r2, [r4, #16]
 800a400:	f8cd a000 	str.w	sl, [sp]
 800a404:	464b      	mov	r3, r9
 800a406:	aa03      	add	r2, sp, #12
 800a408:	4621      	mov	r1, r4
 800a40a:	4640      	mov	r0, r8
 800a40c:	f7ff fee2 	bl	800a1d4 <_printf_common>
 800a410:	3001      	adds	r0, #1
 800a412:	d14c      	bne.n	800a4ae <_printf_i+0x1fe>
 800a414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a418:	b004      	add	sp, #16
 800a41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41e:	4835      	ldr	r0, [pc, #212]	; (800a4f4 <_printf_i+0x244>)
 800a420:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a424:	6829      	ldr	r1, [r5, #0]
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	f851 6b04 	ldr.w	r6, [r1], #4
 800a42c:	6029      	str	r1, [r5, #0]
 800a42e:	061d      	lsls	r5, r3, #24
 800a430:	d514      	bpl.n	800a45c <_printf_i+0x1ac>
 800a432:	07df      	lsls	r7, r3, #31
 800a434:	bf44      	itt	mi
 800a436:	f043 0320 	orrmi.w	r3, r3, #32
 800a43a:	6023      	strmi	r3, [r4, #0]
 800a43c:	b91e      	cbnz	r6, 800a446 <_printf_i+0x196>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	f023 0320 	bic.w	r3, r3, #32
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	2310      	movs	r3, #16
 800a448:	e7b0      	b.n	800a3ac <_printf_i+0xfc>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	f043 0320 	orr.w	r3, r3, #32
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	2378      	movs	r3, #120	; 0x78
 800a454:	4828      	ldr	r0, [pc, #160]	; (800a4f8 <_printf_i+0x248>)
 800a456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a45a:	e7e3      	b.n	800a424 <_printf_i+0x174>
 800a45c:	0659      	lsls	r1, r3, #25
 800a45e:	bf48      	it	mi
 800a460:	b2b6      	uxthmi	r6, r6
 800a462:	e7e6      	b.n	800a432 <_printf_i+0x182>
 800a464:	4615      	mov	r5, r2
 800a466:	e7bb      	b.n	800a3e0 <_printf_i+0x130>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	6826      	ldr	r6, [r4, #0]
 800a46c:	6961      	ldr	r1, [r4, #20]
 800a46e:	1d18      	adds	r0, r3, #4
 800a470:	6028      	str	r0, [r5, #0]
 800a472:	0635      	lsls	r5, r6, #24
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	d501      	bpl.n	800a47c <_printf_i+0x1cc>
 800a478:	6019      	str	r1, [r3, #0]
 800a47a:	e002      	b.n	800a482 <_printf_i+0x1d2>
 800a47c:	0670      	lsls	r0, r6, #25
 800a47e:	d5fb      	bpl.n	800a478 <_printf_i+0x1c8>
 800a480:	8019      	strh	r1, [r3, #0]
 800a482:	2300      	movs	r3, #0
 800a484:	6123      	str	r3, [r4, #16]
 800a486:	4615      	mov	r5, r2
 800a488:	e7ba      	b.n	800a400 <_printf_i+0x150>
 800a48a:	682b      	ldr	r3, [r5, #0]
 800a48c:	1d1a      	adds	r2, r3, #4
 800a48e:	602a      	str	r2, [r5, #0]
 800a490:	681d      	ldr	r5, [r3, #0]
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	2100      	movs	r1, #0
 800a496:	4628      	mov	r0, r5
 800a498:	f7f5 fe9a 	bl	80001d0 <memchr>
 800a49c:	b108      	cbz	r0, 800a4a2 <_printf_i+0x1f2>
 800a49e:	1b40      	subs	r0, r0, r5
 800a4a0:	6060      	str	r0, [r4, #4]
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ac:	e7a8      	b.n	800a400 <_printf_i+0x150>
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	47d0      	blx	sl
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d0ab      	beq.n	800a414 <_printf_i+0x164>
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	079b      	lsls	r3, r3, #30
 800a4c0:	d413      	bmi.n	800a4ea <_printf_i+0x23a>
 800a4c2:	68e0      	ldr	r0, [r4, #12]
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	4298      	cmp	r0, r3
 800a4c8:	bfb8      	it	lt
 800a4ca:	4618      	movlt	r0, r3
 800a4cc:	e7a4      	b.n	800a418 <_printf_i+0x168>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	47d0      	blx	sl
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d09b      	beq.n	800a414 <_printf_i+0x164>
 800a4dc:	3501      	adds	r5, #1
 800a4de:	68e3      	ldr	r3, [r4, #12]
 800a4e0:	9903      	ldr	r1, [sp, #12]
 800a4e2:	1a5b      	subs	r3, r3, r1
 800a4e4:	42ab      	cmp	r3, r5
 800a4e6:	dcf2      	bgt.n	800a4ce <_printf_i+0x21e>
 800a4e8:	e7eb      	b.n	800a4c2 <_printf_i+0x212>
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	f104 0619 	add.w	r6, r4, #25
 800a4f0:	e7f5      	b.n	800a4de <_printf_i+0x22e>
 800a4f2:	bf00      	nop
 800a4f4:	0800b0b2 	.word	0x0800b0b2
 800a4f8:	0800b0c3 	.word	0x0800b0c3

0800a4fc <_sbrk_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4d06      	ldr	r5, [pc, #24]	; (800a518 <_sbrk_r+0x1c>)
 800a500:	2300      	movs	r3, #0
 800a502:	4604      	mov	r4, r0
 800a504:	4608      	mov	r0, r1
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	f7f6 fe16 	bl	8001138 <_sbrk>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_sbrk_r+0x1a>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_sbrk_r+0x1a>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	20001fa0 	.word	0x20001fa0

0800a51c <__swbuf_r>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	460e      	mov	r6, r1
 800a520:	4614      	mov	r4, r2
 800a522:	4605      	mov	r5, r0
 800a524:	b118      	cbz	r0, 800a52e <__swbuf_r+0x12>
 800a526:	6983      	ldr	r3, [r0, #24]
 800a528:	b90b      	cbnz	r3, 800a52e <__swbuf_r+0x12>
 800a52a:	f000 f9d9 	bl	800a8e0 <__sinit>
 800a52e:	4b21      	ldr	r3, [pc, #132]	; (800a5b4 <__swbuf_r+0x98>)
 800a530:	429c      	cmp	r4, r3
 800a532:	d12b      	bne.n	800a58c <__swbuf_r+0x70>
 800a534:	686c      	ldr	r4, [r5, #4]
 800a536:	69a3      	ldr	r3, [r4, #24]
 800a538:	60a3      	str	r3, [r4, #8]
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	071a      	lsls	r2, r3, #28
 800a53e:	d52f      	bpl.n	800a5a0 <__swbuf_r+0x84>
 800a540:	6923      	ldr	r3, [r4, #16]
 800a542:	b36b      	cbz	r3, 800a5a0 <__swbuf_r+0x84>
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	6820      	ldr	r0, [r4, #0]
 800a548:	1ac0      	subs	r0, r0, r3
 800a54a:	6963      	ldr	r3, [r4, #20]
 800a54c:	b2f6      	uxtb	r6, r6
 800a54e:	4283      	cmp	r3, r0
 800a550:	4637      	mov	r7, r6
 800a552:	dc04      	bgt.n	800a55e <__swbuf_r+0x42>
 800a554:	4621      	mov	r1, r4
 800a556:	4628      	mov	r0, r5
 800a558:	f000 f92e 	bl	800a7b8 <_fflush_r>
 800a55c:	bb30      	cbnz	r0, 800a5ac <__swbuf_r+0x90>
 800a55e:	68a3      	ldr	r3, [r4, #8]
 800a560:	3b01      	subs	r3, #1
 800a562:	60a3      	str	r3, [r4, #8]
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	1c5a      	adds	r2, r3, #1
 800a568:	6022      	str	r2, [r4, #0]
 800a56a:	701e      	strb	r6, [r3, #0]
 800a56c:	6963      	ldr	r3, [r4, #20]
 800a56e:	3001      	adds	r0, #1
 800a570:	4283      	cmp	r3, r0
 800a572:	d004      	beq.n	800a57e <__swbuf_r+0x62>
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	07db      	lsls	r3, r3, #31
 800a578:	d506      	bpl.n	800a588 <__swbuf_r+0x6c>
 800a57a:	2e0a      	cmp	r6, #10
 800a57c:	d104      	bne.n	800a588 <__swbuf_r+0x6c>
 800a57e:	4621      	mov	r1, r4
 800a580:	4628      	mov	r0, r5
 800a582:	f000 f919 	bl	800a7b8 <_fflush_r>
 800a586:	b988      	cbnz	r0, 800a5ac <__swbuf_r+0x90>
 800a588:	4638      	mov	r0, r7
 800a58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <__swbuf_r+0x9c>)
 800a58e:	429c      	cmp	r4, r3
 800a590:	d101      	bne.n	800a596 <__swbuf_r+0x7a>
 800a592:	68ac      	ldr	r4, [r5, #8]
 800a594:	e7cf      	b.n	800a536 <__swbuf_r+0x1a>
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <__swbuf_r+0xa0>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	bf08      	it	eq
 800a59c:	68ec      	ldreq	r4, [r5, #12]
 800a59e:	e7ca      	b.n	800a536 <__swbuf_r+0x1a>
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f000 f80c 	bl	800a5c0 <__swsetup_r>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d0cb      	beq.n	800a544 <__swbuf_r+0x28>
 800a5ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5b0:	e7ea      	b.n	800a588 <__swbuf_r+0x6c>
 800a5b2:	bf00      	nop
 800a5b4:	0800b0f4 	.word	0x0800b0f4
 800a5b8:	0800b114 	.word	0x0800b114
 800a5bc:	0800b0d4 	.word	0x0800b0d4

0800a5c0 <__swsetup_r>:
 800a5c0:	4b32      	ldr	r3, [pc, #200]	; (800a68c <__swsetup_r+0xcc>)
 800a5c2:	b570      	push	{r4, r5, r6, lr}
 800a5c4:	681d      	ldr	r5, [r3, #0]
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	b125      	cbz	r5, 800a5d6 <__swsetup_r+0x16>
 800a5cc:	69ab      	ldr	r3, [r5, #24]
 800a5ce:	b913      	cbnz	r3, 800a5d6 <__swsetup_r+0x16>
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f000 f985 	bl	800a8e0 <__sinit>
 800a5d6:	4b2e      	ldr	r3, [pc, #184]	; (800a690 <__swsetup_r+0xd0>)
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	d10f      	bne.n	800a5fc <__swsetup_r+0x3c>
 800a5dc:	686c      	ldr	r4, [r5, #4]
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5e4:	0719      	lsls	r1, r3, #28
 800a5e6:	d42c      	bmi.n	800a642 <__swsetup_r+0x82>
 800a5e8:	06dd      	lsls	r5, r3, #27
 800a5ea:	d411      	bmi.n	800a610 <__swsetup_r+0x50>
 800a5ec:	2309      	movs	r3, #9
 800a5ee:	6033      	str	r3, [r6, #0]
 800a5f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5f4:	81a3      	strh	r3, [r4, #12]
 800a5f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5fa:	e03e      	b.n	800a67a <__swsetup_r+0xba>
 800a5fc:	4b25      	ldr	r3, [pc, #148]	; (800a694 <__swsetup_r+0xd4>)
 800a5fe:	429c      	cmp	r4, r3
 800a600:	d101      	bne.n	800a606 <__swsetup_r+0x46>
 800a602:	68ac      	ldr	r4, [r5, #8]
 800a604:	e7eb      	b.n	800a5de <__swsetup_r+0x1e>
 800a606:	4b24      	ldr	r3, [pc, #144]	; (800a698 <__swsetup_r+0xd8>)
 800a608:	429c      	cmp	r4, r3
 800a60a:	bf08      	it	eq
 800a60c:	68ec      	ldreq	r4, [r5, #12]
 800a60e:	e7e6      	b.n	800a5de <__swsetup_r+0x1e>
 800a610:	0758      	lsls	r0, r3, #29
 800a612:	d512      	bpl.n	800a63a <__swsetup_r+0x7a>
 800a614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a616:	b141      	cbz	r1, 800a62a <__swsetup_r+0x6a>
 800a618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a61c:	4299      	cmp	r1, r3
 800a61e:	d002      	beq.n	800a626 <__swsetup_r+0x66>
 800a620:	4630      	mov	r0, r6
 800a622:	f7ff fa41 	bl	8009aa8 <_free_r>
 800a626:	2300      	movs	r3, #0
 800a628:	6363      	str	r3, [r4, #52]	; 0x34
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	2300      	movs	r3, #0
 800a634:	6063      	str	r3, [r4, #4]
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f043 0308 	orr.w	r3, r3, #8
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	b94b      	cbnz	r3, 800a65a <__swsetup_r+0x9a>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a64c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a650:	d003      	beq.n	800a65a <__swsetup_r+0x9a>
 800a652:	4621      	mov	r1, r4
 800a654:	4630      	mov	r0, r6
 800a656:	f000 fa09 	bl	800aa6c <__smakebuf_r>
 800a65a:	89a0      	ldrh	r0, [r4, #12]
 800a65c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a660:	f010 0301 	ands.w	r3, r0, #1
 800a664:	d00a      	beq.n	800a67c <__swsetup_r+0xbc>
 800a666:	2300      	movs	r3, #0
 800a668:	60a3      	str	r3, [r4, #8]
 800a66a:	6963      	ldr	r3, [r4, #20]
 800a66c:	425b      	negs	r3, r3
 800a66e:	61a3      	str	r3, [r4, #24]
 800a670:	6923      	ldr	r3, [r4, #16]
 800a672:	b943      	cbnz	r3, 800a686 <__swsetup_r+0xc6>
 800a674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a678:	d1ba      	bne.n	800a5f0 <__swsetup_r+0x30>
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	0781      	lsls	r1, r0, #30
 800a67e:	bf58      	it	pl
 800a680:	6963      	ldrpl	r3, [r4, #20]
 800a682:	60a3      	str	r3, [r4, #8]
 800a684:	e7f4      	b.n	800a670 <__swsetup_r+0xb0>
 800a686:	2000      	movs	r0, #0
 800a688:	e7f7      	b.n	800a67a <__swsetup_r+0xba>
 800a68a:	bf00      	nop
 800a68c:	20000010 	.word	0x20000010
 800a690:	0800b0f4 	.word	0x0800b0f4
 800a694:	0800b114 	.word	0x0800b114
 800a698:	0800b0d4 	.word	0x0800b0d4

0800a69c <abort>:
 800a69c:	b508      	push	{r3, lr}
 800a69e:	2006      	movs	r0, #6
 800a6a0:	f000 faa2 	bl	800abe8 <raise>
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	f7f6 fccf 	bl	8001048 <_exit>
	...

0800a6ac <__sflush_r>:
 800a6ac:	898a      	ldrh	r2, [r1, #12]
 800a6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	0710      	lsls	r0, r2, #28
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	d458      	bmi.n	800a76c <__sflush_r+0xc0>
 800a6ba:	684b      	ldr	r3, [r1, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dc05      	bgt.n	800a6cc <__sflush_r+0x20>
 800a6c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	dc02      	bgt.n	800a6cc <__sflush_r+0x20>
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	d0f9      	beq.n	800a6c6 <__sflush_r+0x1a>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6d8:	682f      	ldr	r7, [r5, #0]
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	d032      	beq.n	800a744 <__sflush_r+0x98>
 800a6de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	075a      	lsls	r2, r3, #29
 800a6e4:	d505      	bpl.n	800a6f2 <__sflush_r+0x46>
 800a6e6:	6863      	ldr	r3, [r4, #4]
 800a6e8:	1ac0      	subs	r0, r0, r3
 800a6ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6ec:	b10b      	cbz	r3, 800a6f2 <__sflush_r+0x46>
 800a6ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6f0:	1ac0      	subs	r0, r0, r3
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6f8:	6a21      	ldr	r1, [r4, #32]
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b0      	blx	r6
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	d106      	bne.n	800a712 <__sflush_r+0x66>
 800a704:	6829      	ldr	r1, [r5, #0]
 800a706:	291d      	cmp	r1, #29
 800a708:	d82c      	bhi.n	800a764 <__sflush_r+0xb8>
 800a70a:	4a2a      	ldr	r2, [pc, #168]	; (800a7b4 <__sflush_r+0x108>)
 800a70c:	40ca      	lsrs	r2, r1
 800a70e:	07d6      	lsls	r6, r2, #31
 800a710:	d528      	bpl.n	800a764 <__sflush_r+0xb8>
 800a712:	2200      	movs	r2, #0
 800a714:	6062      	str	r2, [r4, #4]
 800a716:	04d9      	lsls	r1, r3, #19
 800a718:	6922      	ldr	r2, [r4, #16]
 800a71a:	6022      	str	r2, [r4, #0]
 800a71c:	d504      	bpl.n	800a728 <__sflush_r+0x7c>
 800a71e:	1c42      	adds	r2, r0, #1
 800a720:	d101      	bne.n	800a726 <__sflush_r+0x7a>
 800a722:	682b      	ldr	r3, [r5, #0]
 800a724:	b903      	cbnz	r3, 800a728 <__sflush_r+0x7c>
 800a726:	6560      	str	r0, [r4, #84]	; 0x54
 800a728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a72a:	602f      	str	r7, [r5, #0]
 800a72c:	2900      	cmp	r1, #0
 800a72e:	d0ca      	beq.n	800a6c6 <__sflush_r+0x1a>
 800a730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a734:	4299      	cmp	r1, r3
 800a736:	d002      	beq.n	800a73e <__sflush_r+0x92>
 800a738:	4628      	mov	r0, r5
 800a73a:	f7ff f9b5 	bl	8009aa8 <_free_r>
 800a73e:	2000      	movs	r0, #0
 800a740:	6360      	str	r0, [r4, #52]	; 0x34
 800a742:	e7c1      	b.n	800a6c8 <__sflush_r+0x1c>
 800a744:	6a21      	ldr	r1, [r4, #32]
 800a746:	2301      	movs	r3, #1
 800a748:	4628      	mov	r0, r5
 800a74a:	47b0      	blx	r6
 800a74c:	1c41      	adds	r1, r0, #1
 800a74e:	d1c7      	bne.n	800a6e0 <__sflush_r+0x34>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0c4      	beq.n	800a6e0 <__sflush_r+0x34>
 800a756:	2b1d      	cmp	r3, #29
 800a758:	d001      	beq.n	800a75e <__sflush_r+0xb2>
 800a75a:	2b16      	cmp	r3, #22
 800a75c:	d101      	bne.n	800a762 <__sflush_r+0xb6>
 800a75e:	602f      	str	r7, [r5, #0]
 800a760:	e7b1      	b.n	800a6c6 <__sflush_r+0x1a>
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	e7ad      	b.n	800a6c8 <__sflush_r+0x1c>
 800a76c:	690f      	ldr	r7, [r1, #16]
 800a76e:	2f00      	cmp	r7, #0
 800a770:	d0a9      	beq.n	800a6c6 <__sflush_r+0x1a>
 800a772:	0793      	lsls	r3, r2, #30
 800a774:	680e      	ldr	r6, [r1, #0]
 800a776:	bf08      	it	eq
 800a778:	694b      	ldreq	r3, [r1, #20]
 800a77a:	600f      	str	r7, [r1, #0]
 800a77c:	bf18      	it	ne
 800a77e:	2300      	movne	r3, #0
 800a780:	eba6 0807 	sub.w	r8, r6, r7
 800a784:	608b      	str	r3, [r1, #8]
 800a786:	f1b8 0f00 	cmp.w	r8, #0
 800a78a:	dd9c      	ble.n	800a6c6 <__sflush_r+0x1a>
 800a78c:	6a21      	ldr	r1, [r4, #32]
 800a78e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a790:	4643      	mov	r3, r8
 800a792:	463a      	mov	r2, r7
 800a794:	4628      	mov	r0, r5
 800a796:	47b0      	blx	r6
 800a798:	2800      	cmp	r0, #0
 800a79a:	dc06      	bgt.n	800a7aa <__sflush_r+0xfe>
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7a8:	e78e      	b.n	800a6c8 <__sflush_r+0x1c>
 800a7aa:	4407      	add	r7, r0
 800a7ac:	eba8 0800 	sub.w	r8, r8, r0
 800a7b0:	e7e9      	b.n	800a786 <__sflush_r+0xda>
 800a7b2:	bf00      	nop
 800a7b4:	20400001 	.word	0x20400001

0800a7b8 <_fflush_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	690b      	ldr	r3, [r1, #16]
 800a7bc:	4605      	mov	r5, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	b913      	cbnz	r3, 800a7c8 <_fflush_r+0x10>
 800a7c2:	2500      	movs	r5, #0
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	b118      	cbz	r0, 800a7d2 <_fflush_r+0x1a>
 800a7ca:	6983      	ldr	r3, [r0, #24]
 800a7cc:	b90b      	cbnz	r3, 800a7d2 <_fflush_r+0x1a>
 800a7ce:	f000 f887 	bl	800a8e0 <__sinit>
 800a7d2:	4b14      	ldr	r3, [pc, #80]	; (800a824 <_fflush_r+0x6c>)
 800a7d4:	429c      	cmp	r4, r3
 800a7d6:	d11b      	bne.n	800a810 <_fflush_r+0x58>
 800a7d8:	686c      	ldr	r4, [r5, #4]
 800a7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d0ef      	beq.n	800a7c2 <_fflush_r+0xa>
 800a7e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7e4:	07d0      	lsls	r0, r2, #31
 800a7e6:	d404      	bmi.n	800a7f2 <_fflush_r+0x3a>
 800a7e8:	0599      	lsls	r1, r3, #22
 800a7ea:	d402      	bmi.n	800a7f2 <_fflush_r+0x3a>
 800a7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ee:	f000 f915 	bl	800aa1c <__retarget_lock_acquire_recursive>
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	f7ff ff59 	bl	800a6ac <__sflush_r>
 800a7fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7fc:	07da      	lsls	r2, r3, #31
 800a7fe:	4605      	mov	r5, r0
 800a800:	d4e0      	bmi.n	800a7c4 <_fflush_r+0xc>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	059b      	lsls	r3, r3, #22
 800a806:	d4dd      	bmi.n	800a7c4 <_fflush_r+0xc>
 800a808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a80a:	f000 f908 	bl	800aa1e <__retarget_lock_release_recursive>
 800a80e:	e7d9      	b.n	800a7c4 <_fflush_r+0xc>
 800a810:	4b05      	ldr	r3, [pc, #20]	; (800a828 <_fflush_r+0x70>)
 800a812:	429c      	cmp	r4, r3
 800a814:	d101      	bne.n	800a81a <_fflush_r+0x62>
 800a816:	68ac      	ldr	r4, [r5, #8]
 800a818:	e7df      	b.n	800a7da <_fflush_r+0x22>
 800a81a:	4b04      	ldr	r3, [pc, #16]	; (800a82c <_fflush_r+0x74>)
 800a81c:	429c      	cmp	r4, r3
 800a81e:	bf08      	it	eq
 800a820:	68ec      	ldreq	r4, [r5, #12]
 800a822:	e7da      	b.n	800a7da <_fflush_r+0x22>
 800a824:	0800b0f4 	.word	0x0800b0f4
 800a828:	0800b114 	.word	0x0800b114
 800a82c:	0800b0d4 	.word	0x0800b0d4

0800a830 <std>:
 800a830:	2300      	movs	r3, #0
 800a832:	b510      	push	{r4, lr}
 800a834:	4604      	mov	r4, r0
 800a836:	e9c0 3300 	strd	r3, r3, [r0]
 800a83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a83e:	6083      	str	r3, [r0, #8]
 800a840:	8181      	strh	r1, [r0, #12]
 800a842:	6643      	str	r3, [r0, #100]	; 0x64
 800a844:	81c2      	strh	r2, [r0, #14]
 800a846:	6183      	str	r3, [r0, #24]
 800a848:	4619      	mov	r1, r3
 800a84a:	2208      	movs	r2, #8
 800a84c:	305c      	adds	r0, #92	; 0x5c
 800a84e:	f7fe ffb1 	bl	80097b4 <memset>
 800a852:	4b05      	ldr	r3, [pc, #20]	; (800a868 <std+0x38>)
 800a854:	6263      	str	r3, [r4, #36]	; 0x24
 800a856:	4b05      	ldr	r3, [pc, #20]	; (800a86c <std+0x3c>)
 800a858:	62a3      	str	r3, [r4, #40]	; 0x28
 800a85a:	4b05      	ldr	r3, [pc, #20]	; (800a870 <std+0x40>)
 800a85c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <std+0x44>)
 800a860:	6224      	str	r4, [r4, #32]
 800a862:	6323      	str	r3, [r4, #48]	; 0x30
 800a864:	bd10      	pop	{r4, pc}
 800a866:	bf00      	nop
 800a868:	0800ac21 	.word	0x0800ac21
 800a86c:	0800ac43 	.word	0x0800ac43
 800a870:	0800ac7b 	.word	0x0800ac7b
 800a874:	0800ac9f 	.word	0x0800ac9f

0800a878 <_cleanup_r>:
 800a878:	4901      	ldr	r1, [pc, #4]	; (800a880 <_cleanup_r+0x8>)
 800a87a:	f000 b8af 	b.w	800a9dc <_fwalk_reent>
 800a87e:	bf00      	nop
 800a880:	0800a7b9 	.word	0x0800a7b9

0800a884 <__sfmoreglue>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	2268      	movs	r2, #104	; 0x68
 800a888:	1e4d      	subs	r5, r1, #1
 800a88a:	4355      	muls	r5, r2
 800a88c:	460e      	mov	r6, r1
 800a88e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a892:	f7ff f975 	bl	8009b80 <_malloc_r>
 800a896:	4604      	mov	r4, r0
 800a898:	b140      	cbz	r0, 800a8ac <__sfmoreglue+0x28>
 800a89a:	2100      	movs	r1, #0
 800a89c:	e9c0 1600 	strd	r1, r6, [r0]
 800a8a0:	300c      	adds	r0, #12
 800a8a2:	60a0      	str	r0, [r4, #8]
 800a8a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8a8:	f7fe ff84 	bl	80097b4 <memset>
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}

0800a8b0 <__sfp_lock_acquire>:
 800a8b0:	4801      	ldr	r0, [pc, #4]	; (800a8b8 <__sfp_lock_acquire+0x8>)
 800a8b2:	f000 b8b3 	b.w	800aa1c <__retarget_lock_acquire_recursive>
 800a8b6:	bf00      	nop
 800a8b8:	20001f9d 	.word	0x20001f9d

0800a8bc <__sfp_lock_release>:
 800a8bc:	4801      	ldr	r0, [pc, #4]	; (800a8c4 <__sfp_lock_release+0x8>)
 800a8be:	f000 b8ae 	b.w	800aa1e <__retarget_lock_release_recursive>
 800a8c2:	bf00      	nop
 800a8c4:	20001f9d 	.word	0x20001f9d

0800a8c8 <__sinit_lock_acquire>:
 800a8c8:	4801      	ldr	r0, [pc, #4]	; (800a8d0 <__sinit_lock_acquire+0x8>)
 800a8ca:	f000 b8a7 	b.w	800aa1c <__retarget_lock_acquire_recursive>
 800a8ce:	bf00      	nop
 800a8d0:	20001f9e 	.word	0x20001f9e

0800a8d4 <__sinit_lock_release>:
 800a8d4:	4801      	ldr	r0, [pc, #4]	; (800a8dc <__sinit_lock_release+0x8>)
 800a8d6:	f000 b8a2 	b.w	800aa1e <__retarget_lock_release_recursive>
 800a8da:	bf00      	nop
 800a8dc:	20001f9e 	.word	0x20001f9e

0800a8e0 <__sinit>:
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	f7ff fff0 	bl	800a8c8 <__sinit_lock_acquire>
 800a8e8:	69a3      	ldr	r3, [r4, #24]
 800a8ea:	b11b      	cbz	r3, 800a8f4 <__sinit+0x14>
 800a8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8f0:	f7ff bff0 	b.w	800a8d4 <__sinit_lock_release>
 800a8f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8f8:	6523      	str	r3, [r4, #80]	; 0x50
 800a8fa:	4b13      	ldr	r3, [pc, #76]	; (800a948 <__sinit+0x68>)
 800a8fc:	4a13      	ldr	r2, [pc, #76]	; (800a94c <__sinit+0x6c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	62a2      	str	r2, [r4, #40]	; 0x28
 800a902:	42a3      	cmp	r3, r4
 800a904:	bf04      	itt	eq
 800a906:	2301      	moveq	r3, #1
 800a908:	61a3      	streq	r3, [r4, #24]
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 f820 	bl	800a950 <__sfp>
 800a910:	6060      	str	r0, [r4, #4]
 800a912:	4620      	mov	r0, r4
 800a914:	f000 f81c 	bl	800a950 <__sfp>
 800a918:	60a0      	str	r0, [r4, #8]
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 f818 	bl	800a950 <__sfp>
 800a920:	2200      	movs	r2, #0
 800a922:	60e0      	str	r0, [r4, #12]
 800a924:	2104      	movs	r1, #4
 800a926:	6860      	ldr	r0, [r4, #4]
 800a928:	f7ff ff82 	bl	800a830 <std>
 800a92c:	68a0      	ldr	r0, [r4, #8]
 800a92e:	2201      	movs	r2, #1
 800a930:	2109      	movs	r1, #9
 800a932:	f7ff ff7d 	bl	800a830 <std>
 800a936:	68e0      	ldr	r0, [r4, #12]
 800a938:	2202      	movs	r2, #2
 800a93a:	2112      	movs	r1, #18
 800a93c:	f7ff ff78 	bl	800a830 <std>
 800a940:	2301      	movs	r3, #1
 800a942:	61a3      	str	r3, [r4, #24]
 800a944:	e7d2      	b.n	800a8ec <__sinit+0xc>
 800a946:	bf00      	nop
 800a948:	0800aeec 	.word	0x0800aeec
 800a94c:	0800a879 	.word	0x0800a879

0800a950 <__sfp>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	4607      	mov	r7, r0
 800a954:	f7ff ffac 	bl	800a8b0 <__sfp_lock_acquire>
 800a958:	4b1e      	ldr	r3, [pc, #120]	; (800a9d4 <__sfp+0x84>)
 800a95a:	681e      	ldr	r6, [r3, #0]
 800a95c:	69b3      	ldr	r3, [r6, #24]
 800a95e:	b913      	cbnz	r3, 800a966 <__sfp+0x16>
 800a960:	4630      	mov	r0, r6
 800a962:	f7ff ffbd 	bl	800a8e0 <__sinit>
 800a966:	3648      	adds	r6, #72	; 0x48
 800a968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	d503      	bpl.n	800a978 <__sfp+0x28>
 800a970:	6833      	ldr	r3, [r6, #0]
 800a972:	b30b      	cbz	r3, 800a9b8 <__sfp+0x68>
 800a974:	6836      	ldr	r6, [r6, #0]
 800a976:	e7f7      	b.n	800a968 <__sfp+0x18>
 800a978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a97c:	b9d5      	cbnz	r5, 800a9b4 <__sfp+0x64>
 800a97e:	4b16      	ldr	r3, [pc, #88]	; (800a9d8 <__sfp+0x88>)
 800a980:	60e3      	str	r3, [r4, #12]
 800a982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a986:	6665      	str	r5, [r4, #100]	; 0x64
 800a988:	f000 f847 	bl	800aa1a <__retarget_lock_init_recursive>
 800a98c:	f7ff ff96 	bl	800a8bc <__sfp_lock_release>
 800a990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a998:	6025      	str	r5, [r4, #0]
 800a99a:	61a5      	str	r5, [r4, #24]
 800a99c:	2208      	movs	r2, #8
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9a4:	f7fe ff06 	bl	80097b4 <memset>
 800a9a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b4:	3468      	adds	r4, #104	; 0x68
 800a9b6:	e7d9      	b.n	800a96c <__sfp+0x1c>
 800a9b8:	2104      	movs	r1, #4
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	f7ff ff62 	bl	800a884 <__sfmoreglue>
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	6030      	str	r0, [r6, #0]
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1d5      	bne.n	800a974 <__sfp+0x24>
 800a9c8:	f7ff ff78 	bl	800a8bc <__sfp_lock_release>
 800a9cc:	230c      	movs	r3, #12
 800a9ce:	603b      	str	r3, [r7, #0]
 800a9d0:	e7ee      	b.n	800a9b0 <__sfp+0x60>
 800a9d2:	bf00      	nop
 800a9d4:	0800aeec 	.word	0x0800aeec
 800a9d8:	ffff0001 	.word	0xffff0001

0800a9dc <_fwalk_reent>:
 800a9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	4688      	mov	r8, r1
 800a9e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9e8:	2700      	movs	r7, #0
 800a9ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9ee:	f1b9 0901 	subs.w	r9, r9, #1
 800a9f2:	d505      	bpl.n	800aa00 <_fwalk_reent+0x24>
 800a9f4:	6824      	ldr	r4, [r4, #0]
 800a9f6:	2c00      	cmp	r4, #0
 800a9f8:	d1f7      	bne.n	800a9ea <_fwalk_reent+0xe>
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa00:	89ab      	ldrh	r3, [r5, #12]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d907      	bls.n	800aa16 <_fwalk_reent+0x3a>
 800aa06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	d003      	beq.n	800aa16 <_fwalk_reent+0x3a>
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4630      	mov	r0, r6
 800aa12:	47c0      	blx	r8
 800aa14:	4307      	orrs	r7, r0
 800aa16:	3568      	adds	r5, #104	; 0x68
 800aa18:	e7e9      	b.n	800a9ee <_fwalk_reent+0x12>

0800aa1a <__retarget_lock_init_recursive>:
 800aa1a:	4770      	bx	lr

0800aa1c <__retarget_lock_acquire_recursive>:
 800aa1c:	4770      	bx	lr

0800aa1e <__retarget_lock_release_recursive>:
 800aa1e:	4770      	bx	lr

0800aa20 <__swhatbuf_r>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	460e      	mov	r6, r1
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	b096      	sub	sp, #88	; 0x58
 800aa2c:	4614      	mov	r4, r2
 800aa2e:	461d      	mov	r5, r3
 800aa30:	da08      	bge.n	800aa44 <__swhatbuf_r+0x24>
 800aa32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	602a      	str	r2, [r5, #0]
 800aa3a:	061a      	lsls	r2, r3, #24
 800aa3c:	d410      	bmi.n	800aa60 <__swhatbuf_r+0x40>
 800aa3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa42:	e00e      	b.n	800aa62 <__swhatbuf_r+0x42>
 800aa44:	466a      	mov	r2, sp
 800aa46:	f000 f951 	bl	800acec <_fstat_r>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	dbf1      	blt.n	800aa32 <__swhatbuf_r+0x12>
 800aa4e:	9a01      	ldr	r2, [sp, #4]
 800aa50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa58:	425a      	negs	r2, r3
 800aa5a:	415a      	adcs	r2, r3
 800aa5c:	602a      	str	r2, [r5, #0]
 800aa5e:	e7ee      	b.n	800aa3e <__swhatbuf_r+0x1e>
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	2000      	movs	r0, #0
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	b016      	add	sp, #88	; 0x58
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa6c <__smakebuf_r>:
 800aa6c:	898b      	ldrh	r3, [r1, #12]
 800aa6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa70:	079d      	lsls	r5, r3, #30
 800aa72:	4606      	mov	r6, r0
 800aa74:	460c      	mov	r4, r1
 800aa76:	d507      	bpl.n	800aa88 <__smakebuf_r+0x1c>
 800aa78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	6123      	str	r3, [r4, #16]
 800aa80:	2301      	movs	r3, #1
 800aa82:	6163      	str	r3, [r4, #20]
 800aa84:	b002      	add	sp, #8
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	ab01      	add	r3, sp, #4
 800aa8a:	466a      	mov	r2, sp
 800aa8c:	f7ff ffc8 	bl	800aa20 <__swhatbuf_r>
 800aa90:	9900      	ldr	r1, [sp, #0]
 800aa92:	4605      	mov	r5, r0
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7ff f873 	bl	8009b80 <_malloc_r>
 800aa9a:	b948      	cbnz	r0, 800aab0 <__smakebuf_r+0x44>
 800aa9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa0:	059a      	lsls	r2, r3, #22
 800aaa2:	d4ef      	bmi.n	800aa84 <__smakebuf_r+0x18>
 800aaa4:	f023 0303 	bic.w	r3, r3, #3
 800aaa8:	f043 0302 	orr.w	r3, r3, #2
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	e7e3      	b.n	800aa78 <__smakebuf_r+0xc>
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <__smakebuf_r+0x7c>)
 800aab2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	6020      	str	r0, [r4, #0]
 800aab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	9b00      	ldr	r3, [sp, #0]
 800aac0:	6163      	str	r3, [r4, #20]
 800aac2:	9b01      	ldr	r3, [sp, #4]
 800aac4:	6120      	str	r0, [r4, #16]
 800aac6:	b15b      	cbz	r3, 800aae0 <__smakebuf_r+0x74>
 800aac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aacc:	4630      	mov	r0, r6
 800aace:	f000 f91f 	bl	800ad10 <_isatty_r>
 800aad2:	b128      	cbz	r0, 800aae0 <__smakebuf_r+0x74>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f023 0303 	bic.w	r3, r3, #3
 800aada:	f043 0301 	orr.w	r3, r3, #1
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	89a0      	ldrh	r0, [r4, #12]
 800aae2:	4305      	orrs	r5, r0
 800aae4:	81a5      	strh	r5, [r4, #12]
 800aae6:	e7cd      	b.n	800aa84 <__smakebuf_r+0x18>
 800aae8:	0800a879 	.word	0x0800a879

0800aaec <memmove>:
 800aaec:	4288      	cmp	r0, r1
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	eb01 0402 	add.w	r4, r1, r2
 800aaf4:	d902      	bls.n	800aafc <memmove+0x10>
 800aaf6:	4284      	cmp	r4, r0
 800aaf8:	4623      	mov	r3, r4
 800aafa:	d807      	bhi.n	800ab0c <memmove+0x20>
 800aafc:	1e43      	subs	r3, r0, #1
 800aafe:	42a1      	cmp	r1, r4
 800ab00:	d008      	beq.n	800ab14 <memmove+0x28>
 800ab02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab0a:	e7f8      	b.n	800aafe <memmove+0x12>
 800ab0c:	4402      	add	r2, r0
 800ab0e:	4601      	mov	r1, r0
 800ab10:	428a      	cmp	r2, r1
 800ab12:	d100      	bne.n	800ab16 <memmove+0x2a>
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab1e:	e7f7      	b.n	800ab10 <memmove+0x24>

0800ab20 <__malloc_lock>:
 800ab20:	4801      	ldr	r0, [pc, #4]	; (800ab28 <__malloc_lock+0x8>)
 800ab22:	f7ff bf7b 	b.w	800aa1c <__retarget_lock_acquire_recursive>
 800ab26:	bf00      	nop
 800ab28:	20001f9c 	.word	0x20001f9c

0800ab2c <__malloc_unlock>:
 800ab2c:	4801      	ldr	r0, [pc, #4]	; (800ab34 <__malloc_unlock+0x8>)
 800ab2e:	f7ff bf76 	b.w	800aa1e <__retarget_lock_release_recursive>
 800ab32:	bf00      	nop
 800ab34:	20001f9c 	.word	0x20001f9c

0800ab38 <_realloc_r>:
 800ab38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3c:	4680      	mov	r8, r0
 800ab3e:	4614      	mov	r4, r2
 800ab40:	460e      	mov	r6, r1
 800ab42:	b921      	cbnz	r1, 800ab4e <_realloc_r+0x16>
 800ab44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab48:	4611      	mov	r1, r2
 800ab4a:	f7ff b819 	b.w	8009b80 <_malloc_r>
 800ab4e:	b92a      	cbnz	r2, 800ab5c <_realloc_r+0x24>
 800ab50:	f7fe ffaa 	bl	8009aa8 <_free_r>
 800ab54:	4625      	mov	r5, r4
 800ab56:	4628      	mov	r0, r5
 800ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab5c:	f000 f8fa 	bl	800ad54 <_malloc_usable_size_r>
 800ab60:	4284      	cmp	r4, r0
 800ab62:	4607      	mov	r7, r0
 800ab64:	d802      	bhi.n	800ab6c <_realloc_r+0x34>
 800ab66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab6a:	d812      	bhi.n	800ab92 <_realloc_r+0x5a>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4640      	mov	r0, r8
 800ab70:	f7ff f806 	bl	8009b80 <_malloc_r>
 800ab74:	4605      	mov	r5, r0
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d0ed      	beq.n	800ab56 <_realloc_r+0x1e>
 800ab7a:	42bc      	cmp	r4, r7
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	4631      	mov	r1, r6
 800ab80:	bf28      	it	cs
 800ab82:	463a      	movcs	r2, r7
 800ab84:	f7fe fe08 	bl	8009798 <memcpy>
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	f7fe ff8c 	bl	8009aa8 <_free_r>
 800ab90:	e7e1      	b.n	800ab56 <_realloc_r+0x1e>
 800ab92:	4635      	mov	r5, r6
 800ab94:	e7df      	b.n	800ab56 <_realloc_r+0x1e>

0800ab96 <_raise_r>:
 800ab96:	291f      	cmp	r1, #31
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	460d      	mov	r5, r1
 800ab9e:	d904      	bls.n	800abaa <_raise_r+0x14>
 800aba0:	2316      	movs	r3, #22
 800aba2:	6003      	str	r3, [r0, #0]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abac:	b112      	cbz	r2, 800abb4 <_raise_r+0x1e>
 800abae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abb2:	b94b      	cbnz	r3, 800abc8 <_raise_r+0x32>
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 f831 	bl	800ac1c <_getpid_r>
 800abba:	462a      	mov	r2, r5
 800abbc:	4601      	mov	r1, r0
 800abbe:	4620      	mov	r0, r4
 800abc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abc4:	f000 b818 	b.w	800abf8 <_kill_r>
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d00a      	beq.n	800abe2 <_raise_r+0x4c>
 800abcc:	1c59      	adds	r1, r3, #1
 800abce:	d103      	bne.n	800abd8 <_raise_r+0x42>
 800abd0:	2316      	movs	r3, #22
 800abd2:	6003      	str	r3, [r0, #0]
 800abd4:	2001      	movs	r0, #1
 800abd6:	e7e7      	b.n	800aba8 <_raise_r+0x12>
 800abd8:	2400      	movs	r4, #0
 800abda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abde:	4628      	mov	r0, r5
 800abe0:	4798      	blx	r3
 800abe2:	2000      	movs	r0, #0
 800abe4:	e7e0      	b.n	800aba8 <_raise_r+0x12>
	...

0800abe8 <raise>:
 800abe8:	4b02      	ldr	r3, [pc, #8]	; (800abf4 <raise+0xc>)
 800abea:	4601      	mov	r1, r0
 800abec:	6818      	ldr	r0, [r3, #0]
 800abee:	f7ff bfd2 	b.w	800ab96 <_raise_r>
 800abf2:	bf00      	nop
 800abf4:	20000010 	.word	0x20000010

0800abf8 <_kill_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4d07      	ldr	r5, [pc, #28]	; (800ac18 <_kill_r+0x20>)
 800abfc:	2300      	movs	r3, #0
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	4611      	mov	r1, r2
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f7f6 fa0f 	bl	8001028 <_kill>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d102      	bne.n	800ac14 <_kill_r+0x1c>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	b103      	cbz	r3, 800ac14 <_kill_r+0x1c>
 800ac12:	6023      	str	r3, [r4, #0]
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
 800ac16:	bf00      	nop
 800ac18:	20001fa0 	.word	0x20001fa0

0800ac1c <_getpid_r>:
 800ac1c:	f7f6 b9fc 	b.w	8001018 <_getpid>

0800ac20 <__sread>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	460c      	mov	r4, r1
 800ac24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac28:	f000 f89c 	bl	800ad64 <_read_r>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	bfab      	itete	ge
 800ac30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac32:	89a3      	ldrhlt	r3, [r4, #12]
 800ac34:	181b      	addge	r3, r3, r0
 800ac36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac3a:	bfac      	ite	ge
 800ac3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac3e:	81a3      	strhlt	r3, [r4, #12]
 800ac40:	bd10      	pop	{r4, pc}

0800ac42 <__swrite>:
 800ac42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	461f      	mov	r7, r3
 800ac48:	898b      	ldrh	r3, [r1, #12]
 800ac4a:	05db      	lsls	r3, r3, #23
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	4616      	mov	r6, r2
 800ac52:	d505      	bpl.n	800ac60 <__swrite+0x1e>
 800ac54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac58:	2302      	movs	r3, #2
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f000 f868 	bl	800ad30 <_lseek_r>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	463b      	mov	r3, r7
 800ac70:	4628      	mov	r0, r5
 800ac72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	f000 b817 	b.w	800aca8 <_write_r>

0800ac7a <__sseek>:
 800ac7a:	b510      	push	{r4, lr}
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac82:	f000 f855 	bl	800ad30 <_lseek_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	bf15      	itete	ne
 800ac8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac96:	81a3      	strheq	r3, [r4, #12]
 800ac98:	bf18      	it	ne
 800ac9a:	81a3      	strhne	r3, [r4, #12]
 800ac9c:	bd10      	pop	{r4, pc}

0800ac9e <__sclose>:
 800ac9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca2:	f000 b813 	b.w	800accc <_close_r>
	...

0800aca8 <_write_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d07      	ldr	r5, [pc, #28]	; (800acc8 <_write_r+0x20>)
 800acac:	4604      	mov	r4, r0
 800acae:	4608      	mov	r0, r1
 800acb0:	4611      	mov	r1, r2
 800acb2:	2200      	movs	r2, #0
 800acb4:	602a      	str	r2, [r5, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	f7f6 f9ed 	bl	8001096 <_write>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_write_r+0x1e>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_write_r+0x1e>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20001fa0 	.word	0x20001fa0

0800accc <_close_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d06      	ldr	r5, [pc, #24]	; (800ace8 <_close_r+0x1c>)
 800acd0:	2300      	movs	r3, #0
 800acd2:	4604      	mov	r4, r0
 800acd4:	4608      	mov	r0, r1
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	f7f6 f9f9 	bl	80010ce <_close>
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	d102      	bne.n	800ace6 <_close_r+0x1a>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b103      	cbz	r3, 800ace6 <_close_r+0x1a>
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	20001fa0 	.word	0x20001fa0

0800acec <_fstat_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d07      	ldr	r5, [pc, #28]	; (800ad0c <_fstat_r+0x20>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	4611      	mov	r1, r2
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	f7f6 f9f4 	bl	80010e6 <_fstat>
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	d102      	bne.n	800ad08 <_fstat_r+0x1c>
 800ad02:	682b      	ldr	r3, [r5, #0]
 800ad04:	b103      	cbz	r3, 800ad08 <_fstat_r+0x1c>
 800ad06:	6023      	str	r3, [r4, #0]
 800ad08:	bd38      	pop	{r3, r4, r5, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20001fa0 	.word	0x20001fa0

0800ad10 <_isatty_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4d06      	ldr	r5, [pc, #24]	; (800ad2c <_isatty_r+0x1c>)
 800ad14:	2300      	movs	r3, #0
 800ad16:	4604      	mov	r4, r0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	f7f6 f9f3 	bl	8001106 <_isatty>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_isatty_r+0x1a>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_isatty_r+0x1a>
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	20001fa0 	.word	0x20001fa0

0800ad30 <_lseek_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d07      	ldr	r5, [pc, #28]	; (800ad50 <_lseek_r+0x20>)
 800ad34:	4604      	mov	r4, r0
 800ad36:	4608      	mov	r0, r1
 800ad38:	4611      	mov	r1, r2
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	602a      	str	r2, [r5, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f7f6 f9ec 	bl	800111c <_lseek>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d102      	bne.n	800ad4e <_lseek_r+0x1e>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	b103      	cbz	r3, 800ad4e <_lseek_r+0x1e>
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	20001fa0 	.word	0x20001fa0

0800ad54 <_malloc_usable_size_r>:
 800ad54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad58:	1f18      	subs	r0, r3, #4
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	bfbc      	itt	lt
 800ad5e:	580b      	ldrlt	r3, [r1, r0]
 800ad60:	18c0      	addlt	r0, r0, r3
 800ad62:	4770      	bx	lr

0800ad64 <_read_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d07      	ldr	r5, [pc, #28]	; (800ad84 <_read_r+0x20>)
 800ad68:	4604      	mov	r4, r0
 800ad6a:	4608      	mov	r0, r1
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	2200      	movs	r2, #0
 800ad70:	602a      	str	r2, [r5, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f7f6 f972 	bl	800105c <_read>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_read_r+0x1e>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_read_r+0x1e>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	20001fa0 	.word	0x20001fa0

0800ad88 <_init>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr

0800ad94 <_fini>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr
